{"question": "在一正方形花池的4周栽了44棵柳树，每两棵柳树之间的间隔是20米，这个正方形的周长=多少米？", "target": 880.0, "answer": 462.0, "score": 0, "generation": ["def solution():\n    # 柳树的总数为44棵\n    total_trees = 44\n    # 柳树之间的间隔为20米\n    gap_between_trees = 20\n    # 每两棵柳树之间有一个间隔，所以实际种植的柳树数为总数的一半\n    actual_trees = total_trees / 2\n    # 每棵柳树占据的距离为间隔加上柳树本身\n    distance_per_tree = gap_between_trees + 1\n    # 正方形花池的周长 = 每棵柳树占据的距离 * 实际种植的柳树数\n    perimeter = distance_per_tree * actual_trees\n    # 答案是正方形花池的周长\n    result = perimeter\n    # 返回答案\n    return result"]}
{"question": "张明有120元钱，买书用去80%，买文具的钱是买书的15%．买文具用去多少元？", "target": 14.4, "answer": 14.399999999999999, "score": 1, "generation": ["def solution():\n    # 张明有120元钱\n    total_money = 120\n    # 买书用去80%\n    book_percentage = 0.8\n    # 买文具的钱是买书的15%\n    stationery_percentage = 0.15\n    # 买书花掉的钱 = 总钱数 * 买书的比例\n    money_spent_on_books = total_money * book_percentage\n    # 买文具的钱 = 买书花掉的钱 * 买文具的比例\n    money_spent_on_stationery = money_spent_on_books * stationery_percentage\n    # 答案是买文具用去的钱\n    result = money_spent_on_stationery\n    # 返回答案\n    return result"]}
{"question": "一个工厂要生产3000个零件，前6天生产了750个，剩下的要在15天内完成，平均每天生产多少个？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 工厂要生产的零件总数为3000个\n    total_parts = 3000\n    # 前6天已经生产了750个零件\n    parts_produced_first_6_days = 750\n    # 剩下的天数为15天\n    remaining_days = 15\n    # 剩下的零件数量 = 总数 - 前6天已经生产的数量\n    remaining_parts = total_parts - parts_produced_first_6_days\n    # 平均每天需要生产的零件数量 = 剩下的数量 / 剩下的天数\n    average_daily_production = remaining_parts / remaining_days\n    # 答案是平均每天需要生产的零件数量\n    result = average_daily_production\n    # 返回答案\n    return result"]}
{"question": "一本字典定价9元，0.8出售后还赚20%，这本字典进价=多少元．", "target": 6.0, "answer": 7.2, "score": 0, "generation": ["def solution():\n    # 字典的定价为9元\n    selling_price = 9\n    # 出售后还赚20%，即赚的比例为20%\n    profit_percentage = 0.20\n    # 实际赚的金额 = 定价 * 赚的比例\n    actual_profit = selling_price * profit_percentage\n    # 进价 = 定价 - 实际赚的金额\n    cost_price = selling_price - actual_profit\n    # 答案是进价\n    result = cost_price\n    # 返回答案\n    return result"]}
{"question": "修一段长324米的路，前8小时共修了240米，剩下的每小时修21米，还要几小时才能修完？", "target": 4.0, "answer": 12.0, "score": 0, "generation": ["def solution():\n    # 路的总长度为324米\n    total_length = 324\n    # 前8小时共修了240米\n    fixed_length = 240\n    # 每小时修的长度为21米\n    hourly_rate = 21\n    # 剩余长度 = 总长度 - 前8小时修的长度\n    remaining_length = total_length - fixed_length\n    # 剩余时间 = 剩余长度 / 每小时修的长度\n    remaining_hours = remaining_length / hourly_rate\n    # 总共需要的时间 = 前8小时 + 剩余时间\n    total_hours = 8 + remaining_hours\n    # 答案是总共需要的时间\n    result = total_hours\n    # 返回答案\n    return result"]}
{"question": "一个圆的半径是3厘米，如果把它的半径延长2厘米，那么面积增加多少．", "target": 50.26548, "answer": 50.239999999999995, "score": 0, "generation": ["def solution():\n    # 一个圆的半径是3厘米\n    radius_original = 3\n    # 如果把半径延长2厘米\n    extended_radius = radius_original + 2\n    # 原始圆的面积\n    area_original = 3.14 * radius_original ** 2\n    # 延长后圆的面积\n    area_extended = 3.14 * extended_radius ** 2\n    # 面积增加量\n    increase_in_area = area_extended - area_original\n    # 答案是面积增加的量\n    result = increase_in_area\n    # 返回答案\n    return result"]}
{"question": "山上有苹果树200棵，桃树比苹果树多(1/5)，桃树有多少棵？", "target": 240.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 苹果树的数量为200棵\n    num_apple_trees = 200\n    # 桃树比苹果树多(1/5)\n    peach_to_apple_ratio = 1/5\n    # 桃树的数量 = 苹果树的数量 * 比例\n    num_peach_trees = num_apple_trees * peach_to_apple_ratio\n    # 答案是桃树的数量\n    result = num_peach_trees\n    # 返回答案\n    return result"]}
{"question": "除数是6，商是75，余数是1，被除数=．", "target": 451.0, "answer": 451.0, "score": 1, "generation": ["def solution():\n    # 除数\n    divisor = 6\n    # 商\n    quotient = 75\n    # 余数\n    remainder = 1\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一捆电线，第一次用去全长的(1/4)，第二天用去余下的(1/5)，这时还剩108米．这捆电线共长多少米？", "target": 180.0, "answer": 240.0, "score": 0, "generation": ["def solution():\n    # 假设电线总长为x米\n    # 第一次用去的长度为1/4 * x\n    # 剩余长度为3/4 * x\n    # 第二天用去的长度为1/5 * (3/4 * x) = 3/20 * x\n    # 剩余长度为3/4 * x - 3/20 * x = 9/20 * x\n    # 根据题意，剩余长度为108米，即 9/20 * x = 108\n    # 解方程得到 x = 240\n    total_length = 240\n    # 答案是电线的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "甲乙两辆汽车同时从同一地点向相反的方向行驶，4小时后两车相距300千米，已知甲车每小时行40千米，乙车每小时行多少千米？", "target": 35.0, "answer": 35.0, "score": 1, "generation": ["def solution():\n    # 4小时后两车相距300千米\n    distance_apart = 300\n    # 甲车每小时行40千米\n    speed_a = 40\n    # 甲车行驶4小时后的距离\n    distance_a = speed_a * 4\n    # 乙车与甲车相距的距离 = 总距离 - 甲车行驶的距离\n    distance_b = distance_apart - distance_a\n    # 乙车每小时行驶的距离 = 乙车与甲车相距的距离 / 行驶时间\n    speed_b = distance_b / 4\n    # 答案是乙车每小时行驶的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两根绳子分别长9米和6米，各剪去同样长的一段后，乙根的长是甲根的(3/5)，甲根剪去多少米．", "target": 1.5, "answer": "", "score": 0, "generation": ["def solution():\n    # 甲乙两根绳子的初始长度分别为9米和6米\n    length_a = 9\n    length_b = 6\n    # 剪去的长度为x\n    cut_length = x\n    # 剪去同样长度后，乙根的长度是甲根的(3/5)\n    remaining_length_ratio = 3/5\n    # 甲乙剪去同样长度后的长度分别为：甲根剩余长度 = 甲根初始长度 - x；乙根剩余长度 = 乙根初始长度 - x\n    remaining_length_a = length_a - cut_length\n    remaining_length_b = length_b - cut_length\n    # 根据题意，乙根的长度是甲根的(3/5)，即：乙根剩余长度 = 甲根剩余长度 * (3/5)\n    equation = remaining_length_b - remaining_length_a * remaining_length_ratio\n    # 解方程得到剪去的长度x\n    cut_length = (length_a * 5 - length_b * 5) / 2\n    # 答案是甲根剪去的长度\n    result = cut_length\n    # 返回答案\n    return result"]}
{"question": "鸡蛋有120个，鸭蛋比鸡蛋多(1/6)，请问两种蛋共有几个？", "target": 260.0, "answer": 140.0, "score": 0, "generation": ["def solution():\n    # 鸡蛋的数量是120个\n    num_eggs = 120\n    # 鸭蛋比鸡蛋多(1/6)\n    duck_egg_fraction = 1/6\n    # 鸭蛋的数量 = 鸡蛋的数量 * 鸭蛋比例\n    num_duck_eggs = num_eggs * duck_egg_fraction\n    # 两种蛋共有的数量 = 鸡蛋的数量 + 鸭蛋的数量\n    total_eggs = num_eggs + num_duck_eggs\n    # 答案是两种蛋共有的数量\n    result = total_eggs\n    # 返回答案\n    return result"]}
{"question": "计算：234+432-4*8+330/5=．", "target": 700.0, "answer": 700.0, "score": 1, "generation": ["def solution():\n    # 计算234+432-4*8+330/5的结果\n    result = 234 + 432 - 4 * 8 + 330 / 5\n    # 返回答案\n    return result"]}
{"question": "54除多少的商是6，余数是20．", "target": 344.0, "answer": 6.37037037037037, "score": 0, "generation": ["def solution():\n    # 商是6，余数是20，即被除数 = 商 * 除数 + 余数\n    quotient = 6\n    remainder = 20\n    # 被除数 = 商 * 除数 + 余数\n    dividend = quotient * 54 + remainder\n    # 被除数除以除数即为答案\n    result = dividend / 54\n    # 返回答案\n    return result"]}
{"question": "图书馆里有一些科技书和文艺书，其中科技书占(4/5)，如果用文艺书换走科技书20本，那么科技书占全部的(8/15)，问原来科技书有多少本？", "target": 60.0, "answer": 200.0, "score": 0, "generation": ["def solution():\n    # 科技书占比为4/5\n    tech_books_ratio = 4/5\n    # 用文艺书换走的科技书数量为20本\n    exchanged_tech_books = 20\n    # 科技书换走后的比例为8/15\n    new_tech_books_ratio = 8/15\n    # 设科技书原数量为x\n    # 则文艺书原数量为y\n    # 根据题意可列出方程组：\n    # x / (x + y) = 4/5\n    # (x - 20) / (x + y - 20) = 8/15\n    # 解方程得到 x = 200\n    original_tech_books = 200\n    # 答案是原来科技书的数量\n    result = original_tech_books\n    # 返回答案\n    return result"]}
{"question": "甲队调(1/6)的人给乙队，两队的人数就相等．原来乙队是甲队人数的多少．", "target": 0.6666666666666666, "answer": 5.0, "score": 0, "generation": ["def solution():\n    # 甲队调走的人数比例为(1/6)\n    fraction_transferred = 1/6\n    # 假设甲队有x人，则乙队有x人\n    # 调走的人数为甲队总人数的(1/6)，即 x * (1/6)\n    # 调走后甲队剩余人数为 x - x * (1/6) = 5x/6\n    # 调入乙队后，乙队人数为 x + x * (1/6) = 7x/6\n    # 由题意可得 7x/6 = 5x/6，解得 x = 5\n    # 原来乙队是甲队人数的5倍\n    result = 5\n    # 返回答案\n    return result"]}
{"question": "一项工程，12个工人25天完成．如果要20天完成，需要多少个工人？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 12个工人完成工程需要25天\n    workers_initial = 12\n    days_initial = 25\n    # 如果要20天完成，设需要x个工人\n    days_target = 20\n    # 根据人数和天数的乘积不变原理，12 * 25 = x * 20\n    workers_target = (workers_initial * days_initial) / days_target\n    # 需要的工人数量取整\n    workers_target = int(workers_target)\n    # 答案是需要的工人数量\n    result = workers_target\n    # 返回答案\n    return result"]}
{"question": "教室的长是8米，宽是6米，高是3.5米，现在要粉刷教室4周的墙壁，扣除门窗的面积16平方米，要粉刷的面积=多少平方米？如果每2平方米用涂料1千克，粉刷这个教室共需涂料多少千克？", "target": [82.0, 41.0], "answer": "", "score": 0, "generation": ["def solution():\n    # 教室的长是8米\n    length = 8\n    # 教室的宽是6米\n    width = 6\n    # 教室的高是3.5米\n    height = 3.5\n    # 教室四周的墙壁面积 = 2 * (长 * 高 + 宽 * 高)\n    total_wall_area = 2 * (length * height + width * height)\n    # 扣除门窗的面积为16平方米\n    area_subtracted = 16\n    # 实际需要粉刷的面积 = 总面积 - 扣除面积\n    actual_area = total_wall_area - area_subtracted\n    # 每2平方米需要1千克涂料，所以总共需要的涂料千克数 = 实际需要粉刷的面积 / 2\n    total_paint_required = actual_area / 2\n    # 答案是总共需要的涂料千克数\n    result = total_paint_required\n    # 返回答案\n    return result"]}
{"question": "王华和张强两人骑自行车同时从两地相对出发，王华骑到全程的(5/8)与张强相遇，张强继续以每小时12千米的速度向前骑，用2.5小时骑完余下的路程，求王华的速度．", "target": 20.0, "answer": 12.0, "score": 0, "generation": ["def solution():\n    # 王华骑到全程的(5/8)与张强相遇\n    distance_ratio_wang = 5/8\n    # 张强继续以每小时12千米的速度向前骑，用2.5小时骑完余下的路程\n    speed_zhang = 12\n    time_zhang = 2.5\n    # 因为王华骑到全程的(5/8)与张强相遇，所以剩余路程比例为3/8\n    distance_ratio_remaining = 3/8\n    # 张强骑完剩余路程所需时间\n    time_remaining = distance_ratio_remaining * time_zhang\n    # 张强骑完剩余路程的距离\n    distance_remaining = speed_zhang * time_remaining\n    # 王华骑完全程的距离\n    distance_wang = distance_remaining / distance_ratio_wang\n    # 王华骑完全程所需时间\n    time_wang = distance_wang / speed_zhang\n    # 王华的速度为全程距离除以王华骑全程所需时间\n    speed_wang = distance_wang / time_wang\n    # 答案是王华的速度\n    result = speed_wang\n    # 返回答案\n    return result"]}
{"question": "饲养场养了257只公鸡，268只母鸡，平均每只卖35元，一共卖多少元钱？", "target": 18375.0, "answer": 18375.0, "score": 1, "generation": ["def solution():\n    # 公鸡的数量为257只\n    num_roosters = 257\n    # 母鸡的数量为268只\n    num_hens = 268\n    # 每只的售价为35元\n    price_per_bird = 35\n    # 总售价 = (公鸡数量 + 母鸡数量) * 每只的售价\n    total_price = (num_roosters + num_hens) * price_per_bird\n    # 答案是总售价\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "某工程队4天完成一项工程的(2/7)，照这样计算，完成这项工程一共需要多少天？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 完成工程的比例为2/7\n    completion_ratio = 2/7\n    # 完成工程所需天数为4天\n    days = 4\n    # 每天完成工程的比例\n    daily_completion_ratio = completion_ratio / days\n    # 完成工程所需总天数 = 1 / daily_completion_ratio\n    total_days = 1 / daily_completion_ratio\n    # 答案是完成工程所需总天数\n    result = total_days\n    # 返回答案\n    return result"]}
{"question": "春季植树．五年级植树12棵，六年级植树16棵，全校植树的棵数是5、六年级植树棵数的3倍，全校共植树多少棵？", "target": 84.0, "answer": 76.0, "score": 0, "generation": ["def solution():\n    # 五年级植树12棵\n    trees_fifth_grade = 12\n    # 六年级植树16棵\n    trees_sixth_grade = 16\n    # 全校植树的棵数是六年级植树棵数的3倍\n    total_trees = trees_sixth_grade * 3\n    # 全校共植树的棵数 = 五年级植树棵数 + 六年级植树棵数 + 全校植树的棵数\n    total_trees_planted = trees_fifth_grade + trees_sixth_grade + total_trees\n    # 答案是全校共植树的棵数\n    result = total_trees_planted\n    # 返回答案\n    return result"]}
{"question": "小明8分钟行走了35米，那么小明平均每分钟行走了多少．", "target": 4.375, "answer": 4.375, "score": 1, "generation": ["def solution():\n    # 小明8分钟行走了35米\n    distance = 35\n    time = 8\n    # 平均每分钟行走的距离 = 总距离 / 总时间\n    average_distance_per_minute = distance / time\n    # 答案是小明平均每分钟行走的距离\n    result = average_distance_per_minute\n    # 返回答案\n    return result"]}
{"question": "文具盒22元一个，买3个文具盒，一共需要多少元．", "target": 66.0, "answer": 66.0, "score": 1, "generation": ["def solution():\n    # 每个文具盒的价格为22元\n    price_per_pencil_case = 22\n    # 要购买的文具盒数量为3个\n    num_pencil_cases = 3\n    # 总共需要支付的金额 = 单个文具盒的价格 * 要购买的数量\n    total_cost = price_per_pencil_case * num_pencil_cases\n    # 答案是总共需要支付的金额\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "服装店购进一批衬衫，其中男式衬衫150件，女式衬衫比男式衬衫的(2/5)多20件．购进女式衬衫多少件？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 男式衬衫的数量为150件\n    num_male_shirts = 150\n    # 女式衬衫比男式衬衫的(2/5)多20件\n    additional_female_shirts = (2/5) * num_male_shirts + 20\n    # 答案是购进女式衬衫的数量\n    result = additional_female_shirts\n    # 返回答案\n    return result"]}
{"question": "为了庆祝国庆节，在润扬大桥的栏杆上插彩旗，从头到尾共插500面，每两面彩旗中间放一盆花，一共需要多少盆花．", "target": 499.0, "answer": "", "score": 0, "generation": ["为了解决这个问题，我们可以按照以下步骤进行推理：\n\n1. 每两面彩旗中间放一盆花，那么花的数量将比彩旗的数量少一半。\n2. 因此，花的数量 = 彩旗的数量 / 2。\n\n现在让我们用Python编写解决这个问题的代码：\n\n```python\ndef solution():\n    # 共插的彩旗数量为500面\n    total_flags = 500\n    # 每两面彩旗中间放一盆花，花的数量为彩旗数量的一半\n    total_flowers = total_flags / 2\n    # 答案是需要的花的数量\n    result = total_flowers\n    # 返回答案\n    return result\n```"]}
{"question": "果园里苹果树棵数的(2/5)相当于梨树棵数的(3/7)，梨树56棵，苹果树有多少棵？", "target": 60.0, "answer": 52.26666666666667, "score": 0, "generation": ["def solution():\n    # 梨树的棵数为56棵\n    num_pear_trees = 56\n    # 梨树棵数的比例为3/7\n    pear_ratio = 3/7\n    # 苹果树棵数的比例为2/5\n    apple_ratio = 2/5\n    # 苹果树的棵数 = 梨树的棵数 * (苹果树棵数的比例 / 梨树棵数的比例)\n    num_apple_trees = num_pear_trees * (apple_ratio / pear_ratio)\n    # 答案是苹果树的棵数\n    result = num_apple_trees\n    # 返回答案\n    return result"]}
{"question": "食堂大米比面粉多(5/6)，正好多300千克，食堂面粉有多少千克？", "target": 360.0, "answer": 1800.0, "score": 0, "generation": ["def solution():\n    # 大米比面粉多(5/6)\n    rice_to_flour_ratio = 5/6\n    # 差额为300千克\n    difference = 300\n    # 设食堂面粉为x千克，则大米为x*(5/6)千克\n    # 大米 - 面粉 = 300\n    # x*(5/6) - x = 300\n    # x/6 = 300\n    # x = 6 * 300\n    flour_weight = 6 * difference\n    # 答案是食堂面粉的重量\n    result = flour_weight\n    # 返回答案\n    return result"]}
{"question": "小红到书店想买一本7.8元的童话书，可是差0.7元，她只好买了5.1元的笔记本一本，剩下的钱正好买了一枝钢笔，这枝钢笔多少钱？", "target": 2.0, "answer": 0.7, "score": 0, "generation": ["def solution():\n    # 童话书的价格为7.8元\n    price_fairy_tale_book = 7.8\n    # 笔记本的价格为5.1元\n    price_notebook = 5.1\n    # 差额为0.7元\n    price_difference = 0.7\n    # 小红剩下的钱可以买一支钢笔\n    price_pen = price_difference\n    # 答案是钢笔的价格\n    result = price_pen\n    # 返回答案\n    return result"]}
{"question": "爸爸开车从家去动物园，去时平均每时行37.5千米，0.4时到达．回来时，为了赶时间，只用了0.3时．爸爸回来时平均每时行多少千米？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["```python\ndef solution():\n    # 去时行驶的时间为0.4小时\n    time_to_zoo = 0.4\n    # 回来时行驶的时间为0.3小时\n    time_back_home = 0.3\n    # 去时平均每小时行驶37.5千米\n    speed_to_zoo = 37.5\n    # 去动物园的距离 = 去时速度 * 去时时间\n    distance_to_zoo = speed_to_zoo * time_to_zoo\n    # 回来时的速度 = 去动物园的距离 / 回来时时间\n    speed_back_home = distance_to_zoo / time_back_home\n    # 答案是回来时平均每小时行驶的千米数\n    result = speed_back_home\n    # 返回答案\n    return result\n```"]}
{"question": "在一个比例中，两个内项的积是10，其中一个外项是(5/2)，另一个外项=．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 两个内项的积是10\n    product_of_inner_terms = 10\n    # 其中一个外项是(5/2)\n    one_outer_term = 5/2\n    # 两个内项的比例关系为 a:b\n    # 两个内项的积等于内项的平方，即 a * b = 10\n    # 另一个外项为 x，则另一个内项为 10/x\n    # 根据比例关系，(5/2) / (10/x) = a / b\n    # 解方程得到 x = 4\n    another_outer_term = 4\n    # 答案是另一个外项的值\n    result = another_outer_term\n    # 返回答案\n    return result"]}
{"question": "某机关原有工作人员120人，现有90人．精简了百分之几？", "target": 25.0, "answer": "", "score": 0, "generation": ["首先计算精简的人数：原有工作人员120人减去现有工作人员90人，得到精简的人数为30人。\n\n然后计算精简的百分比：精简的人数30人除以原有工作人员120人，再乘以100%得到精简的百分比为25%。\n\n接下来是Python代码实现：\n\n```python\ndef solution():\n    # 原有工作人员人数为120人\n    original_staff = 120\n    # 现有工作人员人数为90人\n    current_staff = 90\n    # 计算精简的人数\n    reduced_staff = original_staff - current_staff\n    # 计算精简的百分比\n    reduction_percentage = (reduced_staff / original_staff) * 100\n    # 答案是精简的百分比\n    result = reduction_percentage\n    # 返回答案\n    return result\n```"]}
{"question": "一桶油，分两次倒完．第一次倒出全部的(1/4)，第二次比第一次多倒出75千克，求第一次倒出多少千克？", "target": 37.5, "answer": -36.5, "score": 0, "generation": ["def solution():\n    # 一桶油需要倒出的总重量\n    total_weight = 2\n    # 第一次倒出的比例为1/4\n    first_pour_fraction = 1/4\n    # 第二次比第一次多倒出的重量为75千克\n    extra_weight_second_pour = 75\n    # 设第一次倒出的重量为x，则第二次倒出的重量为x + 75\n    # 根据题意，x + (x + 75) = 2，解方程得到第一次倒出的重量x\n    first_pour_weight = (total_weight - extra_weight_second_pour) / 2\n    # 答案是第一次倒出的重量\n    result = first_pour_weight\n    # 返回答案\n    return result"]}
{"question": "光大花卉市场举办花展，展出玫瑰780盆，展出的兰花是玫瑰的(2/5)，展出兰花多少盆？", "target": 312.0, "answer": 312.0, "score": 1, "generation": ["def solution():\n    # 玫瑰的盆数为780盆\n    num_roses = 780\n    # 兰花是玫瑰的(2/5)\n    fraction_orchids = 2/5\n    # 展出的兰花盆数 = 玫瑰的盆数 * 兰花是玫瑰的比例\n    num_orchids = num_roses * fraction_orchids\n    # 答案是展出的兰花盆数\n    result = num_orchids\n    # 返回答案\n    return result"]}
{"question": "六年级一班有50人，数学测验有38人得优秀，成绩优秀的学生占全班总人数的百分之几？", "target": 76.0, "answer": 76.0, "score": 1, "generation": ["def solution():\n    # 六年级一班总共有50人\n    total_students = 50\n    # 数学测验有38人得优秀\n    excellent_students = 38\n    # 优秀学生占全班总人数的百分比 = (优秀学生人数 / 总人数) * 100%\n    percentage_excellent = (excellent_students / total_students) * 100\n    # 答案是成绩优秀的学生占全班总人数的百分比\n    result = percentage_excellent\n    # 返回答案\n    return result"]}
{"question": "甲乙两个修路队合修完一条公路，甲队修的公路长增加到2倍多30米，才和乙对修的一样多，甲队修了250米．这条公路长多少米？", "target": 780.0, "answer": 345.0, "score": 0, "generation": ["def solution():\n    # 甲队修的公路长度为250米\n    length_team_a = 250\n    # 甲队修的公路长度增加到2倍多30米和乙队修的一样多\n    length_team_b = length_team_a / 2 - 30\n    # 公路总长度 = 甲队修的长度 + 乙队修的长度\n    total_length = length_team_a + length_team_b\n    # 答案是公路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "小刚和小强在400米的环形跑道上，从同一地点相背出发．小刚每秒跑4.5米，小强每秒跑5.5米，出发后多少秒两人第一次相遇？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 环形跑道的周长为400米\n    circumference = 400\n    # 小刚的速度为每秒4.5米\n    speed_gang = 4.5\n    # 小强的速度为每秒5.5米\n    speed_qiang = 5.5\n    # 两人相向而行，他们的相对速度为两人速度之和\n    relative_speed = speed_gang + speed_qiang\n    # 第一次相遇所需时间 = 环形跑道周长 / 相对速度\n    time_to_meet = circumference / relative_speed\n    # 答案是第一次相遇所需时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "一根钢材长18.4米，锯下3.8米后，剩下的比锯下的长几米？", "target": 10.8, "answer": 10.799999999999997, "score": 1, "generation": ["def solution():\n    # 钢材的总长度为18.4米\n    total_length = 18.4\n    # 锯下的长度为3.8米\n    cut_length = 3.8\n    # 剩下的长度 = 总长度 - 锯下的长度\n    remaining_length = total_length - cut_length\n    # 剩下的长度与锯下的长度的差值\n    difference = remaining_length - cut_length\n    # 答案是剩下的长度与锯下的长度的差值\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "在一个停车场上，汽车、摩托车共停了48辆，其中每辆汽车有4个轮子，每辆摩托车有3个轮子，这些车共172个轮子，停车场上有摩托车多少辆．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 共有汽车和摩托车48辆\n    total_vehicles = 48\n    # 汽车每辆有4个轮子\n    wheels_per_car = 4\n    # 摩托车每辆有3个轮子\n    wheels_per_motorcycle = 3\n    # 总共172个轮子\n    total_wheels = 172\n    # 设摩托车为x辆，则汽车为总辆数减去摩托车辆数\n    num_motorcycles = (total_wheels - total_vehicles * wheels_per_car) / (wheels_per_motorcycle - wheels_per_car)\n    # 答案是摩托车的辆数\n    result = num_motorcycles\n    # 返回答案\n    return result"]}
{"question": "比12与40的积少60的数=．", "target": 420.0, "answer": 420.0, "score": 1, "generation": ["def solution():\n    # 求解满足条件的数x，即12 * 40 - x = 60\n    x = 12 * 40 - 60\n    # 答案是满足条件的数x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "王老师要买一个足球和4根跳绳共用50元，每个足球38元，每根跳绳多少元？", "target": 3.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 一个足球的价格为38元\n    price_soccer_ball = 38\n    # 总共用50元买一个足球和4根跳绳\n    total_cost = 50\n    # 跳绳的数量为4根\n    num_jump_ropes = 4\n    # 一个足球和4根跳绳的总价格 = 一个足球的价格 + 跳绳的价格\n    total_price = price_soccer_ball + num_jump_ropes * price_jump_rope\n    # 每根跳绳的价格 = (一个足球和4根跳绳的总价格 - 一个足球的价格) / 跳绳的数量\n    price_jump_rope = (total_price - price_soccer_ball) / num_jump_ropes\n    # 答案是每根跳绳的价格\n    result = price_jump_rope\n    # 返回答案\n    return result"]}
{"question": "一个圆形水池周围每隔2米栽一棵杨树，共栽了40棵，水池的周长=多少米．", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 每隔2米栽一棵树，共栽了40棵\n    num_trees = 40\n    # 每棵树之间的间距为2米，所以每棵树占据的长度为2米\n    length_per_tree = 2\n    # 总长度 = 树的数量 * 每棵树占据的长度\n    total_length = num_trees * length_per_tree\n    # 水池的周长 = 树的总长度\n    perimeter = total_length\n    # 答案是水池的周长\n    result = perimeter\n    # 返回答案\n    return result"]}
{"question": "(3/7)再添上多少个(1/7)是1．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 分数(3/7)再添上多少个(1/7)等于1\n    fraction_1 = 3/7\n    fraction_2 = 1/7\n    # 计算需要再添上多少个(1/7)\n    additional_fraction = (1 - fraction_1) / fraction_2\n    # 答案是再添上多少个(1/7)才能等于1\n    result = additional_fraction\n    # 返回答案\n    return result"]}
{"question": "喜洋洋和灰太狼在体育场进行20000米赛跑，灰太狼的速度是喜洋洋速度的6倍．当它们从起点一起出发后，喜洋洋不停地跑，灰太狼跑到某一处开始睡觉，当灰太狼醒来后，喜洋洋已经领先灰太狼10000米，灰太狼奋起直追，当喜洋洋到达终点时，灰太狼仍落后200米，那么灰太狼睡觉期间，喜洋洋跑了多少米．", "target": 16700.0, "answer": "", "score": 0, "generation": ["# 1. 计算灰太狼的速度是喜洋洋速度的多少倍\n# 2. 计算灰太狼睡觉前喜洋洋已经领先的距离\n# 3. 计算灰太狼醒来时喜洋洋领先的距离\n# 4. 计算灰太狼追赶的距离\n# 5. 计算灰太狼睡觉期间喜洋洋跑的距禿\n\ndef solution():\n    # 体育场赛跑的总距离为20000米\n    total_distance = 20000\n    # 灰太狼的速度是喜洋洋速度的6倍\n    wolf_speed_ratio = 6\n    # 喜洋洋领先灰太狼的距离为10000米\n    lead_distance = 10000\n    # 喜洋洋到达终点时，灰太狼仍落后200米\n    lag_distance = 200\n\n    # 计算灰太狼的速度\n    wolf_speed = 1 / (wolf_speed_ratio + 1)\n    # 计算喜洋洋的速度\n    sheep_speed = wolf_speed * wolf_speed_ratio\n\n    # 计算灰太狼睡觉前喜洋洋已经领先的距离\n    lead_before_sleep = sheep_speed * lead_distance / (sheep_speed - wolf_speed)\n    # 计算灰太狼醒来时喜洋洋领先的距离\n    lead_after_wake = sheep_speed * (total_distance - lead_distance) / (sheep_speed + wolf_speed)\n    # 计算灰太狼追赶的距禿\n    chase_distance = total_distance - lead_after_wake\n    # 计算灰太"]}
{"question": "某厂去年第一季度各月分别完成本季度计划的(2/5)、(1/3)、(3/8)，超额完成第一季度计划的几分之几？", "target": 0.10833333333333334, "answer": 0.10833333333333339, "score": 1, "generation": ["def solution():\n    # 第一季度各月完成计划的比例\n    completion_rates = [2/5, 1/3, 3/8]\n    # 计算第一季度总完成比例\n    total_completion_rate = sum(completion_rates)\n    # 计算超额完成比例\n    excess_completion_rate = total_completion_rate - 1\n    # 计算超额完成第一季度计划的比例\n    ratio_of_excess_completion = excess_completion_rate / 1\n    # 答案是超额完成第一季度计划的几分之几\n    result = ratio_of_excess_completion\n    # 返回答案\n    return result"]}
{"question": "一个除法算式，除数是2.5，商是5，被除数=．", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 除数\n    divisor = 2.5\n    # 商\n    quotient = 5\n    # 被除数 = 除数 * 商\n    dividend = divisor * quotient\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开往乙地，行了全程(3/8)时，正好是108千米，如果这辆汽车行了全程的(2/3)，这时，这辆汽车行了多少千米？", "target": 192.0, "answer": 72.0, "score": 0, "generation": ["def solution():\n    # 全程的(3/8)时是108千米\n    distance_for_3_8 = 108\n    # 全程的(2/3)时的距离\n    distance_for_2_3 = (2/3) * distance_for_3_8\n    # 答案是这辆汽车行了的距禿\n    result = distance_for_2_3\n    # 返回答案\n    return result"]}
{"question": "甲数的(4/5)与乙数的(3/4)相等，乙数是24，甲数=．", "target": 22.5, "answer": 22.5, "score": 1, "generation": ["def solution():\n    # 乙数是24\n    num_b = 24\n    # 乙数的比例是3/4\n    ratio_b = 3/4\n    # 甲数的比例是4/5\n    ratio_a = 4/5\n    # 由题意可得到方程：甲数 * 4/5 = 乙数 * 3/4\n    # 解方程得到甲数\n    num_a = (num_b * ratio_b) / ratio_a\n    # 答案是甲数\n    result = num_a\n    # 返回答案\n    return result"]}
{"question": "一列火车每小时行95千米，小明家和省城相距285千米，小明坐火车到省城需要几小时？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 火车的速度是每小时行95千米\n    speed_train = 95\n    # 小明家和省城相距285千米\n    distance = 285\n    # 小明坐火车到省城需要的时间 = 距离 / 速度\n    time_to_city = distance / speed_train\n    # 答案是小明坐火车到省城需要的时间\n    result = time_to_city\n    # 返回答案\n    return result"]}
{"question": "800板巧克力，每2板包一包，每8包装一盒．一共可以装多少盒？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 巧克力板的总数为800板\n    total_chocolate_bars = 800\n    # 每2板包一包\n    bars_per_pack = 2\n    # 每8包装一盒\n    packs_per_box = 8\n    # 一共可以装的盒数 = 巧克力板总数 / (每2板包一包 * 每8包装一盒)\n    total_boxes = total_chocolate_bars / (bars_per_pack * packs_per_box)\n    # 答案是一共可以装的盒数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "王叔叔存入银行6000元，年利率是3.24%，存期2年．到期后可以取回多少钱？", "target": 6388.8, "answer": 6388.8, "score": 1, "generation": ["def solution():\n    # 存入银行的金额为6000元\n    initial_amount = 6000\n    # 年利率是3.24%\n    annual_interest_rate = 3.24 / 100\n    # 存期为2年\n    years = 2\n    # 到期后可以取回的金额 = 初始金额 * (1 + 年利率 * 存期)\n    final_amount = initial_amount * (1 + annual_interest_rate * years)\n    # 答案是到期后可以取回的金额\n    result = final_amount\n    # 返回答案\n    return result"]}
{"question": "小涛家买了一套房子准备装修，原计划花12万元装修，实际装修后用去了10.8万元．小涛家实际用去的装修费比原计划节约百分之几？", "target": 10.0, "answer": 9.999999999999993, "score": 1, "generation": ["def solution():\n    # 原计划装修费用为12万元\n    planned_cost = 12\n    # 实际装修费用为10.8万元\n    actual_cost = 10.8\n    # 节约的费用 = 原计划费用 - 实际费用\n    saved_cost = planned_cost - actual_cost\n    # 节约的百分比 = 节约的费用 / 原计划费用 * 100%\n    saved_percentage = (saved_cost / planned_cost) * 100\n    # 答案是节约的百分比\n    result = saved_percentage\n    # 返回答案\n    return result"]}
{"question": "甲乙两个小镇的公路长75千米．小王驾驶一辆汽车行驶30千米共用去2升汽油．照这样计算，这辆汽车行完全程还需要多少升汽油？", "target": 3.0, "answer": 5.0, "score": 0, "generation": ["def solution():\n    # 甲乙两个小镇的公路长75千米\n    total_distance = 75\n    # 小王驾驶汽车行驶30千米共用去2升汽油\n    distance_traveled = 30\n    gas_used = 2\n    # 汽车每行驶1千米消耗的汽油量 = 已知消耗的汽油量 / 已知行驶的距离\n    gas_per_km = gas_used / distance_traveled\n    # 行完全程需要的汽油量 = 汽车每行驶1千米消耗的汽油量 * 全程距离\n    total_gas_needed = gas_per_km * total_distance\n    # 答案是行完全程需要的汽油量\n    result = total_gas_needed\n    # 返回答案\n    return result"]}
{"question": "某工程队3天修完一条公路的(1/6)，修完这条路需多少天．", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 修完一条公路的(1/6)需要3天\n    days_for_one_sixth = 3\n    # 修完整条路需要的总天数 = 修完一条公路的天数 * 6\n    total_days = days_for_one_sixth * 6\n    # 答案是修完这条路需要的总天数\n    result = total_days\n    # 返回答案\n    return result"]}
{"question": "某山庄今年稻谷收66吨，比去年增产10%，去年这山庄收稻谷多少吨？", "target": 60.0, "answer": 59.99999999999999, "score": 1, "generation": ["def solution():\n    # 今年的稻谷产量为66吨\n    this_year_yield = 66\n    # 增产了10%\n    increase_percentage = 0.10\n    # 去年的稻谷产量 = 今年产量 / (1 + 增长百分比)\n    last_year_yield = this_year_yield / (1 + increase_percentage)\n    # 答案是去年的稻谷产量\n    result = last_year_yield\n    # 返回答案\n    return result"]}
{"question": "一根水泥桩露出水面2m，在水中的占全长的(2/5)，水中的比泥中的多1m，这根桩全长多少米？", "target": 5.0, "answer": 1.25, "score": 0, "generation": ["def solution():\n    # 水泥桩露出水面的长度为2m\n    exposed_length = 2\n    # 水中的比例为2/5\n    submerged_ratio = 2/5\n    # 水中的长度比泥中的多1m\n    extra_length = 1\n    # 设水中长度为x，则全长为5x\n    # 根据题意，水中的长度 + 水面上的长度 = 全长\n    # x + exposed_length = 5x\n    # 解方程得到x = 0.5m\n    submerged_length = 0.5\n    # 全长 = 水中长度 + 水面上长度\n    total_length = submerged_length / submerged_ratio\n    # 答案是这根桩的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "东华小学要买50套课桌椅，每张桌子75元，每把椅子25元．一共付多少元？", "target": 5000.0, "answer": 5000.0, "score": 1, "generation": ["def solution():\n    # 要买的课桌椅套数为50套\n    num_sets = 50\n    # 每张桌子的价格为75元\n    price_desk = 75\n    # 每把椅子的价格为25元\n    price_chair = 25\n    # 总共需要付的金额 = 套数 * (桌子价格 + 椅子价格)\n    total_cost = num_sets * (price_desk + price_chair)\n    # 答案是总共需要付的金额\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "甲数是3，乙数是0.25，甲数与乙数的比值=．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 甲数是3\n    num_a = 3\n    # 乙数是0.25\n    num_b = 0.25\n    # 甲数与乙数的比值 = 甲数 / 乙数\n    ratio = num_a / num_b\n    # 答案是甲数与乙数的比值\n    result = ratio\n    # 返回答案\n    return result"]}
{"question": "5箱蜜蜂一年可以酿375千克蜂蜜．小林家养了这样的蜜蜂13箱，一年可以酿多少千克蜜蜂？", "target": 975.0, "answer": 4875.0, "score": 0, "generation": ["def solution():\n    # 一箱蜜蜂一年可以酿375千克蜂蜜\n    honey_per_box = 375\n    # 小林家养了13箱蜜蜂\n    num_boxes = 13\n    # 一年可以酿的蜂蜜总量 = 每箱蜜蜂一年可以酿的蜂蜜量 * 箱数\n    total_honey = honey_per_box * num_boxes\n    # 答案是一年可以酿的蜂蜜总量\n    result = total_honey\n    # 返回答案\n    return result"]}
{"question": "两只轮船同时从青岛去上海，18小时后，甲船落后乙船57.6千米，甲船平均每小时行32.5千米，乙船平均每小时行多少千米？", "target": 35.7, "answer": 29.299999999999997, "score": 0, "generation": ["def solution():\n    # 甲船平均每小时行32.5千米\n    speed_a = 32.5\n    # 18小时后，甲船落后乙船57.6千米\n    distance_difference = 57.6\n    # 甲船行驶的距离 = 甲船速度 * 时间\n    distance_a = speed_a * 18\n    # 乙船行驶的距禵 = 甲船行驶的距离 - 落后的距离\n    distance_b = distance_a - distance_difference\n    # 乙船平均每小时行驶的距离 = 乙船行驶的距离 / 时间\n    speed_b = distance_b / 18\n    # 答案是乙船平均每小时行驶的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "2吨水泥，用去(1/4)，还剩多少吨？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 水泥的总重量为2吨\n    total_cement = 2\n    # 用去的比例为(1/4)\n    used_fraction = 1/4\n    # 用去的水泥重量 = 总重量 * 用去的比例\n    used_cement = total_cement * used_fraction\n    # 剩余的水泥重量 = 总重量 - 用去的重量\n    remaining_cement = total_cement - used_cement\n    # 答案是剩余的水泥重量\n    result = remaining_cement\n    # 返回答案\n    return result"]}
{"question": "一堆黄沙，第一天运走25%，比第二天少运4吨．这时还剩下56吨．这堆黄沙共多少吨？", "target": 120.0, "answer": 80.0, "score": 0, "generation": ["def solution():\n    # 初始黄沙总重量为x吨\n    # 第一天运走25%，剩下0.75x吨\n    # 第二天剩下0.75x吨 - 4吨 = 56吨\n    # 解方程得到x = 100吨\n\n    # 初始黄沙总重量\n    x = (56 + 4) / 0.75\n    # 答案是黄沙的总重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "华阳小学六年级有女生100人，男生占全年级总人数的(5/9)，全年级有学生多少人？", "target": 225.0, "answer": 225.0, "score": 1, "generation": ["def solution():\n    # 六年级女生人数为100人\n    num_girls = 100\n    # 男生占全年级总人数的(5/9)\n    boys_ratio = 5/9\n    # 女生人数占比为4/9\n    girls_ratio = 4/9\n    # 男生人数 = 女生人数 / 女生人数占比 * 男生人数占比\n    num_boys = num_girls / girls_ratio * boys_ratio\n    # 全年级总人数 = 女生人数 + 男生人数\n    total_students = num_girls + num_boys\n    # 答案是全年级总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一根木头，用32秒的时间分成了5段，以同样的速度将另一根木头分成7段，需要多少时间？", "target": 48.0, "answer": 224.0, "score": 0, "generation": ["def solution():\n    # 一根木头分成5段需要32秒\n    time_per_segment_wood1 = 32\n    # 一根木头要分成7段\n    segments_wood2 = 7\n    # 以同样的速度分成7段，所需总时间 = 分成段数 * 每段所需时间\n    total_time_wood2 = segments_wood2 * time_per_segment_wood1\n    # 答案是分成7段所需的总时间\n    result = total_time_wood2\n    # 返回答案\n    return result"]}
{"question": "一套运动服的售价是240元，其中上衣占售价的(5/8)，如果只买上衣，应付多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 运动服的售价是240元\n    total_price = 240\n    # 上衣占售价的(5/8)\n    fraction_top = 5/8\n    # 只买上衣的价格 = 总售价 * 上衣占比\n    price_top = total_price * fraction_top\n    # 答案是只买上衣的价格\n    result = price_top\n    # 返回答案\n    return result"]}
{"question": "小明体重60千克，由于生病住院，他的体重减轻了(1/15)，这时小明的体重为多少千克？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 小明的初始体重为60千克\n    initial_weight = 60\n    # 体重减轻了(1/15)\n    weight_loss_fraction = 1/15\n    # 减轻的体重 = 初始体重 * 减轻比例\n    weight_loss = initial_weight * weight_loss_fraction\n    # 小明的体重 = 初始体重 - 减轻的体重\n    final_weight = initial_weight - weight_loss\n    # 答案是小明的体重\n    result = final_weight\n    # 返回答案\n    return result"]}
{"question": "东江水泥厂今年3月份生产水泥2700吨，比计划超产20%，计划生产水泥多少吨？", "target": 2250.0, "answer": 2250.0, "score": 1, "generation": ["def solution():\n    # 今年3月份实际生产的水泥量为2700吨\n    actual_production = 2700\n    # 实际生产量超过计划的20%\n    over_production_percentage = 0.20\n    # 计划生产量 = 实际生产量 / (1 + 超产百分比)\n    planned_production = actual_production / (1 + over_production_percentage)\n    # 答案是计划生产的水泥量\n    result = planned_production\n    # 返回答案\n    return result"]}
{"question": "一袋大米吃了15千克正好是这袋大米的(3/5)，还剩下多少千克？", "target": 10.0, "answer": 25.0, "score": 0, "generation": ["def solution():\n    # 一袋大米的总重量为x千克\n    # 吃了15千克是这袋大米的(3/5)\n    # 剩余的重量为(1 - 3/5) * x = 2/5 * x - 15\n    # 因为吃了15千克，剩余的重量为x - 15\n    # 所以有 2/5 * x - 15 = x - 15\n    # 解方程得到 x = 25\n    remaining_weight = 25\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "小红看一本书故事书，第一天看了全书的(1/9)，还剩几分之几没看？", "target": 0.8888888888888888, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天看了全书的(1/9)\n    fraction_read_first_day = 1/9\n    # 剩余的部分 = 1 - 第一天看的部分\n    remaining_fraction = 1 - fraction_read_first_day\n    # 答案是剩余部分的分数\n    result = f\"{remaining_fraction}分之{1}\"\n    # 返回答案\n    return result"]}
{"question": "学校买来35套课桌椅，其中桌子每张115元，椅子每张85元．一共花了多少钱？", "target": 7000.0, "answer": 7000.0, "score": 1, "generation": ["def solution():\n    # 课桌的价格为115元每张\n    price_desk = 115\n    # 椅子的价格为85元每张\n    price_chair = 85\n    # 学校买了35套课桌椅\n    num_sets = 35\n    # 总花费 = 课桌的价格 * 每套课桌的数量 + 椅子的价格 * 每套椅子的数量\n    total_cost = price_desk * num_sets + price_chair * num_sets\n    # 答案是总花费\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "5一期间，商场打折促销．一款原来售价1500元的时尚手机打0.8出售，促销期间买这款手机可以节省多少元？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 手机的原价为1500元\n    original_price = 1500\n    # 打折后的折扣为0.8\n    discount = 0.8\n    # 打折后的价格 = 原价 * 折扣\n    discounted_price = original_price * discount\n    # 节省的金额 = 原价 - 打折后的价格\n    savings = original_price - discounted_price\n    # 答案是节省的金额\n    result = savings\n    # 返回答案\n    return result"]}
{"question": "我过大多数的高速公路的最高时速为每小时120千米，比磁悬浮列车的时速的(3/10)少9千米，磁悬浮列车的时速可达到每小时多少千米．", "target": 430.0, "answer": 84.0, "score": 0, "generation": ["def solution():\n    # 高速公路的最高时速为每小时120千米\n    speed_highway = 120\n    # 磁悬浮列车的时速比高速公路少的部分为(3/10) * speed_highway\n    difference = 9\n    # 磁悬浮列车的时速 = 高速公路的时速 - 差值\n    speed_maglev = speed_highway - ((3/10) * speed_highway)\n    # 答案是磁悬浮列车的时速\n    result = speed_maglev\n    # 返回答案\n    return result"]}
{"question": "学校食堂买来面粉180千克，比买来的大米少(3/5)．学校买来的面粉和大米共多少千克？", "target": 630.0, "answer": 288.0, "score": 0, "generation": ["def solution():\n    # 买来的面粉数量为180千克\n    flour_amount = 180\n    # 买来的大米比面粉少(3/5)\n    rice_fraction = 3/5\n    # 买来的大米数量 = 面粉数量 * 大米比例\n    rice_amount = flour_amount * rice_fraction\n    # 学校买来的面粉和大米总量 = 面粉数量 + 大米数量\n    total_amount = flour_amount + rice_amount\n    # 答案是学校买来的面粉和大米总量\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "小华的爸爸买了一辆15.6万元的小轿车，如果按车价的10%缴纳购置税，小华的爸爸应缴纳购置税多少元．", "target": 15600.0, "answer": 1.56, "score": 0, "generation": ["def solution():\n    # 小轿车的价格为15.6万元\n    car_price = 15.6\n    # 购置税的税率为10%\n    tax_rate = 0.1\n    # 购置税金额 = 车价 * 税率\n    tax_amount = car_price * tax_rate\n    # 答案是购置税的金额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开乙地，行了全程的(1/3)，剩下的路程如果以每小时60千米的速度行驶，3小时可以到达，甲乙两地相距多少千米？", "target": 270.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 假设甲地到乙地的距离为x千米\n    total_distance = x\n    # 行驶全程的(1/3)距离\n    distance_covered = (1/3) * total_distance\n    # 剩下的路程为2/3\n    remaining_distance = total_distance - distance_covered\n    # 剩下的路程以每小时60千米的速度行驶需要3小时\n    time_taken = 3\n    # 根据速度公式，剩下的路程 = 速度 * 时间\n    speed = 60\n    # 2/3x = 60 * 3\n    # 解方程得到x\n    total_distance = 60 * 3 / (2/3)\n    # 答案是甲乙两地相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "我校教学楼有4层，如果每层有6个教室，每个教室摆8盆花，一共要摆多少盆花？", "target": 192.0, "answer": 192.0, "score": 1, "generation": ["def solution():\n    # 教学楼的层数为4层\n    num_floors = 4\n    # 每层的教室数量为6个\n    num_classrooms_per_floor = 6\n    # 每个教室摆放的花盆数量为8盆\n    num_flower_pots_per_classroom = 8\n    # 总共需要摆放的花盆数量 = 层数 * 每层教室数量 * 每个教室花盆数量\n    total_flower_pots = num_floors * num_classrooms_per_floor * num_flower_pots_per_classroom\n    # 答案是总共需要摆放的花盆数量\n    result = total_flower_pots\n    # 返回答案\n    return result"]}
{"question": "超市运来一怕运动服，卖了6天，平均每天卖了108件，还剩112件，这批运动服一共有多少件？", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 卖出的总件数 = 6天 * 每天卖出的件数\n    total_sold = 6 * 108\n    # 剩余的件数 = 112件\n    remaining = 112\n    # 运动服的总件数 = 卖出的总件数 + 剩余的件数\n    total_items = total_sold + remaining\n    # 答案是这批运动服的总件数\n    result = total_items\n    # 返回答案\n    return result"]}
{"question": "5000元存入银行3年，年利率是2.5%．到期可得利息多少元．（不扣利息税）", "target": 375.0, "answer": 375.0, "score": 1, "generation": ["def solution():\n    # 存款金额为5000元\n    principal = 5000\n    # 存款年限为3年\n    years = 3\n    # 年利率为2.5%\n    annual_interest_rate = 0.025\n    # 利息 = 本金 * 年利率 * 存款年限\n    interest = principal * annual_interest_rate * years\n    # 答案是到期可得的利息金额\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一个数的2倍比它的1.5倍多1.9，这个数=？", "target": 3.8, "answer": 1.9, "score": 0, "generation": ["def solution():\n    # 令这个数为x\n    # 2倍数 = 2x, 1.5倍数 = 1.5x\n    # 2倍数比1.5倍数多1.9，即 2x = 1.5x + 1.9\n    # 解方程得到 x = 1.9\n    result = 1.9\n    return result"]}
{"question": "某书店经每本14.98元的价格购进一批书，每本售价21.7元，卖完后，除了收回成本外，还获得了504元的利润，这个书店共购进这批书多少本？", "target": 75.0, "answer": 75.00000000000001, "score": 1, "generation": ["def solution():\n    # 每本书的购进价格为14.98元\n    cost_price_per_book = 14.98\n    # 每本书的售价为21.7元\n    selling_price_per_book = 21.7\n    # 总利润为504元\n    total_profit = 504\n    # 每本书的利润为售价减去购进价格\n    profit_per_book = selling_price_per_book - cost_price_per_book\n    # 书店总共获得的利润除去504元，剩下的是成本\n    total_cost = total_profit / profit_per_book\n    # 答案是书店共购进的书的数量\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "爱心超市运来1780千克大米，卖了8天后，还剩100千克，平均每天卖大米多少千克？", "target": 210.0, "answer": 210.0, "score": 1, "generation": ["def solution():\n    # 爱心超市运来的大米重量为1780千克\n    total_rice = 1780\n    # 运来后卖了8天后还剩100千克\n    remaining_rice = 100\n    # 卖出的大米重量 = 总重量 - 剩余重量\n    sold_rice = total_rice - remaining_rice\n    # 卖出的平均每天重量 = 卖出的总重量 / 卖出的天数\n    average_daily_sales = sold_rice / 8\n    # 答案是平均每天卖出的大米重量\n    result = average_daily_sales\n    # 返回答案\n    return result"]}
{"question": "一桶油重(3/2)千克，(1/2)桶油重多少千克．", "target": 0.75, "answer": 0.75, "score": 1, "generation": ["def solution():\n    # 一桶油重(3/2)千克\n    weight_full_bucket = 3/2\n    # (1/2)桶油的重量 = 一桶油重量 * (1/2)\n    weight_half_bucket = weight_full_bucket * (1/2)\n    # 答案是(1/2)桶油的重量\n    result = weight_half_bucket\n    # 返回答案\n    return result"]}
{"question": "食堂买来8吨煤，11天烧完，平均每天烧煤多少吨？（用分数表示）", "target": 0.7272727272727273, "answer": 0.7272727272727273, "score": 1, "generation": ["def solution():\n    # 食堂买来的煤总量为8吨\n    total_coal = 8\n    # 烧完煤需要的天数为11天\n    days = 11\n    # 平均每天烧煤的量 = 总量 / 天数\n    daily_coal = total_coal / days\n    # 答案是平均每天烧煤的量\n    result = daily_coal\n    # 返回答案\n    return result"]}
{"question": "长方体的长、宽、高分别是7cm、6cm、3cm，它的表面积=多少cm^2．", "target": 162.0, "answer": 162.0, "score": 1, "generation": ["def solution():\n    # 长方体的长为7cm，宽为6cm，高为3cm\n    length = 7\n    width = 6\n    height = 3\n    # 长方体的表面积 = 2(长*宽 + 宽*高 + 长*高)\n    surface_area = 2 * (length*width + width*height + length*height)\n    # 答案是长方体的表面积\n    result = surface_area\n    # 返回答案\n    return result"]}
{"question": "4个同学在假期里约定，每两人互通一封信，他们共要写多少封信．", "target": 12.0, "answer": "", "score": 0, "generation": ["首先，假设有4个同学，分别为A、B、C、D。\n\n1. A和B互通1封信\n2. A和C互通1封信\n3. A和D互通1封信\n4. B和C互通1封信\n5. B和D互通1封信\n6. C和D互通1封信\n\n共有6种组合，每对同学互通一封信，所以他们共要写6封信。\n\nNow, let's write the Python code to calculate the total number of letters:\n\n```python\ndef solution():\n    # 4个同学共有6种组合\n    total_combinations = 6\n    # 每对同学互通一封信\n    letters_per_combination = 1\n    # 共要写的信数 = 组合数 * 每组的信数\n    total_letters = total_combinations * letters_per_combination\n    # 答案是共要写的信数\n    result = total_letters\n    # 返回答案\n    return result\n```"]}
{"question": "一种商品，第一次打了0.9，第二次又降价5%，现在该商品是原价的多少%．", "target": 85.5, "answer": 14.500000000000002, "score": 0, "generation": ["def solution():\n    # 第一次打了0.9折，相当于原价的0.9倍\n    discount_first_time = 0.9\n    # 第二次降价5%，相当于原价的95%\n    discount_second_time = 0.95\n    # 现在价格相对于原价的比例 = 第一次折扣 * 第二次折扣\n    final_discount = discount_first_time * discount_second_time\n    # 转换为百分比\n    final_discount_percentage = (1 - final_discount) * 100\n    # 答案是商品现在的价格是原价的多少%\n    result = final_discount_percentage\n    # 返回答案\n    return result"]}
{"question": "做5根长2米，管口直径是0.2米的通风管，至少需要铁皮多少平方米．", "target": 6.283185, "answer": 6.280000000000001, "score": 0, "generation": ["def solution():\n    # 通风管的数量是5根\n    num_pipes = 5\n    # 每根通风管的长度是2米\n    length_pipe = 2\n    # 管口直径是0.2米，半径是直径的一半\n    radius = 0.2 / 2\n    # 铁皮的面积公式为：2 * π * 半径 * 长度\n    area_per_pipe = 2 * 3.14 * radius * length_pipe\n    # 总铁皮面积 = 每根通风管所需铁皮面积 * 通风管数量\n    total_area = area_per_pipe * num_pipes\n    # 答案是至少需要的铁皮面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "8+88+888+8888+88888=．", "target": 98760.0, "answer": 98760.0, "score": 1, "generation": ["def solution():\n    # 计算各个数的和\n    total_sum = 8 + 88 + 888 + 8888 + 88888\n    # 答案是总和\n    result = total_sum\n    # 返回答案\n    return result"]}
{"question": "小天才培训学校选出一批优秀的学生参加全国作文比赛和数学比赛，结果7人两项比赛都获奖了，有13人两项比赛都没有获奖，已知作文比赛获奖的有12人，数学比赛获奖的有28人．那么这批优秀的学生一共有多少人．", "target": 46.0, "answer": "", "score": 0, "generation": ["首先，我们可以使用集合的概念来解决这个问题。我们知道两项比赛都获奖的人数为7人，两项比赛都没有获奖的人数为13人，作文比赛获奖的人数为12人，数学比赛获奖的人数为28人。我们设定总人数为x，根据这些信息可以列出如下方程：\n\n(作文比赛获奖人数) + (数学比赛获奖人数) - (两项比赛都获奖人数) + (两项比赛都没有获奖人数) = 总人数\n\n根据题目中给出的数据，我们可以将具体数值代入上述方程，解出总人数x。\n\n接下来我们用Python来实现这个问题的解决方案：\n\n```python\ndef solution():\n    # 两项比赛都获奖的人数\n    both_award = 7\n    # 两项比赛都没有获奖的人数\n    neither_award = 13\n    # 作文比赛获奖的人数\n    essay_award = 12\n    # 数学比赛获奖的人数\n    math_award = 28\n\n    # 根据方程计算总人数\n    total_students = essay_award + math_award - both_award + neither_award\n\n    # 答案是这批优秀的学生一共有多少人\n    result = total_students\n    # 返回答案\n    return result\n```"]}
{"question": "小明的体重是28千克，比表弟中6千克，而爸爸的体重是表弟的4倍，爸爸的体重=多少千克？", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 小明的体重是28千克\n    weight_xiaoming = 28\n    # 表弟比小明轻6千克\n    weight_cousin = weight_xiaoming - 6\n    # 爸爸的体重是表弟的4倍\n    weight_dad = 4 * weight_cousin\n    # 答案是爸爸的体重\n    result = weight_dad\n    # 返回答案\n    return result"]}
{"question": "光明小学有学生485人，其中40%的同学参加了课外科技活动小组，参加课外科技活动小组的有多少人？", "target": 194.0, "answer": 194.0, "score": 1, "generation": ["def solution():\n    # 光明小学的学生总人数为485人\n    total_students = 485\n    # 参加课外科技活动小组的比例为40%\n    participation_rate = 0.4\n    # 参加课外科技活动小组的人数 = 总人数 * 参加比例\n    students_in_tech_group = total_students * participation_rate\n    # 答案是参加课外科技活动小组的人数\n    result = students_in_tech_group\n    # 返回答案\n    return result"]}
{"question": "林场春天种500棵树苗，成活率为98%，成活了多少棵？", "target": 490.0, "answer": 490.0, "score": 1, "generation": ["def solution():\n    # 种植的树苗数量为500棵\n    total_seedlings = 500\n    # 成活率为98%\n    survival_rate = 0.98\n    # 成活的树苗数量 = 种植的树苗数量 * 成活率\n    survived_seedlings = total_seedlings * survival_rate\n    # 答案是成活的树苗数量\n    result = survived_seedlings\n    # 返回答案\n    return result"]}
{"question": "县图书馆有故事书15.4万册，比科技书少5.8万册，这两种书共多少万册？", "target": 36.6, "answer": 25.0, "score": 0, "generation": ["def solution():\n    # 故事书的册数为15.4万册\n    num_story_books = 15.4\n    # 科技书比故事书少5.8万册\n    num_tech_books_less = 5.8\n    # 两种书的总册数 = 故事书的册数 + 科技书的册数\n    total_books = num_story_books + (num_story_books - num_tech_books_less)\n    # 答案是两种书的总册数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小红把1000元钱存入银行，存整存整取3年，年利率是3.24%．到期时小红可得利息=多少元．", "target": 97.2, "answer": 97.20000000000002, "score": 1, "generation": ["def solution():\n    # 存款金额为1000元\n    principal = 1000\n    # 存款年限为3年\n    years = 3\n    # 年利率为3.24%\n    annual_interest_rate = 3.24 / 100\n    # 利息 = 本金 * 年利率 * 存款年限\n    interest = principal * annual_interest_rate * years\n    # 到期时小红可得利息\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一件工作，甲每天完成全部工作的(1/8)，乙每天完成全部工作的(1/12)，两人合作2天，能完成全部工作的多少．", "target": 0.4166666666666667, "answer": 2.4000000000000004, "score": 0, "generation": ["def solution():\n    # 甲每天完成的工作量比例为1/8\n    rate_a = 1/8\n    # 乙每天完成的工作量比例为1/12\n    rate_b = 1/12\n    # 两人合作2天完成的工作量比例为两人每天完成工作量之和乘以合作天数\n    total_rate = 2 * (rate_a + rate_b)\n    # 两人合作2天完成的工作量比例为1，所以1表示全部工作\n    # 两人合作2天完成全部工作的比例 = 1 / 完成的工作量比例\n    work_done = 1 / total_rate\n    # 答案是两人合作2天完成全部工作的工作量比例\n    result = work_done\n    # 返回答案\n    return result"]}
{"question": "一根铁丝长10米，第一次剪去它的(2/5)，第二次剪去(3/10)米还剩下多少米．", "target": 5.7, "answer": 5.7, "score": 1, "generation": ["def solution():\n    # 铁丝的初始长度为10米\n    initial_length = 10\n    # 第一次剪去的长度为初始长度的(2/5)\n    cut_fraction_1 = 2/5\n    # 第二次剪去的长度为(3/10)米\n    cut_length_2 = 3/10\n    # 第一次剪去的长度 = 初始长度 * 第一次剪去的比例\n    cut_length_1 = initial_length * cut_fraction_1\n    # 剩余长度 = 初始长度 - 第一次剪去的长度\n    remaining_length_1 = initial_length - cut_length_1\n    # 最终剩余长度 = 剩余长度 - 第二次剪去的长度\n    final_remaining_length = remaining_length_1 - cut_length_2\n    # 答案是最终剩余的长度\n    result = final_remaining_length\n    # 返回答案\n    return result"]}
{"question": "3个同学比赛跳高，王军跳了1.52米，张华比王军多跳了0.18米，李林比张华少跳了0.11米，李林跳了多少米？", "target": 1.59, "answer": 1.5899999999999999, "score": 1, "generation": ["def solution():\n    # 王军跳了1.52米\n    height_wang = 1.52\n    # 张华比王军多跳了0.18米\n    height_zhang = height_wang + 0.18\n    # 李林比张华少跳了0.11米\n    height_li = height_zhang - 0.11\n    # 李林跳了多少米\n    result = height_li\n    # 返回答案\n    return result"]}
{"question": "一本故事书原价24.8元．现在按原价的0.6出售，便宜了多少元？", "target": 9.92, "answer": 9.920000000000002, "score": 1, "generation": ["def solution():\n    # 一本故事书的原价为24.8元\n    original_price = 24.8\n    # 出售价格为原价的0.6\n    discounted_price_fraction = 0.6\n    # 出售价格 = 原价 * 出售价格比例\n    discounted_price = original_price * discounted_price_fraction\n    # 便宜了的金额 = 原价 - 出售价格\n    discount_amount = original_price - discounted_price\n    # 答案是便宜了的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "荣荣家买来一筐苹果，爸爸吃了其中的(1/3)，荣荣吃了其中的(1/4)，剩下的都是妈妈吃的，如果爸爸比荣荣多吃了3个苹果，那么，妈妈吃了多少个．", "target": 15.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 爸爸吃了苹果的比例为1/3\n    dad_fraction = 1/3\n    # 荣荣吃了苹果的比例为1/4\n    rong_fraction = 1/4\n    # 爸爸比荣荣多吃了3个苹果\n    extra_apples = 3\n    # 爸爸吃的苹果数量 = 总苹果数量 * 爸爸吃的比例\n    dad_apples = total_apples * dad_fraction\n    # 荣荣吃的苹果数量 = 总苹果数量 * 荣荣吃的比例\n    rong_apples = total_apples * rong_fraction\n    # 爸爸吃的苹果数量比荣荣多了3个苹果\n    dad_apples = rong_apples + extra_apples\n    # 剩下的苹果数量 = 总苹果数量 - 爸爸和荣荣吃的数量\n    remaining_apples = total_apples - (dad_apples + rong_apples)\n    # 妈妈吃的苹果数量 = 剩下的苹果数量\n    mom_apples = remaining_apples\n    # 答案是妈妈吃的苹果数量\n    result = mom_apples\n    # 返回答案\n    return result"]}
{"question": "学校准备发《感恩教育》读本给16个班，每班50本，还要给学校图书室留30本．学校应购买《感恩教育》多少本？", "target": 830.0, "answer": 830.0, "score": 1, "generation": ["def solution():\n    # 学校有16个班\n    num_classes = 16\n    # 每班需要50本书\n    books_per_class = 50\n    # 学校图书室需要30本书\n    books_for_library = 30\n    # 总共需要的书籍数量 = 每班书籍数量 * 班级数 + 图书室需要的书籍数量\n    total_books_needed = books_per_class * num_classes + books_for_library\n    # 答案是总共需要购买的书籍数量\n    result = total_books_needed\n    # 返回答案\n    return result"]}
{"question": "已知等差数列首项是5，第8项是26，这个等差数列的公差=．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 等差数列的首项是5\n    first_term = 5\n    # 等差数列的第8项是26\n    eighth_term = 26\n    # 等差数列的项数为8\n    n = 8\n    # 公差 = (第8项 - 首项) / (8 - 1)\n    common_difference = (eighth_term - first_term) / (n - 1)\n    # 答案是公差\n    result = common_difference\n    # 返回答案\n    return result"]}
{"question": "一个县今年小麦总产量是35万吨，比去年增产12%，去年全县小麦总产量=多少万吨？", "target": 31.25, "answer": 31.249999999999996, "score": 1, "generation": ["def solution():\n    # 今年小麦总产量是35万吨\n    wheat_production_this_year = 35\n    # 增产了12%\n    increase_percentage = 0.12\n    # 去年小麦总产量 = 今年小麦总产量 / (1 + 增长百分比)\n    wheat_production_last_year = wheat_production_this_year / (1 + increase_percentage)\n    # 答案是去年全县小麦总产量\n    result = wheat_production_last_year\n    # 返回答案\n    return result"]}
{"question": "一道除法算式，除数是18，商是21，余数是5，则被除数=．", "target": 383.0, "answer": 383.0, "score": 1, "generation": ["def solution():\n    # 除数\n    divisor = 18\n    # 商\n    quotient = 21\n    # 余数\n    remainder = 5\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "五年级同学收集邮票48枚，六年级收集的比五年级多(1/3)，六年级收集邮票多少枚？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 五年级同学收集的邮票数量为48枚\n    num_fifth_grade = 48\n    # 六年级同学收集的比五年级多(1/3)\n    ratio = 1/3\n    # 六年级收集的邮票数量 = 五年级数量 + 五年级数量 * 比例\n    num_sixth_grade = num_fifth_grade + num_fifth_grade * ratio\n    # 答案是六年级收集的邮票数量\n    result = num_sixth_grade\n    # 返回答案\n    return result"]}
{"question": "弟弟(2/3)小时写了24个大字，弟弟平均每小时写几个大字？", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 弟弟写了24个大字\n    num_words = 24\n    # 弟弟写字的时间为(2/3)小时\n    time_hours = 2/3\n    # 弟弟平均每小时写的大字数量 = 写的大字数量 / 写字的时间\n    words_per_hour = num_words / time_hours\n    # 答案是弟弟平均每小时写的大字数量\n    result = words_per_hour\n    # 返回答案\n    return result"]}
{"question": "一辆汽车上午行驶3小时，下午用同样的速度行驶4小时．如果上午行驶了315千米，下午行驶了多少千米？", "target": 420.0, "answer": 420.0, "score": 1, "generation": ["def solution():\n    # 上午行驶的时间为3小时\n    morning_hours = 3\n    # 下午行驶的时间为4小时\n    afternoon_hours = 4\n    # 上午行驶的距离为315千米\n    morning_distance = 315\n    # 上午行驶的速度 = 上午行驶的距离 / 上午行驶的时间\n    morning_speed = morning_distance / morning_hours\n    # 下午行驶的距离 = 下午行驶的速度 * 下午行驶的时间\n    afternoon_distance = morning_speed * afternoon_hours\n    # 答案是下午行驶的距离\n    result = afternoon_distance\n    # 返回答案\n    return result"]}
{"question": "45+129的和乘28，积=？", "target": 4872.0, "answer": 4872.0, "score": 1, "generation": ["def solution():\n    # 计算45+129的和\n    sum_result = 45 + 129\n    # 将和乘以28\n    product = sum_result * 28\n    # 答案是乘积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "鸡有36只，鸭的只数是鸡的2倍，鸡和鸭一共有多少只？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 鸡的数量为36只\n    num_chickens = 36\n    # 鸭的数量是鸡的2倍\n    num_ducks = 2 * num_chickens\n    # 鸡和鸭的总数量 = 鸡的数量 + 鸭的数量\n    total_animals = num_chickens + num_ducks\n    # 答案是鸡和鸭的总数量\n    result = total_animals\n    # 返回答案\n    return result"]}
{"question": "3.14与268的和乘7=？", "target": 1897.98, "answer": 1897.98, "score": 1, "generation": ["def solution():\n    # 3.14与268的和\n    sum_result = 3.14 + 268\n    # 乘以7\n    final_result = sum_result * 7\n    # 答案是乘以7后的结果\n    result = final_result\n    # 返回答案\n    return result"]}
{"question": "一堆煤用去20%，剩下的比用去的多12吨，这堆煤有多少吨？", "target": 20.0, "answer": 60.0, "score": 0, "generation": ["def solution():\n    # 假设原始煤的重量为x吨\n    # 用去20%后剩下80%，即0.8x吨\n    # 剩下的比用去的多12吨，即0.8x = 1.2x - 12\n    # 解方程得到x = 60\n    # 答案是这堆煤有60吨\n\n    # 答案\n    result = 60\n    return result"]}
{"question": "原来每台录音机售价500元，现在每台售价350元，每台降价了百分之几？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 原售价为500元\n    original_price = 500\n    # 现售价为350元\n    current_price = 350\n    # 降价金额 = 原售价 - 现售价\n    price_reduction = original_price - current_price\n    # 降价比例 = 降价金额 / 原售价\n    reduction_percentage = (price_reduction / original_price) * 100\n    # 答案是降价的百分比\n    result = reduction_percentage\n    # 返回答案\n    return result"]}
{"question": "建筑工地有一堆垃圾分两次运走，每一次运15吨，第二次运的吨数是第一次的1.2倍．这堆垃圾有多少吨？", "target": 33.0, "answer": 33.0, "score": 1, "generation": ["def solution():\n    # 每次运走的吨数\n    tons_per_load = 15\n    # 第二次运的吨数是第一次的1.2倍\n    tons_second_load = 1.2 * tons_per_load\n    # 总共需要运走的吨数 = 第一次 + 第二次\n    total_tons = tons_per_load + tons_second_load\n    # 答案是总共需要运走的吨数\n    result = total_tons\n    # 返回答案\n    return result"]}
{"question": "甲数的(5/7)是10，甲数又是乙数的(3/2)倍，乙数=？", "target": 9.333333333333334, "answer": 9.333333333333334, "score": 1, "generation": ["def solution():\n    # 甲数的(5/7)是10\n    num_a = 10 / (5/7)\n    # 甲数又是乙数的(3/2)倍\n    num_b = num_a / (3/2)\n    # 乙数即为num_b\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "大豆出油率是16%，要榨豆油64千克，需用大豆多少千克．", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 豆油的需求量为64千克\n    oil_required = 64\n    # 大豆的出油率为16%\n    oil_extraction_rate = 0.16\n    # 需要的大豆重量 = 豆油需求量 / 出油率\n    soybean_required = oil_required / oil_extraction_rate\n    # 答案是需要的大豆重量\n    result = soybean_required\n    # 返回答案\n    return result"]}
{"question": "多少千克的(3/4)是(9/10)千克．", "target": 1.2, "answer": "", "score": 0, "generation": ["首先，我们可以将题目翻译成数学表达式。题目问的是多少千克的(3/4)等于(9/10)千克。\n\n让 x 表示题目中问的千克数，那么数学表达式为：\n\nx * (3/4) = 9/10\n\n接下来，我们可以解这个方程来求解 x 的值。\n\nNow, let's write the Python code to solve this equation:\n\n```python\ndef solution():\n    # 解方程 x * (3/4) = 9/10\n    x = (9/10) / (3/4)\n    # 答案是 x 的值\n    result = x\n    # 返回答案\n    return result\n```"]}
{"question": "12*7的积除以8400，商=？", "target": 0.01, "answer": 0.01, "score": 1, "generation": ["def solution():\n    # 计算12*7的积\n    product = 12 * 7\n    # 计算商\n    quotient = product / 8400\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "从30里减去48的(1/3)，所得的差去除3，商=？", "target": 0.21428571428571427, "answer": 4.666666666666667, "score": 0, "generation": ["def solution():\n    # 从30里减去48的(1/3)\n    difference = 30 - 48 * (1/3)\n    # 差除以3得到商\n    quotient = difference / 3\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "4（1）班有42名同学：订阅《少年报》的有31名同学，订阅《童话报》的有27名同学．每人至少订其中一份报纸，有多少名同学既订《少年报》又订《童话报》．", "target": 16.0, "answer": "", "score": 0, "generation": ["首先，订阅《少年报》的同学有31名，订阅《童话报》的同学有27名，总共有42名同学。根据容斥原理，既订《少年报》又订《童话报》的同学数为：\n\n订阅《少年报》的同学数 + 订阅《童话报》的同学数 - 总共的同学数\n\n接下来，我们用Python代码来计算这个结果。\n\n```python\ndef solution():\n    # 订阅《少年报》的同学数\n    num_subscribed_to_young = 31\n    # 订阅《童话报》的同学数\n    num_subscribed_to_fairy = 27\n    # 总共的同学数\n    total_students = 42\n    # 既订《少年报》又订《童话报》的同学数\n    num_subscribed_to_both = num_subscribed_to_young + num_subscribed_to_fairy - total_students\n    # 答案是既订《少年报》又订《童话报》的同学数\n    result = num_subscribed_to_both\n    # 返回答案\n    return result\n```"]}
{"question": "修一条公路，已经修了20千米，比未修的少(3/8)，这条公路有多少千米？", "target": 52.0, "answer": 80.0, "score": 0, "generation": ["def solution():\n    # 已经修的公路长度为20千米\n    repaired_length = 20\n    # 修的部分比未修的部分少(3/8)\n    fraction_repaired = 3/8\n    # 设未修部分为x，则修的部分为3x\n    # 总长度 = 修的部分 + 未修部分\n    # 3x = 20 + x\n    # x = 20 / 2 = 10\n    # 总长度 = 3x + x = 4x = 4 * 10 = 40\n    total_length = 4 * repaired_length\n    # 答案是这条公路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "一批货物120吨，2天运走这批货物的(3/4)．平均每天运货多少吨？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 货物总重量为120吨\n    total_weight = 120\n    # 2天运走了货物的(3/4)\n    fraction_delivered = 3/4\n    # 运走的货物重量 = 总重量 * 运走比例\n    delivered_weight = total_weight * fraction_delivered\n    # 平均每天运货的重量 = 运走的货物重量 / 天数\n    average_daily_weight = delivered_weight / 2\n    # 答案是平均每天运货的重量\n    result = average_daily_weight\n    # 返回答案\n    return result"]}
{"question": "百货店运来15包毛巾，每包20条，每条售价4元．这些毛巾一共售价多少元？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 百货店运来的毛巾包数为15包\n    num_packages = 15\n    # 每包毛巾的条数为20条\n    num_towels_per_package = 20\n    # 每条毛巾的售价为4元\n    price_per_towel = 4\n    # 毛巾的总售价 = 包数 * 每包条数 * 每条售价\n    total_price = num_packages * num_towels_per_package * price_per_towel\n    # 答案是毛巾的总售价\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "李总务帮学校买来5张办公桌和8把椅子，共花去1236元钱．每张办公桌的价钱是180元，每把椅子多少元？", "target": 42.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 买来的办公桌数量为5张\n    num_desks = 5\n    # 买来的椅子数量为8把\n    num_chairs = 8\n    # 总花费为1236元\n    total_cost = 1236\n    # 每张办公桌的价格为180元\n    price_per_desk = 180\n    # 总花费等于办公桌价格乘以数量加上椅子价格乘以数量\n    total_cost_check = num_desks * price_per_desk + num_chairs * price_per_chair\n    # 由于总花费相等，每把椅子的价格 = (总花费 - 办公桌总价) / 椅子数量\n    price_per_chair = (total_cost - num_desks * price_per_desk) / num_chairs\n    # 答案是每把椅子的价格\n    result = price_per_chair\n    # 返回答案\n    return result"]}
{"question": "服装厂3月份计划加工5400件衣服，结果上半月完成了(3/4)，下半月完成了(2/3)，这个月比原计划多加工多少件？", "target": 2250.0, "answer": 2250.0, "score": 1, "generation": ["def solution():\n    # 3月份计划加工的衣服数量为5400件\n    planned_clothes = 5400\n    # 上半月完成了(3/4)的衣服\n    first_half_completion = 3/4\n    # 下半月完成了(2/3)的衣服\n    second_half_completion = 2/3\n    # 上半月实际加工的衣服数量 = 计划数量 * 上半月完成比例\n    clothes_first_half = planned_clothes * first_half_completion\n    # 下半月实际加工的衣服数量 = 计划数量 * 下半月完成比例\n    clothes_second_half = planned_clothes * second_half_completion\n    # 这个月实际加工的衣服总数 = 上半月加工数量 + 下半月加工数量\n    total_clothes = clothes_first_half + clothes_second_half\n    # 比原计划多加工的衣服数量 = 实际加工数量 - 计划数量\n    extra_clothes = total_clothes - planned_clothes\n    # 答案是比原计划多加工的衣服数量\n    result = extra_clothes\n    # 返回答案\n    return result"]}
{"question": "建筑工地运来了4车水泥，每车4.5吨，共用了4410元，平均每吨水泥多少元？", "target": 245.0, "answer": 245.0, "score": 1, "generation": ["def solution():\n    # 建筑工地运来的车数为4车\n    num_trucks = 4\n    # 每车水泥的重量为4.5吨\n    weight_per_truck = 4.5\n    # 总费用为4410元\n    total_cost = 4410\n    # 总重量 = 车数 * 每车重量\n    total_weight = num_trucks * weight_per_truck\n    # 平均每吨水泥的价格 = 总费用 / 总重量\n    price_per_ton = total_cost / total_weight\n    # 答案是平均每吨水泥的价格\n    result = price_per_ton\n    # 返回答案\n    return result"]}
{"question": "王老师要批改48篇作文，已经批改了13篇．如果每小时批改7篇，还要几小时能批改完？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 王老师要批改的总作文数为48篇\n    total_compositions = 48\n    # 已经批改的作文数为13篇\n    compositions_graded = 13\n    # 每小时批改的作文数为7篇\n    compositions_per_hour = 7\n    # 还需要批改的作文数 = 总作文数 - 已经批改的作文数\n    remaining_compositions = total_compositions - compositions_graded\n    # 需要的时间 = 还需要批改的作文数 / 每小时批改的作文数\n    hours_needed = remaining_compositions / compositions_per_hour\n    # 答案是还需要几小时能批改完\n    result = hours_needed\n    # 返回答案\n    return result"]}
{"question": "某学校图书馆有故事书375本，比科技书少35本，连环画是科技书的3倍．连环画比故事书多多少本？", "target": 855.0, "answer": 645.0, "score": 0, "generation": ["def solution():\n    # 图书馆有故事书375本\n    num_story_books = 375\n    # 科技书比故事书少35本\n    num_tech_books = num_story_books - 35\n    # 连环画是科技书的3倍\n    num_comic_books = 3 * num_tech_books\n    # 连环画比故事书多的本数 = 连环画本数 - 故事书本数\n    extra_comic_books = num_comic_books - num_story_books\n    # 答案是连环画比故事书多的本数\n    result = extra_comic_books\n    # 返回答案\n    return result"]}
{"question": "甲、乙两数的和是60，甲数是乙数的50%，乙数=．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两数的和是60\n    total_sum = 60\n    # 甲数是乙数的50%\n    ratio = 0.5\n    # 甲数 + 乙数 = 60\n    # 甲数 = 乙数 * 0.5\n    # 代入得到： 0.5 * 乙数 + 乙数 = 60\n    # 解方程得到： 乙数 = 40\n    num_b = total_sum / (1 + ratio)\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "9：6=15：多少．", "target": 10.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 已知比例9：6和另一个比例15：x\n    ratio1 = 9 / 6\n    ratio2 = 15 / x\n    # 由比例的性质可得9/6 = 15/x\n    # 解方程得x = 10\n    x = 10\n    # 答案是15：10\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地驶向乙地，第一小时行了50千米，第二小时行了全程的20%，还剩下190千米．甲乙两地相距多少千米？", "target": 300.0, "answer": 278.0, "score": 0, "generation": ["def solution():\n    # 第一小时行驶的距离为50千米\n    distance_first_hour = 50\n    # 第二小时行驶的距离占全程的20%\n    distance_second_hour_fraction = 0.20\n    # 剩余距离为190千米\n    remaining_distance = 190\n    # 第二小时行驶的距离 = 全程距离 * 第二小时行驶的比例\n    distance_second_hour = remaining_distance * distance_second_hour_fraction\n    # 全程距离 = 第一小时行驶的距离 + 第二小时行驶的距离 + 剩余距离\n    total_distance = distance_first_hour + distance_second_hour + remaining_distance\n    # 答案是甲乙两地相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一本故事书有197页，小军看了42页，剩下的要在5天看完，平均每天看几页？", "target": 31.0, "answer": 31.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为197页\n    total_pages = 197\n    # 小军已经看了42页\n    pages_read = 42\n    # 剩下的页数\n    remaining_pages = total_pages - pages_read\n    # 剩下的天数为5天\n    days_left = 5\n    # 平均每天需要看的页数 = 剩下的页数 / 剩下的天数\n    pages_per_day = remaining_pages / days_left\n    # 答案是平均每天需要看的页数\n    result = pages_per_day\n    # 返回答案\n    return result"]}
{"question": "一列快车和一列慢车同时从相距500千米的两地相向而行．已知快车每时行70千米，慢车每时行55千米，经过多少时两车相遇？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 两地之间的距离为500千米\n    distance = 500\n    # 快车的速度是每小时行70千米\n    speed_fast = 70\n    # 慢车的速度是每小时行55千米\n    speed_slow = 55\n    # 因为两车相向而行，两车相对速度为快车与慢车速度之和\n    relative_speed = speed_fast + speed_slow\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "每瓶洗发水18元，买4瓶送一瓶，妈妈一次买10瓶，共用多少元．", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 每瓶洗发水的价格为18元\n    price_per_bottle = 18\n    # 买4瓶送1瓶，相当于每5瓶实际支付4瓶的价格\n    actual_price_per_5_bottles = 4 * price_per_bottle\n    # 妈妈一次买10瓶，相当于买2组的价格\n    total_cost = 2 * actual_price_per_5_bottles\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "京沪速全长1300千米，一辆汽车从北京出发开往上海，已经行了700千米，剩下的路程每小时行120千米，还行几小时就到达？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 京沪路全长1300千米\n    total_distance = 1300\n    # 已经行驶了700千米\n    distance_covered = 700\n    # 剩下的路程\n    remaining_distance = total_distance - distance_covered\n    # 剩下的路程每小时行120千米\n    speed = 120\n    # 到达剩下路程所需时间 = 剩下的路程 / 每小时行驶的距离\n    time_to_arrive = remaining_distance / speed\n    # 答案是到达剩下路程所需时间\n    result = time_to_arrive\n    # 返回答案\n    return result"]}
{"question": "加工一批零件，黄师傅(1/5)天完成，洪师傅(1/7)天完成．两人合作多少天就可以完成加工任务．", "target": 0.08333333333333333, "answer": 0.08333333333333333, "score": 1, "generation": ["def solution():\n    # 黄师傅完成加工任务需要(1/5)天\n    days_huang = 1/5\n    # 洪师傅完成加工任务需要(1/7)天\n    days_hong = 1/7\n    # 两人合作完成加工任务的速度为每天完成的工作量之和\n    combined_rate = 1/days_huang + 1/days_hong\n    # 两人合作完成加工任务所需天数 = 1 / 两人合作完成加工任务的速度\n    days_together = 1 / combined_rate\n    # 答案是两人合作完成加工任务所需天数\n    result = days_together\n    # 返回答案\n    return result"]}
{"question": "一瓶油，将它的(1/4)倒入一个重200克的玻璃杯里，再把杯放在天平的一个盘里，然后在天平的另一个盘中放人500克砝码，这时天平就平衡了．这瓶油重多少克．", "target": 1200.0, "answer": 300.0, "score": 0, "generation": ["def solution():\n    # 玻璃杯的重量为200克\n    weight_glass = 200\n    # 砝码的重量为500克\n    weight_weight = 500\n    # 倒入玻璃杯的油的比例为(1/4)\n    oil_fraction = 1/4\n    # 假设油的总重量为x克\n    total_weight_oil = weight_glass / oil_fraction\n    # 油的总重量加上玻璃杯的重量等于砝码的重量\n    total_weight_oil + weight_glass == weight_weight\n    # 解方程得到油的总重量\n    total_weight_oil = weight_weight - weight_glass\n    # 答案是油的总重量\n    result = total_weight_oil\n    # 返回答案\n    return result"]}
{"question": "王老师计划用100元钱买一些文具作为奖品奖给优秀学生干部．他先用65.4元买了6个笔记本，剩下的钱准备买5支钢笔，那么钢笔的单价必须控制在多少钱以内？", "target": 6.92, "answer": 6.919999999999999, "score": 1, "generation": ["def solution():\n    # 王老师计划用100元钱买文具\n    total_money = 100\n    # 王老师先用65.4元买了6个笔记本\n    price_notebooks = 65.4\n    num_notebooks = 6\n    # 剩下的钱\n    remaining_money = total_money - price_notebooks\n    # 剩下的钱准备买5支钢笔\n    num_pens = 5\n    # 钢笔的单价必须控制在多少钱以内\n    price_per_pen = remaining_money / num_pens\n    # 答案是钢笔的单价\n    result = price_per_pen\n    # 返回答案\n    return result"]}
{"question": "小红看一本60页的故事书，第一天看了全书的(1/5)，第二天看了全书的(1/4)，两天共看了多少页？", "target": 27.0, "answer": 27.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为60页\n    total_pages = 60\n    # 第一天看了全书的(1/5)\n    fraction_day1 = 1/5\n    # 第二天看了全书的(1/4)\n    fraction_day2 = 1/4\n    # 第一天看的页数 = 总页数 * 第一天看的比例\n    pages_day1 = total_pages * fraction_day1\n    # 第二天看的页数 = 总页数 * 第二天看的比例\n    pages_day2 = total_pages * fraction_day2\n    # 两天共看的页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_day1 + pages_day2\n    # 答案是两天共看的页数\n    result = total_pages_read\n    # 返回答案\n    return result"]}
{"question": "小平今年是他父亲年龄的(1/3)，若干年后他们相差22岁，那么小平今年多少岁．", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 小平今年是他父亲年龄的(1/3)\n    ratio = 1/3\n    # 他们相差的年龄\n    age_difference = 22\n    # 假设小平今年x岁，则父亲今年的年龄为3x岁\n    # 根据题意，3x - x = 22\n    # 解方程得到 x = 11\n    age_of_xiaoping = 11\n    # 答案是小平今年的年龄\n    result = age_of_xiaoping\n    # 返回答案\n    return result"]}
{"question": "20032003+20320030+23200300+22003003+20030032+20300320+23003200=．", "target": 148888888.0, "answer": 148888888.0, "score": 1, "generation": ["def solution():\n    # 计算表达式的和\n    result = 20032003 + 20320030 + 23200300 + 22003003 + 20030032 + 20300320 + 23003200\n    # 返回答案\n    return result"]}
{"question": "造纸厂今年前5个月完成全年造纸任务的45%，再生产1650吨就可以完成全年任务．造纸厂今年计划造纸多少吨？", "target": 3000.0, "answer": 3666.6666666666665, "score": 0, "generation": ["def solution():\n    # 今年前5个月完成全年任务的45%\n    completed_percentage = 45\n    # 再生产1650吨就可以完成全年任务\n    additional_production = 1650\n    # 计划总产量 = 再生产的量 / 完成百分比\n    planned_production = additional_production / (completed_percentage / 100)\n    # 答案是计划总产量\n    result = planned_production\n    # 返回答案\n    return result"]}
{"question": "饲养小组养灰兔75只，养的白兔是灰兔的5倍．两种兔共多少只？", "target": 450.0, "answer": 450.0, "score": 1, "generation": ["def solution():\n    # 饲养小组养灰兔75只\n    num_gray_rabbits = 75\n    # 白兔是灰兔的5倍\n    num_white_rabbits = 5 * num_gray_rabbits\n    # 两种兔共多少只 = 灰兔数量 + 白兔数量\n    total_rabbits = num_gray_rabbits + num_white_rabbits\n    # 答案是两种兔共多少只\n    result = total_rabbits\n    # 返回答案\n    return result"]}
{"question": "某年9月份晴天有20天，雨天的天数比晴天少(4/5)，阴天的天数比雨天多(1/2)．这个月阴天有多少天？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 9月份的总天数\n    total_days = 30\n    # 晴天的天数为20天\n    sunny_days = 20\n    # 雨天的天数比晴天少(4/5)\n    rainy_days = sunny_days - (4/5) * sunny_days\n    # 阴天的天数比雨天多(1/2)\n    cloudy_days = rainy_days + (1/2) * rainy_days\n    # 答案是阴天的天数\n    result = cloudy_days\n    # 返回答案\n    return result"]}
{"question": "超市运进水果，第一批运进320千克，第二排运进400千克，这两批运进水果的重量占超市现在所有水果的(2/3)，超市现在一共有水果多少千克？", "target": 1080.0, "answer": 1080.0, "score": 1, "generation": ["def solution():\n    # 第一批运进水果重量为320千克\n    weight_first_batch = 320\n    # 第二批运进水果重量为400千克\n    weight_second_batch = 400\n    # 运进水果的总重量占比为2/3\n    total_proportion = 2/3\n    # 运进水果的总重量 = 第一批重量 + 第二批重量\n    total_weight = weight_first_batch + weight_second_batch\n    # 超市现在所有水果的重量 = 运进水果的总重量 / 运进水果的总重量占比\n    total_fruit_weight = total_weight / total_proportion\n    # 答案是超市现在所有水果的重量\n    result = total_fruit_weight\n    # 返回答案\n    return result"]}
{"question": "甲乙两数的差是144，甲数比乙数的3倍少14，那么甲数=．", "target": 223.0, "answer": 106.0, "score": 0, "generation": ["def solution():\n    # 甲乙两数的差是144\n    difference = 144\n    # 甲数比乙数的3倍少14\n    # 甲数 = 3 * 乙数 - 14\n    # 乙数 = 甲数 - 144\n    # 代入得：甲数 = 3 * (甲数 - 144) - 14\n    # 解方程得：甲数 = 106\n    num_a = 106\n    # 答案是甲数\n    result = num_a\n    # 返回答案\n    return result"]}
{"question": "五年级一班48个同学集体合影．定价是24.5元，给4张相片．另外加印是每张2.3元．全班每人一张，再送给班主任和科任教师5张，一共要付多少元．", "target": 137.2, "answer": 49.8, "score": 0, "generation": ["def solution():\n    # 一班有48个同学\n    num_students = 48\n    # 合影定价为24.5元，共4张相片\n    base_price = 24.5\n    num_photos = 4\n    # 加印每张相片额外2.3元\n    extra_printing_cost = 2.3\n    # 总共需要付款 = 合影定价 + (每张相片的加印费用 * 相片张数) + (班主任和科任教师的相片张数 * 每张相片的加印费用)\n    total_cost = base_price + (extra_printing_cost * num_photos) + ((1 + 1 + 5) * extra_printing_cost)\n    # 答案是总共需要付款\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "学校买来12只足球和18只篮球，共付出1392元，每只足球68元，每只篮球多少元？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 学校买来的足球数量为12只\n    num_footballs = 12\n    # 学校买来的篮球数量为18只\n    num_basketballs = 18\n    # 学校付出的总金额为1392元\n    total_cost = 1392\n    # 每只足球的价格为68元\n    price_per_football = 68\n    # 设每只篮球的价格为x元\n    # 根据题意，总花费等于足球花费加篮球花费\n    # 12 * 68 + 18 * x = 1392\n    # 解方程得到篮球的价格\n    price_per_basketball = (total_cost - num_footballs * price_per_football) / num_basketballs\n    # 答案是每只篮球的价格\n    result = price_per_basketball\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲城到乙城3小时行126千米，照这样的速度，行完全程共用7小时，甲、乙两城相距多少千米？", "target": 294.0, "answer": 294.0, "score": 1, "generation": ["def solution():\n    # 从甲城到乙城的时间为3小时，行驶了126千米\n    time_to_reach_b = 3\n    distance_to_b = 126\n    # 总共行驶的时间为7小时\n    total_time = 7\n    # 从甲城到乙城的速度 = 距离 / 时间\n    speed_a_to_b = distance_to_b / time_to_reach_b\n    # 完成全程的速度 = 总距离 / 总时间\n    # 因为速度 = 距离 / 时间，所以总距离 = 完成全程的速度 * 总时间\n    total_distance = speed_a_to_b * total_time\n    # 答案是甲、乙两城相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "甲、乙两数的比是5：4，甲数比乙数多多少．", "target": 0.25, "answer": 0.25, "score": 1, "generation": ["def solution():\n    # 甲、乙两数的比是5：4\n    ratio = 5 / 4\n    # 甲数比乙数多的部分 = 甲数 - 乙数\n    difference = ratio - 1\n    # 答案是甲数比乙数多的部分\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "小兵与小军两人同时从两地相向而行，小兵每分钟走70米，比小军每分钟少走10米．12分钟后两个相遇，两地相距多少米．", "target": 1800.0, "answer": 1800.0, "score": 1, "generation": ["def solution():\n    # 小兵每分钟走70米\n    speed_soldier = 70\n    # 小兵比小军每分钟少走10米\n    speed_difference = 10\n    # 两人相遇时，小兵走了的距离\n    distance_soldier = speed_soldier * 12\n    # 两人相遇时，小军走了的距禿\n    distance_enemy = (speed_soldier + speed_difference) * 12\n    # 两地相距 = 小兵走的距离 + 小军走的距离\n    total_distance = distance_soldier + distance_enemy\n    # 答案是两地相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某人出差从甲地到乙地，第一天坐火车行了全程的40%，第二天乘汽车行了270千米，这时离乙地还有全程的(3/8)，甲乙两地之间的路程=多少千米？", "target": 1200.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天坐火车行了全程的40%\n    distance_covered_first_day = 0.4\n    # 第二天乘汽车行了270千米\n    distance_covered_second_day = 270\n    # 离乙地还有全程的(3/8)\n    remaining_distance_fraction = 3/8\n    # 第一天行驶的距离 = 全程距离 * 第一天行驶比例\n    distance_first_day = total_distance * distance_covered_first_day\n    # 第二天行驶的距离 = 270千米\n    distance_second_day = distance_covered_second_day\n    # 剩余距离 = 全程距离 * 剩余距离比例\n    remaining_distance = total_distance * remaining_distance_fraction\n    # 第一天和第二天行驶的总距离 = 第一天行驶的距离 + 第二天行驶的距离\n    total_covered_distance = distance_first_day + distance_second_day\n    # 由于剩余距离是全程的(3/8)，所以第一天和第二天行驶的总距离等于剩余距离\n    total_covered_distance = remaining_distance\n    # 解方程得到全程距离\n    total_distance = total_covered_distance\n    # 答案是甲乙两地之间的路程\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "把3米长的木料锯成4小段，每锯下一小段需5分钟．全部锯完需多少分钟？", "target": 15.0, "answer": 20.0, "score": 0, "generation": ["def solution():\n    # 木料的总长度为3米\n    total_length = 3\n    # 将木料锯成4小段，需要锯下一小段的时间为5分钟\n    time_per_cut = 5\n    # 总共需要锯的段数为4段\n    total_cuts = 4\n    # 全部锯完需要的总时间 = 每段锯下的时间 * 总段数\n    total_time = time_per_cut * total_cuts\n    # 答案是全部锯完需要的总时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "李师傅每小时织(2/5)米的毯子，(2/3)小时织多少米．", "target": 0.26666666666666666, "answer": 0.26666666666666666, "score": 1, "generation": ["def solution():\n    # 每小时织的毯子长度为(2/5)米\n    length_per_hour = 2/5\n    # 织的小时数为(2/3)小时\n    hours = 2/3\n    # 织的总长度 = 每小时织的长度 * 织的小时数\n    total_length = length_per_hour * hours\n    # 答案是织的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "比的后项是2.5，比值是5，比的前项=．", "target": 12.5, "answer": 0.5, "score": 0, "generation": ["def solution():\n    # 比的后项是2.5\n    later_term = 2.5\n    # 比值是5\n    ratio = 5\n    # 比的前项 = 比的后项 / 比值\n    earlier_term = later_term / ratio\n    # 答案是比的前项\n    result = earlier_term\n    # 返回答案\n    return result"]}
{"question": "果园里一共收了220吨苹果，用13辆卡车运了一趟后还剩下12吨，每辆卡车一趟能运多少吨苹果？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 果园里一共收了220吨苹果\n    total_apples = 220\n    # 运走一趟后还剩下12吨\n    remaining_apples = 12\n    # 用13辆卡车运了一趟\n    num_trucks = 13\n    # 每辆卡车一趟能运的苹果数量 = (总苹果量 - 剩余苹果量) / 卡车数量\n    apples_per_truck = (total_apples - remaining_apples) / num_trucks\n    # 答案是每辆卡车一趟能运的苹果数量\n    result = apples_per_truck\n    # 返回答案\n    return result"]}
{"question": "一个数的(5/8)与10的(4/5)相等，求这个数？", "target": 12.8, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 一个数的(5/8)与10的(4/5)相等\n    # 设这个数为x\n    # 则有 x * (5/8) = 10 * (4/5)\n    # 解方程得到 x = (10 * 4) / (5 * 8)\n    \n    # 计算得到这个数\n    result = (10 * 4) / (5 * 8)\n    # 返回答案\n    return result"]}
{"question": "红星小学四年级有96名同学去参观科技馆，平均分成4队，每队分成3组，平均每组有多少人？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 红星小学四年级有96名同学\n    num_students = 96\n    # 分成4队\n    num_teams = 4\n    # 每队分成3组\n    num_groups_per_team = 3\n    # 每组平均人数 = 总人数 / (队数 * 每队组数)\n    average_students_per_group = num_students / (num_teams * num_groups_per_team)\n    # 答案是每组平均有多少人\n    result = average_students_per_group\n    # 返回答案\n    return result"]}
{"question": "花园小学四年级两个班共有学生80人．开学初学校为四年级全部更换了新的单人课桌和椅子，每张课桌68元，每把椅子32元，花园小学四年级一共用了多少钱？", "target": 8000.0, "answer": 8000.0, "score": 1, "generation": ["def solution():\n    # 花园小学四年级两个班共有学生80人\n    total_students = 80\n    # 每张课桌的价格为68元\n    price_desk = 68\n    # 每把椅子的价格为32元\n    price_chair = 32\n    # 每个学生需要一张课桌和一把椅子，所以总费用 = 学生总数 * (课桌价格 + 椅子价格)\n    total_cost = total_students * (price_desk + price_chair)\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "98/16*112=．", "target": 686.0, "answer": 686.0, "score": 1, "generation": ["def solution():\n    # 计算98/16*112的结果\n    result = (98/16) * 112\n    # 返回答案\n    return result"]}
{"question": "三角形的面积是6.2cm^2，高是3.1米厘米，底=多少厘米．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 三角形的面积为6.2平方厘米\n    area = 6.2\n    # 三角形的高为3.1厘米\n    height = 3.1\n    # 三角形的面积 = 底 * 高 / 2\n    # 解方程得到底 = 2 * 面积 / 高\n    base = 2 * area / height\n    # 答案是三角形的底\n    result = base\n    # 返回答案\n    return result"]}
{"question": "用货车运水泥，要运45吨，已经运了15吨，剩下的用载重5吨的货车一次运完，需要几辆这样的货车？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 需要运输的水泥总重量为45吨\n    total_cement = 45\n    # 已经运输的水泥重量为15吨\n    transported_cement = 15\n    # 剩余需要运输的水泥重量为总重量减去已经运输的重量\n    remaining_cement = total_cement - transported_cement\n    # 一辆货车的载重量为5吨\n    truck_capacity = 5\n    # 需要的货车数量为剩余水泥重量除以一辆货车的载重量，向上取整\n    num_trucks = -(-remaining_cement // truck_capacity)\n    # 答案是需要的货车数量\n    result = num_trucks\n    # 返回答案\n    return result"]}
{"question": "有一列长200米的火车，每秒行驶15米．它通过一座长850米的大桥需要多少秒．", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 火车的长度为200米\n    train_length = 200\n    # 火车的速度为每秒行驶15米\n    train_speed = 15\n    # 大桥的长度为850米\n    bridge_length = 850\n    # 火车通过大桥的总长度为火车长度 + 大桥长度\n    total_distance = train_length + bridge_length\n    # 火车通过大桥所需时间 = 总长度 / 火车速度\n    time_to_cross = total_distance / train_speed\n    # 答案是火车通过大桥所需的时间\n    result = time_to_cross\n    # 返回答案\n    return result"]}
{"question": "0.58/0.14竖式计算时，除得的商是4，余数=．", "target": 0.02, "answer": "", "score": 0, "generation": ["首先，我们计算0.58除以0.14：\n\n```\n     4.14\n  __________\n0.14 | 0.58\n      -0.56\n      ______\n        0.02\n```\n\n所以，商是4，余数是0.02。\n\n```python\ndef solution():\n    # Perform the division\n    quotient = 0.58 / 0.14\n    # Calculate the remainder\n    remainder = 0.58 % 0.14\n    # The answer is the remainder\n    result = remainder\n    # Return the answer\n    return result\n```"]}
{"question": "三年级5个班参加欢迎中国航天英雄报告团活动，每班选15个同学，每个同学要2个气球，一共要多少个气球？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 三年级有5个班\n    num_classes = 5\n    # 每班选15个同学\n    num_students_per_class = 15\n    # 每个同学需要2个气球\n    num_balloons_per_student = 2\n    # 总共需要的气球数量 = 班级数 * 每班学生数 * 每个学生需要的气球数\n    total_balloons = num_classes * num_students_per_class * num_balloons_per_student\n    # 答案是总共需要的气球数量\n    result = total_balloons\n    # 返回答案\n    return result"]}
{"question": "三年级同学参加“陈省身杯竞赛颁奖典礼”，如果每排坐6人，可以坐满12排；如果每排坐8人，则可以坐满多少排．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 每排坐6人可以坐满12排\n    num_people_per_row_6 = 6\n    num_rows_12 = 12\n    # 每排坐8人则可以坐满多少排\n    num_people_per_row_8 = 8\n    # 可以坐满的排数 = 总人数 / 每排人数\n    num_rows_8 = (num_people_per_row_6 * num_rows_12) / num_people_per_row_8\n    # 答案是可以坐满的排数\n    result = num_rows_8\n    # 返回答案\n    return result"]}
{"question": "李阿姨用1080元买了30箱饮料．上网查询后，发现该产品从厂家直接购买，每箱只需28元．她多花了多少元？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 李阿姨用1080元买了30箱饮料\n    total_spent = 1080\n    num_boxes = 30\n    # 厂家直接购买每箱饮料只需28元\n    price_per_box = 28\n    # 李阿姨多花的钱 = 实际花费 - 厂家价格\n    extra_money = total_spent - (num_boxes * price_per_box)\n    # 答案是多花的钱数\n    result = extra_money\n    # 返回答案\n    return result"]}
{"question": "一件上衣与一条裤子的总价为360元，上衣与裤子的价钱比是5：4，买一条裤子应花多少元．", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 上衣与裤子的价钱比是5：4\n    ratio = 5 / 4\n    # 上衣与裤子的总价为360元\n    total_price = 360\n    # 买一条裤子的价格 = 总价 / (1 + 比例)\n    price_per_pants = total_price / (1 + ratio)\n    # 答案是买一条裤子的价格\n    result = price_per_pants\n    # 返回答案\n    return result"]}
{"question": "一堆黄沙重400吨，第一天运走了(1/4)，第二天运走30%，还剩多少吨？", "target": 180.0, "answer": 330.0, "score": 0, "generation": ["def solution():\n    # 黄沙的总重量为400吨\n    total_weight = 400\n    # 第一天运走了(1/4)的重量\n    first_day_fraction = 1/4\n    # 第一天运走的重量 = 总重量 * 第一天运走的比例\n    weight_first_day = total_weight * first_day_fraction\n    # 第二天运走了30%的重量\n    second_day_fraction = 0.3\n    # 第二天运走的重量 = 总重量 - 第一天运走的重量 * (1 - 第二天运走的比例)\n    weight_second_day = total_weight - weight_first_day * (1 - second_day_fraction)\n    # 答案是剩余的重量\n    result = weight_second_day\n    # 返回答案\n    return result"]}
{"question": "已知：梨子4千克6元，桔子5千克11元．张大妈买12千克梨子和20千克桔子，共应付多少钱？", "target": 62.0, "answer": 62.0, "score": 1, "generation": ["def solution():\n    # 梨子的价格是4千克6元\n    price_per_pear = 6 / 4\n    # 桔子的价格是5千克11元\n    price_per_orange = 11 / 5\n    # 张大妈买12千克梨子需要的费用\n    cost_pears = price_per_pear * 12\n    # 张大妈买20千克桔子需要的费用\n    cost_oranges = price_per_orange * 20\n    # 张大妈总共应付的钱 = 梨子费用 + 桔子费用\n    total_cost = cost_pears + cost_oranges\n    # 答案是总共应付的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "果园里有255棵苹果树，再种35棵梨树就正好和苹果树相等．如果梨树每20棵种一排，梨树一共可以种多少排？", "target": 11.0, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 果园里的苹果树数量为255棵\n    num_apple_trees = 255\n    # 种植的梨树数量为35棵\n    num_pear_trees = 35\n    # 种植梨树后和苹果树数量相等\n    total_trees = num_apple_trees + num_pear_trees\n    # 每20棵梨树种一排\n    trees_per_row = 20\n    # 可以种植的排数 = 梨树数量 / 每排的树数\n    num_rows = num_pear_trees // trees_per_row\n    # 答案是可以种植的排数\n    result = num_rows\n    # 返回答案\n    return result"]}
{"question": "超市上午运进水果402.3千克，下午运进398.7千克，要把这些水果分装在每箱可装4.5千克的包装箱里，需要准备多少个这样的包装箱？", "target": 178.0, "answer": 178.0, "score": 1, "generation": ["def solution():\n    # 上午运进的水果重量为402.3千克\n    morning_fruit_weight = 402.3\n    # 下午运进的水果重量为398.7千克\n    afternoon_fruit_weight = 398.7\n    # 总水果重量 = 上午水果重量 + 下午水果重量\n    total_fruit_weight = morning_fruit_weight + afternoon_fruit_weight\n    # 每箱包装箱可装4.5千克\n    weight_per_box = 4.5\n    # 需要的包装箱数量 = 总水果重量 / 每箱包装箱可装的重量\n    num_boxes = total_fruit_weight / weight_per_box\n    # 答案是需要的包装箱数量\n    result = num_boxes\n    # 返回答案\n    return result"]}
{"question": "杨树与柳树棵数的比是5：4，柳树的棵数比杨树少((())/(()))．", "target": 0.2, "answer": 4.0, "score": 0, "generation": ["def solution():\n    # 杨树与柳树棵数的比是5：4\n    yang_to_liu_ratio = 5 / 4\n    # 柳树的棵数比杨树少(x / y)\n    x = 1\n    y = yang_to_liu_ratio - x\n    # 答案是柳树的棵数比杨树少的比例\n    result = x / y\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距496千米，一辆客车从甲地开往乙地，每小时行64千米，行驶1小时后，一辆货车从乙地开往甲地，每小时行56千米，货车开出几小时后与客车相遇？", "target": 3.6, "answer": 3.6, "score": 1, "generation": ["def solution():\n    # 两地相距496千米\n    distance = 496\n    # 客车的速度是每小时行64千米\n    speed_bus = 64\n    # 货车的速度是每小时行56千米\n    speed_truck = 56\n    # 客车行驶1小时后的距离\n    distance_bus = speed_bus * 1\n    # 剩余距离 = 总距离 - 客车行驶后的距离\n    remaining_distance = distance - distance_bus\n    # 相对速度 = 客车速度 + 货车速度\n    relative_speed = speed_bus + speed_truck\n    # 相遇时间 = 剩余距离 / 相对速度\n    time_to_meet = remaining_distance / relative_speed\n    # 答案是货车开出相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "某修路队前3天每天修路160千米，后4天共修路710千米．平均每天修路多少千米？", "target": 170.0, "answer": 170.0, "score": 1, "generation": ["```python\ndef solution():\n    # 前3天每天修路160千米\n    distance_first_three_days = 160 * 3\n    # 后4天共修路710千米\n    distance_last_four_days = 710\n    # 总共修路天数为7天\n    total_days = 7\n    # 平均每天修路距离 = 总修路距离 / 总天数\n    average_distance_per_day = (distance_first_three_days + distance_last_four_days) / total_days\n    # 答案是平均每天修路的距离\n    result = average_distance_per_day\n    # 返回答案\n    return result\n```"]}
{"question": "王叔叔把年终奖金2500元存入银行，定期3年，年利率是3.25%．到期时，王叔叔可拿到本息多少元．", "target": 2743.75, "answer": 2743.75, "score": 1, "generation": ["def solution():\n    # 年终奖金存入银行的金额为2500元\n    principal = 2500\n    # 存款定期3年\n    years = 3\n    # 年利率是3.25%\n    annual_interest_rate = 3.25 / 100\n    # 到期时的本息 = 本金 * (1 + 年利率 * 存款年限)\n    total_amount = principal * (1 + annual_interest_rate * years)\n    # 答案是到期时王叔叔可拿到的本息金额\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "工厂有一堆煤，用掉(2/3)后，又运来36吨，这时工厂的煤正好与原来一样多，这个工厂原有煤多少吨．", "target": 54.0, "answer": 54.0, "score": 1, "generation": ["def solution():\n    # 假设工厂原有煤的总量为x吨\n    # 用掉(2/3)后剩余的煤量为(1/3)x吨\n    # 加上新运来的36吨后，煤量为(1/3)x + 36吨\n    # 根据题意，这时煤量与原来一样多，即(1/3)x + 36 = x\n    # 化简方程得到：x = 54吨\n\n    # 答案是工厂原有煤的总量\n    result = 54\n    # 返回答案\n    return result"]}
{"question": "在路的一侧从头至尾栽树，每隔9米栽一棵，共栽了100棵，这条路有多长？", "target": 891.0, "answer": 891.0, "score": 1, "generation": ["def solution():\n    # 每隔9米栽一棵树\n    distance_between_trees = 9\n    # 栽了100棵树\n    num_trees = 100\n    # 总共种树的距离 = (树的数量 - 1) * 每棵树之间的距离\n    total_distance = (num_trees - 1) * distance_between_trees\n    # 因为树是从头至尾栽的，所以路的长度 = 种树的总距离\n    road_length = total_distance\n    # 答案是路的长度\n    result = road_length\n    # 返回答案\n    return result"]}
{"question": "在学校举行的体育达标测试中，六年级200名同学参加测试，合格率是98%，有多少名同学达标．", "target": 196.0, "answer": 196.0, "score": 1, "generation": ["def solution():\n    # 六年级200名同学参加测试\n    total_students = 200\n    # 合格率是98%\n    pass_rate = 0.98\n    # 达标的同学数量 = 总人数 * 合格率\n    pass_students = total_students * pass_rate\n    # 答案是达标的同学数量\n    result = pass_students\n    # 返回答案\n    return result"]}
{"question": "一本225页的故事书，读了多少页后，还剩全书的(2/5)．", "target": 135.0, "answer": 135.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为225页\n    total_pages = 225\n    # 剩余的比例为(2/5)\n    remaining_fraction = 2/5\n    # 读了的页数 = 总页数 * (1 - 剩余比例)\n    pages_read = total_pages * (1 - remaining_fraction)\n    # 答案是读了的页数\n    result = pages_read\n    # 返回答案\n    return result"]}
{"question": "小张的劳动生产技术不断提高，第一天生产零件30个，第二天生产零件32个，第3天生产零件34个…，照这样，每天增加2个，他第12天应生产零件多少个．", "target": 52.0, "answer": "", "score": 0, "generation": ["首先我们观察到，小张的生产量是逐天增加的，每天增加2个零件。因此，我们可以使用等差数列的性质来解决这个问题。\n\n第一天生产30个零件，第二天生产32个零件，每天增加2个，那么第12天生产的零件数量可以表示为：30 + (12 - 1) * 2。\n\n现在我们来计算小张第12天应该生产多少个零件。\n\n```python\ndef solution():\n    # 第一天生产的零件数量\n    first_day_production = 30\n    # 每天增加的零件数量\n    increase_per_day = 2\n    # 第12天应生产的零件数量\n    day = 12\n    production_on_day_12 = first_day_production + (day - 1) * increase_per_day\n    # 答案是第12天应生产的零件数量\n    result = production_on_day_12\n    # 返回答案\n    return result\n```"]}
{"question": "鸵鸟每小时能跑64千米，照这样的速度，它2小时能跑多少千米．", "target": 128.0, "answer": 128.0, "score": 1, "generation": ["def solution():\n    # 鸵鸟每小时能跑64千米\n    speed = 64\n    # 鸵鸟2小时能跑的距离 = 速度 * 时间\n    distance = speed * 2\n    # 答案是鸵鸟2小时能跑的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "佳佳5分钟走300米，照这样的速度，她从家里到学校走了15分钟，佳佳家到学校的路程有多少米？", "target": 900.0, "answer": 900.0, "score": 1, "generation": ["def solution():\n    # 佳佳的速度是5分钟走300米\n    speed = 300 / 5\n    # 佳佳从家到学校走了15分钟\n    time = 15\n    # 佳佳家到学校的路程 = 速度 * 时间\n    distance = speed * time\n    # 答案是佳佳家到学校的路程\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "小红看一本故事书，第一天看了68页，第二天比第一天多看了16页，还剩下116页没看．这本故事书有多少页？", "target": 268.0, "answer": 268.0, "score": 1, "generation": ["def solution():\n    # 第一天看的页数为68页\n    pages_day1 = 68\n    # 第二天比第一天多看了16页\n    extra_pages_day2 = 16\n    # 还剩下116页没看\n    remaining_pages = 116\n    # 总页数 = 第一天 + 第二天 + 剩余\n    total_pages = pages_day1 + (pages_day1 + extra_pages_day2) + remaining_pages\n    # 答案是这本故事书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一个平行四边形相邻的两条边的长度是3厘米和4厘米，它的周长=多少厘米．", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 平行四边形相邻的两条边的长度分别为3厘米和4厘米\n    side1 = 3\n    side2 = 4\n    # 平行四边形的周长 = 2 * (相邻边1 + 相邻边2)\n    perimeter = 2 * (side1 + side2)\n    # 答案是平行四边形的周长\n    result = perimeter\n    # 返回答案\n    return result"]}
{"question": "设座位若干排，若每排坐30人，则有8人无座位，若每排坐31人，则空26个座位，共有几排座位？", "target": 34.0, "answer": -34.0, "score": 0, "generation": ["def solution():\n    # 每排坐30人时，有8人无座位\n    num_people_per_row_30 = 30\n    num_people_without_seat_30 = 8\n    # 每排坐31人时，空26个座位\n    num_people_per_row_31 = 31\n    num_empty_seats_31 = 26\n    # 假设共有x排座位\n    num_rows = 0\n    # 根据题意建立方程组\n    # x * num_people_per_row_30 - num_people_without_seat_30 = x * num_people_per_row_31 + num_empty_seats_31\n    # 解方程得到x\n    num_rows = (num_empty_seats_31 + num_people_without_seat_30) / (num_people_per_row_30 - num_people_per_row_31)\n    # 答案是共有几排座位\n    result = num_rows\n    # 返回答案\n    return result"]}
{"question": "修一条公路，第一天修了全路的(2/7)，第二天修了全路的(1/5)，还剩全路的多少没有修．", "target": 0.5142857142857142, "answer": 0.5142857142857142, "score": 1, "generation": ["def solution():\n    # 公路修建进度\n    # 第一天修了全路的(2/7)\n    progress_day1 = 2/7\n    # 第二天修了全路的(1/5)\n    progress_day2 = 1/5\n    # 剩余未修部分 = 1 - 第一天修的部分 - 第二天修的部分\n    remaining_progress = 1 - progress_day1 - progress_day2\n    # 答案是剩余未修部分\n    result = remaining_progress\n    # 返回答案\n    return result"]}
{"question": "湖边有一排柳树，每两棵树之间相距6米，小明从第1棵树跑到第20棵树，共跑多少米．", "target": 114.0, "answer": 114.0, "score": 1, "generation": ["def solution():\n    # 每两棵树之间相距6米\n    distance_between_trees = 6\n    # 一共有20棵树\n    num_trees = 20\n    # 小明从第1棵树跑到第20棵树，需要经过19个间隔\n    num_gaps = num_trees - 1\n    # 小明共需要跑的距离 = 间隔数 * 每个间隔的距离\n    total_distance = num_gaps * distance_between_trees\n    # 答案是小明共需要跑的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "有一批书，第一天卖出400本，第二天卖出占总数的(1/3)，第3天卖出总数的30%，还剩下150本．这批书一共有多少本？", "target": 1500.0, "answer": 645.0, "score": 0, "generation": ["def solution():\n    # 第一天卖出的书本数量为400本\n    sold_day1 = 400\n    # 第二天卖出占总数的(1/3)\n    sold_fraction_day2 = 1/3\n    # 第三天卖出总数的30%\n    sold_fraction_day3 = 0.3\n    # 剩余的书本数量为150本\n    remaining_books = 150\n    # 第二天卖出的书本数量 = 总数 * 第二天卖出比例\n    sold_day2 = remaining_books * sold_fraction_day2\n    # 第三天卖出的书本数量 = 总数 * 第三天卖出比例\n    sold_day3 = remaining_books * sold_fraction_day3\n    # 总数 = 第一天卖出 + 剩余 + 第二天卖出 + 第三天卖出\n    total_books = sold_day1 + remaining_books + sold_day2 + sold_day3\n    # 答案是这批书一共的数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小明看一本120页的故事书，第一天看了20%，第二天看了40%，两天一共看了多少页？", "target": 72.0, "answer": 72.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为120页\n    total_pages = 120\n    # 第一天看了20%的页数\n    read_fraction_day1 = 0.20\n    # 第二天看了40%的页数\n    read_fraction_day2 = 0.40\n    # 第一天看的页数 = 总页数 * 第一天看的比例\n    pages_read_day1 = total_pages * read_fraction_day1\n    # 第二天看的页数 = 总页数 * 第二天看的比例\n    pages_read_day2 = total_pages * read_fraction_day2\n    # 两天一共看的页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_read_day1 + pages_read_day2\n    # 答案是两天一共看的页数\n    result = total_pages_read\n    # 返回答案\n    return result"]}
{"question": "学校有一块800平方米实验田，用500平方米种豆角，剩余部分的40%种黄瓜，其余的全部种西红柿，种西红柿的面积=？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 实验田的总面积为800平方米\n    total_area = 800\n    # 种豆角的面积为500平方米\n    bean_area = 500\n    # 剩余部分的面积 = 总面积 - 种豆角的面积\n    remaining_area = total_area - bean_area\n    # 40%种黄瓜的面积 = 剩余部分的面积 * 40%\n    cucumber_area = remaining_area * 0.4\n    # 种西红柿的面积 = 剩余部分的面积 - 种黄瓜的面积\n    tomato_area = remaining_area - cucumber_area\n    # 答案是种西红柿的面积\n    result = tomato_area\n    # 返回答案\n    return result"]}
{"question": "一个数的(3/2)+(1/2)得(12/5)，这个数=？", "target": 1.2666666666666666, "answer": 2.4, "score": 0, "generation": ["def solution():\n    # 已知等式 (3/2) + (1/2) = (12/5)\n    left_side = (3/2) + (1/2)\n    right_side = 12/5\n    # 由等式得到的结果即为这个数\n    result = right_side\n    # 返回答案\n    return result"]}
{"question": "我们这栋教学楼有3层楼安排了教室，每层有6间教室，如果每间教室里装有8盏日光灯，问这栋教学楼总共要装多少盏日光灯？", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 教学楼的层数\n    num_floors = 3\n    # 每层的教室数量\n    num_classrooms_per_floor = 6\n    # 每间教室里的日光灯数量\n    num_lights_per_classroom = 8\n    # 教学楼总共要装的日光灯数量 = 层数 * 每层教室数量 * 每间教室的日光灯数量\n    total_lights = num_floors * num_classrooms_per_floor * num_lights_per_classroom\n    # 答案是教学楼总共要装的日光灯数量\n    result = total_lights\n    # 返回答案\n    return result"]}
{"question": "一堆煤，原计划每天烧4吨，可以75天，由于改进炉灶，每天烧3吨，这堆煤可以烧多少天？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 原计划每天烧4吨，可以烧75天\n    original_daily_burn = 4\n    original_days = 75\n    # 改进后每天烧3吨\n    new_daily_burn = 3\n    # 原计划总共烧的煤量 = 每天烧的吨数 * 烧的天数\n    original_total_coal = original_daily_burn * original_days\n    # 改进后可以烧多少天 = 原计划总共烧的煤量 / 每天烧的吨数\n    new_days = original_total_coal / new_daily_burn\n    # 答案是改进后可以烧的天数\n    result = new_days\n    # 返回答案\n    return result"]}
{"question": "A、B两地相距2500千米，甲、乙两辆汽车同时从A地出发开往B地，4.2小时后乙领先甲42千米，已知甲每小时行70千米，乙每小时行多少千米？", "target": 80.0, "answer": 525.2380952380952, "score": 0, "generation": ["def solution():\n    # 两地之间的距离为2500千米\n    distance = 2500\n    # 甲车的速度是每小时行70千米\n    speed_a = 70\n    # 4.2小时后乙领先甲42千米\n    time_elapsed = 4.2\n    distance_difference = 42\n    # 甲车行驶的距离 = 甲车速度 * 时间\n    distance_a = speed_a * (time_elapsed)\n    # 乙车领先甲车的距离 = 42千米\n    distance_b = distance_a + distance_difference\n    # 乙车的速度 = (总距离 - 甲车行驶的距离) / 时间\n    speed_b = (distance - distance_a) / time_elapsed\n    # 答案是乙车每小时行驶的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两辆汽车分别从南京和上海同时出发，在沪宁高速公路上相对而行．甲车每小时行103千米，乙车每小时行112千米，经过1.2小时两车还相距16千米．沪宁高速公路全长多少千米？", "target": 274.0, "answer": 274.0, "score": 1, "generation": ["```python\ndef solution():\n    # 甲车的速度是每小时行103千米\n    speed_a = 103\n    # 乙车的速度是每小时行112千米\n    speed_b = 112\n    # 两车经过1.2小时后相距16千米\n    distance_apart = 16\n    # 两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 1.2小时后两车相距的距离 = 相对速度 * 时间\n    distance_after_1_2_hours = relative_speed * 1.2\n    # 1.2小时后两车相距的距离 = 总距离 - 16\n    total_distance = distance_after_1_2_hours + distance_apart\n    # 答案是沪宁高速公路的全长\n    result = total_distance\n    # 返回答案\n    return result\n```"]}
{"question": "在学校为四川地震举行的捐款活动中，六年级同学踊跃捐款献爱心，共捐款1200元，比五年级同学的捐款数多20%，两个年级共向灾区捐款多少元？", "target": 2200.0, "answer": 2200.0, "score": 1, "generation": ["def solution():\n    # 六年级同学捐款1200元\n    donation_sixth_grade = 1200\n    # 六年级同学的捐款比五年级多20%\n    increase_percentage = 0.20\n    # 计算五年级同学的捐款数\n    donation_fifth_grade = donation_sixth_grade / (1 + increase_percentage)\n    # 两个年级共向灾区捐款数\n    total_donation = donation_sixth_grade + donation_fifth_grade\n    # 答案是两个年级共向灾区捐款数\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "湖滨种着一排柳树，每相邻两棵树之间相距8米，小明从第5棵树跑到第100棵树，一共跑了多少米．", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 每相邻两棵树之间相距8米\n    distance_between_trees = 8\n    # 小明从第5棵树跑到第100棵树，共96段距离\n    num_segments = 100 - 5\n    # 小明一共跑的距离 = 段数 * 每段距离\n    total_distance = num_segments * distance_between_trees\n    # 答案是小明一共跑的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一块长方形菜地，宽是20米，长比宽多(1/4)，问这块菜地的面积=？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 菜地的宽度为20米\n    width = 20\n    # 长比宽多(1/4)\n    length_to_width_ratio = 1/4\n    # 长度 = 宽度 + 宽度 * 长比宽的比例\n    length = width + width * length_to_width_ratio\n    # 面积 = 长度 * 宽度\n    area = length * width\n    # 答案是菜地的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "小猴分桃．一共有30千克桃子，平均分给5个小伙伴．每只小猴能分到多少千克的桃子？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 一共有30千克的桃子\n    total_peaches = 30\n    # 分给5个小伙伴，每个小伙伴平均能分到的桃子数量 = 总桃子数 / 小伙伴数量\n    peaches_per_monkey = total_peaches / 5\n    # 答案是每只小猴能分到的桃子数量\n    result = peaches_per_monkey\n    # 返回答案\n    return result"]}
{"question": "五年级的同学去参观东莞展览馆，共用去4小时，其中路上用去的时间占(1/5)，休息的时间占(1/6)，剩下的是游览时间，游览的时间占几分之几？", "target": 0.6333333333333333, "answer": "", "score": 0, "generation": ["首先，路上用去的时间占总时间的1/5，休息的时间占总时间的1/6，那么剩下的游览时间占总时间的多少呢？\n\n总时间 = 4小时\n\n路上用去的时间 = 总时间 * (1/5)\n休息的时间 = 总时间 * (1/6)\n\n剩下的游览时间 = 总时间 - 路上用去的时间 - 休息的时间\n\n接下来，计算游览时间占总时间的比例：\n\n游览时间占比 = 剩下的游览时间 / 总时间\n\n最后，将游览时间占比化简为几分之几的形式。\n\n现在让我们用Python来计算这个问题。\n\n```python\ndef solution():\n    # 总时间为4小时\n    total_time = 4\n    # 路上用去的时间占比为1/5\n    travel_time_fraction = 1/5\n    # 休息的时间占比为1/6\n    rest_time_fraction = 1/6\n    # 路上用去的时间\n    travel_time = total_time * travel_time_fraction\n    # 休息的时间\n    rest_time = total_time * rest_time_fraction\n    # 剩下的游览时间\n    sightseeing_time = total_time - travel_time - rest_time\n    # 游览时间占比\n    sightseeing_fraction = sightseeing_time / total_time\n    # 化简为几分之几的形式\n    numerator = int(sightseeing_fraction * 6)\n    denominator = 6\n    # 答案是游览时间占几分之几\n    result = (numerator, denominator)\n    # 返回答案\n    return result\n```"]}
{"question": "一个油桶，装进(2/5)桶花生油后，连桶共重3.5千克，把桶装满连桶共重6.5千克，这桶油重多少千克？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 油桶装满后的重量\n    full_weight = 6.5\n    # 装进花生油后的重量\n    oil_weight = 3.5\n    # 装油的比例\n    oil_ratio = 2/5\n    # 油桶本身的重量 = 装满后的重量 - 装油后的重量\n    barrel_weight = full_weight - oil_weight\n    # 整桶油的重量 = 油桶本身的重量 / (1 - 装油的比例)\n    total_barrel_weight = barrel_weight / (1 - oil_ratio)\n    # 答案是整桶油的重量\n    result = total_barrel_weight\n    # 返回答案\n    return result"]}
{"question": "甲数是32，甲乙两数的最小公倍数288，最大公约数是4，那乙数应该=．", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 甲数是32\n    num_a = 32\n    # 甲乙两数的最小公倍数是288\n    lcm_ab = 288\n    # 甲乙两数的最大公约数是4\n    gcd_ab = 4\n    # 甲乙两数的乘积等于最小公倍数乘以最大公约数\n    product_ab = lcm_ab * gcd_ab\n    # 乙数等于乘积除以甲数\n    num_b = product_ab / num_a\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "A城到B城的公路长160千米．一辆汽车走高速路的速度是80千米/时，走普通公路的速度是40千米/时．从A城去B城走高速路比普通公路节省多少时间？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # A城到B城的公路长160千米\n    distance = 160\n    # 高速路速度为80千米/时\n    speed_highway = 80\n    # 普通公路速度为40千米/时\n    speed_normal = 40\n    # 高速路所需时间 = 距离 / 速度\n    time_highway = distance / speed_highway\n    # 普通公路所需时间 = 距离 / 速度\n    time_normal = distance / speed_normal\n    # 节省的时间 = 普通公路所需时间 - 高速路所需时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result"]}
{"question": "在家电下乡活动中，陈伯伯买了一台彩色电视机，获得政府给予销售价的13%资金补贴后，这样他实际付出1131元．这台彩色电视机的销售价=多少元？", "target": 1300.0, "answer": 1300.0, "score": 1, "generation": ["def solution():\n    # 陈伯伯实际支付的金额为1131元\n    actual_price = 1131\n    # 政府给予的资金补贴比例为13%\n    subsidy_percentage = 0.13\n    # 陈伯伯实际支付的金额 = 彩电销售价 * (1 - 补贴比例)\n    # 所以 彩电销售价 = 实际支付的金额 / (1 - 补贴比例)\n    selling_price = actual_price / (1 - subsidy_percentage)\n    # 答案是彩电的销售价\n    result = selling_price\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车分别从相距650km的A、B两地同时出发，相向而行．甲车每小时行70km，乙车每小时行60km．几小时相遇？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 两地之间的距离为650km\n    distance = 650\n    # 甲车的速度是每小时行70km\n    speed_a = 70\n    # 乙车的速度是每小时行60km\n    speed_b = 60\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "某班统计数学考试成绩，平均成绩为85.13分．事后复查，发现将小玲的成绩87分误作78分计算，经重新计算后，该班平均成绩是85.31分．这个班有多少个个学生．", "target": 50.0, "answer": 0.020000000000000757, "score": 0, "generation": ["def solution():\n    # 平均成绩为85.13分\n    average_score_initial = 85.13\n    # 小玲的实际成绩为87分\n    actual_score_ling = 87\n    # 小玲的误差为87分误作78分，即实际误差为87-78=9分\n    error_ling = 87 - 78\n    # 重新计算后的平均成绩为85.31分\n    average_score_corrected = 85.31\n    # 重新计算后的平均成绩与初始平均成绩的差值等于小玲的误差\n    difference_in_average = average_score_corrected - average_score_initial\n    # 因为小玲的误差影响了整个班级的平均成绩，所以班级总分的变化量等于学生总数乘以小玲的误差\n    total_students = difference_in_average / error_ling\n    # 答案是班级的学生总数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "从小行小区开往云南北路的26路公交车，从总站开出时车上有(1/8)的座位空着，到“雨花新村”这一站时，有6人下车，10人上车，这时车上座位全部坐满，这辆公交车共有多少个座位．", "target": 32.0, "answer": -4.571428571428571, "score": 0, "generation": ["def solution():\n    # 公交车从总站出发时有1/8的座位空着\n    empty_seat_fraction = 1/8\n    # 到达“雨花新村”站时，有6人下车，10人上车\n    passengers_get_off = 6\n    passengers_get_on = 10\n    # 车上座位全部坐满\n    # 空座位数 = 总座位数 * 空座位比例\n    # 剩余座位数 = 总座位数 - 空座位数\n    # 剩余座位数 - 下车人数 + 上车人数 = 0\n    # 解方程得到总座位数\n    total_seats = (passengers_get_off - passengers_get_on) / (1 - empty_seat_fraction)\n    # 答案是公交车共有的座位数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "期中考试中，我们班语文优秀的有28人，数学优秀的有25人．全班共有的35人中两门都优秀的有多少人？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 语文优秀的人数为28人\n    chinese_excellent = 28\n    # 数学优秀的人数为25人\n    math_excellent = 25\n    # 全班共有的人数为35人\n    total_students = 35\n    # 两门都优秀的人数 = 语文优秀人数 + 数学优秀人数 - 全班总人数\n    both_excellent = chinese_excellent + math_excellent - total_students\n    # 答案是两门都优秀的人数\n    result = both_excellent\n    # 返回答案\n    return result"]}
{"question": "李丽看一本故事书，第一周看了(2/5)，还剩几分之几没有看？", "target": 0.6, "answer": 0.6, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为1\n    total_pages = 1\n    # 第一周看了(2/5)的比例\n    read_fraction_first_week = 2/5\n    # 第一周看了的比例 = 总页数 * 第一周看的比例\n    pages_read_first_week = total_pages * read_fraction_first_week\n    # 剩余的比例 = 1 - 第一周看了的比例\n    remaining_fraction = 1 - read_fraction_first_week\n    # 答案是剩余的比例\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "某厂计划投资30万元，实际投资24万元，节省了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 计划投资金额为30万元\n    planned_investment = 30\n    # 实际投资金额为24万元\n    actual_investment = 24\n    # 节省的金额 = 计划投资金额 - 实际投资金额\n    saved_amount = planned_investment - actual_investment\n    # 节省的比例 = 节省的金额 / 计划投资金额\n    saved_percentage = (saved_amount / planned_investment) * 100\n    # 答案是节省的百分比\n    result = saved_percentage\n    # 返回答案\n    return result"]}
{"question": "王老师从报社获得了1780元的稿费，按照国家标准，超过800元的部分按照20%的税率纳税．王老师实际得到稿费多少元？", "target": 1584.0, "answer": 1584.0, "score": 1, "generation": ["def solution():\n    # 王老师获得的稿费为1780元\n    total_fee = 1780\n    # 超过800元的部分按照20%的税率纳税\n    tax_rate = 0.2\n    # 超过800元的部分\n    excess_amount = total_fee - 800\n    # 税金\n    tax = excess_amount * tax_rate\n    # 王老师实际得到的稿费 = 总稿费 - 税金\n    actual_fee = total_fee - tax\n    # 答案是王老师实际得到的稿费\n    result = actual_fee\n    # 返回答案\n    return result"]}
{"question": "水果店运来15箱苹果，每箱重12千克，水果店运来苹果多少千克？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 水果店运来的箱数为15箱\n    num_boxes = 15\n    # 每箱苹果的重量为12千克\n    weight_per_box = 12\n    # 运来的苹果总重量 = 箱数 * 每箱重量\n    total_weight = num_boxes * weight_per_box\n    # 答案是运来的苹果总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "滨河公园原来有20条船，每天收入360元，照这样计算，现在增加了15条船，每天可以多收入多少元？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 滨河公园原来有20条船\n    original_boats = 20\n    # 原来每天的总收入为360元\n    original_daily_income = 360\n    # 现在增加了15条船\n    additional_boats = 15\n    # 新的总船数 = 原来的船数 + 新增的船数\n    total_boats = original_boats + additional_boats\n    # 每条船平均贡献的收入 = 原来每天的总收入 / 原来的船数\n    income_per_boat = original_daily_income / original_boats\n    # 新增的总收入 = 新的总船数 * 每条船平均贡献的收入\n    additional_income = total_boats * income_per_boat\n    # 每天可以多收入的金额 = 新增的总收入 - 原来每天的总收入\n    extra_income_per_day = additional_income - original_daily_income\n    # 答案是每天可以多收入的金额\n    result = extra_income_per_day\n    # 返回答案\n    return result"]}
{"question": "学校阅览室看书的人，人人有座位，而且座无虚席．过了一会儿，看书的人走了(1/4)，又新来了24人，现在座位不够了，其中8人是2人合坐一个座位，这时在阅览室看书的人有多少？", "target": 84.0, "answer": 107.0, "score": 0, "generation": ["def solution():\n    # 初始阅览室座位数等于初始看书的人数\n    initial_seats = initial_people = 100\n    # 离开的人数是初始人数的1/4\n    leaving_fraction = 1/4\n    # 新来的人数是24人\n    new_people = 24\n    # 两人合坐一个座位的人数是8人\n    double_seats = 8\n    # 离开的人数\n    leaving_people = initial_people * leaving_fraction\n    # 离开后剩余的人数\n    remaining_people = initial_people - leaving_people + new_people\n    # 座位数 = 剩余人数 + 两人合坐一个座位的数量\n    total_seats = remaining_people + double_seats\n    # 答案是在阅览室看书的人数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "某地出租车收费标准为：起步价为6元，3千米后每千米加收1.2元，某人乘坐出租车5千米，则应付款多少元．", "target": 8.4, "answer": 8.4, "score": 1, "generation": ["def solution():\n    # 起步价为6元\n    base_price = 6\n    # 超过3千米后每千米加收1.2元\n    extra_per_km = 1.2\n    # 乘坐的总距离为5千米\n    total_distance = 5\n    # 如果距离小于等于3千米，只需支付起步价\n    if total_distance <= 3:\n        total_price = base_price\n    # 如果距离大于3千米，需要加收额外费用\n    else:\n        extra_distance = total_distance - 3\n        extra_price = extra_distance * extra_per_km\n        total_price = base_price + extra_price\n    # 答案是应付的总费用\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "一种服装现在售价180元，比原来便宜了(3/8)，便宜了多少元？", "target": 108.0, "answer": 67.5, "score": 0, "generation": ["def solution():\n    # 现在的售价为180元\n    current_price = 180\n    # 便宜了(3/8)\n    discount_fraction = 3/8\n    # 便宜的金额 = 现在的售价 * 便宜的比例\n    discount_amount = current_price * discount_fraction\n    # 答案是便宜的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "11+88+66+33+77+55=．", "target": 330.0, "answer": 330.0, "score": 1, "generation": ["def solution():\n    # 计算11+88+66+33+77+55的和\n    result = 11 + 88 + 66 + 33 + 77 + 55\n    # 返回答案\n    return result"]}
{"question": "龟兔赛跑，全程2000米，龟每分钟爬25米，兔每分钟跑320米．兔自以为速度快，在途中睡了一觉，结果龟到终点时，兔离终点还有400米，兔在途中睡了几分钟？", "target": 75.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 全程2000米\n    total_distance = 2000\n    # 龟的速度为每分钟爬25米\n    speed_turtle = 25\n    # 兔的速度为每分钟跑320米\n    speed_rabbit = 320\n    # 兔在睡觉前已经跑了的距离\n    distance_covered_by_rabbit = speed_rabbit * x\n    # 龟到达终点时，兔距离终点还有400米\n    remaining_distance_for_rabbit = total_distance - distance_covered_by_rabbit\n    # 兔在睡觉前已经跑了的时间 = 已经跑的距离 / 兔的速度\n    time_spent_by_rabbit = distance_covered_by_rabbit / speed_rabbit\n    # 答案是兔在睡觉前已经跑了的时间（分钟）\n    result = time_spent_by_rabbit\n    # 返回答案\n    return result"]}
{"question": "长方体的体积是120m^3，长是5米，宽是4米，高=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 长方体的体积是120m^3\n    volume = 120\n    # 长是5米\n    length = 5\n    # 宽是4米\n    width = 4\n    # 高 = 体积 / (长 * 宽)\n    height = volume / (length * width)\n    # 答案是长方体的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "一堆垃圾共280吨，环卫工人第一天运走全部垃圾的20%，第二天运走全部垃圾的45%，还有多少垃圾没运走？", "target": 98.0, "answer": 98.0, "score": 1, "generation": ["def solution():\n    # 垃圾的总重量为280吨\n    total_garbage = 280\n    # 第一天运走的比例为20%\n    first_day_fraction = 0.20\n    # 第二天运走的比例为45%\n    second_day_fraction = 0.45\n    # 第一天运走的垃圾重量 = 总重量 * 第一天比例\n    garbage_first_day = total_garbage * first_day_fraction\n    # 第二天运走的垃圾重量 = 总重量 * 第二天比例\n    garbage_second_day = total_garbage * second_day_fraction\n    # 剩余垃圾重量 = 总重量 - 第一天运走的重量 - 第二天运走的重量\n    remaining_garbage = total_garbage - garbage_first_day - garbage_second_day\n    # 答案是剩余的垃圾重量\n    result = remaining_garbage\n    # 返回答案\n    return result"]}
{"question": "果园里有苹果树120棵，梨树的棵数是苹果树的(2/3)，果园里有梨树多少棵？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 苹果树的数量是120棵\n    num_apple_trees = 120\n    # 梨树的数量是苹果树数量的(2/3)\n    num_pear_trees = (2/3) * num_apple_trees\n    # 答案是果园里梨树的数量\n    result = num_pear_trees\n    # 返回答案\n    return result"]}
{"question": "李叔叔在一栋大楼里乘电梯从地上10层到地上9层要(3/20)分钟，他乘电梯从地上8层到地下1层车库，要用多少分钟？", "target": 1.2, "answer": 0.3, "score": 0, "generation": ["def solution():\n    # 从地上10层到地上9层需要(3/20)分钟\n    time_10_to_9 = 3/20\n    # 从地上8层到地下1层车库，相当于从地上8层到地上9层再到地下1层\n    # 所以总时间 = 从地上8层到地上9层的时间 + 从地上9层到地下1层的时间\n    total_time = time_10_to_9 + time_10_to_9\n    # 答案是乘电梯从地上8层到地下1层车库需要的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "妈妈今年40岁，是小芳的4倍，小芳今年多少岁．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 妈妈今年的年龄为40岁\n    mom_age = 40\n    # 妈妈的年龄是小芳的4倍\n    multiple = 4\n    # 小芳今年的年龄 = 妈妈今年的年龄 / 妈妈和小芳年龄的倍数\n    daughter_age = mom_age / multiple\n    # 答案是小芳今年的年龄\n    result = daughter_age\n    # 返回答案\n    return result"]}
{"question": "强强读一本故事书，第一天读了(3/8)，第二天读了36页，这时一共读了全书的60%．这本故事书一共有多少页？", "target": 160.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天读了(3/8)的比例\n    read_fraction_day1 = 3/8\n    # 第二天读了36页\n    pages_read_day2 = 36\n    # 一共读了全书的60%的比例\n    total_read_fraction = 0.6\n    # 设故事书总页数为x页\n    # 第一天读的页数 = x * 第一天读的比例\n    pages_read_day1 = x * read_fraction_day1\n    # 第二天读的页数 = 36页\n    # 一共读的页数 = 第一天读的页数 + 第二天读的页数\n    total_pages_read = pages_read_day1 + pages_read_day2\n    # 根据一共读了全书的60%的比例，得到方程：一共读的页数 = x * 0.6\n    # 解方程得到故事书总页数x\n    x = total_pages_read / total_read_fraction\n    # 答案是故事书总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "5里面有多少个(1/4)．", "target": 20.0, "answer": 1.25, "score": 0, "generation": ["def solution():\n    # 总数是5\n    total = 5\n    # 每个的比例是1/4\n    fraction = 1/4\n    # 计算有多少个\n    count = total * fraction\n    # 答案是有多少个\n    result = count\n    # 返回答案\n    return result"]}
{"question": "一件运动服原价120元，现在打0.8出售，这件运动服现价多少元．", "target": 96.0, "answer": 96.0, "score": 1, "generation": ["def solution():\n    # 运动服的原价为120元\n    original_price = 120\n    # 打0.8折后的价格 = 原价 * 折扣\n    discounted_price = original_price * 0.8\n    # 答案是现在的价格\n    result = discounted_price\n    # 返回答案\n    return result"]}
{"question": "粮食仓库存有大米1650袋，正好是存有的面粉袋数的6倍．粮库中存有的面粉比大米少多少袋？", "target": 1375.0, "answer": -1375.0, "score": 0, "generation": ["def solution():\n    # 粮食仓库存有大米1650袋\n    num_rice = 1650\n    # 面粉袋数是大米袋数的6倍\n    num_flour = num_rice / 6\n    # 存有的面粉比大米少的袋数 = 面粉袋数 - 大米袋数\n    difference = num_flour - num_rice\n    # 答案是存有的面粉比大米少的袋数\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一盒糖，连盒共重500克，如果吃去40%，剩下的糖连盒重还有340克，求原来盒中糖的重量．", "target": 400.0, "answer": 300.0, "score": 0, "generation": ["def solution():\n    # 连盒共重500克\n    total_weight = 500\n    # 吃去40%后剩下的重量为340克\n    remaining_weight = 340\n    # 吃掉的重量 = 总重量 * 吃掉的比例\n    eaten_weight = total_weight * 0.4\n    # 剩下的糖的重量 = 总重量 - 吃掉的重量\n    remaining_sugar_weight = total_weight - eaten_weight\n    # 原来盒中糖的重量 = 剩下的糖的重量\n    original_sugar_weight = remaining_sugar_weight\n    # 答案是原来盒中糖的重量\n    result = original_sugar_weight\n    # 返回答案\n    return result"]}
{"question": "小芳平均每分打字32个．一份稿子有1250个字，小芳打了30分后，还剩下多少个字没打？", "target": 290.0, "answer": 290.0, "score": 1, "generation": ["def solution():\n    # 小芳平均每分打字32个\n    words_per_minute = 32\n    # 一份稿子有1250个字\n    total_words = 1250\n    # 小芳打了30分\n    minutes_worked = 30\n    # 小芳打字的总数 = 打字速度 * 时间\n    total_words_typed = words_per_minute * minutes_worked\n    # 剩余的字数 = 总字数 - 打字的总数\n    remaining_words = total_words - total_words_typed\n    # 答案是剩余的字数\n    result = remaining_words\n    # 返回答案\n    return result"]}
{"question": "一箱苹果重8千克，吃了(1/4)．还剩多少千克？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 一箱苹果的重量为8千克\n    total_weight = 8\n    # 吃掉的重量占总重量的(1/4)\n    eaten_fraction = 1/4\n    # 吃掉的重量 = 总重量 * 吃掉的比例\n    eaten_weight = total_weight * eaten_fraction\n    # 剩余的重量 = 总重量 - 吃掉的重量\n    remaining_weight = total_weight - eaten_weight\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "水果店星期天卖出香蕉、桔子和菠萝3种水果一共150千克，其中香蕉27.5千克，卖出的桔子的数量是香蕉的3.6倍．水果店星期天卖出菠萝多少千克？", "target": 23.5, "answer": 23.5, "score": 1, "generation": ["def solution():\n    # 一共卖出的水果总重量为150千克\n    total_fruit_sold = 150\n    # 香蕉的重量为27.5千克\n    weight_banana = 27.5\n    # 桔子的重量是香蕉的3.6倍\n    weight_orange = 3.6 * weight_banana\n    # 菠萝的重量 = 总重量 - 香蕉重量 - 桔子重量\n    weight_pineapple = total_fruit_sold - weight_banana - weight_orange\n    # 答案是菠萝的重量\n    result = weight_pineapple\n    # 返回答案\n    return result"]}
{"question": "某玻璃厂要为商场运送1000个玻璃杯，双方商定每个运费为1元．如果打碎一个，这个不但不给运费，而且要赔偿3元，结果运到目的地后结算时，玻璃杯厂共得运费920元，求打碎了几个玻璃杯？", "target": 20.0, "answer": 26.666666666666668, "score": 0, "generation": ["def solution():\n    # 要运送的玻璃杯数量为1000个\n    total_glasses = 1000\n    # 每个完好送到的运费为1元\n    intact_fee = 1\n    # 每个打碎了要赔偿的金额为3元\n    compensation_per_broken = 3\n    # 实际得到的运费为920元\n    actual_fee_received = 920\n    # 总运费 = 完好送到的运费 * 总数量\n    total_intact_fee = intact_fee * total_glasses\n    # 总赔偿 = 实际得到的运费 - 总运费\n    total_compensation = total_intact_fee - actual_fee_received\n    # 打碎的玻璃杯数量 = 总赔偿 / 每个赔偿金额\n    broken_glasses = total_compensation / compensation_per_broken\n    # 答案是打碎了的玻璃杯数量\n    result = broken_glasses\n    # 返回答案\n    return result"]}
{"question": "张师傅与李师傅共同加工1000个零件．张师傅先做了4天，一共做了220个，剩下的由李师傅15天做完，李师傅每天做多少个？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 张师傅做了220个零件\n    parts_done_by_zhang = 220\n    # 张师傅做了4天\n    days_worked_by_zhang = 4\n    # 李师傅共做了1000-220=780个零件\n    parts_done_by_li = 1000 - parts_done_by_zhang\n    # 李师傅做完剩下的零件用了15天\n    days_worked_by_li = 15\n    # 李师傅每天做的零件数 = 剩下的零件数 / 李师傅工作的天数\n    parts_per_day_by_li = parts_done_by_li / days_worked_by_li\n    # 答案是李师傅每天做的零件数\n    result = parts_per_day_by_li\n    # 返回答案\n    return result"]}
{"question": "光明小学有毕业生210人，考入重点中学的占(1/15)，其余升入普通中学，升入普通中学的有多少人？", "target": 196.0, "answer": 196.0, "score": 1, "generation": ["def solution():\n    # 光明小学毕业生总人数为210人\n    total_graduates = 210\n    # 考入重点中学的比例为(1/15)\n    ratio_elite_middle_school = 1/15\n    # 考入重点中学的人数 = 总人数 * 考入重点中学的比例\n    num_elite_middle_school = total_graduates * ratio_elite_middle_school\n    # 其余升入普通中学的人数 = 总人数 - 考入重点中学的人数\n    num_regular_middle_school = total_graduates - num_elite_middle_school\n    # 答案是升入普通中学的人数\n    result = num_regular_middle_school\n    # 返回答案\n    return result"]}
{"question": "用面积为9平方分米的方砖，480块正好铺满，如果用边长为4分米的方砖，需要多少块？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 用面积为9平方分米的方砖，480块正好铺满\n    area_per_tile = 9\n    total_tiles = 480\n    # 计算总面积\n    total_area = area_per_tile * total_tiles\n    # 新的方砖边长为4分米\n    new_side_length = 4\n    # 计算新方砖的面积\n    new_area_per_tile = new_side_length ** 2\n    # 计算需要的新方砖数量\n    new_total_tiles = total_area / new_area_per_tile\n    # 答案是需要的新方砖数量\n    result = new_total_tiles\n    # 返回答案\n    return result"]}
{"question": "小麦上学要走18分钟，她的速度是130米/分．她家到学校有多少米？", "target": 2340.0, "answer": 2340.0, "score": 1, "generation": ["def solution():\n    # 上学的时间为18分钟\n    time_to_school = 18\n    # 小麦的速度是130米/分\n    speed = 130\n    # 她家到学校的距离 = 速度 * 时间\n    distance_to_school = speed * time_to_school\n    # 答案是她家到学校的距离\n    result = distance_to_school\n    # 返回答案\n    return result"]}
{"question": "挖一个长和宽都是5米的长方体菜窖，要使菜窖的容积是50立方米，应该挖多少米深．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 菜窖的长和宽都是5米\n    length = 5\n    width = 5\n    # 菜窖的容积是50立方米\n    volume = 50\n    # 长方体的容积公式为 长 * 宽 * 深度\n    # 所以深度 = 容积 / (长 * 宽)\n    depth = volume / (length * width)\n    # 答案是菜窖应该挖的深度\n    result = depth\n    # 返回答案\n    return result"]}
{"question": "男比女多10人，女比男少10%，女生=多少人？", "target": 90.0, "answer": 50.0, "score": 0, "generation": ["def solution():\n    # 男比女多10人\n    difference = 10\n    # 女比男少10%\n    percentage = 0.10\n    # 设女生人数为x，则男生人数为x + difference\n    # 根据题意得到方程：x = (x + difference) * (1 - percentage)\n    # 解方程得到女生人数\n    num_girls = difference / (2 * percentage)\n    # 答案是女生人数\n    result = num_girls\n    # 返回答案\n    return result"]}
{"question": "李强6月份的生活费为255元，比计划节省了15%，节省了多少元．", "target": 45.0, "answer": 38.25, "score": 0, "generation": ["def solution():\n    # 李强6月份的生活费为255元\n    monthly_expense = 255\n    # 节省了15%\n    saving_percentage = 0.15\n    # 节省的金额 = 生活费 * 节省比例\n    amount_saved = monthly_expense * saving_percentage\n    # 答案是节省的金额\n    result = amount_saved\n    # 返回答案\n    return result"]}
{"question": "东郊果园收获苹果2475千克，装了39筐，还剩1500千克，每筐苹果多少千克？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 收获的苹果总重量为2475千克\n    total_weight = 2475\n    # 装了39筐\n    num_baskets = 39\n    # 剩余的苹果重量为1500千克\n    remaining_weight = 1500\n    # 每筐苹果的重量 = (总重量 - 剩余重量) / 筐的数量\n    weight_per_basket = (total_weight - remaining_weight) / num_baskets\n    # 答案是每筐苹果的重量\n    result = weight_per_basket\n    # 返回答案\n    return result"]}
{"question": "客、货两车分别从相距900千米的甲乙两城同时出发，相向而行．已知客车从甲城到乙城需要10小时，货车从乙城到甲城需要15小时．两车出发后多少小时相遇．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 甲乙两城相距900千米\n    distance = 900\n    # 客车从甲城到乙城需要10小时\n    time_client = 10\n    # 货车从乙城到甲城需要15小时\n    time_cargo = 15\n    # 客车速度 = 距离 / 时间\n    speed_client = distance / time_client\n    # 货车速度 = 距离 / 时间\n    speed_cargo = distance / time_cargo\n    # 两车相向而行，两车相对速度为客车速度与货车速度之和\n    relative_speed = speed_client + speed_cargo\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "我国岛屿海岸线长约14000km，是大陆海岸线长的(7/9)；大陆海岸线长是陆地边界线长的(9/11)．我国陆地边界线长多少km？", "target": 22000.0, "answer": 13308.641975308641, "score": 0, "generation": ["def solution():\n    # 我国岛屿海岸线长约14000km\n    island_coastline = 14000\n    # 大陆海岸线长是大陆边界线长的(9/11)\n    mainland_coastline_ratio = 7/9\n    # 大陆海岸线长是大陆边界线长的(9/11)\n    mainland_border_ratio = 9/11\n    # 大陆海岸线长 = 我国岛屿海岸线长 * 大陆海岸线长比例\n    mainland_coastline = island_coastline * mainland_coastline_ratio\n    # 大陆边界线长 = 大陆海岸线长 / 大陆海岸线长比例\n    mainland_border = mainland_coastline / mainland_border_ratio\n    # 答案是我国陆地边界线长\n    result = mainland_border\n    # 返回答案\n    return result"]}
{"question": "一个棱长为20cm的正方体容器里装了一半的水，现将一块铁块投入容器中，铁块完全沉没在水底，水面上升了2cm，这块铁块的体积=多少立方厘米？", "target": 800.0, "answer": -3200.0, "score": 0, "generation": ["def solution():\n    # 正方体容器的棱长为20cm\n    side_length = 20\n    # 容器的体积 = 棱长的立方\n    container_volume = side_length ** 3\n    # 容器中装了一半的水，所以水的体积 = 容器的体积的一半\n    water_volume = container_volume / 2\n    # 投入铁块后，水面上升了2cm，表示铁块的体积 = 2 * 容器的底面积\n    iron_volume = 2 * (side_length ** 2)\n    # 铁块的体积 = 铁块的体积 - 水的体积\n    displaced_water_volume = iron_volume - water_volume\n    # 答案是铁块的体积\n    result = displaced_water_volume\n    # 返回答案\n    return result"]}
{"question": "有78吨煤，已经运了2次，每次运16吨，还剩多少吨没运？", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 初始煤的总重量为78吨\n    total_coal = 78\n    # 每次运输的重量为16吨\n    each_transport = 16\n    # 已经运输的次数为2次\n    num_transports = 2\n    # 已经运输的总重量 = 每次运输的重量 * 运输次数\n    total_transport_weight = each_transport * num_transports\n    # 剩余未运输的重量 = 初始总重量 - 已经运输的总重量\n    remaining_coal = total_coal - total_transport_weight\n    # 答案是剩余未运输的重量\n    result = remaining_coal\n    # 返回答案\n    return result"]}
{"question": "135与815的和除以95，商=？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 第一个数是135\n    num1 = 135\n    # 第二个数是815\n    num2 = 815\n    # 两数的和\n    total = num1 + num2\n    # 商 = 两数的和除以95\n    quotient = total / 95\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "服装厂原来做一套学生服用2.6米布料，采用新裁剪法后，每套节约用布0.3米．原来做460套学生服的布，现在可以做多少套？", "target": 520.0, "answer": 519.9999999999999, "score": 1, "generation": ["def solution():\n    # 原来做460套学生服需要的总布料\n    original_total_fabric = 460 * 2.6\n    # 每套节约用布0.3米\n    fabric_saving_per_set = 0.3\n    # 新裁剪法后每套学生服需要的布料\n    fabric_per_set = 2.6 - fabric_saving_per_set\n    # 现在可以做的套数 = 原来的总布料 / 新裁剪法后每套需要的布料\n    new_total_sets = original_total_fabric / fabric_per_set\n    # 答案是现在可以做的套数\n    result = new_total_sets\n    # 返回答案\n    return result"]}
{"question": "乐乐从甲地步行去乙地，第一小时行了全程的(1/4)，第二小时行了全程的20%，这时离乙地还有22千米．甲、乙两地相距多少千米？", "target": 40.0, "answer": 31.9, "score": 0, "generation": ["def solution():\n    # 第一小时行了全程的(1/4)，第二小时行了全程的20%\n    distance_left = 22\n    # 第一小时行的距离\n    distance_first_hour = distance_left / 4\n    # 第二小时行的距离\n    distance_second_hour = distance_left * 0.2\n    # 总距离 = 第一小时行的距离 + 第二小时行的距离 + 剩余距离\n    total_distance = distance_first_hour + distance_second_hour + distance_left\n    # 答案是甲、乙两地相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一个数的(4/5)是80，这个数的(1/4)=．", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 一个数的(4/5)是80\n    num = 80 / (4/5)\n    # 这个数的(1/4)\n    result = num * (1/4)\n    # 返回答案\n    return result"]}
{"question": "一段公路，汽车45分行了60千米，相当于这段路全长的(2/5)，这段路全长多少千米？", "target": 150.0, "answer": 0.4, "score": 0, "generation": ["def solution():\n    # 汽车行驶的距离为60千米\n    distance_covered = 60\n    # 相当于全长的(2/5)\n    fraction_of_total = 2/5\n    # 汽车行驶的距离占全长的比例 = 行驶的距离 / 全长\n    ratio = distance_covered / fraction_of_total\n    # 这段路全长 = 行驶的距离 / 比例\n    total_distance = distance_covered / ratio\n    # 答案是这段路的全长\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一箱矿泉水24瓶，每瓶1.8元．买一箱一共需要多少元？", "target": 43.2, "answer": 43.2, "score": 1, "generation": ["def solution():\n    # 一箱矿泉水有24瓶\n    num_bottles = 24\n    # 每瓶的价格是1.8元\n    price_per_bottle = 1.8\n    # 一箱矿泉水的总价格 = 瓶数 * 每瓶的价格\n    total_price = num_bottles * price_per_bottle\n    # 答案是一箱矿泉水的总价格\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "丽丽看一本书共240页，她已经看了这本书的40%，还剩多少页．", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为240页\n    total_pages = 240\n    # 她已经看了这本书的40%\n    read_percentage = 0.4\n    # 已经看了的页数 = 总页数 * 已经看的比例\n    pages_read = total_pages * read_percentage\n    # 剩余的页数 = 总页数 - 已经看了的页数\n    remaining_pages = total_pages - pages_read\n    # 答案是剩余的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "红星小学买了一些体育用品．买足球用去了135.60元，买篮球比足球多花了12.20元．红星小学买足球和篮球共花了多少元钱？", "target": 283.4, "answer": 283.4, "score": 1, "generation": ["def solution():\n    # 买足球花费了135.60元\n    cost_soccer = 135.60\n    # 买篮球比买足球多花了12.20元\n    extra_cost_basketball = 12.20\n    # 买足球和篮球共花费了 = 买足球花费 + 买篮球比足球多花费的部分\n    total_cost = cost_soccer + (cost_soccer + extra_cost_basketball)\n    # 答案是买足球和篮球共花费的总金额\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "某服装厂计划每天加工服装125件，实际20天加工了3000件，实际每天比计划多加工服装多少件？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 计划每天加工服装的数量为125件\n    planned_daily_production = 125\n    # 实际加工天数为20天\n    actual_days = 20\n    # 实际加工服装的总数量为3000件\n    actual_total_production = 3000\n    # 计划加工服装的总数量 = 计划每天加工数量 * 实际加工天数\n    planned_total_production = planned_daily_production * actual_days\n    # 实际每天比计划多加工的服装数量 = (实际加工总数量 - 计划加工总数量) / 实际加工天数\n    extra_production_per_day = (actual_total_production - planned_total_production) / actual_days\n    # 答案是实际每天比计划多加工的服装数量\n    result = extra_production_per_day\n    # 返回答案\n    return result"]}
{"question": "四年级一班有34人，共借书544本，四年级一班平均每人借书多少本．", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 四年级一班有34人\n    num_students = 34\n    # 共借书544本\n    total_books = 544\n    # 平均每人借书多少本 = 共借书数 / 班级人数\n    average_books_per_student = total_books / num_students\n    # 答案是平均每人借书多少本\n    result = average_books_per_student\n    # 返回答案\n    return result"]}
{"question": "妈妈买了5米布，给小明做了2套同样的衣服，还剩下1.4米，小明的每套服装用不多少米？", "target": 1.8, "answer": 1.8, "score": 1, "generation": ["def solution():\n    # 妈妈买了5米布\n    total_fabric = 5\n    # 做了2套同样的衣服，还剩下1.4米\n    remaining_fabric = 1.4\n    # 用掉的布料 = 总布料 - 剩余布料\n    used_fabric = total_fabric - remaining_fabric\n    # 每套服装用的布料 = 用掉的布料 / 套数\n    fabric_per_outfit = used_fabric / 2\n    # 答案是每套服装用的布料\n    result = fabric_per_outfit\n    # 返回答案\n    return result"]}
{"question": "某校有女生280人，女生人数是男生的(4/5)．男生有多少人？", "target": 350.0, "answer": 224.0, "score": 0, "generation": ["def solution():\n    # 学校女生人数为280人\n    num_girls = 280\n    # 女生人数是男生人数的(4/5)\n    ratio_boys_to_girls = 5/4\n    # 男生人数 = 女生人数 / 比例\n    num_boys = num_girls / ratio_boys_to_girls\n    # 答案是男生人数\n    result = num_boys\n    # 返回答案\n    return result"]}
{"question": "小红有2件背心，3条短裤，她穿衣时有多少种搭配方法．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 小红有2件背心\n    num_vests = 2\n    # 小红有3条短裤\n    num_shorts = 3\n    # 搭配方法 = 背心数量 * 短裤数量\n    total_outfits = num_vests * num_shorts\n    # 答案是搭配方法的总数\n    result = total_outfits\n    # 返回答案\n    return result"]}
{"question": "一辆货车从A地把苹果运到B地，去的时候每小时行40千米，用了6小时到达，回来的时候每小时行60千米，需要几小时才能回到A地？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 去的速度为40千米/小时\n    speed_to_B = 40\n    # 回来的速度为60千米/小时\n    speed_to_A = 60\n    # 去的时间为6小时\n    time_to_B = 6\n    # 去的距离 = 回来的距离\n    distance_to_B = speed_to_B * time_to_B\n    # 回来的时间 = 去的距离 / 回来的速度\n    time_to_A = distance_to_B / speed_to_A\n    # 答案是回来的时间\n    result = time_to_A\n    # 返回答案\n    return result"]}
{"question": "小芳在计算除法时，把除数32错写成320，结果得到商是48．正确的商应该=．", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 错误的除数\n    wrong_divisor = 320\n    # 错误得到的商\n    wrong_quotient = 48\n    # 正确的除数\n    correct_divisor = 32\n    # 正确的商 = 错误得到的商 * (错误的除数 / 正确的除数)\n    correct_quotient = wrong_quotient * (wrong_divisor / correct_divisor)\n    # 答案是正确的商\n    result = correct_quotient\n    # 返回答案\n    return result"]}
{"question": "从30里面减去40个0.25的和，再乘0.05，积=？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 从30里面减去40个0.25的和\n    subtraction_result = 30 - (40 * 0.25)\n    # 再乘以0.05\n    product = subtraction_result * 0.05\n    # 答案是乘积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "六年级（1）班参加义务劳动，计划派16名同学去植树，平均每人要植3棵，后来增加了一些同学，这时平均每人只需植树2棵．问增加了多少名同学？", "target": 8.0, "answer": -8.0, "score": 0, "generation": ["def solution():\n    # 计划派去植树的同学数为16名\n    planned_students = 16\n    # 每人计划植树的棵数为3棵\n    planned_trees_per_student = 3\n    # 后来平均每人只需植树2棵\n    new_trees_per_student = 2\n    # 原始需要植树的总棵数 = 计划同学数 * 计划每人植树的棵数\n    planned_total_trees = planned_students * planned_trees_per_student\n    # 新的总植树数 = 计划同学数 * 新的每人植树的棵数\n    new_total_trees = planned_students * new_trees_per_student\n    # 增加的同学数 = (新的总植树数 - 原始需要植树的总棵数) / 新的每人植树的棵数\n    additional_students = (new_total_trees - planned_total_trees) / new_trees_per_student\n    # 答案是增加的同学数\n    result = additional_students\n    # 返回答案\n    return result"]}
{"question": "4（1）班50人中有28人喜欢吃香蕉，27人喜欢吃苹果，14人两种水果都喜欢吃．请问有多少人喜欢的不是这两种水果？", "target": 9.0, "answer": "", "score": 0, "generation": ["首先，我们可以使用容斥原理来解决这个问题。容斥原理是一种集合论中常用的计数方法，用于计算多个集合的并集的元素个数。\n\n让A表示喜欢吃香蕉的人数，B表示喜欢吃苹果的人数，那么喜欢吃香蕉或者苹果的人数为A + B - 交集AB。根据题意，A为28，B为27，交集AB为14。\n\n所以，喜欢吃香蕉或者苹果的人数为28 + 27 - 14 = 41人。\n\n因此，不喜欢吃香蕉和苹果的人数为总人数减去喜欢吃香蕉或者苹果的人数，即50 - 41 = 9人。\n\n接下来，我们将这个问题用Python代码来实现：\n\n```python\ndef solution():\n    # 喜欢吃香蕉的人数为28人\n    num_banana = 28\n    # 喜欢吃苹果的人数为27人\n    num_apple = 27\n    # 两种水果都喜欢吃的人数为14人\n    num_both = 14\n    # 总人数为50人\n    total_students = 50\n    # 喜欢吃香蕉或者苹果的人数为A + B - 交集AB\n    num_either = num_banana + num_apple - num_both\n    # 不喜欢这两种水果的人数为总人数减去喜欢吃香蕉或者苹果的人数\n    num_neither = total_students - num_either\n    # 答案是不喜欢这两种水果的人数\n    result = num_neither\n    # 返回答案\n    return result\n```"]}
{"question": "用废纸生产再生纸的再生率为80%，利民造纸厂用回收的废纸生产了120吨再生纸．这些再生纸需要回收多少吨废纸才能生产出来？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 再生率为80%\n    recycling_rate = 0.8\n    # 生产的再生纸重量为120吨\n    recycled_paper_weight = 120\n    # 回收的废纸重量 = 生产的再生纸重量 / 再生率\n    recycled_paper_needed = recycled_paper_weight / recycling_rate\n    # 答案是需要回收的废纸重量\n    result = recycled_paper_needed\n    # 返回答案\n    return result"]}
{"question": "奥林匹克火炬在中国某省4天传递了820千米，平均每天传递了多少千米？", "target": 205.0, "answer": 205.0, "score": 1, "generation": ["def solution():\n    # 奥林匹克火炬在中国某省传递了820千米\n    total_distance = 820\n    # 传递的总天数为4天\n    total_days = 4\n    # 平均每天传递的千米数 = 总距离 / 总天数\n    average_distance_per_day = total_distance / total_days\n    # 答案是平均每天传递的千米数\n    result = average_distance_per_day\n    # 返回答案\n    return result"]}
{"question": "育才学校有男生785人，女生576人，育才学校一共有学生多少人？", "target": 1361.0, "answer": 1361.0, "score": 1, "generation": ["def solution():\n    # 男生人数为785人\n    num_boys = 785\n    # 女生人数为576人\n    num_girls = 576\n    # 总学生人数 = 男生人数 + 女生人数\n    total_students = num_boys + num_girls\n    # 答案是总学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "51的28倍大约=？", "target": 1428.0, "answer": 1428.0, "score": 1, "generation": ["def solution():\n    # 计算51的28倍\n    result = 51 * 28\n    # 答案是51的28倍\n    return result"]}
{"question": "拖拉机耕一块地，每时耕这块地的(1/9)，一天工作8时，耕了这块地的多少．", "target": 0.8888888888888888, "answer": 0.8888888888888888, "score": 1, "generation": ["def solution():\n    # 一天工作8小时\n    hours_per_day = 8\n    # 每小时耕地的比例为(1/9)\n    fraction_per_hour = 1/9\n    # 一天工作完成的比例 = 每小时的比例 * 工作小时数\n    total_fraction = fraction_per_hour * hours_per_day\n    # 答案是一天工作完成的比例\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "全班女生和男生的人数比是1：3．一次考试，男生平均分是80，全班的平均分是82，女生平均分=多少分．", "target": 88.0, "answer": -37.0, "score": 0, "generation": ["def solution():\n    # 全班女生和男生的人数比是1：3\n    ratio = 1/3\n    # 男生的平均分是80\n    avg_score_boys = 80\n    # 全班的平均分是82\n    avg_score_class = 82\n    # 女生的平均分设为x\n    avg_score_girls = (3 * avg_score_class - 4 * avg_score_boys) / 2\n    # 答案是女生的平均分\n    result = avg_score_girls\n    # 返回答案\n    return result"]}
{"question": "修一段长(7/8)千米的公路，已经修了(3/5)千米，剩下的比已修的少多少千米？", "target": 0.325, "answer": 0.32499999999999996, "score": 1, "generation": ["def solution():\n    # 公路的总长度为(7/8)千米\n    total_length = 7/8\n    # 已经修的长度为(3/5)千米\n    repaired_length = 3/5\n    # 剩下的长度 = 总长度 - 已经修的长度\n    remaining_length = total_length - repaired_length\n    # 剩下的比已修的少的长度 = 已经修的长度 - 剩下的长度\n    difference = repaired_length - remaining_length\n    # 答案是剩下的比已修的少的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一本书有400页，小红已经看了265页，余下的准备9天看完，平均每天要看多少个好页？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为400页\n    total_pages = 400\n    # 小红已经看了265页\n    pages_read = 265\n    # 余下的页数\n    remaining_pages = total_pages - pages_read\n    # 准备用9天看完\n    days_left = 9\n    # 平均每天需要看的页数 = 余下的页数 / 剩余天数\n    pages_per_day = remaining_pages / days_left\n    # 答案是平均每天需要看的页数\n    result = pages_per_day\n    # 返回答案\n    return result"]}
{"question": "纸箱里放有大小、质量完全相同的塑料球，其中2个绿的、3个黄的、5个红的．从中任意摸一个，摸出红球的可能性=．", "target": 0.5, "answer": "", "score": 0, "generation": ["首先，计算摸出红球的总可能性，即红球的数量除以总球的数量。\n\n```python\ndef solution():\n    # 红球的数量为5个\n    num_red_balls = 5\n    # 总球的数量为2个绿的 + 3个黄的 + 5个红的 = 10个\n    total_balls = 2 + 3 + 5\n    # 摸出红球的可能性 = 红球的数量 / 总球的数量\n    probability_red_ball = num_red_balls / total_balls\n    # 答案是摸出红球的可能性\n    result = probability_red_ball\n    # 返回答案\n    return result\n```"]}
{"question": "今年比去年减产(1/5)，今年产量是去年的多少．", "target": 0.8, "answer": "", "score": 0, "generation": ["今年比去年减产(1/5)，意味着今年的产量是去年产量的(1 - 1/5)倍，即去年产量的4/5倍。\n\n# solution in Python:\n\ndef solution():\n    # 去年的产量为1\n    last_year_yield = 1\n    # 今年的产量是去年产量的4/5倍\n    this_year_yield = last_year_yield * (4/5)\n    # 答案是今年的产量\n    result = this_year_yield\n    # 返回答案\n    return result"]}
{"question": "某人在一次选举中，需全部选票的(2/3)才能当选，计算全部选票的(3/4)后，他得到的选票已达到当选选票数的(5/6)，他还需要得到剩下选票的多少才能当选．", "target": 0.4444444444444444, "answer": "", "score": 0, "generation": ["首先，计算全部选票的(3/4)后，他得到的选票数：\n全部选票的(3/4) = 3/4\n得到的选票数 = 全部选票的(3/4) * 全部选票的(2/3) = (3/4) * (2/3) = 1/2\n\n接着，计算他还需要得到剩下选票的多少才能当选：\n还需要得到的选票数 = 当选选票数的(5/6) - 得到的选票数 = 5/6 - 1/2 = 1/3\n\n因此，他还需要得到剩下选票的数量为1/3。\n\n```python\ndef solution():\n    # 计算全部选票的(3/4)后，他得到的选票数\n    votes_obtained = 1/2\n    # 计算他还需要得到剩下选票的数量\n    remaining_votes_needed = 5/6 - votes_obtained\n    # 答案是他还需要得到剩下选票的数量\n    result = remaining_votes_needed\n    # 返回答案\n    return result\n```"]}
{"question": "小明骑自行车从家到学校，已知他每分钟走310米，走12分钟，距学校还有210米，他家距学校多远？", "target": 3930.0, "answer": 3930.0, "score": 1, "generation": ["def solution():\n    # 小明每分钟走310米\n    speed = 310\n    # 小明走了12分钟，即走了12 * 310 米\n    distance_covered = 12 * speed\n    # 距学校还有210米，设家到学校的距离为x米\n    total_distance = distance_covered + 210\n    # x = 12 * 310 + 210\n    distance_home_to_school = total_distance\n    # 答案是家到学校的距离\n    result = distance_home_to_school\n    # 返回答案\n    return result"]}
{"question": "商场开展店庆活动，一台冰箱打0.8后是2400元，这台冰箱原价多少元？", "target": 3000.0, "answer": 3000.0, "score": 1, "generation": ["def solution():\n    # 打折后的价格为2400元\n    discounted_price = 2400\n    # 打折比例为0.8\n    discount_rate = 0.8\n    # 原价 = 打折后价格 / 打折比例\n    original_price = discounted_price / discount_rate\n    # 答案是冰箱的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "果园里苹果树比梨树多420棵，梨树的棵树是苹果树的(3/5)，苹果树有多少棵？", "target": 1050.0, "answer": 1050.0, "score": 1, "generation": ["def solution():\n    # 苹果树比梨树多420棵\n    diff_trees = 420\n    # 梨树的数量是苹果树数量的(3/5)\n    pear_to_apple_ratio = 3/5\n    # 设苹果树数量为x，则梨树数量为x*(3/5)，且苹果树数量比梨树数量多420棵，因此有方程：x - x*(3/5) = 420\n    # 解方程得到苹果树数量\n    num_apple_trees = diff_trees / (1 - pear_to_apple_ratio)\n    # 答案是苹果树的数量\n    result = num_apple_trees\n    # 返回答案\n    return result"]}
{"question": "一种电脑现价每台3800元，比原来降低了200元，降低了百分之几？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 电脑现价每台为3800元\n    current_price = 3800\n    # 电脑原价每台比现价降低了200元\n    discount_amount = 200\n    # 降价百分比 = 降价金额 / 原价 * 100%\n    discount_percentage = (discount_amount / (current_price + discount_amount)) * 100\n    # 答案是降低的百分比\n    result = discount_percentage\n    # 返回答案\n    return result"]}
{"question": "汽车的现价比原价降低了(1/7)，现价是原价的((())/(()))．", "target": 0.8571428571428571, "answer": "", "score": 0, "generation": ["def solution():\n    # 原价与现价的比例为6:7\n    original_ratio = 6\n    current_ratio = 7\n    # 降价比例为1/7\n    discount_fraction = 1/7\n    # 现价是原价的(6/7)，即现价比原价为7:6\n    # 假设原价为6x，现价为7x，根据降价比例有 7x = 6x - 6x*(1/7)\n    # 解方程得 x = 42，即原价为42，现价为49\n    original_price = 42\n    current_price = 49\n    # 答案是现价与原价\n    result = current_price, original_price\n    # 返回答案\n    return result"]}
{"question": "果园去年收苹果4500千克，比前年增25%，前年收苹果多少千克？", "target": 3600.0, "answer": 3600.0, "score": 1, "generation": ["def solution():\n    # 去年收的苹果数量为4500千克\n    apples_last_year = 4500\n    # 增长了25%，相当于前年的苹果数量是去年数量的0.8倍\n    apples_two_years_ago = apples_last_year / 1.25\n    # 答案是前年收的苹果数量\n    result = apples_two_years_ago\n    # 返回答案\n    return result"]}
{"question": "水果店运来25筐桃子，桃子的筐数是苹果的(5/6)，运来桃子和苹果一共多少筐？", "target": 55.0, "answer": 45.833333333333336, "score": 0, "generation": ["def solution():\n    # 桃子的筐数是苹果的(5/6)\n    apple_baskets = 25\n    peach_baskets = (5/6) * apple_baskets\n    # 运来桃子和苹果一共的筐数 = 桃子的筐数 + 苹果的筐数\n    total_baskets = apple_baskets + peach_baskets\n    # 答案是运来桃子和苹果一共的筐数\n    result = total_baskets\n    # 返回答案\n    return result"]}
{"question": "机械加工厂加工一台机器原来需要1.2吨钢材．后来采用了新科技，每台只需要0.8吨钢材．现在加工300台机器的钢材，原来做多少台？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 原来加工一台机器需要的钢材重量为1.2吨\n    original_steel_per_machine = 1.2\n    # 现在采用新科技，每台只需要0.8吨钢材\n    new_steel_per_machine = 0.8\n    # 现在加工300台机器的钢材总重量\n    total_steel = 300 * new_steel_per_machine\n    # 原来加工多少台机器 = 总钢材重量 / 原来每台所需钢材重量\n    original_num_machines = total_steel / original_steel_per_machine\n    # 答案是原来加工的机器数量\n    result = original_num_machines\n    # 返回答案\n    return result"]}
{"question": "少年宫乐队有女生18人，男生17人．合唱队的人数是乐队的4倍，合唱队有多少人？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 少年宫乐队女生人数为18人\n    num_girls = 18\n    # 少年宫乐队男生人数为17人\n    num_boys = 17\n    # 合唱队的人数是乐队的4倍\n    total_members = 4 * (num_girls + num_boys)\n    # 答案是合唱队的人数\n    result = total_members\n    # 返回答案\n    return result"]}
{"question": "商店以每枝10元的价格购进一批钢笔，加上40%的利润以后定价出售，当卖出这批钢笔的(3/4)时就已经获利240元．这批钢笔共有多少枝？", "target": 80.0, "answer": 0.75, "score": 0, "generation": ["def solution():\n    # 每枝钢笔的购进价格为10元\n    cost_price_per_pen = 10\n    # 销售价格是购进价格加上40%的利润\n    selling_price_per_pen = cost_price_per_pen * 1.4\n    # 已获利的金额为240元\n    profit_made = 240\n    # 销售了总数的(3/4)时已经获利240元\n    profit_fraction = 3/4\n    # 总获利 = 总数 * 单价 * 获利比例\n    total_profit = profit_fraction * selling_price_per_pen\n    # 因为总获利为240元，所以总数 = 总获利 / 单价\n    total_pens = total_profit / selling_price_per_pen\n    # 答案是这批钢笔的总数\n    result = total_pens\n    # 返回答案\n    return result"]}
{"question": "鸡的孵化期是21天，鸭的孵化期比鸡长(1/3)，鸭的孵化期=多少天？", "target": 28.0, "answer": 28.0, "score": 1, "generation": ["def solution():\n    # 鸡的孵化期是21天\n    chicken_incubation_period = 21\n    # 鸭的孵化期比鸡长(1/3)\n    duck_longer_than_chicken = 1/3\n    # 鸭的孵化期 = 鸡的孵化期 + 鸡的孵化期 * 鸭比鸡长的比例\n    duck_incubation_period = chicken_incubation_period + chicken_incubation_period * duck_longer_than_chicken\n    # 答案是鸭的孵化期\n    result = duck_incubation_period\n    # 返回答案\n    return result"]}
{"question": "五年级有学生180人，五年级比六年级的(5/9)还多15人，六年级有多少人？", "target": 297.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 五年级的学生人数为180人\n    num_fifth_grade = 180\n    # 五年级比六年级的(5/9)还多15人\n    difference = 15\n    # 五年级比六年级多的人数 = 六年级人数 * (5/9)\n    extra_students = num_fifth_grade - num_sixth_grade\n    # 五年级人数 = 六年级人数 + 15\n    num_sixth_grade = (num_fifth_grade - difference) / (5/9)\n    # 答案是六年级的人数\n    result = num_sixth_grade\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地出发，3小时行了195千米，照这样的速度，再行4小时就可到达乙地．甲、乙两地相距多少千米？", "target": 455.0, "answer": 111.42857142857143, "score": 0, "generation": ["def solution():\n    # 汽车行驶的时间\n    time_a = 3\n    time_b = 4\n    # 汽车行驶的距离\n    distance_a = 195\n    # 甲地到乙地的距离为 x\n    # 甲地到乙地的速度 = x / (time_a + time_b)\n    speed = distance_a / (time_a + time_b)\n    # 甲地到乙地的距离 = 速度 * time_b\n    distance = speed * time_b\n    # 答案是甲地到乙地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "小明有课外书48本，是小兰的(3/4)，是小红的(6/7)，小红比小兰多多少本书？", "target": 8.0, "answer": 5.142857142857139, "score": 0, "generation": ["def solution():\n    # 小明有的课外书数量为48本\n    num_books_ming = 48\n    # 小兰拥有的课外书数量是小明的(3/4)\n    num_books_lan = (3/4) * num_books_ming\n    # 小红拥有的课外书数量是小明的(6/7)\n    num_books_hong = (6/7) * num_books_ming\n    # 小红比小兰多的书数量 = 小红的书数量 - 小兰的书数量\n    difference_books = num_books_hong - num_books_lan\n    # 答案是小红比小兰多的书数量\n    result = difference_books\n    # 返回答案\n    return result"]}
{"question": "刘校长带1300元去买篮球，买了16个后还剩20元，平均每个篮球多少元？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 刘校长带去买篮球的总金额为1300元\n    total_money = 1300\n    # 购买篮球后剩余的金额为20元\n    remaining_money = 20\n    # 购买篮球的数量为16个\n    num_basketballs = 16\n    # 实际花费的金额 = 总金额 - 剩余金额\n    actual_spent = total_money - remaining_money\n    # 每个篮球的价格 = 实际花费的金额 / 购买的篮球数量\n    price_per_basketball = actual_spent / num_basketballs\n    # 答案是每个篮球的价格\n    result = price_per_basketball\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3袋粮食重量比是3：4：5，已知甲、乙共重700克，求丙袋的重量=？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 甲、乙、丙3袋粮食重量比是3：4：5\n    # 甲、乙的总重量为700克\n    # 设甲袋的重量为3x，乙袋的重量为4x，则3x + 4x = 700\n    # 解方程得到x = 100\n    # 丙袋的重量为5x = 500克\n    weight_c = 5 * 100\n    # 答案是丙袋的重量\n    result = weight_c\n    # 返回答案\n    return result"]}
{"question": "超市运来45辆红色自行车，15辆黄色自行车．已经售出全部自行车的(2/3)，售出了多少辆？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 超市运来的红色自行车数量为45辆\n    num_red_bikes = 45\n    # 超市运来的黄色自行车数量为15辆\n    num_yellow_bikes = 15\n    # 售出的比例为(2/3)\n    sold_fraction = 2/3\n    # 总共运来的自行车数量\n    total_bikes = num_red_bikes + num_yellow_bikes\n    # 售出的自行车数量 = 总共自行车数量 * 售出比例\n    sold_bikes = total_bikes * sold_fraction\n    # 答案是售出的自行车数量\n    result = sold_bikes\n    # 返回答案\n    return result"]}
{"question": "一袋年奶3元钱，36元钱可以买到多少袋牛奶．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 一袋牛奶的价格为3元\n    price_per_bag = 3\n    # 总共36元可以买到的牛奶袋数 = 总金额 / 每袋价格\n    num_bags = 36 // price_per_bag\n    # 答案是可以买到的牛奶袋数\n    result = num_bags\n    # 返回答案\n    return result"]}
{"question": "服装厂要生产6000套服装，前5天已经生产了这批服装的40%，余下的服装要在6天内完成，平均每天要生产多少套服装？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 要生产的服装总数为6000套\n    total_clothes = 6000\n    # 前5天已经生产了40%的服装\n    produced_fraction = 0.4\n    # 前5天生产的服装数量 = 总数 * 生产比例\n    clothes_produced = total_clothes * produced_fraction\n    # 剩余需要生产的服装数量 = 总数 - 前5天生产的数量\n    remaining_clothes = total_clothes - clothes_produced\n    # 剩余天数为6天\n    remaining_days = 6\n    # 平均每天需要生产的服装数量 = 剩余需要生产的数量 / 剩余天数\n    clothes_per_day = remaining_clothes / remaining_days\n    # 答案是平均每天需要生产的服装数量\n    result = clothes_per_day\n    # 返回答案\n    return result"]}
{"question": "□/7=26…6，□里的数=．", "target": 188.0, "answer": "", "score": 0, "generation": ["这道题目是要求解一个除法算式，其中除数是7，商是26，余数是6，我们需要找到被除数是多少。\n\nThis question is asking to solve a division problem where the divisor is 7, the quotient is 26, and the remainder is 6. We need to find out what the dividend is. \n\n```python\ndef solution():\n    # 除数\n    divisor = 7\n    # 商\n    quotient = 26\n    # 余数\n    remainder = 6\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result\n```"]}
{"question": "一个西瓜被爸爸平均切成数块．爸爸和妈妈吃了这个西瓜的(3/4)，小强吃了2块，3人正好把这个西瓜吃完．这个西瓜被平均切成了多少块？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 爸爸和妈妈吃了西瓜的(3/4)\n    fraction_eaten_by_parents = 3/4\n    # 小强吃了2块\n    pieces_eaten_by_XiaoQiang = 2\n    # 三人正好把西瓜吃完，所以剩下的部分是1 - (3/4) = 1/4\n    remaining_fraction = 1/4\n    # 小强吃的2块是剩下部分的一部分，所以剩下的部分要被平均切分成n块，满足2/n = 1/4\n    total_pieces = pieces_eaten_by_XiaoQiang / remaining_fraction\n    # 答案是这个西瓜被平均切成的总块数\n    result = total_pieces\n    # 返回答案\n    return result"]}
{"question": "2005*20062006-2006*20052005=．", "target": 0.0, "answer": 0.0, "score": 1, "generation": ["def solution():\n    # 计算表达式的值\n    result = 2005 * 20062006 - 2006 * 20052005\n    # 返回答案\n    return result"]}
{"question": "已知两个数的商是4，而这两个数的差是39，那么这两个数中较小的数=．", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 两个数的商是4\n    quotient = 4\n    # 两个数的差是39\n    difference = 39\n    # 设较小的数为x，较大的数为y\n    # 则有 y = 4x  (1)\n    # 且有 y - x = 39  (2)\n    # 将(1)代入(2)，得到 4x - x = 39\n    # 解方程得 x = 13\n    smaller_number = 13\n    # 答案是较小的数\n    result = smaller_number\n    # 返回答案\n    return result"]}
{"question": "水果店运来410千克水果，上午卖出139千克，下午卖出183千克，还剩多少千克？", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 水果店运来的水果总重量为410千克\n    total_fruit_weight = 410\n    # 上午卖出的水果重量为139千克\n    morning_sold_weight = 139\n    # 下午卖出的水果重量为183千克\n    afternoon_sold_weight = 183\n    # 总共卖出的水果重量 = 上午卖出重量 + 下午卖出重量\n    total_sold_weight = morning_sold_weight + afternoon_sold_weight\n    # 剩余的水果重量 = 总重量 - 总共卖出的重量\n    remaining_weight = total_fruit_weight - total_sold_weight\n    # 答案是剩余的水果重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "一桶油用去40%，还剩84千克，这桶油原来有多少千克？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 油桶原来的重量为x千克\n    # 用去40%后剩下84千克\n    # 剩余油量 = 原油量 * (1 - 40%)\n    # 84 = x * (1 - 0.4)\n    # 解方程得到原油量\n    original_weight = 84 / (1 - 0.4)\n    # 答案是油桶原来的重量\n    result = original_weight\n    # 返回答案\n    return result"]}
{"question": "2008年奥运会各项比赛门票销售正在火热进行中，一场手球比赛的最低票价为30元，一场游泳比赛的最低票价比手球比赛的4倍少20元，一场游泳比赛的最低票价比手球比赛贵多少元？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 一场手球比赛的最低票价为30元\n    price_handball = 30\n    # 一场游泳比赛的最低票价比手球比赛的4倍少20元\n    price_swimming = 4 * price_handball - 20\n    # 一场游泳比赛的最低票价比手球比赛贵多少元\n    price_difference = price_swimming - price_handball\n    # 答案是游泳比赛的最低票价比手球比赛贵多少元\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "小明与爸爸到电脑城去买电脑，他们看到了一台标价8000元的电脑．小明爸爸对经理说：“打0.8可以？”，经理想了想，说：“你说的价格，再加5%，”就成交了．请问小明家买这台电脑花了多少钱？", "target": 6720.0, "answer": 6720.0, "score": 1, "generation": ["def solution():\n    # 电脑的标价为8000元\n    original_price = 8000\n    # 打折后的价格 = 标价 * 打折比例\n    discounted_price = original_price * 0.8\n    # 加上5%后的价格 = 打折后的价格 * (1 + 5%)\n    final_price = discounted_price * 1.05\n    # 答案是小明家买这台电脑花的钱\n    result = final_price\n    # 返回答案\n    return result"]}
{"question": "学校去年种树225棵，今年比去年增加8%，今年种树多少棵？", "target": 243.0, "answer": 243.0, "score": 1, "generation": ["def solution():\n    # 去年种树225棵\n    trees_last_year = 225\n    # 今年比去年增加8%\n    increase_percentage = 0.08\n    # 今年种树的增加数量 = 去年种树数量 * 增加百分比\n    increase_amount = trees_last_year * increase_percentage\n    # 今年种树的总数量 = 去年种树数量 + 今年增加的数量\n    total_trees_this_year = trees_last_year + increase_amount\n    # 答案是今年种树的总数量\n    result = total_trees_this_year\n    # 返回答案\n    return result"]}
{"question": "(1/5)*10=．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 计算(1/5)*10的结果\n    result = (1/5) * 10\n    # 返回答案\n    return result"]}
{"question": "从1里面每次减去(1/10)，减去多少次得0．", "target": 10.0, "answer": "", "score": 0, "generation": ["首先，我们来分析这个问题。从1里面每次减去(1/10)，相当于每次剩下的是原来的(9/10)。我们需要找到一个整数n，使得(9/10)^n等于0。\n\n现实际上，当n趋向于无穷大时，(9/10)^n会趋近于0，但永远不会真正等于0。因此，这个问题没有实际解。\n\n```python\ndef solution():\n    # 无解，返回None\n    return None\n```"]}
{"question": "张新看一本120页的科普书，第一天看了全书的30%，第二天看了全书的(2/5)，还剩下多少页？", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 科普书的总页数为120页\n    total_pages = 120\n    # 第一天看了全书的30%\n    read_fraction_day1 = 0.3\n    # 第二天看了全书的(2/5)\n    read_fraction_day2 = 2/5\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_day1 = total_pages * read_fraction_day1\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_day2 = total_pages * read_fraction_day2\n    # 剩余的页数 = 总页数 - 第一天看的页数 - 第二天看的页数\n    remaining_pages = total_pages - pages_read_day1 - pages_read_day2\n    # 答案是剩余的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "春节过后，小明把400元压岁钱存入银行，年利率2.25%，存期一年．到期时，小明可以拿到利息多少元．（利息税忽略不计）", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 存入银行的金额为400元\n    principal = 400\n    # 年利率为2.25%\n    annual_interest_rate = 0.0225\n    # 存期为一年\n    time_period = 1\n    # 利息 = 本金 * 年利率 * 存期\n    interest = principal * annual_interest_rate * time_period\n    # 答案是利息的金额\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一箱肥皂分发给某车间工人，平均每人可分到12块．若只分给女工，平均每人可分到20块；若只分给男工，平均每人可分到多少块？", "target": 30.0, "answer": 4.0, "score": 0, "generation": ["def solution():\n    # 每箱肥皂平均每人可分到的块数\n    soap_per_person = 12\n    # 只分给女工时，平均每人可分到的块数\n    soap_per_female = 20\n    # 只分给男工时，平均每人可分到的块数\n    soap_per_male = (2 * soap_per_person - soap_per_female)\n    # 答案是只分给男工时，平均每人可分到的块数\n    result = soap_per_male\n    # 返回答案\n    return result"]}
{"question": "农机厂计划生产800台，平均每天生产44台，生产了10天，余下的任务要求8天完成，平均每天要生产多少台？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 计划生产的总台数为800台\n    total_units_planned = 800\n    # 前10天已经生产了440台\n    units_produced_first_10_days = 44 * 10\n    # 剩余需要生产的台数为360台\n    remaining_units = total_units_planned - units_produced_first_10_days\n    # 剩余任务需要在8天内完成\n    remaining_days = 8\n    # 平均每天需要生产的台数 = 剩余需要生产的台数 / 剩余天数\n    units_per_day_needed = remaining_units / remaining_days\n    # 答案是平均每天需要生产的台数\n    result = units_per_day_needed\n    # 返回答案\n    return result"]}
{"question": "3名工人2小时加工零件90个，要在10小时完成1800个零件的加工，需要工人多少名．", "target": 12.0, "answer": 4.0, "score": 0, "generation": ["def solution():\n    # 3名工人2小时加工90个零件，即每名工人每小时加工45个零件\n    rate_per_worker_per_hour = 45\n    # 要在10小时完成1800个零件，即总共需要180个零件\n    total_parts = 1800\n    # 需要的工人数量 = 总零件数 / (每名工人每小时加工的零件数 * 工作小时数)\n    num_workers = total_parts / (rate_per_worker_per_hour * 10)\n    # 答案是需要的工人数量\n    result = num_workers\n    # 返回答案\n    return result"]}
{"question": "某厂4月份实际生产洗衣机5000台，超产1000台．超产百分之几？", "target": 25.0, "answer": 20.0, "score": 0, "generation": ["def solution():\n    # 4月份实际生产的洗衣机数量为5000台\n    actual_production = 5000\n    # 超产的洗衣机数量为1000台\n    over_production = 1000\n    # 超产的百分比 = (超产数量 / 实际生产数量) * 100%\n    over_production_percentage = (over_production / actual_production) * 100\n    # 答案是超产的百分比\n    result = over_production_percentage\n    # 返回答案\n    return result"]}
{"question": "一辆汽车4小时行了320公里，这辆汽车从甲城出发到乙城总共用了7小时．甲、乙两城之间距离多少千米？", "target": 560.0, "answer": 560.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的总时间为7小时\n    total_time = 7\n    # 汽车行驶的总距离为320公里\n    total_distance = 320\n    # 汽车行驶的时间包括4小时行驶320公里和剩余时间\n    remaining_time = total_time - 4\n    # 剩余时间内汽车行驶的距离 = 剩余时间 * 汽车的速度\n    remaining_distance = remaining_time * (total_distance / 4)\n    # 甲、乙两城之间的距离 = 总距离\n    distance_between_cities = total_distance + remaining_distance\n    # 答案是甲、乙两城之间的距离\n    result = distance_between_cities\n    # 返回答案\n    return result"]}
{"question": "将小数化为假分数：5.25=．", "target": 5.25, "answer": "", "score": 0, "generation": ["将小数化为假分数：5.25=5 1/4\n\n# solution in Python:\n\ndef solution():\n    # 将小数5.25化为假分数\n    decimal_number = 5.25\n    # 将小数转化为分数\n    numerator = int(decimal_number * 100)\n    denominator = 100\n    # 利用分数的分子和分母表示小数的整数部分和小数部分\n    integer_part = numerator // denominator\n    fractional_part = numerator % denominator\n    # 将分数表示为假分数\n    result = str(integer_part) + \" \" + str(fractional_part) + \"/\" + str(denominator)\n    # 返回答案\n    return result"]}
{"question": "货场有一批货物要运走，第一天运走总数的(3/8)，第二天运走总数的25%，还有270吨没有运走，这批货物有多少吨？", "target": 720.0, "answer": 513.0, "score": 0, "generation": ["def solution():\n    # 运走的货物总重量为270吨\n    total_weight_left = 270\n    # 第一天运走总数的(3/8)\n    fraction_day1 = 3/8\n    # 第二天运走总数的25%\n    fraction_day2 = 0.25\n    # 让总数为x吨\n    # 第一天运走的重量 = x * fraction_day1\n    weight_day1 = total_weight_left / (1 - fraction_day2) * fraction_day1\n    # 第二天运走的重量 = x * fraction_day2\n    weight_day2 = total_weight_left / (1 - fraction_day1) * fraction_day2\n    # 总重量 = 第一天运走的重量 + 第二天运走的重量 + 剩余的重量\n    total_weight = weight_day1 + weight_day2 + total_weight_left\n    # 答案是这批货物的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "大西洋平均深度约为3.62千米，印度洋平均深度比大西洋深0.27千米，印度洋比北冰洋深2.59千米．北冰洋的平均深度约=多少千米？", "target": 1.3, "answer": 6.48, "score": 0, "generation": ["def solution():\n    # 大西洋平均深度约为3.62千米\n    depth_atlantic = 3.62\n    # 印度洋平均深度比大西洋深0.27千米\n    depth_difference_atlantic_indian = 0.27\n    # 印度洋比北冰洋深2.59千米\n    depth_difference_indian_arctic = 2.59\n    # 印度洋平均深度 = 大西洋平均深度 + 印度洋比大西洋深的深度差\n    depth_indian = depth_atlantic + depth_difference_atlantic_indian\n    # 北冰洋平均深度 = 印度洋平均深度 + 印度洋比北冰洋深的深度差\n    depth_arctic = depth_indian + depth_difference_indian_arctic\n    # 答案是北冰洋的平均深度\n    result = depth_arctic\n    # 返回答案\n    return result"]}
{"question": "一瓶果汁有2升，如果把它分别倒入(1/4)升的玻璃杯中，可以倒几杯？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 一瓶果汁有2升\n    juice_volume = 2\n    # 每个玻璃杯的容量为(1/4)升\n    glass_capacity = 1/4\n    # 可以倒入的玻璃杯数量 = 一瓶果汁的体积 / 玻璃杯的容量\n    num_glasses = juice_volume / glass_capacity\n    # 答案是可以倒入的玻璃杯数量\n    result = num_glasses\n    # 返回答案\n    return result"]}
{"question": "小李翻过一座山，山路长6千米，上山时每小时行2千米，下山时沿原路返回，每小时行3千米，求小李上下山的平均速度．", "target": 2.4, "answer": "", "score": 0, "generation": ["首先，小李上山的时间为山路长6千米除以每小时行2千米，即6 / 2 = 3 小时。下山的时间为相同的距离除以每小时行3千米，也是6 / 3 = 2 小时。上下山总共用时为3小时上山 + 2小时下山 = 5小时。总共行程为山路长6千米 * 2次 = 12千米。因此，平均速度为总行程12千米除以总时间5小时，即12 / 5 = 2.4 千米/小时。\n\n```python\ndef solution():\n    # 山路长6千米\n    distance = 6\n    # 上山时速度为2千米/小时\n    speed_up = 2\n    # 下山时速度为3千米/小时\n    speed_down = 3\n    # 上山时间 = 山路长 / 上山速度\n    time_up = distance / speed_up\n    # 下山时间 = 山路长 / 下山速度\n    time_down = distance / speed_down\n    # 总共用时 = 上山时间 + 下山时间\n    total_time = time_up + time_down\n    # 总行程 = 山路长 * 2\n    total_distance = distance * 2\n    # 平均速度 = 总行程 / 总用时\n    average_speed = total_distance / total_time\n    # 答案是小李上下山的平均速度\n    result = average_speed\n    # 返回答案\n    return result\n```"]}
{"question": "小军要游200米，已游了(3/5)，还剩多少米没游？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 小军要游的总距离为200米\n    total_distance = 200\n    # 已经游了(3/5)的距离\n    distance_covered_fraction = 3/5\n    # 已经游的距离 = 总距离 * 已经游的比例\n    distance_covered = total_distance * distance_covered_fraction\n    # 剩余的距离 = 总距离 - 已经游的距离\n    remaining_distance = total_distance - distance_covered\n    # 答案是剩余的距离\n    result = remaining_distance\n    # 返回答案\n    return result"]}
{"question": "贺兰一小六年级一班原来有学生54人，其中男生占全班的(5/9)，后来男生转走了几人，现在男生占全班的(13/25)，转走了几名男生？", "target": 4.0, "answer": 1.9199999999999982, "score": 0, "generation": ["def solution():\n    # 原来班级的学生总数为54人\n    total_students = 54\n    # 原来男生占全班的(5/9)\n    initial_male_ratio = 5/9\n    # 现在男生占全班的(13/25)\n    final_male_ratio = 13/25\n    # 原来男生人数 = 总人数 * 原来男生比例\n    initial_male_students = total_students * initial_male_ratio\n    # 现在男生人数 = 总人数 * 现在男生比例\n    final_male_students = total_students * final_male_ratio\n    # 转走的男生人数 = 原来男生人数 - 现在男生人数\n    transferred_male_students = initial_male_students - final_male_students\n    # 答案是转走的男生人数\n    result = transferred_male_students\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距380千米，一列动力火车从甲站出发行驶了全程的(5/19)，行驶了多少千米？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 甲乙两地相距380千米\n    distance = 380\n    # 一列动力火车行驶了全程的(5/19)\n    fraction_traveled = 5/19\n    # 行驶的距离 = 总距离 * 行驶比例\n    distance_traveled = distance * fraction_traveled\n    # 答案是行驶的距离\n    result = distance_traveled\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从总站开出，全车座位上有(5/6)坐了乘客，到达中点站时，有12人下车，20人上车，这时车内座位恰好坐满．这辆车有多少个座位？", "target": 48.0, "answer": 8.833333333333332, "score": 0, "generation": ["def solution():\n    # 全车座位上有(5/6)坐了乘客\n    passenger_ratio = 5/6\n    # 到达中点站时，有12人下车，20人上车\n    passengers_off = 12\n    passengers_on = 20\n    # 车内座位恰好坐满\n    # 坐满的乘客数量 = 总座位数 * 全车座位上乘客比例 + 上车乘客数 - 下车乘客数\n    total_passengers = passenger_ratio + passengers_on - passengers_off\n    # 因为车内座位恰好坐满，所以总座位数 = 坐满的乘客数量\n    total_seats = total_passengers\n    # 答案是这辆车的座位数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "一种盐水重200克，盐的重量占盐水的20%，加了一些水后，盐的重量占盐水重量的12.5%．加了多少克水？", "target": 120.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 盐水的总重量为200克\n    total_weight = 200\n    # 盐的重量占盐水的20%\n    salt_percentage_initial = 20\n    # 盐水中盐的重量 = 总重量 * 盐的百分比\n    salt_weight_initial = total_weight * (salt_percentage_initial / 100)\n    # 盐水中水的重量 = 总重量 - 盐的重量\n    water_weight_initial = total_weight - salt_weight_initial\n    # 盐的重量占盐水重量的12.5%\n    salt_percentage_final = 12.5\n    # 加了一些水后，盐的重量 = 总重量 * 盐的百分比\n    salt_weight_final = total_weight * (salt_percentage_final / 100)\n    # 盐水中水的重量 = 盐水中盐的重量 / 盐的百分比\n    water_weight_final = salt_weight_final / (salt_percentage_final / 100)\n    # 加的水的重量 = 最终水的重量 - 初始水的重量\n    added_water_weight = water_weight_final - water_weight_initial\n    # 答案是加的水的重量\n    result = added_water_weight\n    # 返回答案\n    return result"]}
{"question": "小红看一本书，已看的页数与剩下的页数的比是2：3，如果再看56页，正好看完全书的(3/4)．这本书一共有多少页？", "target": 160.0, "answer": 336.0, "score": 0, "generation": ["def solution():\n    # 已看的页数与剩下的页数的比是2:3\n    ratio_seen_to_remaining = 2 / 3\n    # 再看56页后正好看完全书的(3/4)\n    additional_pages = 56\n    fraction_of_book_read = 3 / 4\n    # 设总页数为x\n    # 已看的页数为2x / (2+3) = 2x / 5\n    # 剩下的页数为3x / 5\n    # 再看56页后已看的页数为2x / 5 + 56\n    # 根据已看的页数与剩下的页数的比例，得到方程：(2x / 5 + 56) / (3x / 5) = 2 / 3\n    # 解方程得到x = 336\n    total_pages = 336\n    # 答案是这本书一共有336页\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "服装厂做一件男上衣需用2.5米布料，一条男裤子需用1.8米布料，现有600米布料，可以做多少件男上衣？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 制作一件男上衣需要2.5米布料\n    fabric_per_shirt = 2.5\n    # 制作一条男裤子需要1.8米布料\n    fabric_per_pants = 1.8\n    # 现有的布料总量为600米\n    total_fabric = 600\n    # 可以制作的男上衣数量 = 可用布料总量 / 制作一件男上衣所需布料\n    num_shirts = total_fabric // fabric_per_shirt\n    # 答案是可以制作的男上衣数量\n    result = num_shirts\n    # 返回答案\n    return result"]}
{"question": "2.8/0.8/0.5=．", "target": 7.0, "answer": 6.999999999999999, "score": 1, "generation": ["def solution():\n    # 计算2.8除以0.8再除以0.5的结果\n    result = 2.8 / 0.8 / 0.5\n    # 返回答案\n    return result"]}
{"question": "看一本书，第一天看了全书的(2/7)，第二天比第一天少看5页，还剩62页没看，这本书共有多少页？", "target": 133.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 假设这本书共有x页\n    total_pages = 0\n    # 第一天看了全书的(2/7)\n    read_fraction_day1 = 2/7\n    # 第二天比第一天少看5页\n    read_fraction_day2 = read_fraction_day1 - 5/total_pages\n    # 还剩62页没看\n    remaining_pages = 62\n    # 根据题意设置方程式：第一天看的页数 + 第二天看的页数 + 剩余页数 = 总页数\n    total_pages = (read_fraction_day1 * total_pages) + ((read_fraction_day1 - 5) * total_pages) + remaining_pages\n    # 答案是这本书共有的页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "工厂生产了1015筒毛球，每筒6个．一共生产了多少个羽毛球？", "target": 6090.0, "answer": 6090.0, "score": 1, "generation": ["def solution():\n    # 工厂生产的毛球筒数为1015筒\n    num_tubes = 1015\n    # 每筒毛球数量为6个\n    balls_per_tube = 6\n    # 总羽毛球数量 = 每筒毛球数量 * 毛球筒数\n    total_balls = balls_per_tube * num_tubes\n    # 答案是总羽毛球数量\n    result = total_balls\n    # 返回答案\n    return result"]}
{"question": "6（1）班有50人，某天该班出勤率为96%，这天缺席多少人．", "target": 2.0, "answer": 2.0000000000000018, "score": 1, "generation": ["def solution():\n    # 6（1）班的总人数为50人\n    total_students = 50\n    # 出勤率为96%\n    attendance_rate = 96 / 100\n    # 缺席人数 = 总人数 * (1 - 出勤率)\n    absent_students = total_students * (1 - attendance_rate)\n    # 答案是缺席人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "比40千克多(1/5)千克=多少千克？", "target": 40.2, "answer": 48.0, "score": 0, "generation": ["def solution():\n    # 比40千克多(1/5)千克\n    extra_weight = 40 * (1/5)\n    # 多出的重量 = 40千克 + 额外重量\n    total_weight = 40 + extra_weight\n    # 答案是多出的重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "通过特快专递寄邮件每份需要22元．李阿姨寄邮件时付出200元，找回68元．她共寄了几份邮件？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 每份邮件需要22元\n    cost_per_mail = 22\n    # 李阿姨付出的金额为200元\n    total_paid = 200\n    # 找回的金额为68元\n    change = 68\n    # 实际花费 = 付出的金额 - 找回的金额\n    actual_cost = total_paid - change\n    # 寄出的邮件份数 = 实际花费 / 每份邮件的价格\n    num_mails_sent = actual_cost // cost_per_mail\n    # 答案是寄出的邮件份数\n    result = num_mails_sent\n    # 返回答案\n    return result"]}
{"question": "美术兴趣小组有36人，比音乐兴趣小组少20%．美术兴趣小组和音乐兴趣小组相差多少人？", "target": 9.0, "answer": 7.199999999999999, "score": 0, "generation": ["def solution():\n    # 美术兴趣小组有36人\n    num_art_group = 36\n    # 音乐兴趣小组比美术兴趣小组少20%\n    num_music_group = num_art_group * 0.8\n    # 美术兴趣小组和音乐兴趣小组的人数差\n    difference = num_art_group - num_music_group\n    # 答案是美术兴趣小组和音乐兴趣小组的人数差\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "来电话时每次响铃时间为4秒，两次之间间隔2秒，这个电话响了8次，从响铃到结束共持续了几秒？", "target": 46.0, "answer": 48.0, "score": 0, "generation": ["def solution():\n    # 每次响铃时间为4秒\n    ring_time = 4\n    # 两次之间间隔2秒\n    interval_time = 2\n    # 电话响了8次\n    num_rings = 8\n    # 从响铃到结束共持续的时间 = (响铃时间 + 间隔时间) * 响铃次数\n    total_time = (ring_time + interval_time) * num_rings\n    # 答案是从响铃到结束共持续的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树48棵，相当于苹果树的(3/4)，苹果树有多少？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 桃树的数量为48棵\n    num_peach_trees = 48\n    # 桃树数量相当于苹果树数量的(3/4)\n    peach_to_apple_ratio = 3/4\n    # 苹果树的数量 = 桃树数量 / 桃树与苹果树的比例\n    num_apple_trees = num_peach_trees / peach_to_apple_ratio\n    # 答案是苹果树的数量\n    result = num_apple_trees\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人从一楼开始比赛爬楼梯，甲爬楼梯的速度是乙的1.5倍．他们同时出发，当甲爬到16楼时，乙在多少楼．", "target": 11.0, "answer": 10.666666666666666, "score": 0, "generation": ["def solution():\n    # 甲爬楼梯的速度是乙的1.5倍\n    speed_ratio = 1.5\n    # 甲爬到的楼层为16楼\n    floor_a = 16\n    # 甲、乙同时出发，所以他们爬楼梯的速度比为1:1.5\n    # 甲每爬1层，乙爬1.5层\n    # 当甲爬到16楼时，乙爬的楼层数 = 16 / 1.5\n    floor_b = floor_a / speed_ratio\n    # 答案是乙在的楼层\n    result = floor_b\n    # 返回答案\n    return result"]}
{"question": "一个电影院共有812个座位，票价15元，这场的票都卖完了，这场电影的收入=多少元？", "target": 12180.0, "answer": 12180.0, "score": 1, "generation": ["def solution():\n    # 电影院共有812个座位\n    total_seats = 812\n    # 每张票的价格为15元\n    ticket_price = 15\n    # 这场电影的总收入 = 座位数 * 票价\n    total_income = total_seats * ticket_price\n    # 答案是这场电影的总收入\n    result = total_income\n    # 返回答案\n    return result"]}
{"question": "一根绳子长24米，剪去全长的(1/6)，剩下的比全长短了多少米？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为24米\n    total_length = 24\n    # 剪去的比例为(1/6)\n    cut_fraction = 1/6\n    # 剪去的长度 = 总长度 * 剪去的比例\n    cut_length = total_length * cut_fraction\n    # 剩下的长度 = 总长度 - 剪去的长度\n    remaining_length = total_length - cut_length\n    # 比全长短的长度 = 总长度 - 剩下的长度\n    shorter_length = total_length - remaining_length\n    # 答案是比全长短的长度\n    result = shorter_length\n    # 返回答案\n    return result"]}
{"question": "推销员每工作1小时可以挣6.5元，另外，每做成一次交易他可以得2.5元的奖金．某个星期他共收入212.5元，其中做成了7次交易，他这个星期工作了多少小时？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 每工作1小时可以挣6.5元\n    earning_per_hour = 6.5\n    # 每做成一次交易可以得2.5元的奖金\n    bonus_per_transaction = 2.5\n    # 他这个星期共收入212.5元\n    total_earning = 212.5\n    # 做成了7次交易\n    num_transactions = 7\n    # 总收入 = 工作小时数 * 每小时收入 + 交易次数 * 每次交易奖金\n    # 212.5 = 6.5 * 工作小时数 + 2.5 * 7\n    # 解方程得到工作小时数\n    hours_worked = (total_earning - (bonus_per_transaction * num_transactions)) / earning_per_hour\n    # 答案是这个星期工作的小时数\n    result = hours_worked\n    # 返回答案\n    return result"]}
{"question": "果品公司运来苹果(3/4)吨，运来的梨是苹果的(5/6)，运来的桃比梨少(1/5)，运来的桃比梨少多少吨？", "target": 0.125, "answer": 0.5, "score": 0, "generation": ["def solution():\n    # 运来的苹果重量为(3/4)吨\n    apple_weight = 3/4\n    # 运来的梨是苹果的(5/6)\n    pear_weight = (5/6) * apple_weight\n    # 运来的桃比梨少(1/5)\n    peach_weight = pear_weight - (1/5) * pear_weight\n    # 答案是运来的桃比梨少的重量\n    result = peach_weight\n    # 返回答案\n    return result"]}
{"question": "小兰看一本书，第一天看了全书的(1/6)，第二天看了全书的(1/5)，正好是66页．第一天看了多少页？", "target": 30.0, "answer": 179.99999999999997, "score": 0, "generation": ["def solution():\n    # 总页数为66页\n    total_pages = 66\n    # 第一天看了全书的(1/6)\n    fraction_day1 = 1/6\n    # 第二天看了全书的(1/5)\n    fraction_day2 = 1/5\n    # 第一天看的页数 = 总页数 * 第一天的比例\n    pages_day1 = total_pages * fraction_day1\n    # 第二天看的页数 = 总页数 * 第二天的比例\n    pages_day2 = total_pages * fraction_day2\n    # 第一天看的页数满足条件：第一天看的页数 + 第二天看的页数 = 总页数\n    # 所以第一天看的页数 = 总页数 / (1/6 + 1/5)\n    pages_day1 = total_pages / (1/6 + 1/5)\n    # 答案是第一天看的页数\n    result = pages_day1\n    # 返回答案\n    return result"]}
{"question": "幼儿园王阿姨买了345个小点心，给大班的小朋友每人发了3个，正好把点心发完．这个幼儿园大班有小朋友多少个？", "target": 115.0, "answer": "", "score": 0, "generation": ["首先，让我们来解决这个问题：\n\n假设大班的小朋友有x个，那么总共发出的点心数量为 3x 个。根据题意，这个数量等于345个小点心。\n\n因此，我们可以列出方程式：3x = 345\n\n解这个方程可以得到大班的小朋友个数 x = 115\n\n所以，这个幼儿园大班有115个小朋友。\n\n接下来，让我们用Python来表示这个问题的解决方案：\n\n```python\ndef solution():\n    # 王阿姨买了345个小点心\n    total_snacks = 345\n    # 每人发了3个小点心\n    snacks_per_child = 3\n    # 计算大班的小朋友个数\n    num_children = total_snacks // snacks_per_child\n    # 答案是大班的小朋友个数\n    result = num_children\n    # 返回答案\n    return result\n```"]}
{"question": "求是小学组织少先队员去采集动物标本．男生采集了95件标本，占所采集标本总数的(5/8)．问：女生采集了多少件标本？", "target": 57.0, "answer": "", "score": 0, "generation": ["首先，我们设女生采集的标本数量为x。\n\n根据题意，男生采集了95件标本，占总数的(5/8)，那么总共采集的标本数量为：\n95 = (5/8) * 总数\n\n解方程可得总数为：\n总数 = 95 / (5/8) = 152\n\n因此，女生采集的标本数量为：\nx = 总数 - 95 = 152 - 95 = 57\n\n所以，女生采集了57件标本。\n\n接下来我们用Python来计算这个问题。\n\n```python\ndef solution():\n    # 男生采集的标本数量\n    num_boys = 95\n    # 男生采集的标本数量占总数的(5/8)\n    fraction_boys = 5/8\n    # 总共采集的标本数量\n    total_samples = num_boys / fraction_boys\n    # 女生采集的标本数量\n    num_girls = total_samples - num_boys\n    # 答案是女生采集的标本数量\n    result = num_girls\n    # 返回答案\n    return result\n```"]}
{"question": "猎豹的速度是马的2.25倍．如果马每时跑64.4千米，猎豹每时比马多跑多少千米？", "target": 80.5, "answer": 80.5, "score": 1, "generation": ["def solution():\n    # 马的速度是64.4千米/小时\n    speed_horse = 64.4\n    # 猎豹的速度是马的2.25倍\n    speed_cheetah = 2.25 * speed_horse\n    # 猎豹每小时比马多跑的距离 = 猎豹的速度 - 马的速度\n    distance_more = speed_cheetah - speed_horse\n    # 答案是猎豹每小时比马多跑的距离\n    result = distance_more\n    # 返回答案\n    return result"]}
{"question": "某工程由甲单独做25天后，再由乙单独做60天即可完成．如果甲、乙两人合作，需40天完成，现在甲先单独做34天，然后再由乙来单独完成，还需要做多少天．", "target": 48.0, "answer": 28.235294117647058, "score": 0, "generation": ["def solution():\n    # 甲单独完成工程需要的天数为25天\n    days_a_alone = 25\n    # 乙单独完成工程需要的天数为60天\n    days_b_alone = 60\n    # 甲、乙合作完成工程需要的天数为40天\n    days_together = 40\n    # 甲先单独做了34天\n    days_a_first = 34\n    # 甲单独完成的工作量 = 甲单独完成工程需要的天数 / (甲单独完成工程需要的天数 + 乙单独完成工程需要的天数)\n    work_done_a = days_a_alone / (days_a_alone + days_b_alone)\n    # 剩余工作量 = 1 - 甲单独完成的工作量\n    remaining_work = 1 - work_done_a\n    # 剩余工作天数 = 剩余工作量 * 甲、乙合作完成工程需要的天数\n    remaining_days = remaining_work * days_together\n    # 甲先单独做了34天后，再由乙单独完成，还需要的天数 = 剩余工作天数\n    days_remaining = remaining_days\n    # 答案是还需要的天数\n    result = days_remaining\n    # 返回答案\n    return result"]}
{"question": "某个体服装商清仓甩卖，将一件衣服的原标价连续两次降15%，这时的标价为289元，已知这件衣服进价是原标价的70%，这件衣服进价多少元？", "target": 280.0, "answer": 280.0, "score": 1, "generation": ["def solution():\n    # 衣服的标价为289元\n    price_after_discount = 289\n    # 一次降价后的价格 = 原价 * (1 - 降价比例)\n    price_after_first_discount = price_after_discount / (1 - 0.15)\n    # 两次降价后的价格 = 第一次降价后的价格 * (1 - 降价比例)\n    original_price = price_after_first_discount / (1 - 0.15)\n    # 进价是原价的70%\n    cost_price_percentage = 0.7\n    # 进价 = 原价 * 进价比例\n    cost_price = original_price * cost_price_percentage\n    # 答案是这件衣服的进价\n    result = cost_price\n    # 返回答案\n    return result"]}
{"question": "小林阅读一本书，前3天他共看了156页，后9天他平均每天看32页，这些天中小林平均每天看书多少页？", "target": 37.0, "answer": 37.0, "score": 1, "generation": ["def solution():\n    # 前3天共看了156页\n    pages_read_first_3_days = 156\n    # 后9天平均每天看32页\n    pages_read_per_day_last_9_days = 32\n    # 前3天平均每天看书的页数 = 前3天总页数 / 天数\n    average_pages_first_3_days = pages_read_first_3_days / 3\n    # 总共的天数\n    total_days = 3 + 9\n    # 总共的页数\n    total_pages = pages_read_first_3_days + pages_read_per_day_last_9_days * 9\n    # 平均每天看书的页数 = 总页数 / 总天数\n    average_pages_per_day = total_pages / total_days\n    # 答案是平均每天看书的页数\n    result = average_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "从动物园到火车站20千米，张师傅每天开车行驶5个来回，张师傅每天行驶多少千米？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 从动物园到火车站的距离为20千米\n    distance = 20\n    # 张师傅每天开车行驶5个来回\n    round_trips = 5\n    # 每次往返的距离 = 2倍的距离\n    one_way_distance = 2 * distance\n    # 每天行驶的总距离 = 每次往返的距离 * 来回次数\n    total_distance = one_way_distance * round_trips\n    # 答案是每天行驶的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "苹果的产量是梨的2倍，已知苹果和梨共有120吨，梨有多少吨？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 苹果的产量是梨的2倍\n    # 设梨的产量为x吨，则苹果的产量为2x吨\n    # 根据题意，2x + x = 120\n    # 解方程得到梨的产量\n    pear_production = 120 / 3\n    # 答案是梨的产量\n    result = pear_production\n    # 返回答案\n    return result"]}
{"question": "李大爷家有黑兔172只，黑兔的只数比白兔多75只，李大爷家有白兔多少只？", "target": 97.0, "answer": 97.0, "score": 1, "generation": ["def solution():\n    # 李大爷家有黑兔172只\n    num_black_rabbits = 172\n    # 黑兔的只数比白兔多75只\n    difference = 75\n    # 白兔的只数 = 黑兔的只数 - 差额\n    num_white_rabbits = num_black_rabbits - difference\n    # 答案是白兔的只数\n    result = num_white_rabbits\n    # 返回答案\n    return result"]}
{"question": "某工程队修一条长20千米的公路，已经修了20%，还剩多少千米没有修？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为20千米\n    total_length = 20\n    # 已经修的比例为20%\n    repaired_fraction = 0.2\n    # 已经修的长度 = 总长度 * 已修比例\n    repaired_length = total_length * repaired_fraction\n    # 剩余未修的长度 = 总长度 - 已修长度\n    remaining_length = total_length - repaired_length\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "某学校开展环保活动，有4个小组收集了768节电池．每个小组有8人，他们平均每人收集废电池多少节？", "target": 24.0, "answer": 24.0, "score": 1, "generation": ["def solution():\n    # 总共收集的电池数量为768节\n    total_batteries = 768\n    # 小组的数量为4个\n    num_groups = 4\n    # 每个小组的人数为8人\n    num_people_per_group = 8\n    # 每人平均收集的电池数量 = 总电池数量 / (小组数量 * 每组人数)\n    batteries_per_person = total_batteries / (num_groups * num_people_per_group)\n    # 答案是每人平均收集的电池数量\n    result = batteries_per_person\n    # 返回答案\n    return result"]}
{"question": "一件工作，甲先单独完成(2/3)用了(1/5)小时，如果全完成，要用多少小时．", "target": 0.3, "answer": "", "score": 0, "generation": ["首先，甲单独完成工作的时间为(2/3) * (1/5)小时。\n\n然后，全完成工作需要的时间可以通过以下步骤计算：\n\n1. 计算甲单独完成工作的时间：(2/3) * (1/5) = 2/15 小时\n2. 全部工作完成所需时间 = 1 / (1 - 2/15) = 1 / (13/15) = 15/13 小时\n\n接下来是用Python编写解决方案：\n\n```python\ndef solution():\n    # 甲单独完成工作的时间为(2/3) * (1/5)小时\n    time_taken_by_A_alone = (2/3) * (1/5)\n    # 全部工作完成所需时间\n    total_time = 1 / (1 - time_taken_by_A_alone)\n    # 答案是全部工作完成所需时间\n    result = total_time\n    # 返回答案\n    return result\n```"]}
{"question": "一批钢材第一次用去20%，第二次用去(1/2)吨，还剩下3吨，这批钢材有多少吨？", "target": 4.375, "answer": "", "score": 0, "generation": ["def solution():\n    # 假设这批钢材总重量为x吨\n    total_steel = x\n    # 第一次用去20%，剩余80%\n    remaining_after_first_use = 0.8 * total_steel\n    # 第二次用去(1/2)吨，剩余3吨\n    remaining_after_second_use = remaining_after_first_use - 0.5\n    # 因为剩余3吨，所以有以下等式\n    remaining_after_second_use = 3\n    # 解方程得到这批钢材总重量\n    total_steel = 6\n    # 答案是这批钢材的总重量\n    result = total_steel\n    # 返回答案\n    return result"]}
{"question": "大妙乡要修一条新公路，第一个周修了全长的(1/5)，第二个周修了600米，这时两个周刚好修了全长的60%．这条公路全长多少米？", "target": 1500.0, "answer": 600.48, "score": 0, "generation": ["def solution():\n    # 第一个周修了全长的(1/5)\n    fraction_first_week = 1/5\n    # 第二个周修了600米\n    length_second_week = 600\n    # 两周刚好修了全长的60%\n    total_completion_percentage = 0.6\n    # 第一个周修的长度 = 全长 * 第一个周修的比例\n    length_first_week = total_completion_percentage * (1 - fraction_first_week)\n    # 总长度 = 第一个周修的长度 + 第二个周修的长度\n    total_length = length_first_week + length_second_week\n    # 答案是公路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "商店所有货物打0.8出售，爸爸买了一个剃须刀花了120元，这种剃须刀原来卖多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 爸爸买剃须刀花了120元\n    price_paid = 120\n    # 打折后的折扣率为0.8\n    discount_rate = 0.8\n    # 剃须刀原价 = 购买价格 / 折扣率\n    original_price = price_paid / discount_rate\n    # 答案是剃须刀原来的价格\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "小刚看一本故事书，第一天看了全书的(1/3)，第二天又看了8页，这时已看的页数与未看的页数的比是2：3，这本书有多少页？", "target": 120.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 假设故事书的总页数为x页\n    total_pages = 0\n    # 第一天看了全书的(1/3)\n    read_fraction_day1 = 1/3\n    # 第二天又看了8页\n    pages_read_day2 = 8\n    # 已看的页数与未看的页数的比是2：3\n    ratio_read_to_unread = 2/3\n\n    # 第一天看的页数 = 总页数 * 第一天看的比例\n    pages_read_day1 = total_pages * read_fraction_day1\n    # 已看的总页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_read_day1 + pages_read_day2\n    # 未看的页数 = 总页数 - 已看的总页数\n    total_pages_unread = total_pages - total_pages_read\n\n    # 根据已看的页数与未看的页数的比是2：3，得到方程式\n    # 已看的页数 / 未看的页数 = 2 / 3\n    # 解方程得到总页数\n    total_pages = total_pages_read / (ratio_read_to_unread - ratio_read_to_unread)\n\n    # 答案是故事书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "燃烧的蜡烛．桌子上原来有12根点燃的蜡烛，先被风吹灭了3根，不久又一阵风吹灭了2根，最后桌子上还剩几根蜡烛？", "target": 5.0, "answer": 7.0, "score": 0, "generation": ["def solution():\n    # 桌子上原来有12根点燃的蜡烛\n    total_candles = 12\n    # 先被风吹灭了3根\n    candles_blown_out_first = 3\n    # 又一阵风吹灭了2根\n    candles_blown_out_second = 2\n    # 最后剩余的蜡烛数量 = 总数 - 第一次吹灭的数量 - 第二次吹灭的数量\n    remaining_candles = total_candles - candles_blown_out_first - candles_blown_out_second\n    # 答案是最后剩余的蜡烛数量\n    result = remaining_candles\n    # 返回答案\n    return result"]}
{"question": "36个学生回答两个问题时，答对第一题的有23人，答对第二题的有25人，两题都答对的有14人，两题都没答对的有多少人．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 回答第一题正确的学生有23人\n    correct_first = 23\n    # 回答第二题正确的学生有25人\n    correct_second = 25\n    # 两题都回答正确的学生有14人\n    correct_both = 14\n    # 36个学生中至少有一题回答正确的学生数量 = 回答第一题正确的学生 + 回答第二题正确的学生 - 同时回答正确的学生\n    correct_either = correct_first + correct_second - correct_both\n    # 两题都没回答正确的学生数量 = 学生总数 - 至少有一题回答正确的学生数量\n    incorrect_both = 36 - correct_either\n    # 答案是两题都没回答正确的学生数量\n    result = incorrect_both\n    # 返回答案\n    return result"]}
{"question": "食堂运来600千克大米，已经吃了4天，每天吃50千克．剩下的5天吃完，平均每天吃多少千克？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 食堂运来的大米总重量为600千克\n    total_rice = 600\n    # 已经吃掉的天数为4天\n    days_eaten = 4\n    # 每天吃的大米重量为50千克\n    daily_rice_consumed = 50\n    # 剩下的天数为5天\n    remaining_days = 5\n    # 剩下的大米重量 = 总重量 - 已经吃掉的重量\n    remaining_rice = total_rice - (days_eaten * daily_rice_consumed)\n    # 平均每天吃的大米重量 = 剩下的大米重量 / 剩下的天数\n    average_daily_consumption = remaining_rice / remaining_days\n    # 答案是平均每天吃的大米重量\n    result = average_daily_consumption\n    # 返回答案\n    return result"]}
{"question": "5/2.7与1.3的和，商=．", "target": 1.25, "answer": 3.151851851851852, "score": 0, "generation": ["def solution():\n    # 计算5/2.7与1.3的和\n    sum_result = 5/2.7 + 1.3\n    # 计算商\n    quotient = sum_result\n    # 返回答案\n    return quotient"]}
{"question": "师傅计划生产40个零件，实际比计划多生产25%，实际生产多少个？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 计划生产的零件数量为40个\n    planned_quantity = 40\n    # 实际比计划多生产25%\n    over_planned_percentage = 0.25\n    # 实际生产的零件数量 = 计划生产的数量 * (1 + 多生产的比例)\n    actual_quantity = planned_quantity * (1 + over_planned_percentage)\n    # 答案是实际生产的零件数量\n    result = actual_quantity\n    # 返回答案\n    return result"]}
{"question": "一件皮毛大衣的单价是954元，一件T恤衫的单价是9元，皮毛大衣的单价是T恤衫的多少倍？", "target": 106.0, "answer": 106.0, "score": 1, "generation": ["def solution():\n    # 皮毛大衣的单价是954元\n    price_coat = 954\n    # T恤衫的单价是9元\n    price_tshirt = 9\n    # 皮毛大衣的单价是T恤衫的多少倍 = 皮毛大衣的单价 / T恤衫的单价\n    times = price_coat / price_tshirt\n    # 答案是皮毛大衣的单价是T恤衫的多少倍\n    result = times\n    # 返回答案\n    return result"]}
{"question": "用1.5*1.6的积减去0.6后去除0.36，商=？", "target": 0.2, "answer": 5.000000000000001, "score": 0, "generation": ["def solution():\n    # 计算1.5乘以1.6的积\n    product = 1.5 * 1.6\n    # 减去0.6\n    subtracted_value = product - 0.6\n    # 将结果除以0.36\n    quotient = subtracted_value / 0.36\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一根长32米的绳子，剪去8米后，剩下的做短绳．每根短绳长4米，剩下的绳子可以做几根短绳？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 初始绳子的长度为32米\n    initial_length = 32\n    # 剪去的长度为8米\n    cut_length = 8\n    # 每根短绳的长度为4米\n    short_rope_length = 4\n    # 剩下的绳子长度 = 初始长度 - 剪去的长度\n    remaining_length = initial_length - cut_length\n    # 可以做的短绳数量 = 剩下的绳子长度 / 每根短绳的长度\n    num_short_ropes = remaining_length // short_rope_length\n    # 答案是可以做的短绳数量\n    result = num_short_ropes\n    # 返回答案\n    return result"]}
{"question": "一个数的3倍是180，这个数=．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 一个数的3倍是180\n    triple_of_number = 180\n    # 这个数 = 3倍数 / 3\n    number = triple_of_number / 3\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "麦当劳叔叔准备送出玩具猫手镯58个、玩具小车67个给学习好的同学，平均在5天内送完，每天送出多少个玩具？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 玩具猫手镯的数量为58个\n    num_cat_bracelets = 58\n    # 玩具小车的数量为67个\n    num_toy_cars = 67\n    # 总共要送出的玩具数量\n    total_toys = num_cat_bracelets + num_toy_cars\n    # 送完所有玩具需要的天数为5天\n    total_days = 5\n    # 每天送出的玩具数量 = 总玩具数量 / 总天数\n    toys_per_day = total_toys / total_days\n    # 答案是每天送出的玩具数量\n    result = toys_per_day\n    # 返回答案\n    return result"]}
{"question": "王老师买了2000元的国家建设债券，定期3年，年利率是7.11%，到期时他获得的本息一共多少元．", "target": 2426.6, "answer": 2426.6, "score": 1, "generation": ["def solution():\n    # 王老师买了2000元的国家建设债券\n    principal = 2000\n    # 定期3年，年利率是7.11%\n    years = 3\n    annual_interest_rate = 0.0711\n    # 到期时获得的本息 = 本金 + 本金 * 年利率 * 年数\n    total_amount = principal + principal * annual_interest_rate * years\n    # 答案是到期时获得的本息\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "某个旅游景点，游客每6人乘坐一辆游览车，一共有408辆游览车，可以同时供多少人参观？", "target": 2448.0, "answer": 2448.0, "score": 1, "generation": ["def solution():\n    # 每辆游览车可以容纳的游客数量\n    passengers_per_bus = 6\n    # 总共的游览车辆数\n    total_buses = 408\n    # 可以同时供多少人参观 = 每辆车的容量 * 总车辆数\n    total_passengers = passengers_per_bus * total_buses\n    # 答案是可以同时供多少人参观\n    result = total_passengers\n    # 返回答案\n    return result"]}
{"question": "一列火车从长沙开往广州，每小时行70千米，这列货车开出1小时后，一列客车从广州出发开往长沙，每小时行60千米，客车经4.5小时后，与货车相遇．长沙到广州的铁路长多少千米？", "target": 655.0, "answer": 340.0, "score": 0, "generation": ["def solution():\n    # 货车的速度是每小时行70千米\n    speed_freight_train = 70\n    # 客车的速度是每小时行60千米\n    speed_passenger_train = 60\n    # 货车行驶的时间（小时）\n    time_freight_train = 1\n    # 客车行驶的时间（小时）\n    time_passenger_train = 4.5\n    # 货车行驶的距离 = 货车速度 * 货车行驶时间\n    distance_freight_train = speed_freight_train * time_freight_train\n    # 客车行驶的距离 = 客车速度 * 客车行驶时间\n    distance_passenger_train = speed_passenger_train * time_passenger_train\n    # 两车相遇时，它们的行驶距离之和等于长沙到广州的铁路长度\n    total_distance = distance_freight_train + distance_passenger_train\n    # 答案是长沙到广州的铁路长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某汽车制造厂11月制造汽车5400台，比计划多生产600台，实际比计划增产了百分之几？", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 11月制造汽车5400台\n    actual_production = 5400\n    # 比计划多生产600台\n    extra_production = 600\n    # 实际比计划增产的数量 = 比计划多生产的数量\n    actual_extra_production = extra_production\n    # 计划生产数量为实际生产数量减去比计划多生产的数量\n    planned_production = actual_production - extra_production\n    # 实际比计划增产的百分比 = (实际比计划增产的数量 / 计划生产数量) * 100\n    percentage_increase = (actual_extra_production / planned_production) * 100\n    # 答案是实际比计划增产的百分比\n    result = percentage_increase\n    # 返回答案\n    return result"]}
{"question": "王师傅加工一批零件，第一天加工了(1/5)，第二天又加工了30个，这时已加工的与未加工的个数比是2：3，这批零件一共多少个？", "target": 150.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天加工的比例为1/5\n    processed_fraction_day1 = 1/5\n    # 第二天加工的数量为30个\n    processed_day2 = 30\n    # 加工的与未加工的个数比为2:3\n    processed_to_unprocessed_ratio = 2/3\n    # 设加工的总量为x个，则第一天加工的数量为x * 1/5\n    processed_day1 = processed_fraction_day1 * x\n    # 第二天加工的数量为30个，所以第二天加工的总量为30个\n    # 根据比例关系，已加工的数量为processed_day1 + processed_day2，未加工的数量为x - (processed_day1 + processed_day2)\n    # 根据比例关系，有 x - (processed_day1 + processed_day2) = (3/2) * (processed_day1 + processed_day2)\n    # 通过上述方程可以解得x\n    x = 30 * 5\n    # 答案是这批零件的总个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "已知6（1）班男、女生人数比为5：3，男生比女生多8人，男生有多少人．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 6（1）班男、女生人数比为5：3\n    ratio = 5 / 3\n    # 男生比女生多8人\n    difference = 8\n    # 设男生人数为5x，女生人数为3x\n    # 根据比例和男生比女生多8人的条件，得到方程式\n    # 5x = 3x + 8\n    # 解方程得到 x = 4\n    x = 4\n    # 男生人数为 5x\n    num_boys = 5 * x\n    # 答案是男生的人数\n    result = num_boys\n    # 返回答案\n    return result"]}
{"question": "两地间的路程是280千米．甲乙两辆汽车同时从两地开出，相向而行，3.5小时相遇．甲车每小时行47.5千米，乙车每小时行多少千米？", "target": 32.5, "answer": 140.0, "score": 0, "generation": ["def solution():\n    # 两地间的路程为280千米\n    distance = 280\n    # 甲车的速度是每小时行47.5千米\n    speed_a = 47.5\n    # 两车相向而行，相对速度为甲车与乙车速度之和\n    # 相遇时间 = 距离 / 相对速度\n    # 乙车每小时行驶的距离 = 相遇时间 * 乙车的速度\n    speed_b = (distance / (speed_a * 2)) * speed_a\n    # 答案是乙车每小时行驶的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "一段绳子长176米，第一次剪了46米，第二次剪了44米，这时绳子比原来短了多少米．", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 绳子的初始长度为176米\n    initial_length = 176\n    # 第一次剪了46米\n    first_cut = 46\n    # 第二次剪了44米\n    second_cut = 44\n    # 剪后的绳子长度 = 初始长度 - 第一次剪的长度 - 第二次剪的长度\n    final_length = initial_length - first_cut - second_cut\n    # 绳子比原来短了多少米 = 初始长度 - 剪后的长度\n    length_cut = initial_length - final_length\n    # 答案是绳子比原来短了多少米\n    result = length_cut\n    # 返回答案\n    return result"]}
{"question": "客、货两车分别从甲、乙两地同时出发，相向而行，4.5小时后相遇．客车每小时行56千米，货车每小时行60千米．甲、乙两地相距多少千米？", "target": 522.0, "answer": 522.0, "score": 1, "generation": ["def solution():\n    # 客车的速度是每小时行56千米\n    speed_passenger = 56\n    # 货车的速度是每小时行60千米\n    speed_freight = 60\n    # 相向而行，两车的相对速度为客车速度与货车速度之和\n    relative_speed = speed_passenger + speed_freight\n    # 4.5小时后相遇，即相遇时间为4.5小时\n    time_to_meet = 4.5\n    # 甲、乙两地的距离 = 相对速度 * 相遇时间\n    distance = relative_speed * time_to_meet\n    # 答案是甲、乙两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "梨的筐数是苹果的(3/4)，苹果的筐数是橘子的(4/5)，梨有150筐，橘子多少筐？", "target": 250.0, "answer": 250.0, "score": 1, "generation": ["def solution():\n    # 梨的筐数是苹果的(3/4)\n    pear_to_apple_ratio = 3/4\n    # 苹果的筐数是橘子的(4/5)\n    apple_to_orange_ratio = 4/5\n    # 梨的筐数为150筐\n    num_pears = 150\n    # 梨的筐数 = 苹果的筐数 * 梨和苹果的比例\n    num_apples = num_pears / pear_to_apple_ratio\n    # 苹果的筐数 = 橘子的筐数 * 苹果和橘子的比例\n    num_oranges = num_apples / apple_to_orange_ratio\n    # 答案是橘子的筐数\n    result = num_oranges\n    # 返回答案\n    return result"]}
{"question": "一个盛水的正方体容器，棱长20厘米，现放入10个鸡蛋（浸没），水面升高了1厘米，求一个鸡蛋的体积=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 正方体容器的棱长为20厘米\n    side_length = 20\n    # 放入10个鸡蛋后，水面升高了1厘米\n    water_height_increase = 1\n    # 一个鸡蛋的体积 = 水面升高的体积 / 鸡蛋的数量\n    egg_volume = (side_length ** 2 * water_height_increase) / 10\n    # 答案是一个鸡蛋的体积\n    result = egg_volume\n    # 返回答案\n    return result"]}
{"question": "水果批发市场运来一批菠萝，第一周卖出(17/20)吨，第二周卖出的比第一周少(1/5)吨，两周一共卖出菠萝多少吨？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["```python\ndef solution():\n    # 第一周卖出的比例为17/20\n    sold_fraction_week1 = 17/20\n    # 第二周卖出的比例比第一周少1/5\n    sold_fraction_week2 = sold_fraction_week1 - 1/5\n    # 一共卖出的比例为两周之和\n    total_sold_fraction = sold_fraction_week1 + sold_fraction_week2\n    # 运来的菠萝总量为1吨\n    total_pineapples = 1\n    # 一共卖出的菠萝数量 = 运来的总量 * 一共卖出的比例\n    total_sold_pineapples = total_pineapples * total_sold_fraction\n    # 答案是一共卖出的菠萝数量\n    result = total_sold_pineapples\n    # 返回答案\n    return result\n```"]}
{"question": "六年级共有学生108名，其中女同学68名，女同学占全年级人数的多少（用分数表示）．", "target": 0.6296296296296297, "answer": 0.6296296296296297, "score": 1, "generation": ["def solution():\n    # 六年级共有学生108名\n    total_students = 108\n    # 女同学有68名\n    num_girls = 68\n    # 女同学占全年级人数的比例 = 女同学人数 / 总人数\n    fraction_girls = num_girls / total_students\n    # 答案是女同学占全年级人数的比例\n    result = fraction_girls\n    # 返回答案\n    return result"]}
{"question": "6（1）班有学生60人，男生人数是全班的(7/12)，又转来几名女生后，这时男生人数是全班的(5/9)．又转来几名女生？", "target": 3.0, "answer": -1.6666666666666643, "score": 0, "generation": ["def solution():\n    # 6（1）班的学生总数为60人\n    total_students = 60\n    # 男生人数是全班的(7/12)\n    initial_boys_ratio = 7/12\n    # 初始男生人数 = 总人数 * 男生比例\n    initial_num_boys = total_students * initial_boys_ratio\n    # 新的男生比例是全班的(5/9)\n    new_boys_ratio = 5/9\n    # 让x表示转来的女生人数\n    # 新的男生人数 = 初始男生人数\n    # 初始男生人数 + x = 总人数 * 新的男生比例\n    # x = 总人数 * 新的男生比例 - 初始男生人数\n    num_girls_transferred = total_students * new_boys_ratio - initial_num_boys\n    # 答案是转来的女生人数\n    result = num_girls_transferred\n    # 返回答案\n    return result"]}
{"question": "34毫米比90毫米少多少毫米．", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 第一个长度为34毫米\n    length1 = 34\n    # 第二个长度为90毫米\n    length2 = 90\n    # 两者之差即为少的长度\n    difference = length2 - length1\n    # 答案是少的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "慢车身长125米，车速每秒22米，快车身长140米，车速每秒27米，慢车在前面行驶，快车在后面追上完全超过需要多少秒．", "target": 53.0, "answer": 53.0, "score": 1, "generation": ["def solution():\n    # 慢车的车身长度为125米\n    length_slow_car = 125\n    # 慢车的速度为每秒22米\n    speed_slow_car = 22\n    # 快车的车身长度为140米\n    length_fast_car = 140\n    # 快车的速度为每秒27米\n    speed_fast_car = 27\n    # 相对速度为快车速度减去慢车速度\n    relative_speed = speed_fast_car - speed_slow_car\n    # 超车距离为慢车车身长度加上快车车身长度\n    overtaking_distance = length_slow_car + length_fast_car\n    # 超车所需时间 = 超车距离 / 相对速度\n    time_to_overtake = overtaking_distance / relative_speed\n    # 答案是超车所需时间\n    result = time_to_overtake\n    # 返回答案\n    return result"]}
{"question": "用400吨小麦磨面粉，出粉率85%．可以磨面粉多少吨？", "target": 340.0, "answer": 340.0, "score": 1, "generation": ["def solution():\n    # 使用的小麦数量为400吨\n    wheat_amount = 400\n    # 出粉率为85%\n    flour_extraction_rate = 0.85\n    # 磨出的面粉数量 = 使用的小麦数量 * 出粉率\n    flour_produced = wheat_amount * flour_extraction_rate\n    # 答案是磨出的面粉数量\n    result = flour_produced\n    # 返回答案\n    return result"]}
{"question": "修路队修一段公路，第一天修了全长的25%，第二天修了全长的20%．第一天修了50米，还剩多少米没有修？", "target": 110.0, "answer": 27.5, "score": 0, "generation": ["def solution():\n    # 公路总长\n    total_length = 50\n    # 第一天修的比例\n    first_day_percentage = 0.25\n    # 第二天修的比例\n    second_day_percentage = 0.20\n    # 第一天修的长度\n    length_first_day = total_length * first_day_percentage\n    # 第二天修的长度\n    length_second_day = total_length * second_day_percentage\n    # 剩余未修的长度\n    remaining_length = total_length - length_first_day - length_second_day\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "圆珠笔和铅笔的单价比为4：3，学校买了15支圆珠笔和16支铅笔一共用去了54元，那么圆珠笔的单价=多少元．", "target": 2.0, "answer": 8.0, "score": 0, "generation": ["def solution():\n    # 圆珠笔和铅笔的单价比为4：3\n    price_ratio = 4 / 3\n    # 学校买了15支圆珠笔和16支铅笔一共用去了54元\n    total_price = 54\n    # 设圆珠笔的单价为4x，铅笔的单价为3x\n    # 则15 * 4x + 16 * 3x = 54\n    # 解方程得到 x = 2\n    # 圆珠笔的单价 = 4 * 2 = 8元\n    price_ballpen = 4 * 2\n    # 答案是圆珠笔的单价\n    result = price_ballpen\n    # 返回答案\n    return result"]}
{"question": "3个同学跳绳，小明跳了240下，小强跳的是小明跳的(5/8)，小亮跳的是小强跳的(2/3)．小亮跳了多少下？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 小明跳绳的次数为240下\n    jumps_ming = 240\n    # 小强跳的次数是小明的(5/8)\n    jumps_qiang = (5/8) * jumps_ming\n    # 小亮跳的次数是小强的(2/3)\n    jumps_liang = (2/3) * jumps_qiang\n    # 答案是小亮跳的次数\n    result = jumps_liang\n    # 返回答案\n    return result"]}
{"question": "李华买一顶草帽用1.8元，买一把茶壶用2.5元，又买了一个热水瓶，3样东西正好用了9元．买热水瓶用多少元？", "target": 4.7, "answer": 4.7, "score": 1, "generation": ["def solution():\n    # 买草帽用了1.8元\n    price_hat = 1.8\n    # 买茶壶用了2.5元\n    price_teapot = 2.5\n    # 买三样东西一共用了9元\n    total_price = 9\n    # 买热水瓶的价格 = 总价 - 买草帽的价格 - 买茶壶的价格\n    price_flask = total_price - price_hat - price_teapot\n    # 答案是买热水瓶用的价格\n    result = price_flask\n    # 返回答案\n    return result"]}
{"question": "花果林场有桃园(3/8)公顷，占果园的总面积的(1/4)．果园的总面积有多少公顷？", "target": 1.5, "answer": "", "score": 0, "generation": ["def solution():\n    # 桃园占果园总面积的(3/8)\n    peach_garden_ratio = 3/8\n    # 桃园占果园总面积的(1/4)\n    peach_garden_total_ratio = 1/4\n    # 桃园的面积 = 桃园占果园总面积的比例 * 果园总面积\n    peach_garden_area = peach_garden_ratio * total_area\n    # 果园的总面积 = 桃园的面积 / 桃园占果园总面积的比例\n    total_area = peach_garden_area / peach_garden_total_ratio\n    # 答案是果园的总面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "两个因数都是6，积=．", "target": 36.0, "answer": "", "score": 0, "generation": ["这个问题中似乎缺少了一个数值，让我们假设这个数值为36。因为36可以被6整除，所以36的因数中有6，另一个因数也是6。那么36的因数分别为6和6，它们的积为36。\n\n# solution in Python:\n\ndef solution():\n    # 缺少的数值为36\n    missing_number = 36\n    # 第一个因数为6\n    factor1 = 6\n    # 第二个因数为6\n    factor2 = 6\n    # 积 = 第一个因数 * 第二个因数\n    product = factor1 * factor2\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "有3个小朋友，每次选2个人排成一排拍照片，一共有多少种拍法．", "target": 6.0, "answer": "", "score": 0, "generation": ["首先，我们可以计算出3个小朋友中选出2个人排成一排的所有可能性。这相当于从3个小朋友中选取2个人的组合数。组合数的计算公式为：$C(n, k) = \\frac{n!}{k!(n-k)!}$，其中$n$表示总共的小朋友数，$k$表示每次选取的小朋友数。\n\n现在我们来计算在3个小朋友中选取2个人排成一排的所有可能性。\n\n```python\nimport math\n\ndef solution():\n    # 总共的小朋友数\n    total_children = 3\n    # 每次选取的小朋友数\n    selected_children = 2\n    # 计算组合数\n    combinations = math.factorial(total_children) / (math.factorial(selected_children) * math.factorial(total_children - selected_children))\n    # 答案是所有可能的排法\n    result = combinations\n    # 返回答案\n    return result\n```"]}
{"question": "一个西瓜，妈妈吃了它的(1/8)，丁丁吃了它的(2/8)，他们一共吃了这个西瓜的几分之几？（　　）", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # 妈妈吃了西瓜的(1/8)\n    mom_fraction = 1/8\n    # 丁丁吃了西瓜的(2/8)\n    dd_fraction = 2/8\n    # 他们一共吃了这个西瓜的几分之几 = 妈妈吃的比例 + 丁丁吃的比例\n    total_fraction = mom_fraction + dd_fraction\n    # 答案是他们一共吃了这个西瓜的几分之几\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "重阳节市体委组织登山比赛．在长达845米的山路中．每隔65米设一个服务站（起点和终点不设）．共设多少个服务站？", "target": 12.0, "answer": 11.0, "score": 0, "generation": ["def solution():\n    # 长度为845米的山路\n    total_distance = 845\n    # 每隔65米设一个服务站\n    distance_between_stations = 65\n    # 起点和终点不设服务站，所以实际需要服务站的距离为总距离减去起点和终点的距离\n    actual_distance = total_distance - 2 * distance_between_stations\n    # 计算服务站的数量，向上取整\n    num_stations = actual_distance // distance_between_stations\n    # 答案是服务站的数量\n    result = num_stations\n    # 返回答案\n    return result"]}
{"question": "水果店运来一批水果，第一天卖出全部的(2/8)，第二天卖出全部的(3/8)，两天一共卖出全部水果的几分之几？", "target": 0.625, "answer": 0.625, "score": 1, "generation": ["def solution():\n    # 第一天卖出的比例为2/8\n    sold_fraction_day1 = 2/8\n    # 第二天卖出的比例为3/8\n    sold_fraction_day2 = 3/8\n    # 两天一共卖出的比例为第一天加第二天\n    total_sold_fraction = sold_fraction_day1 + sold_fraction_day2\n    # 答案是两天一共卖出全部水果的比例\n    result = total_sold_fraction\n    # 返回答案\n    return result"]}
{"question": "每千克苹果3.25元，爸爸买了14千克苹果，付出了50元，应找回多少钱？", "target": 4.5, "answer": 4.5, "score": 1, "generation": ["def solution():\n    # 每千克苹果的价格为3.25元\n    price_per_kg = 3.25\n    # 爸爸买了14千克苹果\n    purchased_kg = 14\n    # 爸爸付出的总金额为50元\n    total_paid = 50\n    # 应付金额 = 每千克价格 * 购买的千克数\n    total_due = price_per_kg * purchased_kg\n    # 找回的金额 = 爸爸付出的总金额 - 应付金额\n    change = total_paid - total_due\n    # 答案是找回的金额\n    result = change\n    # 返回答案\n    return result"]}
{"question": "学校体育训练队3天喝了90瓶矿泉水，照这样计算，还有180瓶矿泉水，还能喝几天？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 学校体育训练队3天喝了90瓶矿泉水\n    days = 3\n    bottles_consumed = 90\n    # 每天喝的矿泉水瓶数 = 总瓶数 / 总天数\n    daily_consumption = bottles_consumed / days\n    # 剩余的矿泉水瓶数\n    remaining_bottles = 180\n    # 还能喝的天数 = 剩余瓶数 / 每天喝的瓶数\n    days_left = remaining_bottles / daily_consumption\n    # 答案是还能喝的天数\n    result = days_left\n    # 返回答案\n    return result"]}
{"question": "小明骑自行车到姥姥家，他的自行车的轮子的直径是1米，若姥姥家离小明家628米．则到达姥姥家时小明的自行车至少要转多少圈．（假设小明的自行车走直线）", "target": 199.8986, "answer": 199.89877737069446, "score": 1, "generation": ["def solution():\n    # 自行车轮子的直径为1米\n    diameter = 1\n    # 姥姥家离小明家的距离为628米\n    distance = 628\n    # 计算自行车每转一圈所走的距离（周长）\n    circumference = diameter * 3.14159\n    # 计算至少要转的圈数\n    num_of_turns = distance / circumference\n    # 答案是至少要转的圈数\n    result = num_of_turns\n    # 返回答案\n    return result"]}
{"question": "一件羽绒服打0.7出售，现在每件280元，现价比原价便宜多少元．", "target": 120.0, "answer": 84.0, "score": 0, "generation": ["def solution():\n    # 羽绒服原价\n    original_price = 280\n    # 羽绒服现价\n    current_price = 0.7 * original_price\n    # 便宜的金额 = 原价 - 现价\n    discount_amount = original_price - current_price\n    # 答案是便宜的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "林场去年种植了1000棵树苗，死亡率是2%，林场种植的这批树苗的成活率=．", "target": 98.0, "answer": 0.98, "score": 0, "generation": ["def solution():\n    # 林场去年种植了1000棵树苗\n    total_seedlings = 1000\n    # 死亡率是2%\n    death_rate = 0.02\n    # 成活率 = 1 - 死亡率\n    survival_rate = 1 - death_rate\n    # 答案是这批树苗的成活率\n    result = survival_rate\n    # 返回答案\n    return result"]}
{"question": "6（1）班有40人，有(3/4)的同学订了《小学生数学报》，有(4/5)的同学订了《小学生语文学习》，两种都订的至少有多少人？", "target": 22.0, "answer": 22.0, "score": 1, "generation": ["def solution():\n    # 6（1）班的总人数为40人\n    total_students = 40\n    # 订了《小学生数学报》的比例为(3/4)\n    math_subscribers_fraction = 3/4\n    # 订了《小学生语文学习》的比例为(4/5)\n    chinese_subscribers_fraction = 4/5\n    # 订了两种都的比例为两种都订的人数 / 总人数\n    both_subscribers_fraction = 0\n    # 两种都订的人数至少为0，最多为总人数\n    for i in range(total_students + 1):\n        # 计算订了两种都的人数\n        if i / total_students == math_subscribers_fraction + chinese_subscribers_fraction - 1:\n            both_subscribers_fraction = i / total_students\n            break\n    # 至少订了两种都的人数 = 总人数 * 订了两种都的比例\n    at_least_both_subscribers = total_students * both_subscribers_fraction\n    # 答案是至少订了两种都的人数\n    result = at_least_both_subscribers\n    # 返回答案\n    return result"]}
{"question": "有一堆螺丝和螺母，若一个螺丝配2个螺母，则多10个螺母；若1个螺丝配3个螺母，则少6个螺母．共有多少个螺丝？", "target": 16.0, "answer": 54.0, "score": 0, "generation": ["def solution():\n    # 假设螺丝的数量为x，螺母的数量为y\n    # 一个螺丝配2个螺母，则多10个螺母，可以表示为 x = 2y + 10\n    # 一个螺丝配3个螺母，则少6个螺母，可以表示为 x = 3y - 6\n\n    # 将两个方程联立解出螺丝的数量x\n    # 2y + 10 = 3y - 6\n    # 16 = y - 6\n    # y = 22\n\n    # 将y的值代入第一个方程得到螺丝的数量x\n    x = 2 * 22 + 10\n\n    # 答案是螺丝的数量x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一个数的40%比它的(2/9)多64，求这个数．", "target": 360.0, "answer": 359.9550056242969, "score": 0, "generation": ["def solution():\n    # 一个数的40%比它的(2/9)多64\n    difference = 64\n    # 让这个数为x\n    # 0.4x - (2/9)x = 64\n    # 0.4x - 0.2222x = 64\n    # 0.1778x = 64\n    # x = 64 / 0.1778\n    number = difference / 0.1778\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "有15只甲A足球队，进行双循环比赛（每两支队赛两场），共要举行多少场比赛？", "target": 210.0, "answer": 28.0, "score": 0, "generation": ["def solution():\n    # 甲A足球队的数量为15只\n    num_teams = 15\n    # 每两支队伍之间要进行两场比赛\n    games_per_match = 2\n    # 双循环比赛，每支队伍都要与其他队伍比赛一次\n    # 所以每支队伍要进行的比赛场次为总队伍数减去自己再乘以比赛场次\n    total_games = (num_teams - 1) * games_per_match\n    # 答案是比赛的总场次\n    result = total_games\n    # 返回答案\n    return result"]}
{"question": "假期时间，王叔叔要去青岛旅游．王叔叔家到青岛825千米，他坐火车3小时行了495千米．王叔叔还需几小时到达青岛？", "target": 2.0, "answer": 3.0, "score": 0, "generation": ["def solution():\n    # 王叔叔家到青岛的距离为825千米\n    total_distance = 825\n    # 王叔叔坐火车行驶的距离为495千米\n    distance_covered = 495\n    # 王叔叔已经行驶的时间为3小时\n    time_spent = 3\n    # 王叔叔剩余的距离 = 总距离 - 已经行驶的距离\n    remaining_distance = total_distance - distance_covered\n    # 王叔叔剩余需要行驶的速度 = 剩余距离 / 剩余时间\n    remaining_speed = remaining_distance / time_spent\n    # 王叔叔还需行驶的时间 = 剩余距离 / 剩余需要行驶的速度\n    time_to_arrive = remaining_distance / remaining_speed\n    # 答案是王叔叔还需几小时到达青岛\n    result = time_to_arrive\n    # 返回答案\n    return result"]}
{"question": "环保小队要栽种500棵树苗，5天后还有180棵没栽，环保小队平均每天栽种多少棵树苗？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 环保小队要栽种的树苗数量为500棵\n    total_trees = 500\n    # 5天后还有180棵树苗没栽\n    remaining_trees = 180\n    # 已经栽种的树苗数量 = 总数 - 剩余数量\n    planted_trees = total_trees - remaining_trees\n    # 平均每天栽种的树苗数量 = 已栽种数量 / 天数\n    trees_per_day = planted_trees / 5\n    # 答案是平均每天栽种的树苗数量\n    result = trees_per_day\n    # 返回答案\n    return result"]}
{"question": "花园里有75盆菊花，月季花比菊花的12倍多15盆，花园里有多少盆月季花？", "target": 915.0, "answer": 915.0, "score": 1, "generation": ["def solution():\n    # 花园里菊花的盆数为75盆\n    num_chrysanthemums = 75\n    # 月季花比菊花的盆数是12倍多15盆\n    num_roses = 12 * num_chrysanthemums + 15\n    # 花园里月季花的总盆数 = 月季花的盆数\n    total_roses = num_roses\n    # 答案是花园里月季花的总盆数\n    result = total_roses\n    # 返回答案\n    return result"]}
{"question": "两个加数的和比第一个加数大4.75，比第二个加数大9.65，这两个加数的和=．", "target": 14.4, "answer": "", "score": 0, "generation": ["def solution():\n    # 设第一个加数为x，第二个加数为y\n    # 两个加数的和比第一个加数大4.75，即 x + y = x + 4.75\n    # 两个加数的和比第二个加数大9.65，即 x + y = y + 9.65\n    # 由上面两个等式可得：x + 4.75 = y + 9.65\n    # 整理得：x - y = 9.65 - 4.75 = 4.9\n    # 两个加数的和 = x + y = (x - y) + 2y = 4.9 + 2y\n    # 所以，两个加数的和为4.9 + 2y\n\n    # 答案是两个加数的和\n    result = 4.9 + 2*y\n    # 返回答案\n    return result"]}
{"question": "李老师看一本书，第一天看了全书的(1/5)，第二天看了全书的(1/4)，还剩下88页没有看，这本书共有多少页？", "target": 160.0, "answer": 199.6, "score": 0, "generation": ["def solution():\n    # 剩余未看页数为88页\n    remaining_pages = 88\n    # 第一天看了全书的(1/5)\n    fraction_day1 = 1/5\n    # 第二天看了全书的(1/4)\n    fraction_day2 = 1/4\n    # 剩余未看部分 = 1 - 第一天看的比例 - 第二天看的比例\n    remaining_fraction = 1 - fraction_day1 - fraction_day2\n    # 剩余未看部分的页数 = 剩余未看页数 / 剩余未看部分\n    remaining_pages_fraction = remaining_pages / remaining_fraction\n    # 全书的总页数 = 剩余未看部分的页数 + 第一天看的页数 + 第二天看的页数\n    total_pages = remaining_pages_fraction + remaining_pages * fraction_day1 + remaining_pages * fraction_day2\n    # 答案是全书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "镇海雅乐学校的运动会入场时，全班正好排成相等的6行．小林排在第二行，从前数，她是第5个，从后数她是第3个，这个班共有多少人．", "target": 42.0, "answer": 42.0, "score": 1, "generation": ["def solution():\n    # 小林从前数是第5个，从后数是第3个，说明小林所在的行有5+3-1=7人\n    # 因为全班排成相等的6行，所以全班人数为7*6=42人\n    total_students = 42\n    # 答案是全班人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "李华读一本故事书，第一天读了全书的(1/5)，第二天读了全书的(2/5)，两天一共读了全书的多少．", "target": 0.6, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 故事书的总页数为1\n    total_pages = 1\n    # 第一天读了全书的(1/5)\n    read_fraction_day1 = 1/5\n    # 第二天读了全书的(2/5)\n    read_fraction_day2 = 2/5\n    # 两天一共读了全书的比例 = 第一天读的比例 + 第二天读的比例\n    total_read_fraction = read_fraction_day1 + read_fraction_day2\n    # 两天一共读了全书的比例 = 1，所以两天一共读了全书\n    total_read = total_pages\n    # 答案是两天一共读了全书\n    result = total_read\n    # 返回答案\n    return result"]}
{"question": "六年级有138名学生订杂志，其中有(5/6)的学生订《科学画报》，有(2/3)的学生订《智力大王》．两种读物都订的有多少名学生？", "target": 69.0, "answer": 76.66666666666667, "score": 0, "generation": ["def solution():\n    # 六年级的学生总数为138人\n    total_students = 138\n    # 订《科学画报》的学生比例为5/6\n    ratio_science_magazine = 5/6\n    # 订《智力大王》的学生比例为2/3\n    ratio_brain_magazine = 2/3\n    # 订两种读物的学生人数 = 总人数 * 两种读物都订的比例\n    students_both_magazines = total_students * (ratio_science_magazine * ratio_brain_magazine)\n    # 答案是订两种读物的学生人数\n    result = students_both_magazines\n    # 返回答案\n    return result"]}
{"question": "一个数的(4/5)是80，这个数的(3/4)=．", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 一个数的(4/5)是80\n    num = 80 / (4/5)\n    # 这个数的(3/4)\n    result = num * (3/4)\n    # 返回答案\n    return result"]}
{"question": "商店原有面粉300吨，又运来240吨，如果这些面粉9天卖完，平均每天卖面粉多少吨？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 商店原有面粉300吨\n    initial_flour = 300\n    # 运来的面粉240吨\n    additional_flour = 240\n    # 总共的面粉量 = 原有面粉 + 运来的面粉\n    total_flour = initial_flour + additional_flour\n    # 卖完所有面粉需要的天数为9天\n    days_to_sell = 9\n    # 平均每天卖面粉的量 = 总面粉量 / 卖完所需天数\n    average_daily_sales = total_flour / days_to_sell\n    # 答案是平均每天卖面粉的量\n    result = average_daily_sales\n    # 返回答案\n    return result"]}
{"question": "某校初3英语口试达到优秀标准的有60人占总人数的30%，在扇形统计图中，表示良好等级的占50%，良好等级的有多少人．", "target": 100.0, "answer": "", "score": 0, "generation": ["首先，根据题目可知，总人数为60人占总人数的30%，即60 = 0.3 * 总人数，解方程可得总人数为200人。\n\n良好等级的人数为总人数的50%，即良好等级的人数为200 * 0.5 = 100人。\n\n接下来，我们将上述推理用Python代码表示出来。\n\n```python\ndef solution():\n    # 优秀标准的人数为60人，占总人数的30%\n    excellent_count = 60\n    excellent_percentage = 0.3\n    # 计算总人数\n    total_students = excellent_count / excellent_percentage\n\n    # 良好等级的人数占总人数的50%\n    good_percentage = 0.5\n    # 计算良好等级的人数\n    good_count = total_students * good_percentage\n\n    # 答案是良好等级的人数\n    result = good_count\n    # 返回答案\n    return result\n```"]}
{"question": "一种电视机，原来售价1200元，现在的售价是1080元．降价百分之几？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 原来的售价为1200元\n    original_price = 1200\n    # 现在的售价为1080元\n    current_price = 1080\n    # 降价金额 = 原价 - 现价\n    price_reduction = original_price - current_price\n    # 降价百分比 = (降价金额 / 原价) * 100%\n    reduction_percentage = (price_reduction / original_price) * 100\n    # 答案是降价百分比\n    result = reduction_percentage\n    # 返回答案\n    return result"]}
{"question": "一种洗衣机现在每台售价3000元，比原来降低了750元，现在每台的售价是原价的百分之几？", "target": 80.0, "answer": 75.0, "score": 0, "generation": ["def solution():\n    # 洗衣机原价为3000元\n    original_price = 3000\n    # 降价了750元\n    discount = 750\n    # 现价 = 原价 - 降价\n    current_price = original_price - discount\n    # 现价占原价的百分比 = (现价 / 原价) * 100%\n    percentage = (current_price / original_price) * 100\n    # 答案是现在每台的售价是原价的百分之几\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "神机妙算：650000/125/2/5/8=．", "target": 65.0, "answer": 65.0, "score": 1, "generation": ["def solution():\n    # 计算650000/125/2/5/8的结果\n    result = 650000 / 125 / 2 / 5 / 8\n    # 返回答案\n    return result"]}
{"question": "小小超市新进25瓶苹果酱，草莓酱比苹果酱的2倍多5瓶．草莓酱有多少瓶？", "target": 55.0, "answer": 55.0, "score": 1, "generation": ["def solution():\n    # 小超市新进25瓶苹果酱\n    num_apple_jam = 25\n    # 草莓酱比苹果酱的2倍多5瓶\n    num_strawberry_jam = 2 * num_apple_jam + 5\n    # 答案是草莓酱的瓶数\n    result = num_strawberry_jam\n    # 返回答案\n    return result"]}
{"question": "有3件上衣、2条裤子、1条裙子，要配成一套衣服有多少种不同的配法．", "target": 9.0, "answer": 6.0, "score": 0, "generation": ["def solution():\n    # 有3件上衣\n    num_tops = 3\n    # 有2条裤子\n    num_bottoms = 2\n    # 有1条裙子\n    num_dresses = 1\n    # 一套衣服的配法 = 上衣 * 裤子 * 裙子\n    total_outfits = num_tops * num_bottoms * num_dresses\n    # 答案是不同的配法数量\n    result = total_outfits\n    # 返回答案\n    return result"]}
{"question": "一本童话书有48页，每页25行，每行20个字，这本故事书共多少个字？", "target": 24000.0, "answer": 24000.0, "score": 1, "generation": ["def solution():\n    # 童话书的总页数为48页\n    total_pages = 48\n    # 每页的行数为25行\n    lines_per_page = 25\n    # 每行的字数为20个字\n    words_per_line = 20\n    # 每页的字数 = 每行的字数 * 每页的行数\n    words_per_page = lines_per_page * words_per_line\n    # 故事书共有的字数 = 总页数 * 每页的字数\n    total_words = total_pages * words_per_page\n    # 答案是故事书共有的字数\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "食品商店运来鸡蛋和鸭蛋共14筐准备节日供应，其中鸭蛋占总筐数的(3/7)，因供应需要，又运来几筐鸭蛋，这时鸭蛋占总筐数的50%．后来又运来多少筐鸭蛋？", "target": 2.0, "answer": 0.8571428571428574, "score": 0, "generation": ["def solution():\n    # 鸡蛋和鸭蛋共14筐\n    total_baskets = 14\n    # 鸭蛋占总筐数的(3/7)\n    initial_duck_baskets = (3/7) * total_baskets\n    # 鸭蛋占总筐数的50%\n    final_duck_baskets_percentage = 0.5\n    # 需要运来的鸭蛋筐数 = 初始鸭蛋筐数 * (目标鸭蛋占比 - 初始鸭蛋占比) / (目标鸭蛋占比)\n    additional_duck_baskets = initial_duck_baskets * (final_duck_baskets_percentage - (3/7)) / final_duck_baskets_percentage\n    # 答案是后来运来的鸭蛋筐数\n    result = additional_duck_baskets\n    # 返回答案\n    return result"]}
{"question": "祝飞办了一张手抄报．“趣味数学”栏目大约占了手抄报的(1/8)，“学海拾贝”栏目大约占了手抄报的(1/4)，“古今中外”栏目比“趣味数学”和“学海拾贝”两个栏目的版面少占手抄报的(2/32)，“古今中外”栏目占了手抄报的几分之几？", "target": 0.3125, "answer": 0.5625, "score": 0, "generation": ["def solution():\n    # “趣味数学”栏目占比为(1/8)\n    math_section = 1/8\n    # “学海拾贝”栏目占比为(1/4)\n    knowledge_section = 1/4\n    # “古今中外”栏目比其他两个栏目少占比为(2/32)\n    history_section = 2/32\n    # “古今中外”栏目占比 = 1 - “趣味数学” - “学海拾贝” - “古今中外”比其他两个栏目少占比\n    history_section_percentage = 1 - math_section - knowledge_section - history_section\n    # 答案是“古今中外”栏目占手抄报的比例\n    result = history_section_percentage\n    # 返回答案\n    return result"]}
{"question": "修路队原计划25天修一条路，每天修480米，结果比原计划提前1天完成任务，实际每天修多少米？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 原计划修路的天数为25天\n    planned_days = 25\n    # 每天修路的距离为480米\n    planned_distance_per_day = 480\n    # 比原计划提前1天完成任务\n    actual_days = planned_days - 1\n    # 实际每天修路的距离 = 总距离 / 实际天数\n    actual_distance_per_day = planned_distance_per_day * planned_days / actual_days\n    # 答案是实际每天修路的距离\n    result = actual_distance_per_day\n    # 返回答案\n    return result"]}
{"question": "图书室有故事书315本，比科技书少129本，两种书共有多少本？", "target": 759.0, "answer": 501.0, "score": 0, "generation": ["def solution():\n    # 故事书的数量为315本\n    num_story_books = 315\n    # 科技书比故事书少129本\n    num_tech_books_less = 129\n    # 科技书的数量 = 故事书的数量 - 科技书比故事书少的数量\n    num_tech_books = num_story_books - num_tech_books_less\n    # 两种书共有的数量 = 故事书的数量 + 科技书的数量\n    total_books = num_story_books + num_tech_books\n    # 答案是两种书共有的数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一根绳子，截去20%以后，再接上6m，结果比原来的绳子长1.5m，这根绳子原来长多少米？", "target": 22.5, "answer": 22.5, "score": 1, "generation": ["def solution():\n    # 假设原始绳子长度为x米\n    # 截去20%后剩下80%，即0.8x米\n    # 再接上6米后的长度为0.8x + 6 米\n    # 根据题意，新长度比原长度长1.5米，因此有等式：0.8x + 6 = x + 1.5\n    # 化简得到：0.2x = 4.5\n    # 解方程得到：x = 22.5\n    original_length = 22.5\n    # 答案是这根绳子原来的长度\n    result = original_length\n    # 返回答案\n    return result"]}
{"question": "妈妈在超市买1袋大米和3千克白糖一共用去42元．已知这袋大米的价钱是27元，每千克白糖多少元？", "target": 5.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 一袋大米的价格为27元\n    price_rice = 27\n    # 一袋大米和3千克白糖一共用去42元\n    total_cost = 42\n    # 大米的重量为1袋\n    weight_rice = 1\n    # 白糖的重量为3千克\n    weight_sugar = 3\n    # 一袋大米和3千克白糖的总价 = 大米价格 + 白糖价格\n    total_price = price_rice * weight_rice + price_sugar * weight_sugar\n    # 每千克白糖的价格 = (一袋大米和3千克白糖的总价 - 一袋大米的价格) / 白糖的重量\n    price_sugar = (total_cost - price_rice * weight_rice) / weight_sugar\n    # 答案是每千克白糖的价格\n    result = price_sugar\n    # 返回答案\n    return result"]}
{"question": "汽车从武平到龙岩，去时用了3小时，返回用了2小时，往返平均速度=．", "target": 0.4, "answer": 0.4, "score": 1, "generation": ["def solution():\n    # 去程时间为3小时\n    time_to_destination = 3\n    # 回程时间为2小时\n    time_to_return = 2\n    # 去程距离与回程距离相同，假设距离为d\n    # 去程速度 = d / 3, 回程速度 = d / 2\n    # 往返平均速度 = 总距离 / 总时间\n    # 总距离 = 2d, 总时间 = 3 + 2 = 5\n    # 往返平均速度 = 2d / 5\n    average_speed = 2 / 5\n    # 答案是往返平均速度\n    result = average_speed\n    # 返回答案\n    return result"]}
{"question": "清明前，四年级（1）班的同学决定自己做小白花去祭扫烈士墓，他们分成6个小组，每小组9人，共做了864朵小白花，平均每位同学做了多少朵小白花？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 每小组的人数为9人\n    num_per_group = 9\n    # 总共做的小白花数量为864朵\n    total_flowers = 864\n    # 总共的小组数为6组\n    total_groups = 6\n    # 每位同学平均做的小白花数量 = 总共做的小白花数量 / (每小组的人数 * 总共的小组数)\n    flowers_per_student = total_flowers / (num_per_group * total_groups)\n    # 答案是每位同学平均做的小白花数量\n    result = flowers_per_student\n    # 返回答案\n    return result"]}
{"question": "把576瓶可乐平均装在24个盒子中，每盒售价是48元，平均每瓶售价多少元？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 可乐的瓶数为576瓶\n    total_bottles = 576\n    # 盒子的数量为24个\n    total_boxes = 24\n    # 每盒售价为48元\n    price_per_box = 48\n    # 平均每盒可乐瓶数 = 总瓶数 / 盒子数量\n    bottles_per_box = total_bottles / total_boxes\n    # 平均每瓶售价 = 每盒售价 / 平均每盒可乐瓶数\n    price_per_bottle = price_per_box / bottles_per_box\n    # 答案是平均每瓶售价\n    result = price_per_bottle\n    # 返回答案\n    return result"]}
{"question": "甲数比乙数的85%多0.8．甲乙两数的和是56.3，乙数=？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 甲数比乙数的85%多0.8\n    difference = 0.8\n    ratio = 0.85\n    # 甲乙两数的和是56.3\n    total_sum = 56.3\n    # 设乙数为x，则甲数为x * (1 + 0.85) + 0.8\n    # 根据和的关系，得到 x * (1 + 0.85) + 0.8 + x = 56.3\n    # 化简得到 x = (56.3 - 0.8) / (1 + 0.85)\n    num_b = (total_sum - difference) / (1 + ratio)\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "一辆汽车4小时行280千米，照这样的速度，5小时行驶多少千米．", "target": 350.0, "answer": 350.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的速度为280千米/4小时\n    speed = 280 / 4\n    # 5小时行驶的距离 = 速度 * 时间\n    distance = speed * 5\n    # 答案是5小时行驶的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "一批货物，第一次运走它的(1/3)，第二次运走它的(4/9)，这时还剩36吨，这批货物原来有多少吨？", "target": 162.0, "answer": 161.99999999999991, "score": 1, "generation": ["def solution():\n    # 剩余的货物重量为36吨\n    remaining_weight = 36\n    # 第一次运走的比例为1/3\n    first_transport_fraction = 1/3\n    # 第二次运走的比例为4/9\n    second_transport_fraction = 4/9\n    # 剩余货物的重量 = 原始重量 - 第一次运走的重量 - 第二次运走的重量\n    # 原始重量 = 剩余货物的重量 / (1 - 第一次运走的比例 - 第二次运走的比例)\n    original_weight = remaining_weight / (1 - first_transport_fraction - second_transport_fraction)\n    # 答案是这批货物原来的重量\n    result = original_weight\n    # 返回答案\n    return result"]}
{"question": "125与43的和被239与197的差除，商=？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 计算125与43的和\n    sum_1 = 125 + 43\n    # 计算239与197的差\n    diff_1 = 239 - 197\n    # 计算商\n    quotient = (sum_1) / (diff_1)\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一辆客车从A地开往B地，行了全程的80%，这时距B地52千米．A、B两地相距多少千米？", "target": 260.0, "answer": 52.0, "score": 0, "generation": ["def solution():\n    # 客车行驶的全程距离为52千米\n    total_distance = 52\n    # 客车行驶了全程的80%\n    traveled_fraction = 0.8\n    # 客车行驶的距离 = 全程距离 * 行驶比例\n    traveled_distance = total_distance * traveled_fraction\n    # 因为客车行驶了全程的80%，所以实际全程距离 = 行驶距离 / 行驶比例\n    actual_total_distance = traveled_distance / traveled_fraction\n    # A、B两地相距多少千米 = 实际全程距离\n    result = actual_total_distance\n    # 返回答案\n    return result"]}
{"question": "公共汽车上原有一些人，又上来25人，然后再下去了8人，这时还剩34人．公共汽车上原来有多少人？", "target": 17.0, "answer": 17.0, "score": 1, "generation": ["def solution():\n    # 原有人数设为x\n    # 上车25人后，总人数为x + 25\n    # 下车8人后，剩余人数为x + 25 - 8 = x + 17\n    # 根据题意得到方程：x + 17 = 34\n    # 解方程得到原有人数x\n    original_people = 34 - 17\n    # 答案是原有人数\n    result = original_people\n    # 返回答案\n    return result"]}
{"question": "猴子和大象的年龄加起来一共22岁，再过6年，猴子和大象的年龄加起来共多少岁．", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 猴子和大象的年龄加起来一共22岁\n    total_age_now = 22\n    # 再过6年\n    years_later = 6\n    # 猴子和大象的年龄加起来再过6年的总和 = 现在的总和 + 两者年龄增加的总和\n    total_age_later = total_age_now + 2 * years_later\n    # 答案是再过6年，猴子和大象的年龄加起来的总和\n    result = total_age_later\n    # 返回答案\n    return result"]}
{"question": "一条路长200米，在路的一旁从头至尾每隔5米植一棵树，一共要植多少棵？", "target": 41.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 路的总长度为200米\n    total_length = 200\n    # 每隔5米植一棵树\n    tree_spacing = 5\n    # 植树的总数 = 路的总长度 / 植树间隔\n    total_trees = total_length // tree_spacing\n    # 答案是植树的总数\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "一种服装降价20%后售价为84元，原来的售价=多少元？", "target": 105.0, "answer": 105.0, "score": 1, "generation": ["def solution():\n    # 降价后的售价为84元\n    discounted_price = 84\n    # 降价比例为20%\n    discount_rate = 0.2\n    # 原售价 = 降价后售价 / (1 - 降价比例)\n    original_price = discounted_price / (1 - discount_rate)\n    # 答案是原售价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "有-根木头，要锯成13段．每锯开一处需要5分（钟），全部锯完一共要多少分？", "target": 60.0, "answer": 65.0, "score": 0, "generation": ["def solution():\n    # 木头要锯成13段\n    num_segments = 13\n    # 每锯开一处需要5分钟\n    time_per_cut = 5\n    # 全部锯完需要的总时间 = 段数 * 每处锯开时间\n    total_time = num_segments * time_per_cut\n    # 答案是全部锯完需要的总时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "从540中连续减去多少次6，结果得0．", "target": 90.0, "answer": 91.0, "score": 0, "generation": ["def solution():\n    # 起始数值为540\n    number = 540\n    # 每次减去的数值为6\n    subtract_value = 6\n    # 循环减去的次数\n    count = 0\n    # 当数值大于等于0时，继续减去6，并记录次数\n    while number >= 0:\n        number -= subtract_value\n        count += 1\n    # 答案是减去的次数\n    result = count\n    # 返回答案\n    return result"]}
{"question": "刘叔叔带700元钱买化肥，买了16袋化肥，剩60元，每袋化肥的价钱=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 刘叔叔带的钱数为700元\n    total_money = 700\n    # 刘叔叔买了的化肥袋数为16袋\n    num_bags = 16\n    # 刘叔叔剩下的钱数为60元\n    remaining_money = 60\n    # 每袋化肥的价格 = (总钱数 - 剩下的钱数) / 化肥袋数\n    price_per_bag = (total_money - remaining_money) / num_bags\n    # 答案是每袋化肥的价格\n    result = price_per_bag\n    # 返回答案\n    return result"]}
{"question": "光明小学五年级有180名学生，六年级学生人数是五年级的(5/6)，又是全校人数的(2/11)，光明小学全校有多少人？", "target": 825.0, "answer": 825.0, "score": 1, "generation": ["def solution():\n    # 光明小学五年级有180名学生\n    num_fifth_grade = 180\n    # 六年级学生人数是五年级的(5/6)\n    num_sixth_grade = (5/6) * num_fifth_grade\n    # 六年级学生人数又是全校人数的(2/11)\n    total_students = num_sixth_grade / (2/11)\n    # 答案是光明小学全校的人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一个球拍的价格是43.56元，足球的价格是球拍的1.5倍多2元，一个足球多少元？", "target": 67.34, "answer": 67.34, "score": 1, "generation": ["def solution():\n    # 一个球拍的价格是43.56元\n    price_racket = 43.56\n    # 足球的价格是球拍的1.5倍多2元\n    price_football = 1.5 * price_racket + 2\n    # 答案是一个足球的价格\n    result = price_football\n    # 返回答案\n    return result"]}
{"question": "王师傅9月份的工资是3200元，按照个人所得税法规定，个人的月收入超过3000元的部分，应按照5%的税率征收个人所得税．王师傅这个月应缴纳个人所得税多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 王师傅9月份的工资是3200元\n    salary = 3200\n    # 个人所得税的起征点是3000元\n    threshold = 3000\n    # 个人月收入超过3000元的部分\n    taxable_income = salary - threshold\n    # 个人所得税税率为5%\n    tax_rate = 0.05\n    # 应缴纳的个人所得税额度 = 超过部分 * 税率\n    tax_amount = taxable_income * tax_rate\n    # 答案是应缴纳的个人所得税额度\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "甲、乙两队一起检修一条公路，共用7天检修完．甲队检修了840米，乙队检修了1050米，甲队比乙队平均每天少检修多少米？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 甲队检修了840米\n    distance_a = 840\n    # 乙队检修了1050米\n    distance_b = 1050\n    # 共用7天检修完\n    total_days = 7\n    # 甲队平均每天检修的距离 = 甲队检修的总距离 / 总天数\n    avg_distance_a = distance_a / total_days\n    # 乙队平均每天检修的距离 = 乙队检修的总距离 / 总天数\n    avg_distance_b = distance_b / total_days\n    # 甲队比乙队平均每天少检修的距离 = 乙队平均每天检修的距离 - 甲队平均每天检修的距离\n    difference = avg_distance_b - avg_distance_a\n    # 答案是甲队比乙队平均每天少检修的距离\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "计算：32/(16/25)*5=．", "target": 250.0, "answer": 250.0, "score": 1, "generation": ["def solution():\n    # 计算32/(16/25)*5\n    result = 32 / (16/25) * 5\n    # 答案是计算结果\n    return result"]}
{"question": "春松果园有梨树460棵，苹果树比梨树多25%，果园里有苹果树多少棵？", "target": 575.0, "answer": 575.0, "score": 1, "generation": ["def solution():\n    # 梨树的数量为460棵\n    num_peartrees = 460\n    # 苹果树比梨树多25%\n    increase_percentage = 0.25\n    # 苹果树的数量 = 梨树的数量 * (1 + 增加百分比)\n    num_appletrees = num_peartrees * (1 + increase_percentage)\n    # 答案是果园里苹果树的数量\n    result = num_appletrees\n    # 返回答案\n    return result"]}
{"question": "学校李老师带8750元去购买体育用品，其中买篮球用去(2/5)，买排球用去(3/7)，其余的买足球．买足球用了多少元钱？", "target": 1500.0, "answer": 1500.0, "score": 1, "generation": ["def solution():\n    # 李老师带去购买体育用品的总金额为8750元\n    total_money = 8750\n    # 买篮球用去的比例为2/5\n    basketball_fraction = 2/5\n    # 买排球用去的比例为3/7\n    volleyball_fraction = 3/7\n    # 剩余用于买足球的比例为1 - 买篮球比例 - 买排球比例\n    remaining_fraction = 1 - basketball_fraction - volleyball_fraction\n    # 买篮球用去的金额 = 总金额 * 买篮球比例\n    basketball_money = total_money * basketball_fraction\n    # 买排球用去的金额 = 总金额 * 买排球比例\n    volleyball_money = total_money * volleyball_fraction\n    # 买足球用去的金额 = 总金额 * 剩余比例\n    soccer_money = total_money * remaining_fraction\n    # 答案是买足球用去的金额\n    result = soccer_money\n    # 返回答案\n    return result"]}
{"question": "一个街心花园占地(5/8)公顷，其中草坪占(2/5)，花圃占地(1/8)公顷，其余的是人行道．人行道的面积=多少公顷？", "target": 0.25, "answer": 0.296875, "score": 0, "generation": ["def solution():\n    # 街心花园的总面积为(5/8)公顷\n    total_area = 5/8\n    # 草坪占(2/5)公顷\n    lawn_area = (2/5) * total_area\n    # 花圃占(1/8)公顷\n    flower_bed_area = (1/8) * total_area\n    # 人行道的面积 = 总面积 - 草坪面积 - 花圃面积\n    sidewalk_area = total_area - lawn_area - flower_bed_area\n    # 答案是人行道的面积\n    result = sidewalk_area\n    # 返回答案\n    return result"]}
{"question": "一辆公共汽车出发时，车上有12个乘客，到了第一站，下去了2个乘客，上来了6个乘客；到了第二站，下去了3个乘客，上来了4个乘客，这时车上共有多少个乘客？", "target": 17.0, "answer": 17.0, "score": 1, "generation": ["def solution():\n    # 车上初始有12个乘客\n    initial_passengers = 12\n    # 第一站下去了2个乘客，上来了6个乘客\n    passengers_at_first_stop = initial_passengers - 2 + 6\n    # 第二站下去了3个乘客，上来了4个乘客\n    total_passengers = passengers_at_first_stop - 3 + 4\n    # 答案是车上共有的乘客数量\n    result = total_passengers\n    # 返回答案\n    return result"]}
{"question": "张叔叔在书店买了两本书．一本28.5元，另一本14.4元．他付出50元，应找回多少元？", "target": 7.1, "answer": 7.100000000000001, "score": 1, "generation": ["def solution():\n    # 第一本书的价格为28.5元\n    price_book1 = 28.5\n    # 第二本书的价格为14.4元\n    price_book2 = 14.4\n    # 付出的金额为50元\n    amount_paid = 50\n    # 两本书的总价格 = 第一本书的价格 + 第二本书的价格\n    total_price = price_book1 + price_book2\n    # 找回的金额 = 付出的金额 - 两本书的总价格\n    change = amount_paid - total_price\n    # 答案是找回的金额\n    result = change\n    # 返回答案\n    return result"]}
{"question": "一批煤用去25%，还剩48吨，这批煤共有多少吨？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 剩余煤的重量为48吨\n    remaining_coal = 48\n    # 用去了25%，相当于剩余量是75%\n    remaining_percentage = 0.75\n    # 原始煤的总重量 = 剩余煤的重量 / 剩余比例\n    total_coal = remaining_coal / remaining_percentage\n    # 答案是这批煤的总重量\n    result = total_coal\n    # 返回答案\n    return result"]}
{"question": "有一列火车以每小时140千米的速度离开洛杉矶直奔纽约，同时，另一辆火车以每小时160千米的速度从纽约开往洛杉矶．如果有一只鸟以每小时30千米的速度和两列火车同时启动，从洛杉矶出发，碰到另一列火车后返回，往返在两列火车之间，直到两列火车相遇为止．已知洛杉矶到纽约的铁路长4500千米，请问：这只小鸟飞行了多少千米？", "target": 450.0, "answer": "", "score": 0, "generation": ["首先，我们计算两列火车相遇所需的时间。火车相对速度为140 km/h + 160 km/h = 300 km/h。根据相遇时间 = 距离 / 相对速度，可以得到相遇时间为 4500 km / 300 km/h = 15 小时。\n\n小鸟以 30 km/h 的速度飞行，所以在 15 小时内，小鸟飞行的距离为 15 小时 * 30 km/h = 450 km。\n\n接下来是Python代码实现：\n\n```python\ndef solution():\n    # 两列火车相对速度为 140 km/h + 160 km/h\n    relative_speed_trains = 140 + 160\n    # 火车相遇所需时间 = 4500 km / 相对速度\n    time_to_meet = 4500 / relative_speed_trains\n    # 小鸟的飞行距离 = 时间 * 小鸟的速度\n    bird_distance = time_to_meet * 30\n    # 答案是小鸟飞行的距离\n    result = bird_distance\n    # 返回答案\n    return result\n```"]}
{"question": "学校在小红和小明两家之间的一段公路边．放学后，两人同时向各自家里走去．小明每小时走(18/5)千米，小红每小时走3千米，(5/12)小时后两人同时到家．两家相距多少千米？", "target": 2.75, "answer": 2.75, "score": 1, "generation": ["def solution():\n    # 小明每小时走(18/5)千米\n    speed_ming = 18/5\n    # 小红每小时走3千米\n    speed_hong = 3\n    # 两人同时到家需要(5/12)小时\n    time_together = 5/12\n    # 小明走的距离 = 小明的速度 * 时间\n    distance_ming = speed_ming * time_together\n    # 小红走的距离 = 小红的速度 * 时间\n    distance_hong = speed_hong * time_together\n    # 两家相距的距离 = 小明走的距离 + 小红走的距离\n    total_distance = distance_ming + distance_hong\n    # 答案是两家相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某市500名外语教师，懂英语或德语，其中懂英语的有375人，既懂英语又懂德语的有100人，那么懂德语的教师有多少人．", "target": 225.0, "answer": "", "score": 0, "generation": ["首先，我们可以使用集合的概念来解决这个问题。\n\n让我们设定：\n- 懂英语的教师为集合 A\n- 懂德语的教师为集合 B\n- 既懂英语又懂德语的教师为集合 A 与集合 B 的交集\n\n根据题目描述，我们有以下信息：\n- |A| = 375（懂英语的教师有375人）\n- |A ∩ B| = 100（既懂英语又懂德语的教师有100人）\n\n我们的目标是求解 |B|（懂德语的教师有多少人）。\n\n根据集合的基本原理，我们知道：\n|A ∪ B| = |A| + |B| - |A ∩ B|\n\n因此，我们可以通过上述公式求解出 |B| 的值。\n\n现在让我们用Python代码来实现这个问题。\n\n```python\ndef solution():\n    # 懂英语的教师有375人\n    num_english = 375\n    # 既懂英语又懂德语的教师有100人\n    num_both = 100\n    # 求解懂德语的教师人数\n    num_german = num_english + num_both - num_english\n    # 答案是懂德语的教师人数\n    result = num_german\n    # 返回答案\n    return result\n```"]}
{"question": "一个数除以23商15余21，这个数=．", "target": 366.0, "answer": 366.0, "score": 1, "generation": ["def solution():\n    # 除数为23，商为15，余数为21\n    divisor = 23\n    quotient = 15\n    remainder = 21\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是这个数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "在一块长18米，宽12米的长方形果园里种果树，平均每棵占地2平方米，这块果园能种果树多少棵？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 果园的长为18米\n    length = 18\n    # 果园的宽为12米\n    width = 12\n    # 果树每棵占地2平方米\n    area_per_tree = 2\n    # 果园的总面积 = 长 * 宽\n    total_area = length * width\n    # 能种果树的数量 = 总面积 / 每棵占地面积\n    num_trees = total_area / area_per_tree\n    # 答案是能种果树的数量\n    result = num_trees\n    # 返回答案\n    return result"]}
{"question": "在道路的一侧植树，每隔5米植一棵，从起点到终点共植10棵，这条路有多少米．", "target": 45.0, "answer": 50.0, "score": 0, "generation": ["def solution():\n    # 每隔5米植一棵树\n    distance_between_trees = 5\n    # 共植10棵树\n    total_trees = 10\n    # 总共种树的距离 = (树的数量 - 1) * 每棵树之间的距离\n    total_distance = (total_trees - 1) * distance_between_trees\n    # 因为起点到终点的距离包括了所有树之间的距离，所以道路的总长度 = 种树的距离 + 最后一棵树到终点的距离\n    road_length = total_distance + distance_between_trees\n    # 答案是道路的总长度\n    result = road_length\n    # 返回答案\n    return result"]}
{"question": "现在每件衣服的成本比过去降低了20%，是把多少看作单位“1”，现在每件衣服的成本是过去的多少%．", "target": 80.0, "answer": 1.25, "score": 0, "generation": ["def solution():\n    # 成本降低了20%，即现在成本为过去成本的80%\n    current_cost_percentage = 80\n    # 现在成本是过去成本的多少%\n    result = 100 / current_cost_percentage\n    # 返回答案\n    return result"]}
{"question": "同学们参加植树活动．男生植了40棵，女生植了50棵．男生比女生少植百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 男生植树40棵\n    num_trees_male = 40\n    # 女生植树50棵\n    num_trees_female = 50\n    # 男生比女生少植的树的数量 = 女生植树数量 - 男生植树数量\n    difference_trees = num_trees_female - num_trees_male\n    # 男生比女生少植的百分比 = (男生比女生少植的树的数量 / 女生植树数量) * 100%\n    percentage_less = (difference_trees / num_trees_female) * 100\n    # 答案是男生比女生少植的百分比\n    result = percentage_less\n    # 返回答案\n    return result"]}
{"question": "甲数的25%是1.25，乙数是60的20%，乙数是甲数的百分之几？", "target": 240.0, "answer": 960.0, "score": 0, "generation": ["def solution():\n    # 甲数是1.25\n    num_a = 1.25\n    # 乙数是60的20%\n    num_b = 60 * 20 / 100\n    # 乙数是甲数的百分之几 = (乙数 / 甲数) * 100%\n    percentage = (num_b / num_a) * 100\n    # 答案是乙数是甲数的百分之几\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "新建一条高速公路，已建成240千米，剩下的比已建成的2倍还多8千米，这条新建的高速公路全长多少千米？", "target": 728.0, "answer": 728.0, "score": 1, "generation": ["def solution():\n    # 已建成的高速公路长度为240千米\n    completed_length = 240\n    # 剩下的比已建成的2倍还多8千米\n    remaining_more_than_double = completed_length * 2 + 8\n    # 新建的高速公路全长 = 已建成的长度 + 剩下的长度\n    total_length = completed_length + remaining_more_than_double\n    # 答案是新建的高速公路全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "一堆煤平均每天烧10吨可以烧18天，如果平均每天烧12吨，可以烧多少天？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 平均每天烧10吨可以烧18天\n    days_with_10_tons = 18\n    tons_per_day_10 = 10\n    # 新的燃烧速度为12吨/天\n    tons_per_day_12 = 12\n    # 燃烧速度和燃烧时间成反比\n    days_with_12_tons = (tons_per_day_10 / tons_per_day_12) * days_with_10_tons\n    # 答案是燃烧12吨每天可以烧的天数\n    result = days_with_12_tons\n    # 返回答案\n    return result"]}
{"question": "去年某校参加数学奥林匹克竞赛的学生中，女生占总数的(1/4)，今年全校参赛的学生增加了20%，女生占总数的(1/3)，与去年相比，今年参赛的女生人数增加了多少%．", "target": 60.0, "answer": "", "score": 0, "generation": ["首先，去年女生占总数的比例为1/4，今年女生占总数的比例为1/3。假设去年参赛学生总数为x，则女生人数为(1/4)x，今年参赛学生总数为1.2x，女生人数为(1/3)(1.2x)。\n\n女生人数增加的百分比为：((1/3)(1.2x) - (1/4)x) / ((1/4)x) * 100%。\n\n现在我们来计算这个百分比增加值。\n\n```python\ndef solution():\n    # 去年女生占总数的比例为1/4\n    female_ratio_last_year = 1/4\n    # 今年女生占总数的比例为1/3\n    female_ratio_this_year = 1/3\n    # 今年参赛学生总数相比去年增加了20%\n    increase_percentage = 0.2\n\n    # 女生人数增加的百分比 = ((1/3)*(1+increase_percentage) - (1/4)) / (1/4) * 100%\n    female_increase_percentage = ((1/3)*(1+increase_percentage) - female_ratio_last_year) / female_ratio_last_year * 100\n\n    # 答案是女生人数增加的百分比\n    result = female_increase_percentage\n    # 返回答案\n    return result\n```"]}
{"question": "特快列车1小时大约行160千米，12小时大约行多少千米．", "target": 1920.0, "answer": 1920.0, "score": 1, "generation": ["def solution():\n    # 特快列车1小时行驶160千米\n    distance_per_hour = 160\n    # 12小时行驶的总距离 = 每小时行驶的距离 * 总小时数\n    total_distance = distance_per_hour * 12\n    # 答案是12小时行驶的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "洛阳市民在隋唐城遗址公园举行民间艺术展，其中展出剪纸作品128件，比书法作品的(9/11)少16件，这次共展出书法作品多少件？", "target": 176.0, "answer": 616.0000000000002, "score": 0, "generation": ["def solution():\n    # 剪纸作品的数量为128件\n    num_paper_cutting = 128\n    # 剪纸作品比书法作品少16件，比例为9/11\n    difference = 16\n    ratio_paper_cutting_to_calligraphy = 9/11\n    # 计算书法作品的数量\n    num_calligraphy = (num_paper_cutting - difference) / (1 - ratio_paper_cutting_to_calligraphy)\n    # 答案是书法作品的数量\n    result = num_calligraphy\n    # 返回答案\n    return result"]}
{"question": "计算：0.5-(1/3)+(1/4)=．", "target": 0.4166666666666667, "answer": 0.4166666666666667, "score": 1, "generation": ["def solution():\n    # 计算0.5-(1/3)+(1/4)\n    result = 0.5 - (1/3) + (1/4)\n    # 答案是计算结果\n    return result"]}
{"question": "一个书架有上、下两层，共放着128本图书．上、下两层图书本数的比是5：3，上层比下层多多少本图书？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 书架上放着的总图书数量为128本\n    total_books = 128\n    # 上、下两层图书本数的比是5：3\n    ratio = 5 / 3\n    # 设上层图书数量为5x，下层图书数量为3x\n    # 根据比例关系，5x + 3x = 128\n    total_layers = 5 + 3\n    x = total_books / total_layers\n    # 上层比下层多的图书数量 = 5x - 3x\n    extra_books = 5 * x - 3 * x\n    # 答案是上层比下层多的图书数量\n    result = extra_books\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距1500米，小红与小明从两地同时相向而行，10分钟后相遇．小红每分钟走70米，小明每分钟走多少米？", "target": 80.0, "answer": 8930.0, "score": 0, "generation": ["def solution():\n    # 两地之间的距离为1500米\n    distance = 1500\n    # 小红每分钟走70米\n    speed_a = 70\n    # 10分钟后两人相遇，相遇时间为10分钟\n    time_to_meet = 10\n    # 因为两人相向而行，两人的速度之和为总距离除以相遇时间\n    total_speed = distance / (time_to_meet / 60)  # converting time to seconds\n    # 小明每分钟走的距离为总速度减去小红的速度\n    speed_b = total_speed - speed_a\n    # 答案是小明每分钟走的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "一本280页的故事书，小红第一天看了20%，第二天看了30%，还剩多少页没看？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为280页\n    total_pages = 280\n    # 第一天看了20%的页数\n    read_fraction_day1 = 0.20\n    # 第二天看了30%的页数\n    read_fraction_day2 = 0.30\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_day1 = total_pages * read_fraction_day1\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_day2 = total_pages * read_fraction_day2\n    # 还剩下的页数 = 总页数 - 第一天看的页数 - 第二天看的页数\n    remaining_pages = total_pages - pages_read_day1 - pages_read_day2\n    # 答案是还剩下的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "(6/5)吨化肥平均分成3份，每份应该=多少吨．", "target": 0.4, "answer": "", "score": 0, "generation": ["首先，我们将（6/5）吨化肥平均分成3份，表示每份的重量为总重量除以份数。\n\nNow, let's divide (6/5) tons of fertilizer into 3 parts, which means each part will be the total weight divided by the number of parts. \n\n```python\ndef solution():\n    # 总重量为（6/5）吨\n    total_weight = 6/5\n    # 份数为3\n    parts = 3\n    # 每份的重量 = 总重量 / 份数\n    weight_per_part = total_weight / parts\n    # 答案是每份的重量\n    result = weight_per_part\n    # 返回答案\n    return result\n```"]}
{"question": "甲乙两辆汽车同时从车站向相反方向开出，8小时后，甲车与乙车相距920千米，已知甲车每小时行55千米，乙车每小时行多少千米？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 8小时后，甲车与乙车相距920千米\n    distance = 920\n    # 甲车每小时行55千米\n    speed_a = 55\n    # 甲车与乙车相对速度为甲车与乙车速度之和\n    # 相对速度 = 甲车速度 + 乙车速度\n    # 8小时后，相对距离 = 相对速度 * 8\n    # 920 = (55 + 乙车速度) * 8\n    # 解方程得到乙车速度\n    speed_b = (distance / 8) - speed_a\n    # 答案是乙车每小时行的千米数\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "学校六年级栽432棵树，其中48棵是杨树，其余是柳树，栽的柳树是杨树的几倍？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 六年级栽的总树数为432棵\n    total_trees = 432\n    # 杨树的数量为48棵\n    num_poplar_trees = 48\n    # 其余是柳树，柳树的数量 = 总树数 - 杨树的数量\n    num_willow_trees = total_trees - num_poplar_trees\n    # 栽的柳树是杨树的几倍 = 柳树的数量 / 杨树的数量\n    willow_to_poplar_ratio = num_willow_trees / num_poplar_trees\n    # 答案是栽的柳树是杨树的几倍\n    result = willow_to_poplar_ratio\n    # 返回答案\n    return result"]}
{"question": "平行四边形面积是72平方米，高6米，它的底边长=．", "target": 12.0, "answer": "", "score": 0, "generation": ["首先，我们知道平行四边形的面积等于底边长乘以高，即$面积 = 底边长 \\times 高$。\n\n我们已知平行四边形的面积是72平方米，高是6米，代入公式得到$72 = 底边长 \\times 6$。\n\n解方程得到底边长$底边长 = \\frac{72}{6} = 12$米。\n\n所以，平行四边形的底边长是12米。\n\n```python\ndef solution():\n    # 平行四边形的面积是72平方米\n    area = 72\n    # 平行四边形的高是6米\n    height = 6\n    # 底边长 = 面积 / 高\n    base_length = area / height\n    # 答案是底边长\n    result = base_length\n    # 返回答案\n    return result\n```"]}
{"question": "一个加数是3.89，和是5.21，另一个加数=？", "target": 1.32, "answer": 1.3199999999999998, "score": 1, "generation": ["def solution():\n    # 一个加数是3.89\n    num1 = 3.89\n    # 和是5.21\n    total = 5.21\n    # 另一个加数 = 和 - 第一个加数\n    num2 = total - num1\n    # 答案是另一个加数\n    result = num2\n    # 返回答案\n    return result"]}
{"question": "小华有的钱可以买6个蓝球、16个足球，或买9个蓝球．现在小华把这些钱全部买了足球，送给贫困山区小朋友．小华共买了足球多少个．", "target": 48.0, "answer": 9.0, "score": 0, "generation": ["def solution():\n    # 小华有的钱可以买6个蓝球、16个足球，或买9个蓝球\n    blueball_price = 6\n    football_price = 16\n    blueball_price_alt = 9\n    # 小华买了足球，送给贫困山区小朋友\n    total_money = blueball_price_alt\n    # 小华共买了足球多少个\n    result = total_money\n    # 返回答案\n    return result"]}
{"question": "甲、乙两桶水同样重，如果从乙桶中倒25千克水到甲桶中，则甲桶的水的千克数是乙桶的6倍，甲桶原来有多少千克水．", "target": 35.0, "answer": 125.0, "score": 0, "generation": ["def solution():\n    # 从乙桶中倒的水的重量为25千克\n    water_transferred = 25\n    # 倒水后甲桶的水的重量是乙桶的6倍\n    ratio = 6\n    # 因为甲、乙两桶水同样重，所以甲桶原来的水的重量 = 倒水后甲桶的水的重量 - 倒水的重量\n    initial_water_in_a = ratio * water_transferred - water_transferred\n    # 答案是甲桶原来的水的重量\n    result = initial_water_in_a\n    # 返回答案\n    return result"]}
{"question": "王村今年生产棉花250吨，今年比去年多生产50吨，今年比去年增产百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 今年生产的棉花量为250吨\n    cotton_this_year = 250\n    # 今年比去年多生产的棉花量为50吨\n    increase = 50\n    # 去年的棉花产量为今年产量减去增加量\n    cotton_last_year = cotton_this_year - increase\n    # 增产百分比 = (今年产量 - 去年产量) / 去年产量 * 100%\n    increase_percentage = ((cotton_this_year - cotton_last_year) / cotton_last_year) * 100\n    # 答案是今年比去年增产的百分比\n    result = increase_percentage\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3人行路，甲每分钟走60米，乙每分钟走50米，丙每分钟走40米．甲从A地，乙和丙从B地同时出发相向而行，甲和乙相遇后，过了15分钟又与丙相遇，求A、B两地间的距离．", "target": 16500.0, "answer": 25.0, "score": 0, "generation": ["```python\ndef solution():\n    # 甲每分钟走60米\n    speed_a = 60\n    # 乙每分钟走50米\n    speed_b = 50\n    # 丙每分钟走40米\n    speed_c = 40\n    # 甲和乙相遇后，过了15分钟又与丙相遇\n    time_to_meet_c = 15\n    # 甲和乙相遇时走过的距离 = 甲的速度 * 相遇时的时间\n    distance_ab = speed_a * (15/60)\n    # 甲和乙相遇后，甲与丙相遇时走过的距离 = 甲的速度 * (15 + 15) / 60\n    distance_ac = speed_a * (30/60)\n    # 丙走过的距离 = 丙的速度 * 15 / 60\n    distance_c = speed_c * (15/60)\n    # A、B两地间的距离 = 甲和乙相遇时走过的距离 + 丙走过的距离\n    distance_ab_bc = distance_ab + distance_c\n    # 答案是A、B两地间的距离\n    result = distance_ab_bc\n    # 返回答案\n    return result\n```"]}
{"question": "多少米的(2/5)是16米．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 总长度的(2/5)是16米\n    total_length = 16 / (2/5)\n    # 答案是总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "有两捆粗细相同的铁丝，其中一捆铁丝长8米，重400千克，另一捆铁丝重200千克，这捆铁丝长多少米？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 一捆铁丝长8米，重400千克\n    length_1 = 8\n    weight_1 = 400\n    # 另一捆铁丝重200千克\n    weight_2 = 200\n    # 因为粗细相同，所以铁丝的密度相同\n    # 铁丝的密度 = 重量 / 长度\n    density = weight_1 / length_1\n    # 另一捆铁丝长多少米 = 重量 / 密度\n    length_2 = weight_2 / density\n    # 答案是另一捆铁丝的长度\n    result = length_2\n    # 返回答案\n    return result"]}
{"question": "“全球通”手机月租费30元，通话费0.3元/分．如果某人每月的手机费不会超过60元，那么他每月最多可以打电话多少分钟．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 手机月租费为30元\n    monthly_rent = 30\n    # 单位通话费为0.3元/分钟\n    call_rate = 0.3\n    # 最大月费不超过60元\n    max_monthly_fee = 60\n    # 最多可以打电话的分钟数 = (最大月费 - 月租费) / 单位通话费\n    max_call_minutes = (max_monthly_fee - monthly_rent) / call_rate\n    # 答案是每月最多可以打电话的分钟数\n    result = max_call_minutes\n    # 返回答案\n    return result"]}
{"question": "小王6月份稿费收入5000元，按规定超过1500元的部分要缴纳20%的个人所得税，小王税后的收入=多少元？", "target": 4300.0, "answer": 4300.0, "score": 1, "generation": ["def solution():\n    # 小王6月份稿费收入为5000元\n    income = 5000\n    # 规定超过1500元的部分要缴纳20%的个人所得税\n    taxable_amount = income - 1500\n    tax = taxable_amount * 0.2\n    # 小王税后的收入 = 总收入 - 个人所得税\n    after_tax_income = income - tax\n    # 答案是小王税后的收入\n    result = after_tax_income\n    # 返回答案\n    return result"]}
{"question": "某工厂准备买一套20万元的设备，实际节约了15%，节约了多少元？", "target": 30000.0, "answer": 30000.0, "score": 1, "generation": ["def solution():\n    # 设备的原价为20万元\n    original_price = 200000\n    # 节约了15%\n    saving_percentage = 0.15\n    # 节约的金额 = 原价 * 节约比例\n    saving_amount = original_price * saving_percentage\n    # 答案是节约的金额\n    result = saving_amount\n    # 返回答案\n    return result"]}
{"question": "王叔叔的3轮车上装了26袋同样的大米，连车共重1000千克．中途卸下6袋大米，这时连车重820千克．每袋大米重多少千克？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 王叔叔的3轮车上装了26袋同样的大米\n    total_bags = 26\n    # 连车共重1000千克\n    total_weight_initial = 1000\n    # 中途卸下6袋大米\n    bags_unloaded = 6\n    # 连车重820千克\n    total_weight_final = 820\n    # 总重量减少的重量 = 卸下的袋数 * 每袋大米的重量\n    weight_difference = (total_weight_initial - total_weight_final) / bags_unloaded\n    # 每袋大米的重量 = 总重量减少的重量\n    weight_per_bag = weight_difference\n    # 答案是每袋大米的重量\n    result = weight_per_bag\n    # 返回答案\n    return result"]}
{"question": "果园里桃树的棵树是梨树的2倍，苹果树比桃树多了111棵．苹果树有147棵，3种树共有多少棵．", "target": 201.0, "answer": 184.0, "score": 0, "generation": ["def solution():\n    # 桃树的棵树是梨树的2倍\n    peach_trees = 2\n    pear_trees = 1\n    # 苹果树比桃树多了111棵\n    apple_trees_extra = 111\n    # 苹果树有147棵\n    apple_trees = 147\n    # 桃树的数量 = 梨树的数量 * 2\n    peach_trees = pear_trees * 2\n    # 桃树比苹果树少111棵\n    peach_trees = apple_trees - apple_trees_extra\n    # 三种树的总数 = 桃树 + 梨树 + 苹果树\n    total_trees = peach_trees + pear_trees + apple_trees\n    # 答案是三种树的总数\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "乐乐要打一篇320字的文章，乐乐的打字速度是每分钟45个，打了5分钟后，这篇文章还剩多少字没打？", "target": 95.0, "answer": 95.0, "score": 1, "generation": ["def solution():\n    # 文章的总字数为320字\n    total_words = 320\n    # 乐乐的打字速度是每分钟45个\n    typing_speed = 45\n    # 打字时间为5分钟\n    typing_time = 5\n    # 乐乐打了的字数 = 打字速度 * 打字时间\n    words_typed = typing_speed * typing_time\n    # 剩余未打的字数 = 总字数 - 打了的字数\n    remaining_words = total_words - words_typed\n    # 答案是剩余未打的字数\n    result = remaining_words\n    # 返回答案\n    return result"]}
{"question": "一个数加上它的(9/20)等于58，这个数=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    # x + x*(9/20) = 58\n    # 将等式转化为20x/20 + 9x/20 = 58\n    # 合并同类项得到 29x/20 = 58\n    # 解方程得到 x = 58 * 20 / 29\n    # 计算得到 x 的值\n    x = 58 * 20 / 29\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "班长把全班50个学生的学习与巩固收集后摞成了一个长26cm，宽18cm，高25cm的长方体，计算每本的体积=多少立方厘米．", "target": 234.0, "answer": 234.0, "score": 1, "generation": ["def solution():\n    # 长方体的长为26cm\n    length = 26\n    # 长方体的宽为18cm\n    width = 18\n    # 长方体的高为25cm\n    height = 25\n    # 长方体的体积 = 长 * 宽 * 高\n    volume = length * width * height\n    # 每本书的体积 = 长方体的体积 / 学生数量\n    num_students = 50\n    volume_per_book = volume / num_students\n    # 答案是每本书的体积\n    result = volume_per_book\n    # 返回答案\n    return result"]}
{"question": "一年级有学生125人，比二年级少20人．两个年级一共有多少人？", "target": 270.0, "answer": 230.0, "score": 0, "generation": ["def solution():\n    # 一年级的学生人数为125人\n    num_first_grade = 125\n    # 二年级比一年级少20人\n    num_second_grade = num_first_grade - 20\n    # 两个年级一共的学生人数 = 一年级人数 + 二年级人数\n    total_students = num_first_grade + num_second_grade\n    # 答案是两个年级一共的学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "大西洋平均深度为3.62千米，印度洋平均深度比它深0.27千米，太平洋平均深度比印度洋深0.13千米，太平洋平均深度是（多少）千米．", "target": 4.02, "answer": 4.0200000000000005, "score": 1, "generation": ["def solution():\n    # 大西洋平均深度为3.62千米\n    depth_atlantic = 3.62\n    # 印度洋平均深度比大西洋深0.27千米\n    depth_difference_indian = 0.27\n    # 印度洋平均深度 = 大西洋平均深度 + 深度差\n    depth_indian = depth_atlantic + depth_difference_indian\n    # 太平洋平均深度比印度洋深0.13千米\n    depth_difference_pacific = 0.13\n    # 太平洋平均深度 = 印度洋平均深度 + 深度差\n    depth_pacific = depth_indian + depth_difference_pacific\n    # 答案是太平洋平均深度\n    result = depth_pacific\n    # 返回答案\n    return result"]}
{"question": "0.12与80的积除以一个数，商是0.5，求这个数．", "target": 19.2, "answer": 19.2, "score": 1, "generation": ["def solution():\n    # 给定的乘积\n    product = 0.12 * 80\n    # 商\n    quotient = 0.5\n    # 求这个数，即被除数\n    number = product / quotient\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "一根绳子，用去(1/3)后又接上16米，这时比原来长(1/5)．这根绳子原来=多少米长．", "target": 30.0, "answer": 120.0, "score": 0, "generation": ["def solution():\n    # 原始绳子长度设为x米\n    # 用去(1/3)后又接上16米，长度变为x - x/3 + 16\n    # 变为原来长(1/5)，即(x - x/3 + 16) = x + x/5\n    # 解方程得 x = 120\n    original_length = 120\n    # 答案是绳子原来的长度\n    result = original_length\n    # 返回答案\n    return result"]}
{"question": "某小学一、二年级共有学生150人，正好是全校人数的(1/6)．全校女生占总人数的40%，全校男生有多少人？", "target": 540.0, "answer": 540.0, "score": 1, "generation": ["def solution():\n    # 一、二年级共有学生150人\n    num_students_1_2 = 150\n    # 全校人数的(1/6)是一、二年级的人数\n    total_students_fraction = 1/6\n    # 全校人数 = 一、二年级人数 / 全校人数的比例\n    total_students = num_students_1_2 / total_students_fraction\n    # 全校女生占总人数的40%\n    female_percentage = 0.4\n    # 全校女生人数 = 总人数 * 女生比例\n    num_females = total_students * female_percentage\n    # 全校男生人数 = 总人数 - 女生人数\n    num_males = total_students - num_females\n    # 答案是全校男生人数\n    result = num_males\n    # 返回答案\n    return result"]}
{"question": "晶晶和玲玲的家分别在在体育场的东面和西面．星期天上午她们相约去锻炼．两人同时出发，晶晶每分走80米，玲玲每分走75米，经过4分两人在体育场门口会面了．她们两家之间相距多少米？", "target": 620.0, "answer": "", "score": 0, "generation": ["首先，我们来计算晶晶和玲玲在相遇时分别走了多少米：\n\n晶晶走的距离 = 80米/分钟 * 4分钟 = 320米\n玲玲走的距离 = 75米/分钟 * 4分钟 = 300米\n\n因为两人在体育场门口相遇，所以晶晶和玲玲的家之间的距离就是晶晶和玲玲走的总距离：\n\n晶晶和玲玲的家之间的距离 = 320米 + 300米 = 620米\n\n接下来我们用Python来计算：\n\n```python\ndef solution():\n    # 晶晶每分钟走80米\n    speed_jingjing = 80\n    # 玲玲每分钟走75米\n    speed_lingling = 75\n    # 两人相遇时走的总距离\n    distance_jingjing = speed_jingjing * 4\n    distance_lingling = speed_lingling * 4\n    # 两家之间的距离\n    total_distance = distance_jingjing + distance_lingling\n    # 答案是两家之间的距离\n    result = total_distance\n    # 返回答案\n    return result\n```"]}
{"question": "张老师编写的《童话故事》在出版社出版后，得到稿费1800元．按照个人所得税计算办法，稿费扣除800元后按14%缴税．张老师实得稿费多少元？", "target": 1660.0, "answer": 860.0, "score": 0, "generation": ["def solution():\n    # 得到的稿费为1800元\n    total_fee = 1800\n    # 扣除的费用为800元\n    deduction = 800\n    # 缴税比例为14%\n    tax_rate = 0.14\n    # 实际所得稿费 = 总稿费 - 扣除费用\n    net_fee = total_fee - deduction\n    # 缴税金额 = 实际所得稿费 * 缴税比例\n    tax_amount = net_fee * tax_rate\n    # 实际所得稿费 = 实际所得稿费 - 缴税金额\n    final_fee = net_fee - tax_amount\n    # 答案是实际所得稿费\n    result = final_fee\n    # 返回答案\n    return result"]}
{"question": "一艘轮船从重庆开往上海有960位客人，到武汉港有179人下船，又有213人上船，这时轮船上还有多少客人？", "target": 994.0, "answer": 994.0, "score": 1, "generation": ["def solution():\n    # 轮船从重庆开往上海有960位客人\n    total_passengers = 960\n    # 到武汉港有179人下船\n    passengers_off = 179\n    # 又有213人上船\n    passengers_on = 213\n    # 轮船上还有多少客人 = 总客人数 - 下船人数 + 上船人数\n    remaining_passengers = total_passengers - passengers_off + passengers_on\n    # 答案是轮船上还有多少客人\n    result = remaining_passengers\n    # 返回答案\n    return result"]}
{"question": "学校买来126米塑料绳，每18米做10根跳绳，照这样计算，能做多少根跳绳？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 学校买来的塑料绳长度为126米\n    total_length = 126\n    # 每18米做10根跳绳\n    rope_length = 18\n    ropes_per_length = 10\n    # 根据比例计算可以做的跳绳数量\n    total_ropes = (total_length // rope_length) * ropes_per_length\n    # 答案是可以做的跳绳数量\n    result = total_ropes\n    # 返回答案\n    return result"]}
{"question": "一个圆柱的侧面积是12.56平方米，底面半径是2分米，它的高=多少分米？", "target": 99.94930426171028, "answer": 0.9994938868534724, "score": 0, "generation": ["def solution():\n    # 圆柱的侧面积为12.56平方米\n    lateral_area = 12.56\n    # 圆柱的底面半径为2分米\n    radius = 2\n    # 圆周率π的近似值\n    pi = 3.14159\n    # 圆柱的侧面积公式为2πrh，其中r为半径，h为高\n    # 侧面积 = 2 * 圆周率 * 半径 * 高\n    # 高 = 侧面积 / (2 * 圆周率 * 半径)\n    height = lateral_area / (2 * pi * radius)\n    # 答案是圆柱的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "广源畜牧公司饲养的奶牛是奶羊的7倍．奶牛和奶羊一共有48只，广源公司养了多少只奶羊？", "target": 6.0, "answer": 42.0, "score": 0, "generation": ["def solution():\n    # 奶牛的数量是奶羊的7倍\n    cows_to_sheep_ratio = 7\n    # 奶牛和奶羊一共有48只\n    total_animals = 48\n    # 奶牛的总数量 = 奶牛和奶羊总数量 / (奶牛的比例 + 1)\n    total_cows = total_animals / (cows_to_sheep_ratio + 1)\n    # 奶羊的数量 = 奶牛的数量 * 奶牛的比例\n    total_sheep = total_cows * cows_to_sheep_ratio\n    # 答案是奶羊的数量\n    result = total_sheep\n    # 返回答案\n    return result"]}
{"question": "学校规定每个学生至少参加语文兴趣小组和数学兴趣小组中的一个，204班有45人，参加语文兴趣小组的有30人，参加数学兴趣小组的有22人，语文和数学兴趣小组都参加的有多少人．", "target": 7.0, "answer": 7.0, "score": 1, "generation": ["def solution():\n    # 204班有45人\n    total_students = 45\n    # 参加语文兴趣小组的有30人\n    chinese_group = 30\n    # 参加数学兴趣小组的有22人\n    math_group = 22\n    # 语文和数学兴趣小组都参加的人数 = 参加语文兴趣小组的人数 + 参加数学兴趣小组的人数 - 班级总人数\n    both_groups = chinese_group + math_group - total_students\n    # 答案是语文和数学兴趣小组都参加的人数\n    result = both_groups\n    # 返回答案\n    return result"]}
{"question": "比37的25倍多16的数=？", "target": 941.0, "answer": 941.0, "score": 1, "generation": ["def solution():\n    # 给定的数为37的25倍多16\n    given_number = 37 * 25 + 16\n    # 答案是给定的数\n    result = given_number\n    # 返回答案\n    return result"]}
{"question": "益民小学植树180棵．其中(1/5)是五年级种的，(1/4)是四年级种的，四年级比五年级多植了多少棵树？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 益民小学植树总数为180棵\n    total_trees = 180\n    # 五年级种的树数量为总数的(1/5)\n    fifth_grade_trees = total_trees * (1/5)\n    # 四年级种的树数量为总数的(1/4)\n    fourth_grade_trees = total_trees * (1/4)\n    # 四年级比五年级多种的树数量 = 四年级种的树数量 - 五年级种的树数量\n    extra_trees = fourth_grade_trees - fifth_grade_trees\n    # 答案是四年级比五年级多植的树数量\n    result = extra_trees\n    # 返回答案\n    return result"]}
{"question": "4、五年级要栽220棵树．四年级有3个班，每班栽28棵，剩下的分给五年级4个班栽，平均每班栽多少棵？", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 五年级要栽的树的总数为220棵\n    total_trees = 220\n    # 四年级每班栽的树的数量为28棵\n    trees_per_class_fourth = 28\n    # 四年级有3个班，所以四年级总共栽的树的数量为 3 * 28\n    total_trees_fourth = 3 * trees_per_class_fourth\n    # 剩下的树的数量为总数减去四年级栽的数量\n    remaining_trees = total_trees - total_trees_fourth\n    # 五年级有4个班，平均每班栽的树的数量为剩下的树的数量除以五年级的班级数\n    trees_per_class_fifth = remaining_trees / 4\n    # 答案是平均每班栽的树的数量\n    result = trees_per_class_fifth\n    # 返回答案\n    return result"]}
{"question": "商店进了360套童装，第一周卖了95套，第二周卖了108套，现在比原来少了多少套？", "target": 203.0, "answer": 157.0, "score": 0, "generation": ["def solution():\n    # 商店进了童装的总套数为360套\n    total_sets = 360\n    # 第一周卖出了95套\n    sets_sold_week1 = 95\n    # 第二周卖出了108套\n    sets_sold_week2 = 108\n    # 现在剩余的套数 = 总套数 - 第一周卖出的套数 - 第二周卖出的套数\n    remaining_sets = total_sets - sets_sold_week1 - sets_sold_week2\n    # 答案是现在比原来少的套数\n    result = remaining_sets\n    # 返回答案\n    return result"]}
{"question": "一个数的(3/4)是(12/21)，这个数=？", "target": 0.7619047619047619, "answer": 0.7619047619047619, "score": 1, "generation": ["def solution():\n    # 一个数的(3/4)是(12/21)\n    fraction1 = 3/4\n    fraction2 = 12/21\n    # 计算这个数\n    number = fraction2 / fraction1\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "9.1/7的商加上3.8*5的积，和=？", "target": 20.3, "answer": 20.3, "score": 1, "generation": ["def solution():\n    # 计算商\n    quotient = 9.1 / 7\n    # 计算积\n    product = 3.8 * 5\n    # 计算和\n    result = quotient + product\n    # 返回答案\n    return result"]}
{"question": "多少除以3得10余2．", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 找到一个数除以3得10余2\n    # 设这个数为x\n    # 根据题意，x = 3 * 10 + 2\n    x = 3 * 10 + 2\n    # 答案是x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "某工地上午运走水泥25%，下午比上午多运走10.5吨，这批水泥还剩下24.5吨，那么这批水泥共有多少吨？", "target": 70.0, "answer": 46.666666666666664, "score": 0, "generation": ["def solution():\n    # 上午运走的水泥比例为25%\n    morning_fraction = 0.25\n    # 下午比上午多运走的水泥量为10.5吨\n    extra_afternoon = 10.5\n    # 剩余的水泥量为24.5吨\n    remaining_cement = 24.5\n    # 上午运走的水泥量 = 剩余水泥量 + 下午多运走的水泥量\n    morning_cement = remaining_cement + extra_afternoon\n    # 运走的总水泥量 = 上午运走的水泥量 / 上午运走比例\n    total_cement = morning_cement / (1 - morning_fraction)\n    # 答案是这批水泥共有的总量\n    result = total_cement\n    # 返回答案\n    return result"]}
{"question": "小王重36.5千克，小李重41.4千克，一个相扑运动员的体重是125.8千克，这个运动员的体重比小王，小李两人的体重和还要重多少千克？", "target": 47.9, "answer": 47.89999999999999, "score": 1, "generation": ["def solution():\n    # 小王的体重为36.5千克\n    weight_wang = 36.5\n    # 小李的体重为41.4千克\n    weight_li = 41.4\n    # 相扑运动员的体重为125.8千克\n    weight_sumo = 125.8\n    # 小王和小李的体重和\n    weight_total = weight_wang + weight_li\n    # 运动员比两人体重和重的千克数\n    weight_difference = weight_sumo - weight_total\n    # 答案是运动员的体重比两人体重和重的千克数\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "在学校运动会开幕式上进行大型团体操表演，开始有15行，每行12人，变阵后每行有9行，这时每行有多少人？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 初始行数为15行\n    initial_rows = 15\n    # 初始每行人数为12人\n    initial_people_per_row = 12\n    # 变阵后的行数为9行\n    final_rows = 9\n    # 每行的人数 = 初始每行人数 * (初始行数 / 变阵后的行数)\n    final_people_per_row = initial_people_per_row * (initial_rows / final_rows)\n    # 答案是变阵后每行的人数\n    result = final_people_per_row\n    # 返回答案\n    return result"]}
{"question": "在铁路的旁边，每隔60米安装电杆一根，一位旅客在行进中的火车内，5分钟经过电杆75根．求此火车每分钟的速度=？", "target": 888.0, "answer": 15.0, "score": 0, "generation": ["def solution():\n    # 每隔60米有一根电杆\n    distance_between_poles = 60\n    # 5分钟经过75根电杆\n    total_poles_passed = 75\n    # 总距离 = 电杆间距 * 电杆数\n    total_distance = distance_between_poles * total_poles_passed\n    # 5分钟 = 5 * 60 秒\n    time_in_seconds = 5 * 60\n    # 火车的速度 = 总距离 / 时间\n    speed_of_train = total_distance / time_in_seconds\n    # 每分钟的速度 = 火车的速度\n    speed_per_minute = speed_of_train\n    # 答案是每分钟的速度\n    result = speed_per_minute\n    # 返回答案\n    return result"]}
{"question": "甲、乙两列火车分别从相距822千米的两地同时相向而行，甲每小时行65千米，乙每小时行72千米，几小时后两车相遇？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 两地之间的距离为822千米\n    distance = 822\n    # 甲火车的速度为每小时65千米\n    speed_a = 65\n    # 乙火车的速度为每小时72千米\n    speed_b = 72\n    # 两车相向而行，它们的相对速度为两车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "为了学生的卫生安全，学校给每个学生配一个水杯，每只水杯3元，正好超市打0.9，学校想买180只水杯，请你算一下一共需要多少钱？", "target": 486.0, "answer": 486.00000000000006, "score": 1, "generation": ["def solution():\n    # 每只水杯的价格为3元\n    price_per_cup = 3\n    # 超市打0.9折\n    discount = 0.9\n    # 学校想买的水杯数量为180只\n    num_cups = 180\n    # 实际价格 = 每只水杯的价格 * 折扣\n    actual_price_per_cup = price_per_cup * discount\n    # 总费用 = 实际价格 * 水杯数量\n    total_cost = actual_price_per_cup * num_cups\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "甲、乙两队去修路，甲队完成总工程的(4/15)，乙队比甲队多完成这项工程的(2/15)，两队一共完成了总工程的几分之几？", "target": 0.6666666666666666, "answer": 0.6666666666666666, "score": 1, "generation": ["def solution():\n    # 甲队完成总工程的比例为4/15\n    team_a_completion = 4/15\n    # 乙队比甲队多完成的比例为2/15\n    team_b_extra_completion = 2/15\n    # 两队一共完成的比例 = 甲队完成的比例 + 乙队完成的比例\n    total_completion = team_a_completion + team_a_completion + team_b_extra_completion\n    # 答案是两队一共完成了总工程的比例\n    result = total_completion\n    # 返回答案\n    return result"]}
{"question": "5（1）班学生去老区参观，共用去10小时，其中路上用去的时间占(1/5)，吃午餐与休息时间共占(3/8)，剩下是浏览的时间，浏览的时间占几分之几？", "target": 0.425, "answer": "", "score": 0, "generation": ["def solution():\n    # 总共用去的时间为10小时\n    total_hours = 10\n    # 路上用去的时间占(1/5)\n    travel_fraction = 1/5\n    # 吃午餐与休息时间共占(3/8)\n    rest_fraction = 3/8\n    # 剩下是浏览的时间，即剩余时间占比 = 1 - 路上时间占比 - 吃午餐与休息时间占比\n    browse_fraction = 1 - travel_fraction - rest_fraction\n    # 浏览的时间占几分之几，即浏览时间占比的分数形式\n    browse_fraction_ratio = f\"{int(browse_fraction*8)}/{8}\"\n    # 答案是浏览的时间占几分之几\n    result = browse_fraction_ratio\n    # 返回答案\n    return result"]}
{"question": "一电影院11月份的收入是20万元，缴税后剩余19万元．请问税率=？", "target": 5.0, "answer": 0.05, "score": 0, "generation": ["def solution():\n    # 电影院11月份的总收入为20万元\n    total_income = 20\n    # 缴税后剩余的收入为19万元\n    remaining_income = 19\n    # 税率 = (总收入 - 剩余收入) / 总收入\n    tax_rate = (total_income - remaining_income) / total_income\n    # 答案是税率\n    result = tax_rate\n    # 返回答案\n    return result"]}
{"question": "两个加数的和是420，其中一个加数是162，另一个加数=？", "target": 258.0, "answer": 258.0, "score": 1, "generation": ["def solution():\n    # 一个加数是162\n    num1 = 162\n    # 两个加数的和是420\n    total_sum = 420\n    # 另一个加数 = 总和 - 已知加数\n    num2 = total_sum - num1\n    # 答案是另一个加数\n    result = num2\n    # 返回答案\n    return result"]}
{"question": "多少千米是630千米的(4/9)．", "target": 280.0, "answer": 280.0, "score": 1, "generation": ["def solution():\n    # 总距离为630千米\n    total_distance = 630\n    # 要求的距离是630千米的(4/9)\n    required_fraction = 4/9\n    # 要求的距离 = 总距离 * 要求的比例\n    required_distance = total_distance * required_fraction\n    # 答案是要求的距离\n    result = required_distance\n    # 返回答案\n    return result"]}
{"question": "王师傅8分钟做1个零件，平均每分钟做多少个零件？", "target": 0.125, "answer": 0.125, "score": 1, "generation": ["def solution():\n    # 王师傅8分钟做1个零件\n    parts_per_8_minutes = 1\n    # 平均每分钟做多少个零件 = 1个零件 / 8分钟\n    parts_per_minute = parts_per_8_minutes / 8\n    # 答案是平均每分钟做的零件数量\n    result = parts_per_minute\n    # 返回答案\n    return result"]}
{"question": "食堂买来面粉200千克，吃了5天，每天吃35千克，还剩多少千克？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 食堂买来的面粉总重量为200千克\n    total_flour = 200\n    # 吃掉的天数为5天\n    days_eaten = 5\n    # 每天吃的面粉重量为35千克\n    daily_consumption = 35\n    # 吃掉的总面粉重量 = 吃的天数 * 每天吃的量\n    total_consumed = days_eaten * daily_consumption\n    # 剩余的面粉重量 = 总重量 - 吃掉的总量\n    remaining_flour = total_flour - total_consumed\n    # 答案是剩余的面粉重量\n    result = remaining_flour\n    # 返回答案\n    return result"]}
{"question": "学校合唱组人数是美术组的(7/8)，书法组人数是合唱组的(3/4)，已知美术组有32人，书法组有多少人？", "target": 21.0, "answer": 21.0, "score": 1, "generation": ["def solution():\n    # 美术组的人数是32人\n    num_art_group = 32\n    # 合唱组人数是美术组的(7/8)\n    num_chorus_group = (7/8) * num_art_group\n    # 书法组人数是合唱组的(3/4)\n    num_calligraphy_group = (3/4) * num_chorus_group\n    # 答案是书法组的人数\n    result = num_calligraphy_group\n    # 返回答案\n    return result"]}
{"question": "一种书如果每本按50元出售，可盈利25%；若想盈利40%，那么每本应按多少元出售．", "target": 56.0, "answer": 50.0, "score": 0, "generation": ["def solution():\n    # 每本书按50元出售时盈利25%\n    profit_margin_25 = 0.25\n    # 想要盈利40%\n    profit_margin_target = 0.4\n    # 当前售价为50元时，盈利金额 = 售价 * 盈利率\n    profit_25 = 50 * profit_margin_25\n    # 想要的盈利金额 = 售价 * 盈利率\n    target_profit = 50 * profit_margin_target\n    # 每本书应按多少元出售 = 想要的盈利金额 / 盈利率\n    price_per_book = target_profit / profit_margin_target\n    # 答案是每本书应按多少元出售\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "元旦节，刘老师为本班学生购买演出用的服装，买5件女生装和8件男生装的钱同样多．每件男生装39元，每件女生装多少元？", "target": 62.4, "answer": "", "score": 0, "generation": ["def solution():\n    # 买的女生装件数为5件\n    num_girls_outfit = 5\n    # 买的男生装件数为8件\n    num_boys_outfit = 8\n    # 每件男生装的价格为39元\n    price_boys_outfit = 39\n    # 买女生装和男生装的钱数相同\n    total_cost_girls_outfit = num_girls_outfit * price_girls_outfit\n    # 每件女生装的价格 = 总花费 / 女生装件数\n    price_girls_outfit = total_cost_girls_outfit / num_girls_outfit\n    # 答案是每件女生装的价格\n    result = price_girls_outfit\n    # 返回答案\n    return result"]}
{"question": "小杰每分钟打135个字，他打一篇文章用了28分钟，还有650个字没有打完，这篇文章有多少个字？", "target": 4430.0, "answer": 4430.0, "score": 1, "generation": ["def solution():\n    # 小杰每分钟打135个字\n    words_per_minute = 135\n    # 小杰打完一篇文章用了28分钟\n    minutes_taken = 28\n    # 还有650个字没有打完\n    remaining_words = 650\n    # 小杰打完整篇文章一共打了多少个字 = 已经打完的字数 + 剩余的字数\n    total_words = (words_per_minute * minutes_taken) + remaining_words\n    # 答案是这篇文章一共有多少个字\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "找规律：1、3、4、7、11、多少．", "target": 18.0, "answer": 33.0, "score": 0, "generation": ["def solution():\n    # 观察数列可知，第n个数等于前n-1个数之和加1\n    n = 6\n    # 初始化数列的前两个数\n    a, b = 1, 3\n    # 初始化总和为前两个数之和\n    total = a + b\n    # 从第3个数开始计算\n    for i in range(3, n):\n        # 计算当前数为前两个数之和加1\n        c = a + b + 1\n        # 更新前两个数的值\n        a, b = b, c\n        # 更新总和\n        total += c\n    # 答案是第n个数的值\n    result = total\n    # 返回答案\n    return result"]}
{"question": "筑路队铺一条公路，第一周铺了全长的(1/8)，第二周铺了900米，还剩4700米没有铺．这条公路全长多少米？", "target": 6400.0, "answer": 44800.0, "score": 0, "generation": ["def solution():\n    # 第一周铺的比例为1/8\n    fraction_week1 = 1/8\n    # 第二周铺了900米\n    length_week2 = 900\n    # 剩余4700米未铺\n    remaining_length = 4700\n    # 第一周铺的长度 = 总长 * 第一周铺的比例\n    length_week1 = remaining_length + length_week2\n    total_length = length_week1 / fraction_week1\n    # 答案是公路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "两个工程队合作完成一项工程，甲队每天完成全工程的(3/5)，乙队每天完成全工程的(1/4)．两队合作一天，还剩全工程的几分之几没有完成？", "target": 0.15, "answer": 0.15000000000000002, "score": 1, "generation": ["def solution():\n    # 甲队每天完成全工程的(3/5)\n    team_a_daily_progress = 3/5\n    # 乙队每天完成全工程的(1/4)\n    team_b_daily_progress = 1/4\n    # 两队合作一天完成的进度 = 甲队每天完成的进度 + 乙队每天完成的进度\n    combined_daily_progress = team_a_daily_progress + team_b_daily_progress\n    # 剩余未完成的进度 = 1 - 两队合作一天完成的进度\n    remaining_progress = 1 - combined_daily_progress\n    # 答案是剩余未完成的进度\n    result = remaining_progress\n    # 返回答案\n    return result"]}
{"question": "某校六年级学生人数为150人，占全校学生总数的20%，五年级学生人数占全校学生总数的10%，五年级有学生多少人？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 六年级学生人数为150人，占全校学生总数的20%\n    num_sixth_grade = 150\n    sixth_grade_percentage = 0.20\n    # 计算全校学生总数\n    total_students = num_sixth_grade / sixth_grade_percentage\n    # 五年级学生人数占全校学生总数的10%\n    fifth_grade_percentage = 0.10\n    # 计算五年级学生人数\n    num_fifth_grade = total_students * fifth_grade_percentage\n    # 答案是五年级学生人数\n    result = num_fifth_grade\n    # 返回答案\n    return result"]}
{"question": "在一次义卖活动中，王刚卖柠檬水和热巧克力共400杯，得款546元．如果柠檬水1元/杯，热巧克力2元/杯，那么王刚在这次义卖活动中卖出了多少杯柠檬水．", "target": 254.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 王刚卖柠檬水和热巧克力共400杯\n    total_cups = 400\n    # 总款项为546元\n    total_amount = 546\n    # 柠檬水的价格为1元/杯\n    lemonade_price = 1\n    # 热巧克力的价格为2元/杯\n    hot_chocolate_price = 2\n    # 设柠檬水的杯数为x，则热巧克力的杯数为总杯数减去柠檬水的杯数\n    cups_lemonade = (total_amount - (total_cups - x) * hot_chocolate_price) / (lemonade_price - hot_chocolate_price)\n    # 答案是卖出的柠檬水的杯数\n    result = cups_lemonade\n    # 返回答案\n    return result"]}
{"question": "有一桶油，第一次取出30%，第二次取出的比第一次多(1/5)千克，桶里还剩3.8千克，这桶油重多少千克？", "target": 10.0, "answer": 5.32, "score": 0, "generation": ["def solution():\n    # 桶里还剩3.8千克\n    remaining_oil = 3.8\n    # 第一次取出30%，即0.3倍\n    first_extraction = 0.3\n    # 第二次取出的比第一次多(1/5)千克\n    extra_extraction = 1/5\n    # 桶里原来的油量 = 剩余油量 + 第二次取出的油量\n    original_oil = remaining_oil + (extra_extraction / (1 - first_extraction - extra_extraction)) * remaining_oil\n    # 答案是桶里原来的油量\n    result = original_oil\n    # 返回答案\n    return result"]}
{"question": "水果店运来水果36箱，每箱重15千克．卖出285千克后，还剩多少千克？", "target": 255.0, "answer": 255.0, "score": 1, "generation": ["def solution():\n    # 水果店运来水果的箱数为36箱\n    total_boxes = 36\n    # 每箱水果的重量为15千克\n    weight_per_box = 15\n    # 卖出的总重量为285千克\n    sold_weight = 285\n    # 运来的总重量 = 箱数 * 每箱重量\n    total_weight = total_boxes * weight_per_box\n    # 剩余的重量 = 总重量 - 卖出的重量\n    remaining_weight = total_weight - sold_weight\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "老人院的李玉老人过生日，义工邀请院里的老人和职工一共48人为老人庆生，义工要给每人准备一瓶矿泉水和一个苹果．已知矿泉水每瓶2元，苹果每个2.5元，义工至少要带多少钱才够用于采购？", "target": 220.5, "answer": 216.0, "score": 0, "generation": ["def solution():\n    # 老人院的老人和职工一共48人\n    total_people = 48\n    # 矿泉水每瓶2元\n    price_water = 2\n    # 苹果每个2.5元\n    price_apple = 2.5\n    # 每人需要一瓶矿泉水和一个苹果，总共需要的钱数 = 总人数 * (矿泉水价格 + 苹果价格)\n    total_cost = total_people * (price_water + price_apple)\n    # 答案是至少需要的钱数\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "学校组织献爱心活动．五年级捐款312元，六年级比五年级多捐(1/8)，六年级捐款多少元？", "target": 351.0, "answer": 351.0, "score": 1, "generation": ["def solution():\n    # 五年级的捐款金额为312元\n    donation_fifth_grade = 312\n    # 六年级比五年级多捐(1/8)\n    extra_fraction = 1/8\n    # 六年级的捐款金额 = 五年级的捐款金额 * (1 + 多捐比例)\n    donation_sixth_grade = donation_fifth_grade * (1 + extra_fraction)\n    # 答案是六年级的捐款金额\n    result = donation_sixth_grade\n    # 返回答案\n    return result"]}
{"question": "(5/8)的(4/3)倍+(1/6)，和=？", "target": 1.0, "answer": 0.9999999999999999, "score": 1, "generation": ["def solution():\n    # 计算(5/8)的(4/3)倍\n    first_part = (5/8) * (4/3)\n    # 加上(1/6)\n    result = first_part + (1/6)\n    # 返回结果\n    return result"]}
{"question": "甲、乙两数的最大公因数是25，最小公倍数是150，若甲是75，乙=．", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 甲的值为75\n    num_a = 75\n    # 甲、乙两数的最大公因数是25\n    gcd = 25\n    # 甲、乙两数的最小公倍数是150\n    lcm = 150\n    # 甲 * 乙 = 最大公因数 * 最小公倍数\n    num_b = (gcd * lcm) // num_a\n    # 答案是乙的值\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "某商店按定价出售，每个可获利50元．如果按定价的50%出售10件，则与按定价每个减价30元出售12件所获利润一样多．这种商品每件定价多少元．", "target": 52.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 每个商品的定价为x元\n    price_per_item = symbols('x')\n    # 每个商品的利润为50元\n    profit_per_item = 50\n    # 按定价出售10件的总利润 = 单价 * 数量\n    total_profit_at_full_price = price_per_item * 10\n    # 按50%定价出售10件的总利润 = (定价 * 0.5) * 10\n    total_profit_at_half_price = (price_per_item * 0.5) * 10\n    # 按定价减价30元出售12件的总利润 = (定价 - 30) * 12\n    total_profit_at_discounted_price = (price_per_item - 30) * 12\n    # 由题意可得到方程：总利润1 = 总利润2\n    equation = Eq(total_profit_at_full_price, total_profit_at_discounted_price)\n    # 解方程得到每件商品的定价\n    price = solve(equation, price_per_item)[0]\n    # 答案是每件商品的定价\n    result = price\n    # 返回答案\n    return result"]}
{"question": "一块三角形的广告牌，底长2.4m，高是1.2m，它的面积=多少m^2．", "target": 1.44, "answer": 1.44, "score": 1, "generation": ["def solution():\n    # 广告牌的底长为2.4m\n    base = 2.4\n    # 广告牌的高为1.2m\n    height = 1.2\n    # 三角形的面积 = 底长 * 高 / 2\n    area = base * height / 2\n    # 答案是三角形的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "一件衣服降价20%后是120元，原价=多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 降价后的价格为120元\n    discounted_price = 120\n    # 降价比例为20%\n    discount_rate = 0.2\n    # 原价 = 降价后的价格 / (1 - 降价比例)\n    original_price = discounted_price / (1 - discount_rate)\n    # 答案是原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "小明和小刚家相距1240米．一天，两人约定在两家之间的路上会合．小明每分钟走75米，比小刚的速度慢(1/16)．两人同时从家出发，多长时间后能相遇？", "target": 8.0, "answer": 8.533333333333333, "score": 0, "generation": ["```python\ndef solution():\n    # 小明每分钟走的距离为75米\n    speed_xiaoming = 75\n    # 小刚的速度比小明慢(1/16)\n    speed_xiaogang = speed_xiaoming - speed_xiaoming / 16\n    # 两家相距1240米\n    distance = 1240\n    # 两人相向而行，速度之和为两人相遇时的相对速度\n    relative_speed = speed_xiaoming + speed_xiaogang\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result\n```"]}
{"question": "一根绳子长(4/5)米，剪去全长的(3/4)，还剩下全长的多少．", "target": 0.25, "answer": 0.2, "score": 0, "generation": ["def solution():\n    # 绳子的总长度为4/5米\n    total_length = 4/5\n    # 剪去的比例为3/4\n    cut_fraction = 3/4\n    # 剩余的长度 = 总长度 * (1 - 剪去的比例)\n    remaining_length = total_length * (1 - cut_fraction)\n    # 答案是剩余的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "某电视机厂计划5月份生产5000台电视机，实际上半月完成计划的60%，下半月完成计划的(7/10)，这个月超产完成多少台电视机？", "target": 1500.0, "answer": 1500.0, "score": 1, "generation": ["def solution():\n    # 电视机厂计划生产的总台数为5000台\n    planned_production = 5000\n    # 上半月完成计划的比例为60%\n    first_half_completion = 0.6\n    # 下半月完成计划的比例为7/10\n    second_half_completion = 7/10\n    # 上半月完成的台数 = 总台数 * 上半月完成比例\n    first_half_production = planned_production * first_half_completion\n    # 下半月完成的台数 = 总台数 * 下半月完成比例\n    second_half_production = planned_production * second_half_completion\n    # 这个月实际完成的台数 = 上半月完成的台数 + 下半月完成的台数\n    total_production = first_half_production + second_half_production\n    # 超产完成的台数 = 实际完成的台数 - 计划生产的总台数\n    over_production = total_production - planned_production\n    # 答案是这个月超产完成的台数\n    result = over_production\n    # 返回答案\n    return result"]}
{"question": "某牧民养羊450只，其中(3/5)是山羊．现在又买回10只山羊，现在山羊占几分之几？", "target": 0.6086956521739131, "answer": 0.6222222222222222, "score": 0, "generation": ["def solution():\n    # 牧民养的羊总数为450只\n    total_sheep = 450\n    # 其中(3/5)是山羊\n    fraction_goats_initial = 3/5\n    # 计算初始的山羊数量\n    initial_goats = total_sheep * fraction_goats_initial\n    # 现在又买回10只山羊\n    additional_goats = 10\n    # 现在的山羊总数 = 初始山羊数量 + 新买的山羊数量\n    total_goats_now = initial_goats + additional_goats\n    # 现在山羊占总羊的比例 = 现在的山羊数量 / 总羊数量\n    fraction_goats_now = total_goats_now / total_sheep\n    # 答案是现在山羊占总羊的比例\n    result = fraction_goats_now\n    # 返回答案\n    return result"]}
{"question": "李经理一个月的工资是3600元，按规定，减去2000元后的部分按5%的税率缴纳个人所得税，他每月应缴纳的个人所得税=多少元？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 李经理一个月的工资是3600元\n    monthly_salary = 3600\n    # 规定减去的金额是2000元\n    deduction = 2000\n    # 需要缴纳个人所得税的部分 = 工资 - 规定减去的金额\n    taxable_income = monthly_salary - deduction\n    # 个人所得税率为5%\n    tax_rate = 0.05\n    # 应缴纳的个人所得税 = 需要缴纳个人所得税的部分 * 个人所得税率\n    income_tax = taxable_income * tax_rate\n    # 答案是每月应缴纳的个人所得税\n    result = income_tax\n    # 返回答案\n    return result"]}
{"question": "一辆货车和一辆客车从相距545千米的甲乙两地相对而行．客车先行驶2小时后货车才出发，再过3小时两车相遇．已知货车每小时行65千米，客车每小时行多少千米？", "target": 70.0, "answer": 108.33333333333333, "score": 0, "generation": ["```python\ndef solution():\n    # 甲乙两地相距545千米\n    distance = 545\n    # 货车的速度是每小时行65千米\n    speed_truck = 65\n    # 客车先行驶2小时后货车才出发\n    time_offset = 2\n    # 再过3小时两车相遇\n    time_to_meet = 3\n    # 客车的速度 = 货车的速度 * (货车行驶时间 + 客车行驶时间) / 客车行驶时间\n    speed_bus = speed_truck * (time_offset + time_to_meet) / time_to_meet\n    # 答案是客车每小时行驶的千米数\n    result = speed_bus\n    # 返回答案\n    return result\n```"]}
{"question": "商店里有25套儿童服装，原价每套87元．实际每套只卖63元．这样卖完这些儿童服装，一共比原来少卖了多少元？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 商店里有25套儿童服装\n    num_sets = 25\n    # 每套儿童服装的原价为87元\n    original_price = 87\n    # 每套儿童服装的实际售价为63元\n    actual_price = 63\n    # 每套儿童服装降价的金额 = 原价 - 实际售价\n    discount_per_set = original_price - actual_price\n    # 卖完所有儿童服装少赚的金额 = 降价的金额 * 套数\n    total_loss = discount_per_set * num_sets\n    # 答案是少赚的金额\n    result = total_loss\n    # 返回答案\n    return result"]}
{"question": "某化肥厂今年生产化肥1500吨，比去年多生产300吨，今年增产百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 今年生产的化肥总量为1500吨\n    current_production = 1500\n    # 去年的生产量比今年少300吨\n    last_year_production_deficit = -300\n    # 今年增产量 = 今年生产量 - 去年生产量\n    increase = current_production - (current_production + last_year_production_deficit)\n    # 增产百分比 = (今年增产量 / 去年生产量) * 100%\n    increase_percentage = (increase / (current_production + last_year_production_deficit)) * 100\n    # 答案是今年的增产百分比\n    result = increase_percentage\n    # 返回答案\n    return result"]}
{"question": "有12个△，△的个数是○的2倍，○有多少个．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 三角形的个数为12个\n    num_triangles = 12\n    # 三角形的个数是圆的2倍\n    num_circles = num_triangles / 2\n    # 答案是圆的个数\n    result = num_circles\n    # 返回答案\n    return result"]}
{"question": "24比多少多(1/3)．", "target": 18.0, "answer": 32.0, "score": 0, "generation": ["def solution():\n    # 24比多少多(1/3)\n    # 计算比值的分母\n    denominator = 1 + 1/3\n    # 计算比值的分子\n    numerator = 24 * denominator\n    # 答案是比值的分子\n    result = numerator\n    # 返回答案\n    return result"]}
{"question": "水果店原有橘子的重量比苹果多100千克．橘子卖出(1/3)后，苹果的重量比橘子多25千克．水果店有橘子多少千克？", "target": 375.0, "answer": 93.75, "score": 0, "generation": ["def solution():\n    # 原有橘子的重量比苹果多100千克\n    orange_extra_weight = 100\n    # 卖出橘子的比例为(1/3)\n    orange_sold_fraction = 1/3\n    # 苹果比橘子多的重量为25千克\n    apple_extra_weight = 25\n    # 设橘子的重量为x千克，则苹果的重量为x + orange_extra_weight千克\n    # 卖出橘子后，剩余橘子的重量为(1 - orange_sold_fraction) * x\n    # 剩余苹果的重量为x + orange_extra_weight - apple_extra_weight\n    # 根据题意列出方程组并求解\n    x = (apple_extra_weight + orange_extra_weight) / (1 + orange_sold_fraction)\n    # 答案是水果店有橘子的重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一个正方体木块，它的棱长是5分米，已知每立方分米重0.4千克，这个木块重多少千克？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 木块的棱长为5分米\n    side_length = 5\n    # 每立方分米重0.4千克\n    weight_per_cubic_meter = 0.4\n    # 木块的体积 = 棱长的立方\n    volume = side_length ** 3\n    # 木块的重量 = 体积 * 每立方分米重量\n    weight = volume * weight_per_cubic_meter\n    # 答案是木块的重量\n    result = weight\n    # 返回答案\n    return result"]}
{"question": "5、六年级同学参加植树活动，六年级植树150棵，五年级植树的棵数是六年级的(4/5)，五年级同学植树多少棵？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 六年级植树150棵\n    trees_sixth_grade = 150\n    # 五年级植树的棵数是六年级的(4/5)\n    trees_fifth_grade = (4/5) * trees_sixth_grade\n    # 答案是五年级同学植树的棵数\n    result = trees_fifth_grade\n    # 返回答案\n    return result"]}
{"question": "一块地用拖拉机来耕，45分钟耕了(11/6)公顷，相当于这块地总面积的(11/21)，这块地有多少公顷？", "target": 3.5, "answer": 3.4999999999999996, "score": 1, "generation": ["def solution():\n    # 耕地的耕作时间为45分钟\n    time = 45\n    # 耕地的耕作面积为(11/6)公顷\n    area_done = 11/6\n    # 耕地的总面积的比例为(11/21)\n    total_area_fraction = 11/21\n    # 耕地的总面积 = 耕地的耕作面积 / 耕地的总面积的比例\n    total_area = area_done / total_area_fraction\n    # 答案是耕地的总面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "一个修路队，第一天修了全长的(2/15)，第二天修了第一天的(1/2)，这时还有1800米就到这条路的中点处，求这条路有多长？", "target": 6000.0, "answer": 202500.0, "score": 0, "generation": ["def solution():\n    # 第一天修的比例为(2/15)\n    first_day_fraction = 2/15\n    # 第二天修的比例为第一天的(1/2)\n    second_day_fraction = first_day_fraction * (1/2)\n    # 剩余距离为1800米\n    remaining_distance = 1800\n    # 第一天修的距离 = 总距离 * 第一天修的比例\n    distance_first_day = remaining_distance / second_day_fraction\n    # 总距离 = 第一天修的距离 / 第一天修的比例\n    total_distance = distance_first_day / first_day_fraction\n    # 答案是这条路的总长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "学校买了8盒羽毛球，每盒有4袋，每袋有12个羽毛球民．一共买了多少个羽毛球？", "target": 384.0, "answer": 384.0, "score": 1, "generation": ["def solution():\n    # 学校买了8盒羽毛球\n    num_boxes = 8\n    # 每盒有4袋\n    bags_per_box = 4\n    # 每袋有12个羽毛球\n    balls_per_bag = 12\n    # 一共买了多少个羽毛球 = 盒数 * 每盒袋数 * 每袋球数\n    total_balls = num_boxes * bags_per_box * balls_per_bag\n    # 答案是一共买了多少个羽毛球\n    result = total_balls\n    # 返回答案\n    return result"]}
{"question": "100克浓度为15%的盐水中，放进8克盐，若要使其浓度变成20%，还要再加多少克水．", "target": 7.0, "answer": -86.4, "score": 0, "generation": ["def solution():\n    # 初始盐水的总重量为100克\n    total_weight = 100\n    # 初始盐水中盐的重量为15%的浓度\n    initial_salt_weight = 0.15 * total_weight\n    # 要添加的盐的重量为8克\n    added_salt_weight = 8\n    # 盐水的总重量变为初始重量加上添加的盐的重量\n    new_total_weight = total_weight + added_salt_weight\n    # 新的浓度为20%\n    new_concentration = 0.20\n    # 要使浓度变为20%，盐的重量需满足新的浓度\n    required_salt_weight = new_concentration * new_total_weight\n    # 需要再添加的水的重量为使浓度达到20%所需的盐水总重量减去已有的盐水总重量\n    added_water_weight = required_salt_weight - new_total_weight\n    # 答案是需要再添加的水的重量\n    result = added_water_weight\n    # 返回答案\n    return result"]}
{"question": "制伞厂要生产5000把雨伞，已经生产了12天，还剩2120把没完成，平均每天生产多少把雨伞？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 制伞厂要生产的雨伞数量为5000把\n    total_umbrellas = 5000\n    # 已经生产的天数为12天\n    days_produced = 12\n    # 还剩下的雨伞数量为2120把\n    umbrellas_remaining = 2120\n    # 已经完成的雨伞数量 = 总数 - 剩余数量\n    umbrellas_produced = total_umbrellas - umbrellas_remaining\n    # 平均每天生产的雨伞数量 = 已完成数量 / 已生产天数\n    average_daily_production = umbrellas_produced / days_produced\n    # 答案是平均每天生产的雨伞数量\n    result = average_daily_production\n    # 返回答案\n    return result"]}
{"question": "4（3）班的图书角共放有图书210本，第一天借出了总数的(1/7)，第二天借出了总数的(2/21)．两天一共借出了多少本图书？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 图书角共放有图书210本\n    total_books = 210\n    # 第一天借出总数的(1/7)\n    fraction_day1 = 1/7\n    # 第二天借出总数的(2/21)\n    fraction_day2 = 2/21\n    # 第一天借出的图书数量 = 总数 * 第一天借出比例\n    books_day1 = total_books * fraction_day1\n    # 第二天借出的图书数量 = 总数 * 第二天借出比例\n    books_day2 = total_books * fraction_day2\n    # 两天一共借出的图书数量 = 第一天借出数量 + 第二天借出数量\n    total_books_borrowed = books_day1 + books_day2\n    # 答案是两天一共借出的图书数量\n    result = total_books_borrowed\n    # 返回答案\n    return result"]}
{"question": "某电视机厂上半年生产电视机40万台，下半年生产比上半年多(1/8)，下半年生产电视机多少台？", "target": 450000.0, "answer": 450000.0, "score": 1, "generation": ["def solution():\n    # 上半年生产电视机40万台\n    tv_produced_first_half = 400000\n    # 下半年生产比上半年多(1/8)\n    increase_fraction = 1/8\n    # 下半年生产电视机的数量 = 上半年生产数量 * (1 + 增加比例)\n    tv_produced_second_half = tv_produced_first_half * (1 + increase_fraction)\n    # 答案是下半年生产的电视机数量\n    result = tv_produced_second_half\n    # 返回答案\n    return result"]}
{"question": "某校已招收一年级新生315人，其中女生占20%，计划再招一批女生，使女生占全体新生的30%，计划再招女生多少人？", "target": 45.0, "answer": 31.5, "score": 0, "generation": ["def solution():\n    # 已招收的一年级新生总人数为315人\n    total_students = 315\n    # 已招收女生人数占20%\n    current_female_percentage = 0.20\n    # 计划女生占全体新生的30%\n    target_female_percentage = 0.30\n    # 已招收女生人数 = 总人数 * 已招收女生的比例\n    current_female_students = total_students * current_female_percentage\n    # 计划女生人数 = 总人数 * 目标女生的比例\n    target_female_students = total_students * target_female_percentage\n    # 计划再招女生人数 = 目标女生人数 - 已招收女生人数\n    additional_female_students = target_female_students - current_female_students\n    # 答案是计划再招女生人数\n    result = additional_female_students\n    # 返回答案\n    return result"]}
{"question": "学校运来白色粉笔225箱，彩色粉笔36箱，如果每箱粉笔都装45盒，运来的白色粉笔和彩色粉笔一共有多少盒？", "target": 11745.0, "answer": 11745.0, "score": 1, "generation": ["def solution():\n    # 运来的白色粉笔箱数为225箱\n    white_chalk_boxes = 225\n    # 运来的彩色粉笔箱数为36箱\n    colored_chalk_boxes = 36\n    # 每箱粉笔装的盒数为45盒\n    chalk_per_box = 45\n    # 运来的白色粉笔总盒数 = 白色粉笔箱数 * 每箱盒数\n    total_white_chalk = white_chalk_boxes * chalk_per_box\n    # 运来的彩色粉笔总盒数 = 彩色粉笔箱数 * 每箱盒数\n    total_colored_chalk = colored_chalk_boxes * chalk_per_box\n    # 运来的白色粉笔和彩色粉笔总盒数 = 白色粉笔总盒数 + 彩色粉笔总盒数\n    total_boxes = total_white_chalk + total_colored_chalk\n    # 答案是白色粉笔和彩色粉笔一共有的盒数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "妈妈今年35岁，小明今年8岁，5年以后，妈妈比小明大多少岁．", "target": 27.0, "answer": 27.0, "score": 1, "generation": ["def solution():\n    # 妈妈今年35岁\n    mom_age = 35\n    # 小明今年8岁\n    xiaoming_age = 8\n    # 5年后\n    years_later = 5\n    # 妈妈5年后的年龄\n    mom_future_age = mom_age + years_later\n    # 小明5年后的年龄\n    xiaoming_future_age = xiaoming_age + years_later\n    # 妈妈比小明大的岁数 = 妈妈5年后的年龄 - 小明5年后的年龄\n    age_difference = mom_future_age - xiaoming_future_age\n    # 答案是妈妈比小明大的岁数\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "一个卷烟厂上个月香烟销售额为2600万元．如果按销售额的5%缴纳消费税，上月应缴纳消费税款多少万元．", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 上个月香烟销售额为2600万元\n    sales_amount = 2600\n    # 消费税率为5%\n    tax_rate = 0.05\n    # 应缴纳的消费税款 = 销售额 * 消费税率\n    tax_amount = sales_amount * tax_rate\n    # 答案是应缴纳的消费税款\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "果园里有9棵苹果树，7棵梨树．每棵苹果树大约摘160千克苹果，这个果园大约摘多少千克苹果？", "target": 1440.0, "answer": 1440.0, "score": 1, "generation": ["def solution():\n    # 果园里有9棵苹果树\n    num_apple_trees = 9\n    # 果园里有7棵梨树\n    num_pear_trees = 7\n    # 每棵苹果树大约摘160千克苹果\n    apple_per_tree = 160\n    # 果园摘的苹果总重量 = 苹果树数量 * 每棵苹果树的苹果重量\n    total_apple_weight = num_apple_trees * apple_per_tree\n    # 答案是果园摘的苹果总重量\n    result = total_apple_weight\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地到乙地，行了全程的(4/5)，在剩下的路程中，70%是上坡路，其余是下坡路．已知下坡路长3千米，甲、乙两地相距多远？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的全程距离为 x 千米\n    # 汽车行驶了全程的(4/5)，剩下的(1/5)为上下坡路程\n    # 上坡路程占剩下路程的70%，下坡路程占30%\n    # 下坡路程为3千米\n    # 根据题意可列方程：\n    # 3 = 0.3 * (1/5) * x\n    # 解方程得到 x 的值即为甲、乙两地的距离\n\n    # 解方程\n    x = 3 / (0.3 * (1/5))\n\n    # 答案是甲、乙两地的距离\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一批零件，已生产(2/3)再生产80个就超额完成(1/5)，这批零件有多少个？", "target": 150.0, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 已生产的零件数量占总数的(2/3)\n    produced_fraction = 2/3\n    # 再生产的数量使得超额完成的数量为总数的(1/5)\n    excess_fraction = 1/5\n    # 再生产的数量 = 超额完成的数量 - 已生产的数量\n    additional_produced = excess_fraction - produced_fraction\n    # 再生产的数量 = 80（根据题目）\n    additional_produced = 80\n    # 总数 = 再生产的数量 / 再生产的比例\n    total_parts = additional_produced / additional_produced\n    # 答案是这批零件的总数\n    result = total_parts\n    # 返回答案\n    return result"]}
{"question": "把一个棱长为5分米的正方体钢材锻造成一个宽2.5分米，高2分米的长方体钢块，能锻造多长？", "target": 25.0, "answer": 0.16666666666666666, "score": 0, "generation": ["def solution():\n    # 正方体的棱长为5分米\n    length_cube = 5\n    # 长方体的宽度为2.5分米\n    width_rectangular = 2.5\n    # 长方体的高度为2分米\n    height_rectangular = 2\n    # 正方体的表面积 = 6 * 边长的平方\n    surface_area_cube = 6 * length_cube ** 2\n    # 长方体的体积 = 长 * 宽 * 高\n    volume_rectangular = length_cube * width_rectangular * height_rectangular\n    # 长方体的长 = 长方体的体积 / 正方体的底面积\n    length_rectangular = volume_rectangular / surface_area_cube\n    # 答案是能锻造成的长方体的长度\n    result = length_rectangular\n    # 返回答案\n    return result"]}
{"question": "妈妈用20%的钱买了一件180元的衣服，妈妈原来有多少元．", "target": 900.0, "answer": 900.0, "score": 1, "generation": ["def solution():\n    # 买衣服花了原来钱的20%\n    percentage_spent = 0.2\n    # 买的衣服价格为180元\n    price_clothing = 180\n    # 妈妈原来有的钱 = 买衣服的价格 / 花掉的比例\n    original_money = price_clothing / percentage_spent\n    # 答案是妈妈原来有的钱\n    result = original_money\n    # 返回答案\n    return result"]}
{"question": "某班有学生48人，女生占全班的37.5%，后来又转来女生若干人，这时人数恰好是占全班人数的40%，问转来几名女生？", "target": 2.0, "answer": 1.2000000000000028, "score": 0, "generation": ["def solution():\n    # 班级总人数为48人\n    total_students = 48\n    # 女生占全班的37.5%\n    initial_female_percentage = 37.5\n    # 后来转来的女生人数为x\n    additional_female_students = 0\n    # 总人数占比为40%\n    total_percentage = 40\n    # 初始女生人数 = 总人数 * 初始女生占比\n    initial_female_students = total_students * (initial_female_percentage / 100)\n    # 转来的女生人数 = 总人数 * 总人数占比 - 初始女生人数\n    additional_female_students = total_students * (total_percentage / 100) - initial_female_students\n    # 答案是转来的女生人数\n    result = additional_female_students\n    # 返回答案\n    return result"]}
{"question": "一个合数的质因数是2和3，这个合数=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 质因数2和3的乘积即为这个合数\n    composite_number = 2 * 3\n    # 答案是这个合数\n    result = composite_number\n    # 返回答案\n    return result"]}
{"question": "一个数除以23，商是18，余数是20，这个数=．", "target": 434.0, "answer": 434.0, "score": 1, "generation": ["def solution():\n    # 商\n    quotient = 18\n    # 余数\n    remainder = 20\n    # 除数\n    divisor = 23\n    # 被除数 = 商 * 除数 + 余数\n    dividend = quotient * divisor + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "李阿姨准备购买一套住房，如果分期付款要多付10%，如果用现金付款可以优惠5%，李阿姨计算了一下，两种付款方式的差价是15000元．这套住房原价=多少元？", "target": 100000.0, "answer": 99999.99999999999, "score": 1, "generation": ["def solution():\n    # 分期付款要多付的比例为10%\n    installment_surcharge = 0.1\n    # 现金付款的优惠比例为5%\n    cash_discount = 0.05\n    # 两种付款方式的差价为15000元\n    price_difference = 15000\n    # 假设原价为x元，则分期付款价格为x*(1+installment_surcharge)，现金付款价格为x*(1-cash_discount)\n    # 根据题意建立方程：x*(1+installment_surcharge) - x*(1-cash_discount) = price_difference\n    # 化简得：x = price_difference / (installment_surcharge + cash_discount)\n    original_price = price_difference / (installment_surcharge + cash_discount)\n    # 答案是这套住房的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "阳光小学去年有小学生1800人，今年比去年减少了8%，今年有小学生多少人？", "target": 1656.0, "answer": 1656.0, "score": 1, "generation": ["def solution():\n    # 去年小学生人数为1800人\n    num_students_last_year = 1800\n    # 今年减少了8%\n    decrease_percentage = 0.08\n    # 今年小学生人数 = 去年小学生人数 * (1 - 减少比例)\n    num_students_this_year = num_students_last_year * (1 - decrease_percentage)\n    # 答案是今年小学生人数\n    result = num_students_this_year\n    # 返回答案\n    return result"]}
{"question": "配置一种盐水，盐和水的质量比是1﹕15，盐占盐水质量的多少．", "target": 0.0625, "answer": "", "score": 0, "generation": ["首先，让我们用变量表示问题中的一些值：\n\n让盐的质量为x，水的质量为15x（因为盐和水的质量比是1:15）\n\n总盐水的质量为x + 15x = 16x\n\n盐占盐水质量的比例为 x / 16x = 1 / 16\n\n因此，盐占盐水质量的比例为1/16。\n\n接下来，让我们用Python编写这个问题的解决方案：\n\n```python\ndef solution():\n    # 盐和水的质量比是1:15\n    salt_water_ratio = 1 / 15\n    # 盐占盐水质量的比例 = 盐的质量 / (盐的质量 + 水的质量)\n    salt_proportion = 1 / (1 + 15)\n    # 答案是盐占盐水质量的比例\n    result = salt_proportion\n    # 返回答案\n    return result\n```"]}
{"question": "一个圆柱体，底面周长是94.2厘米，高是25厘米，它的侧面积=多少平方厘米．", "target": 2355.0, "answer": 2355.0, "score": 1, "generation": ["def solution():\n    # 圆柱体的底面周长是94.2厘米\n    circumference = 94.2\n    # 圆柱体的高是25厘米\n    height = 25\n    # 圆柱体的半径 = 底面周长 / (2 * π)\n    radius = circumference / (2 * 3.14)\n    # 圆柱体的侧面积 = 底面周长 * 高\n    lateral_area = circumference * height\n    # 答案是圆柱体的侧面积\n    result = lateral_area\n    # 返回答案\n    return result"]}
{"question": "一个数的75%是30，这个数的20%=．", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 一个数的75%是30\n    num_75_percent = 30\n    # 计算这个数\n    num = num_75_percent / 0.75\n    # 这个数的20%是\n    num_20_percent = num * 0.20\n    # 答案是这个数的20%\n    result = num_20_percent\n    # 返回答案\n    return result"]}
{"question": "电视机厂今年生产电视机36000台，比去年多生产(1/4)，去年生产多少台？", "target": 28800.0, "answer": 28800.0, "score": 1, "generation": ["def solution():\n    # 今年生产的电视机数量为36000台\n    tv_produced_this_year = 36000\n    # 比去年多生产的比例为1/4\n    increase_fraction = 1/4\n    # 去年生产的电视机数量 = 今年生产的电视机数量 / (1 + 增长比例)\n    tv_produced_last_year = tv_produced_this_year / (1 + increase_fraction)\n    # 答案是去年生产的电视机数量\n    result = tv_produced_last_year\n    # 返回答案\n    return result"]}
{"question": "一种服装原价96元，现在降价(3/8)，现在的售价=多少元？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 服装的原价为96元\n    original_price = 96\n    # 降价比例为(3/8)\n    discount_fraction = 3/8\n    # 现在的售价 = 原价 * (1 - 降价比例)\n    current_price = original_price * (1 - discount_fraction)\n    # 答案是现在的售价\n    result = current_price\n    # 返回答案\n    return result"]}
{"question": "印刷车间要装订1314套书，已经订了14天，还剩362套没完成，平均每天订多少套？", "target": 68.0, "answer": 68.0, "score": 1, "generation": ["def solution():\n    # 印刷车间要装订的书套数为1314套\n    total_sets = 1314\n    # 已经订了的天数为14天\n    days_ordered = 14\n    # 还剩下的书套数为362套\n    remaining_sets = 362\n    # 已经完成的书套数 = 总数 - 剩余数\n    completed_sets = total_sets - remaining_sets\n    # 平均每天订的书套数 = 已完成的书套数 / 已经订的天数\n    average_sets_per_day = completed_sets / days_ordered\n    # 答案是平均每天订的书套数\n    result = average_sets_per_day\n    # 返回答案\n    return result"]}
{"question": "某商店2月份的营业额是8000元，按规定营业额的5%纳税，应纳税多少元．", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 2月份的营业额为8000元\n    revenue = 8000\n    # 纳税比例为5%\n    tax_rate = 0.05\n    # 应纳税额 = 营业额 * 纳税比例\n    tax_amount = revenue * tax_rate\n    # 答案是应纳税额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "育英中学3个年级共18个班，全校师生1100人，教师92人，平均每班多少人？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 育英中学共有3个年级\n    num_grades = 3\n    # 共有18个班\n    num_classes = 18\n    # 全校师生总人数为1100人\n    total_people = 1100\n    # 教师人数为92人\n    num_teachers = 92\n    # 学生人数 = 总人数 - 教师人数\n    num_students = total_people - num_teachers\n    # 平均每班人数 = 学生人数 / 班级数\n    average_students_per_class = num_students / num_classes\n    # 答案是平均每班人数\n    result = average_students_per_class\n    # 返回答案\n    return result"]}
{"question": "南京地铁一期工程分高架线和地下线两部分，其中高架线长约6.5千米，地下线是高架线的1.6倍，第一期工程全线长多少千米？", "target": 16.9, "answer": 16.9, "score": 1, "generation": ["def solution():\n    # 高架线的长度为6.5千米\n    length_elevated = 6.5\n    # 地下线是高架线长度的1.6倍\n    length_underground = 1.6 * length_elevated\n    # 第一期工程全线长度 = 高架线长度 + 地下线长度\n    total_length = length_elevated + length_underground\n    # 答案是第一期工程全线长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "师徒加工一批零件，徒弟已经加工了总数的20%，师傅加工了总数的(1/3)．这时师傅比徒弟多加工80个，这批零件一共有多少个？", "target": 600.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 徒弟已经加工了总数的20%\n    apprentice_fraction = 0.2\n    # 师傅加工了总数的(1/3)\n    master_fraction = 1/3\n    # 师傅比徒弟多加工了80个零件\n    extra_parts = 80\n    # 让总数为x\n    # 徒弟加工的数量 = x * 20%\n    parts_by_apprentice = x * apprentice_fraction\n    # 师傅加工的数量 = x * (1/3)\n    parts_by_master = x * master_fraction\n    # 师傅比徒弟多加工了80个零件\n    # x * (1/3) - x * 20% = 80\n    # 解方程得到x\n    x = extra_parts / (master_fraction - apprentice_fraction)\n    # 答案是这批零件的总数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "停车场有面包车32辆，小轿车的辆数比面包车的4倍少19辆．小轿车有多少辆？", "target": 109.0, "answer": 109.0, "score": 1, "generation": ["def solution():\n    # 面包车的数量为32辆\n    num_vans = 32\n    # 小轿车的数量比面包车的4倍少19辆\n    num_cars = 4 * num_vans - 19\n    # 答案是小轿车的数量\n    result = num_cars\n    # 返回答案\n    return result"]}
{"question": "某饭店十月份的营业额为250000元，税率是5%，营业税应缴多少元．", "target": 12500.0, "answer": 12500.0, "score": 1, "generation": ["def solution():\n    # 十月份的营业额为250000元\n    revenue = 250000\n    # 税率是5%\n    tax_rate = 0.05\n    # 营业税 = 营业额 * 税率\n    tax_amount = revenue * tax_rate\n    # 答案是营业税应缴的金额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "一座桥长2400米，一列火车以每秒20米的速度通过这座桥，火车车身长200米，则火车从上桥到车尾巴离开桥需要多少秒．", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 桥的长度为2400米\n    bridge_length = 2400\n    # 火车通过桥的速度为每秒20米\n    train_speed = 20\n    # 火车的车身长度为200米\n    train_length = 200\n    # 火车通过桥的总长度为火车长度 + 桥长度\n    total_length = train_length + bridge_length\n    # 火车通过桥所需时间 = 总长度 / 火车速度\n    time_to_pass = total_length / train_speed\n    # 答案是火车从上桥到车尾巴离开桥所需的时间\n    result = time_to_pass\n    # 返回答案\n    return result"]}
{"question": "一个装订小组要装订1820本书，4.5小时装订了315本．照这样计算，剩下的书还需要多少小时才能装订完？", "target": 21.5, "answer": 21.5, "score": 1, "generation": ["def solution():\n    # 要装订的总书数为1820本\n    total_books = 1820\n    # 4.5小时内装订的书数为315本\n    books_bound_in_4_5_hours = 315\n    # 每小时的装订速度 = 装订的书数 / 花费的时间\n    binding_speed_per_hour = books_bound_in_4_5_hours / 4.5\n    # 剩下的书数 = 总书数 - 已经装订的书数\n    remaining_books = total_books - books_bound_in_4_5_hours\n    # 剩下的书需要的时间 = 剩下的书数 / 每小时的装订速度\n    hours_needed = remaining_books / binding_speed_per_hour\n    # 答案是剩下的书需要的时间\n    result = hours_needed\n    # 返回答案\n    return result"]}
{"question": "一个数的2.1倍是7.77，这个数=．", "target": 3.7, "answer": 3.6999999999999997, "score": 1, "generation": ["def solution():\n    # 一个数的2.1倍是7.77\n    product = 7.77\n    multiplier = 2.1\n    # 这个数 = 乘积 / 倍数\n    number = product / multiplier\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "501班有学生42人，其中男生有25人，女生人数是全班的几分之几？", "target": 0.40476190476190477, "answer": 0.40476190476190477, "score": 1, "generation": ["def solution():\n    # 501班的学生总人数为42人\n    total_students = 42\n    # 男生人数为25人\n    num_boys = 25\n    # 女生人数为总人数减去男生人数\n    num_girls = total_students - num_boys\n    # 女生人数占全班总人数的比例 = 女生人数 / 总人数\n    girls_ratio = num_girls / total_students\n    # 答案是女生人数占全班总人数的比例\n    result = girls_ratio\n    # 返回答案\n    return result"]}
{"question": "一台彩电现在的售价是1480元，比原来降低了120元，现在的售价是原价的百分之几？", "target": 92.5, "answer": 7.5, "score": 0, "generation": ["def solution():\n    # 彩电现在的售价是1480元\n    current_price = 1480\n    # 比原价降低了120元\n    discount = 120\n    # 原价 = 现价 + 优惠\n    original_price = current_price + discount\n    # 降价比例 = 优惠 / 原价\n    discount_percentage = (discount / original_price) * 100\n    # 答案是现在的售价是原价的百分之几\n    result = discount_percentage\n    # 返回答案\n    return result"]}
{"question": "一本故事书有240页，比一本科技书少25%，这本科技书=多少页．", "target": 320.0, "answer": 180.0, "score": 0, "generation": ["def solution():\n    # 故事书的总页数为240页\n    total_pages_story = 240\n    # 科技书比故事书少25%\n    percentage_less = 0.25\n    # 科技书的页数 = 故事书的页数 * (1 - 减少的比例)\n    total_pages_science = total_pages_story * (1 - percentage_less)\n    # 答案是科技书的页数\n    result = total_pages_science\n    # 返回答案\n    return result"]}
{"question": "李大爷把一根6米长的竹竿垂直插入鱼塘中，竹竿的入泥部分是1.5米，露出水面的部分是1.24米，这个鱼塘水深多少米？", "target": 3.26, "answer": 3.26, "score": 1, "generation": ["def solution():\n    # 竹竿的总长度为6米\n    total_length = 6\n    # 竹竿入泥部分长度为1.5米\n    submerged_length = 1.5\n    # 竹竿露出水面部分长度为1.24米\n    above_water_length = 1.24\n    # 鱼塘水深 = 总长度 - 入泥部分长度 - 露出水面部分长度\n    depth_of_pond = total_length - submerged_length - above_water_length\n    # 答案是鱼塘的水深\n    result = depth_of_pond\n    # 返回答案\n    return result"]}
{"question": "山羊有60只，绵羊比山羊多80%，绵羊有多少只．", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 山羊的数量为60只\n    num_goats = 60\n    # 绵羊比山羊多80%\n    sheep_increase = 0.8\n    # 绵羊的数量 = 山羊数量 * 绵羊增加比例\n    num_sheep = num_goats * (1 + sheep_increase)\n    # 答案是绵羊的数量\n    result = num_sheep\n    # 返回答案\n    return result"]}
{"question": "一列火车从泰山到青岛以平均每小时85千米的速度行驶，需5.6小时到达．提速后，只需3.4小时就能到达．提速后的速度=？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 列车从泰山到青岛的距离为85 * 5.6 = 476千米\n    distance = 85 * 5.6\n    # 原始速度为每小时85千米\n    initial_speed = 85\n    # 新速度为提速后的速度\n    # 原始速度下到达所需时间为5.6小时\n    initial_time = 5.6\n    # 新速度下到达所需时间为3.4小时\n    new_time = 3.4\n    # 提速后的速度 = 距离 / 新时间\n    new_speed = distance / new_time\n    # 答案是提速后的速度\n    result = new_speed\n    # 返回答案\n    return result"]}
{"question": "某商场元旦大酬宾，标价40元童装，按标价的(4/5)出售，售价=多少元？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 童装的标价为40元\n    original_price = 40\n    # 按标价的(4/5)出售\n    selling_fraction = 4/5\n    # 售价 = 标价 * 出售比例\n    selling_price = original_price * selling_fraction\n    # 答案是售价\n    result = selling_price\n    # 返回答案\n    return result"]}
{"question": "有一摞纸，共有120张．第一次用了它的(3/5)，第二次用了它的(1/6)，两次一共用了多少张纸？", "target": 92.0, "answer": 92.0, "score": 1, "generation": ["def solution():\n    # 纸的总张数为120张\n    total_sheets = 120\n    # 第一次使用的比例为(3/5)\n    first_usage_fraction = 3/5\n    # 第二次使用的比例为(1/6)\n    second_usage_fraction = 1/6\n    # 第一次使用的张数 = 总张数 * 第一次使用比例\n    first_usage_sheets = total_sheets * first_usage_fraction\n    # 第二次使用的张数 = 总张数 * 第二次使用比例\n    second_usage_sheets = total_sheets * second_usage_fraction\n    # 两次一共使用的张数 = 第一次使用的张数 + 第二次使用的张数\n    total_usage = first_usage_sheets + second_usage_sheets\n    # 答案是两次一共使用的张数\n    result = total_usage\n    # 返回答案\n    return result"]}
{"question": "37与23的和，乘3.6与2.8的差，积=？", "target": 48.0, "answer": 48.000000000000014, "score": 1, "generation": ["def solution():\n    # 计算37与23的和\n    sum_numbers = 37 + 23\n    # 计算3.6与2.8的差\n    difference_numbers = 3.6 - 2.8\n    # 计算和与差的积\n    product = sum_numbers * difference_numbers\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "用边长0.6米的方砖铺54平方米的地面，需要多少块这样的方砖？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 每块方砖的边长为0.6米\n    side_length = 0.6\n    # 铺地面的总面积为54平方米\n    total_area = 54\n    # 每块方砖的面积 = 边长 * 边长\n    brick_area = side_length * side_length\n    # 需要的方砖数量 = 铺地面的总面积 / 每块方砖的面积\n    num_bricks = total_area / brick_area\n    # 答案是需要的方砖数量\n    result = num_bricks\n    # 返回答案\n    return result"]}
{"question": "王康同学买4本日记本用了48元，他还想买8本送给他的好朋友们，需要准备多少钱？", "target": 96.0, "answer": 96.0, "score": 1, "generation": ["def solution():\n    # 王康同学买4本日记本用了48元\n    price_for_4_books = 48\n    # 每本日记本的价格 = 总价 / 购买的本数\n    price_per_book = price_for_4_books / 4\n    # 他还想买8本送给他的好朋友们\n    num_books_for_friends = 8\n    # 需要准备的总钱数 = 朋友们的本数 * 每本的价格\n    total_money_needed = num_books_for_friends * price_per_book\n    # 答案是需要准备的总钱数\n    result = total_money_needed\n    # 返回答案\n    return result"]}
{"question": "甲数是14.6，乙数比甲数的3倍少8.2，乙数比甲数多多少？", "target": 21.0, "answer": 20.999999999999993, "score": 1, "generation": ["def solution():\n    # 甲数是14.6\n    num_a = 14.6\n    # 乙数比甲数的3倍少8.2\n    num_b = (num_a * 3) - 8.2\n    # 乙数比甲数多的数量 = 乙数 - 甲数\n    difference = num_b - num_a\n    # 答案是乙数比甲数多的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "我们学校美术小组有24人，摄影小组人数是美术小组的(1/2)，航模小组的人数是摄影小组的(5/6)，航模小组有多少人？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 美术小组的人数为24人\n    num_art_group = 24\n    # 摄影小组人数是美术小组的(1/2)\n    num_photo_group = (1/2) * num_art_group\n    # 航模小组的人数是摄影小组的(5/6)\n    num_aircraft_group = (5/6) * num_photo_group\n    # 答案是航模小组的人数\n    result = num_aircraft_group\n    # 返回答案\n    return result"]}
{"question": "某小学三年级有学生145人，四年级有学生155人，学校要为这两个年级的学生每人发4个桃子．一共要发多少个桃子？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 三年级学生人数为145人\n    num_third_grade_students = 145\n    # 四年级学生人数为155人\n    num_fourth_grade_students = 155\n    # 每个学生发4个桃子\n    num_peaches_per_student = 4\n    # 总共需要发的桃子数量 = (三年级学生人数 + 四年级学生人数) * 每人桃子数量\n    total_peaches = (num_third_grade_students + num_fourth_grade_students) * num_peaches_per_student\n    # 答案是总共需要发的桃子数量\n    result = total_peaches\n    # 返回答案\n    return result"]}
{"question": "一个图书馆有24个同样的书架，每个书架有4层，每层放240本书．这些书架一共能放多少本书？", "target": 23040.0, "answer": 23040.0, "score": 1, "generation": ["def solution():\n    # 书架的数量为24个\n    num_bookshelves = 24\n    # 每个书架的层数为4层\n    num_layers_per_bookshelf = 4\n    # 每层放置的书籍数量为240本\n    num_books_per_layer = 240\n    # 图书馆能放置的总书籍数量 = 书架数量 * 每个书架的层数 * 每层放置的书籍数量\n    total_books = num_bookshelves * num_layers_per_bookshelf * num_books_per_layer\n    # 答案是图书馆能放置的总书籍数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "学校田径队有男队员35人，女队员21人．如果把它们平均分成4个小组进行训练，每个小组有多少队员？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 男队员数量为35人\n    num_males = 35\n    # 女队员数量为21人\n    num_females = 21\n    # 总队员数量 = 男队员数量 + 女队员数量\n    total_players = num_males + num_females\n    # 小组数量为4个\n    num_groups = 4\n    # 每个小组平均队员数量 = 总队员数量 / 小组数量\n    players_per_group = total_players / num_groups\n    # 答案是每个小组的队员数量\n    result = players_per_group\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车从相距450千米的两地相向开出，4.5小时相遇．已知甲车每小时行54千米，乙车每小时行多少千米？", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 两地之间的距离为450千米\n    distance = 450\n    # 甲车的速度是每小时行54千米\n    speed_a = 54\n    # 两车相向而行，两车相对速度为甲车与乙车速度之和\n    # 相遇时间 = 距离 / 相对速度\n    # 4.5小时 = 450 / (54 + speed_b)\n    # 解方程得到乙车的速度\n    speed_b = (450 / 4.5) - speed_a\n    # 答案是乙车每小时行的千米数\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距406公里，一辆汽车从甲地开往乙地，4小时行驶了180公里．照这样的速度再行驶多少小时这辆汽车就可以到达乙地？", "target": 5.022222222222222, "answer": 9.022222222222222, "score": 0, "generation": ["def solution():\n    # 两地相距406公里\n    total_distance = 406\n    # 开往乙地的汽车已经行驶了180公里\n    distance_covered = 180\n    # 已经行驶的时间是4小时\n    time_elapsed = 4\n    # 当前速度 = 已经行驶的距离 / 已经行驶的时间\n    current_speed = distance_covered / time_elapsed\n    # 剩余距离 = 总距离 - 已经行驶的距离\n    remaining_distance = total_distance - distance_covered\n    # 剩余时间 = 剩余距离 / 当前速度\n    remaining_time = remaining_distance / current_speed\n    # 到达乙地所需总时间 = 已经行驶的时间 + 剩余时间\n    total_time = time_elapsed + remaining_time\n    # 答案是到达乙地所需总时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "6（2）班图书角有故事书36本，漫画书比故事书多(1/3)，漫画书有多少本．", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 图书角故事书的数量为36本\n    num_story_books = 36\n    # 漫画书比故事书多(1/3)\n    ratio_comic_to_story = 1/3\n    # 漫画书的数量 = 故事书的数量 * 比例 + 故事书的数量\n    num_comic_books = num_story_books * ratio_comic_to_story + num_story_books\n    # 答案是漫画书的数量\n    result = num_comic_books\n    # 返回答案\n    return result"]}
{"question": "农资公司要运250吨化肥到农村，其中60%用船运，其余的用卡车运．用船运的比用卡车运的多多少吨？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 要运输的总重量为250吨\n    total_weight = 250\n    # 用船运的比例为60%\n    ship_percentage = 0.6\n    # 用船运的重量 = 总重量 * 用船运的比例\n    weight_ship = total_weight * ship_percentage\n    # 用卡车运的重量 = 总重量 - 用船运的重量\n    weight_truck = total_weight - weight_ship\n    # 用船运的重量比用卡车运的重量多的重量 = 用船运的重量 - 用卡车运的重量\n    weight_difference = weight_ship - weight_truck\n    # 答案是用船运的重量比用卡车运的重量多的重量\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "红旗小学今年招收新生240人，比原计划多招收(1/5)，原计划招生多少人？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 红旗小学今年招收新生240人\n    total_new_students = 240\n    # 比原计划多招收(1/5)\n    extra_fraction = 1/5\n    # 原计划招生人数 = 实际招生人数 / (1 + 多招收比例)\n    planned_new_students = total_new_students / (1 + extra_fraction)\n    # 答案是原计划招生人数\n    result = planned_new_students\n    # 返回答案\n    return result"]}
{"question": "从9500/19的商里面减去36*12的积，差=？", "target": 68.0, "answer": 68.0, "score": 1, "generation": ["def solution():\n    # 计算商\n    quotient = 9500 / 19\n    # 计算积\n    product = 36 * 12\n    # 计算差\n    difference = quotient - product\n    # 答案是差\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "胜利小学有学生1200人，某一天的出勤率是99.5%．这天有多少人没有到校读书？", "target": 6.0, "answer": 6.000000000000005, "score": 1, "generation": ["def solution():\n    # 胜利小学的学生总人数为1200人\n    total_students = 1200\n    # 出勤率是99.5%\n    attendance_rate = 0.995\n    # 没有到校读书的人数 = 总人数 * (1 - 出勤率)\n    absent_students = total_students * (1 - attendance_rate)\n    # 答案是没有到校读书的人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "一本书售价36元，利润是成本的20%，成本=多少元？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 一本书的售价为36元\n    selling_price = 36\n    # 利润是成本的20%\n    profit_percentage = 0.20\n    # 成本 + 利润 = 售价\n    # 成本 + 利润 = 成本 + 成本 * 利润率\n    # 售价 = 成本 + 成本 * 利润率\n    # 成本 * (1 + 利润率) = 售价\n    # 成本 = 售价 / (1 + 利润率)\n    cost = selling_price / (1 + profit_percentage)\n    # 答案是成本\n    result = cost\n    # 返回答案\n    return result"]}
{"question": "商店共运来470个玩具熊，已经卖出348个，每个23元，剩下的每个卖17元，一共可以收入多少元？", "target": 10078.0, "answer": 10078.0, "score": 1, "generation": ["def solution():\n    # 商店共运来470个玩具熊\n    total_bears = 470\n    # 已经卖出348个，每个23元\n    sold_expensive = 348 * 23\n    # 剩下的每个卖17元\n    remaining_bears = total_bears - 348\n    sold_cheap = remaining_bears * 17\n    # 一共可以收入多少元\n    total_income = sold_expensive + sold_cheap\n    # 答案是总收入\n    result = total_income\n    # 返回答案\n    return result"]}
{"question": "挖一条长400米的水渠，已经挖了全长的(3/5)，还剩多少米没挖？", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 水渠的总长度为400米\n    total_length = 400\n    # 已经挖了全长的(3/5)\n    dug_fraction = 3/5\n    # 已经挖的长度 = 总长度 * 已挖比例\n    dug_length = total_length * dug_fraction\n    # 剩余未挖的长度 = 总长度 - 已挖的长度\n    remaining_length = total_length - dug_length\n    # 答案是剩余未挖的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "放假乘火车去奶奶家要用16小时．现在火车提速了，14小时就能到．现在乘火车去奶奶家的时间比原来节省了百分之几？", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 原来乘火车去奶奶家需要的时间为16小时\n    original_time = 16\n    # 现在乘火车去奶奶家需要的时间为14小时\n    new_time = 14\n    # 节省的时间 = 原来的时间 - 现在的时间\n    time_saved = original_time - new_time\n    # 节省的百分比 = 节省的时间 / 原来的时间 * 100%\n    percentage_saved = (time_saved / original_time) * 100\n    # 答案是节省的百分比\n    result = percentage_saved\n    # 返回答案\n    return result"]}
{"question": "小明的爸爸发表了一篇文章，获得稿酬1200元．按规定，稿酬收入超过800元的部分按14%的税率缴纳个人所得税．小明的爸爸应缴纳个人所得税多少元？", "target": 56.0, "answer": 56.00000000000001, "score": 1, "generation": ["def solution():\n    # 稿酬收入为1200元\n    income = 1200\n    # 规定稿酬收入超过800元的部分按14%的税率缴纳个人所得税\n    tax_rate = 0.14\n    # 超过800元部分的稿酬收入\n    excess_income = income - 800\n    # 应缴纳的个人所得税额 = 超过800元部分的稿酬收入 * 税率\n    tax_amount = excess_income * tax_rate\n    # 答案是应缴纳的个人所得税额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "学学看到太上老君正在用一根绳子拴宝葫芦，第一次用去全长的一半还多2米，第二次用去余下的一半少10米，第3次用去15米，最后还剩9米，那么这根绳子原来有多少米．", "target": 60.0, "answer": "", "score": 0, "generation": ["首先，我们设这根绳子的原始长度为x米。\n\n第一次用去全长的一半还多2米，即剩下的长度为x/2 - 2米。\n\n第二次用去余下的一半少10米，即剩下的长度为(x/2 - 2) / 2 - 10米。\n\n第三次用去15米，即剩下的长度为((x/2 - 2) / 2 - 10) - 15米。\n\n最后还剩9米，因此有方程：(((x/2 - 2) / 2 - 10) - 15) - 9 = 0。\n\n解这个方程可以得到这根绳子的原始长度x。\n\n```python\ndef solution():\n    # 解方程得到绳子的原始长度\n    original_length = (((((x/2 - 2) / 2 - 10) - 15) - 9) * -1) * 2 + 2\n    # 答案是绳子的原始长度\n    result = original_length\n    # 返回答案\n    return result\n```"]}
{"question": "学校买回25箱墨水，每箱36瓶，每瓶4.8元．一共需要多少钱？", "target": 4320.0, "answer": 4320.0, "score": 1, "generation": ["def solution():\n    # 学校买回的箱数为25箱\n    num_boxes = 25\n    # 每箱墨水的瓶数为36瓶\n    num_bottles_per_box = 36\n    # 每瓶墨水的价格为4.8元\n    price_per_bottle = 4.8\n    # 总费用 = 箱数 * 每箱瓶数 * 每瓶价格\n    total_cost = num_boxes * num_bottles_per_box * price_per_bottle\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "小军读一本故事书，第一天共读42页，第二天共读了43页，还余下全书的83%没有读，这本故事书共有多少页？", "target": 500.0, "answer": 499.99999999999994, "score": 1, "generation": ["def solution():\n    # 小军第一天读了42页\n    pages_day1 = 42\n    # 小军第二天读了43页\n    pages_day2 = 43\n    # 余下全书的83%没有读\n    remaining_percentage = 0.83\n    # 两天共读的页数\n    total_pages_read = pages_day1 + pages_day2\n    # 两天读的页数占总书页数的17%\n    total_percentage_read = 0.17\n    # 两天读的页数占总书页数的17%，则剩余的页数占83%\n    total_pages = total_pages_read / total_percentage_read\n    # 答案是这本故事书共有多少页\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "胜利小学为贫困地区捐款3750.8元，比红旗小学少52.2元，两所学校共捐款多少元？", "target": 7553.8, "answer": 7449.400000000001, "score": 0, "generation": ["def solution():\n    # 胜利小学捐款3750.8元\n    donation_victory = 3750.8\n    # 比红旗小学少52.2元\n    difference = 52.2\n    # 红旗小学的捐款 = 胜利小学的捐款 - 差额\n    donation_red_flag = donation_victory - difference\n    # 两所学校共捐款 = 胜利小学的捐款 + 红旗小学的捐款\n    total_donation = donation_victory + donation_red_flag\n    # 答案是两所学校共捐款的总额\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "甲数比乙数的(4/5)还少20，已知甲数是40，乙数=？", "target": 75.0, "answer": 20.0, "score": 0, "generation": ["def solution():\n    # 甲数是40\n    num_a = 40\n    # 甲数比乙数的(4/5)还少20\n    difference = 20\n    ratio = 4/5\n    # 甲数 - 乙数 = 20\n    # 40 - 乙数 = 20\n    num_b = num_a - difference\n    # 乙数 = 40 - 20\n    # 乙数 = 20\n    result = num_b\n    return result"]}
{"question": "某化肥厂去年生产化肥6000吨，今年比去年增产20%，今年增产多少吨？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 去年生产的化肥数量为6000吨\n    last_year_production = 6000\n    # 今年增产了20%\n    increase_percentage = 0.20\n    # 今年增产的化肥数量 = 去年产量 * 增长百分比\n    increase_amount = last_year_production * increase_percentage\n    # 答案是今年增产的化肥数量\n    result = increase_amount\n    # 返回答案\n    return result"]}
{"question": "同学们参加爬山比赛，女同学分成了4组，每组有15人．参赛的男同学有76名，一共有多少名同学参加爬山比赛？", "target": 136.0, "answer": 136.0, "score": 1, "generation": ["def solution():\n    # 女同学每组有15人\n    num_girls_per_group = 15\n    # 男同学有76名\n    num_boys = 76\n    # 女同学共有4组\n    num_girl_groups = 4\n    # 总参赛人数 = 女同学总数 + 男同学总数\n    total_students = num_girls_per_group * num_girl_groups + num_boys\n    # 答案是总参赛人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一根绳子长20米，剪去多少米后，剩下的占全长的40%．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为20米\n    total_length = 20\n    # 剪去的长度为x米\n    cut_length = total_length - (0.4 * total_length)\n    # 剩下的长度占全长的40%，即剩下的长度为0.4 * 全长\n    remaining_length = 0.4 * total_length\n    # 因为剩下的长度等于总长度减去剪去的长度，所以 x = 0.6 * 全长\n    cut_length = 0.6 * total_length\n    # 答案是剪去的长度\n    result = cut_length\n    # 返回答案\n    return result"]}
{"question": "一台洗衣机的原价是1250元，实际售价为1200元，实际售价比原价降低了百分之几？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 洗衣机的原价是1250元\n    original_price = 1250\n    # 实际售价是1200元\n    actual_price = 1200\n    # 降价金额 = 原价 - 实际售价\n    discount_amount = original_price - actual_price\n    # 降价比例 = 降价金额 / 原价\n    discount_percentage = (discount_amount / original_price) * 100\n    # 答案是降价的百分比\n    result = discount_percentage\n    # 返回答案\n    return result"]}
{"question": "把一根25米长的水管锯成5段，每锯一次用8分钟，一共需要多少分钟．", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 水管的总长度为25米\n    total_length = 25\n    # 需要切成的段数为5段\n    num_segments = 5\n    # 切一次需要的时间为8分钟\n    time_per_cut = 8\n    # 总共需要切割的次数为段数减一\n    total_cuts = num_segments - 1\n    # 总共需要的时间 = 切割次数 * 每次切割时间\n    total_time = total_cuts * time_per_cut\n    # 答案是总共需要的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "一个数是8，另一个数是840，积=？", "target": 6720.0, "answer": 6720.0, "score": 1, "generation": ["def solution():\n    # 第一个数是8\n    num1 = 8\n    # 第二个数是840\n    num2 = 840\n    # 两数的乘积\n    product = num1 * num2\n    # 答案是两数的乘积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "淘气生日时，妈妈送给他一个圆锥形的陀螺，陀螺的底面直径是6厘米，高5厘米，如果妈妈要把它装在一个长方体盒子中，这个盒子的容积至少=多少立方厘米．", "target": 180.0, "answer": 47.1, "score": 0, "generation": ["def solution():\n    # 圆锥的底面半径是直径的一半，即半径为3厘米\n    radius_cone = 3\n    # 圆锥的高度是5厘米\n    height_cone = 5\n    # 圆锥的体积公式为1/3 * π * r^2 * h\n    volume_cone = 1/3 * 3.14 * radius_cone**2 * height_cone\n    # 长方体盒子的体积至少要大于等于圆锥的体积\n    volume_box = volume_cone\n    # 答案是长方体盒子的体积\n    result = volume_box\n    # 返回答案\n    return result"]}
{"question": "多少-278=192．", "target": 470.0, "answer": 470.0, "score": 1, "generation": ["def solution():\n    # 给定的等式为 x - 278 = 192\n    # 通过移项得到 x = 192 + 278\n    result = 192 + 278\n    # 返回答案\n    return result"]}
{"question": "一辆客车从甲地到乙地，计划要8小时，实际时间比计划少用(1/16)，实际用了多少小时？", "target": 7.5, "answer": 7.5, "score": 1, "generation": ["def solution():\n    # 计划时间为8小时\n    planned_time = 8\n    # 实际比计划少用的比例为(1/16)\n    time_saved_fraction = 1/16\n    # 实际用时 = 计划时间 * (1 - 实际比计划少用的比例)\n    actual_time = planned_time * (1 - time_saved_fraction)\n    # 答案是实际用了多少小时\n    result = actual_time\n    # 返回答案\n    return result"]}
{"question": "一件原价90元的商品打0.9出售，便宜了多少元．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 商品的原价为90元\n    original_price = 90\n    # 打折后的价格为原价 * 折扣\n    discounted_price = original_price * 0.9\n    # 便宜了的金额 = 原价 - 打折后的价格\n    discount_amount = original_price - discounted_price\n    # 答案是便宜了的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "要挖一条全长120米的水渠，前8天平均每天挖10.5米，剩下的每天挖12米，还需几天挖完？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 水渠的总长度为120米\n    total_length = 120\n    # 前8天平均每天挖10.5米\n    first_days_rate = 10.5\n    # 剩下的每天挖12米\n    remaining_days_rate = 12\n    # 前8天挖掘的总长度\n    first_days_length = 8 * first_days_rate\n    # 剩余长度 = 总长度 - 前8天挖掘的总长度\n    remaining_length = total_length - first_days_length\n    # 剩余天数 = 剩余长度 / 每天的挖掘速度\n    remaining_days = remaining_length / remaining_days_rate\n    # 答案是还需挖完的天数\n    result = remaining_days\n    # 返回答案\n    return result"]}
{"question": "一个因数是60，另一个因数是88，他们的积=．", "target": 5280.0, "answer": 5280.0, "score": 1, "generation": ["def solution():\n    # 给定的两个因数分别为60和88\n    factor1 = 60\n    factor2 = 88\n    # 因数的积 = 因数1 * 因数2\n    product = factor1 * factor2\n    # 答案是因数的积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "一项工程25人15天可以完成，如果每人的工作效率不变，工作人员减少5人，需要多少天可以完成？", "target": 18.75, "answer": 18.75, "score": 1, "generation": ["def solution():\n    # 原工程完成需要的人数为25人\n    initial_people = 25\n    # 原工程完成需要的天数为15天\n    initial_days = 15\n    # 减少的人数为5人\n    reduced_people = 5\n    # 剩余的人数 = 原人数 - 减少的人数\n    remaining_people = initial_people - reduced_people\n    # 新的完成工程所需天数 = (原人数 * 原天数) / 新人数\n    new_days = (initial_people * initial_days) / remaining_people\n    # 答案是新的完成工程所需天数\n    result = new_days\n    # 返回答案\n    return result"]}
{"question": "商场运来一批衣服，一共460件，进价每件75元，零售价每件96元，如果这一批衣服全部卖完，这家商场可以赚多少元钱？", "target": 9660.0, "answer": 9660.0, "score": 1, "generation": ["def solution():\n    # 运来的衣服总数为460件\n    total_clothes = 460\n    # 每件衣服的进价为75元\n    cost_price_per_cloth = 75\n    # 每件衣服的零售价为96元\n    selling_price_per_cloth = 96\n    # 卖完全部衣服的利润 = 卖出价 - 进价\n    profit_per_cloth = selling_price_per_cloth - cost_price_per_cloth\n    # 总利润 = 卖完全部衣服的利润 * 总数\n    total_profit = profit_per_cloth * total_clothes\n    # 答案是总利润\n    result = total_profit\n    # 返回答案\n    return result"]}
{"question": "甲、乙两站相距246千米，A、B两辆汽车分别从甲站、乙站同时相向开出1.5小时后相遇．A汽车的速度是89千米/小时，B汽车的速度=．", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 两站之间的距离为246千米\n    distance = 246\n    # A汽车的速度是89千米/小时\n    speed_a = 89\n    # 1.5小时后相遇，即时间为1.5小时\n    time = 1.5\n    # 由速度 = 距离 / 时间，得到B汽车的速度为 (距离 - A汽车已经行驶的距离) / 时间\n    speed_b = (distance - speed_a * time) / time\n    # 答案是B汽车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "同学们要折120只纸鹤，每人折5只，每个小组有12人，需要几个小组才能完成？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 需要折叠的纸鹤总数为120只\n    total_cranes = 120\n    # 每人折叠的纸鹤数量为5只\n    per_person_cranes = 5\n    # 每个小组的人数为12人\n    group_size = 12\n    # 每个小组折叠的纸鹤数量为每人数量 * 小组人数\n    group_cranes = per_person_cranes * group_size\n    # 需要完成的小组数量 = 总纸鹤数量 / 每个小组折叠的纸鹤数量\n    num_groups = total_cranes // group_cranes\n    # 如果有余数，则需要再多一个小组\n    if total_cranes % group_cranes != 0:\n        num_groups += 1\n    # 答案是需要的小组数量\n    result = num_groups\n    # 返回答案\n    return result"]}
{"question": "某工人要加工一批零件，已加工了这批零件的(3/5)，还剩下120个没加工，这批零件共几个？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 已加工的零件数量占总数的(3/5)\n    processed_fraction = 3/5\n    # 剩下120个零件未加工\n    remaining_unprocessed = 120\n    # 令总零件数量为x，则已加工的数量为processed_fraction * x\n    # 未加工的数量为remaining_unprocessed，根据题意可得方程式\n    # processed_fraction * x + remaining_unprocessed = x\n    # 解方程得到总零件数量x\n    total_parts = remaining_unprocessed / (1 - processed_fraction)\n    # 答案是这批零件的总数量\n    result = total_parts\n    # 返回答案\n    return result"]}
{"question": "映山红剧院分4个区，每个区有20排座位，每排有25个座位．剧院里一共能坐多少人？", "target": 2000.0, "answer": 2000.0, "score": 1, "generation": ["def solution():\n    # 每个区有20排座位\n    rows_per_section = 20\n    # 每排有25个座位\n    seats_per_row = 25\n    # 剧院分4个区\n    num_sections = 4\n    # 剧院里一共能坐的人数 = 每个区的座位数 * 区的数量\n    total_seats = rows_per_section * seats_per_row * num_sections\n    # 答案是剧院里一共能坐的人数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "王老师以每股10元的价格购进某种股票5000股，过了一段时间后以每股12元卖出，按规定买卖股票都要按买卖金额的0.55%缴纳手续费，王老师这次买卖股票实际赚多少元．", "target": 9395.0, "answer": 9395.0, "score": 1, "generation": ["def solution():\n    # 每股股票的购入价格为10元\n    purchase_price_per_share = 10\n    # 购入股票的数量为5000股\n    num_shares = 5000\n    # 每股股票的卖出价格为12元\n    selling_price_per_share = 12\n    # 购入股票的总金额 = 每股购入价格 * 股票数量\n    total_purchase_amount = purchase_price_per_share * num_shares\n    # 卖出股票的总金额 = 每股卖出价格 * 股票数量\n    total_selling_amount = selling_price_per_share * num_shares\n    # 购入股票的手续费 = 购入股票的总金额 * 手续费比例\n    purchase_fee = total_purchase_amount * 0.0055\n    # 卖出股票的手续费 = 卖出股票的总金额 * 手续费比例\n    selling_fee = total_selling_amount * 0.0055\n    # 实际赚取的金额 = 卖出股票的总金额 - 卖出股票的手续费 - 购入股票的总金额 - 购入股票的手续费\n    profit = total_selling_amount - selling_fee - total_purchase_amount - purchase_fee\n    # 答案是实际赚取的金额\n    result = profit\n    # 返回答案\n    return result"]}
{"question": "红石村小学分成6个小组去浇树，每组有4人，一共浇树360棵，平均每人浇树多少棵？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 小组的数量为6个\n    num_groups = 6\n    # 每组的人数为4人\n    num_people_per_group = 4\n    # 总共浇树的数量为360棵\n    total_trees = 360\n    # 每人平均浇树的数量 = 总共浇树的数量 / (小组数量 * 每组人数)\n    trees_per_person = total_trees / (num_groups * num_people_per_group)\n    # 答案是每人平均浇树的数量\n    result = trees_per_person\n    # 返回答案\n    return result"]}
{"question": "小明到商店去买了一个9元钱的文具盒，给营业员阿姨13元钱，应找回多少钱？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 文具盒的价格为9元\n    price_stationery_box = 9\n    # 小明给了营业员13元\n    amount_paid = 13\n    # 找零金额 = 给的钱 - 文具盒的价格\n    change = amount_paid - price_stationery_box\n    # 答案是找回的钱\n    result = change\n    # 返回答案\n    return result"]}
{"question": "小华骑车每分钟行290米，他从家到学校共用16分钟，小华家离学校多少米？", "target": 4640.0, "answer": 4640.0, "score": 1, "generation": ["def solution():\n    # 小华骑车每分钟行290米\n    speed = 290\n    # 小华从家到学校共用16分钟\n    total_time = 16\n    # 总距离 = 速度 * 时间\n    total_distance = speed * total_time\n    # 答案是小华家离学校的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "生产一批件，原计划18天完成，实际每天生产600个，这样时间缩短了6天．原计划每天生产多少个零件？", "target": 400.0, "answer": 900.0, "score": 0, "generation": ["def solution():\n    # 原计划完成这批零件需要的天数为18天\n    planned_days = 18\n    # 实际每天生产的零件数量为600个\n    actual_daily_production = 600\n    # 时间缩短了6天，即实际完成时间为原计划时间减去时间缩短的天数\n    actual_days = planned_days - 6\n    # 原计划每天生产的零件数量 = 总零件数量 / 原计划完成天数\n    planned_daily_production = actual_daily_production * (planned_days / actual_days)\n    # 答案是原计划每天生产的零件数量\n    result = planned_daily_production\n    # 返回答案\n    return result"]}
{"question": "一个养鸡专业户，今年养鸡1250只，比去年增加了(1/4)．去年养鸡多少只？多少．", "target": 1000.0, "answer": 1000.0, "score": 1, "generation": ["def solution():\n    # 今年养鸡的数量为1250只\n    num_chickens_this_year = 1250\n    # 增加了(1/4)\n    increase_fraction = 1/4\n    # 去年养鸡的数量 = 今年数量 / (1 + 增加比例)\n    num_chickens_last_year = num_chickens_this_year / (1 + increase_fraction)\n    # 答案是去年养鸡的数量\n    result = num_chickens_last_year\n    # 返回答案\n    return result"]}
{"question": "6+8+10+12+14+16+18+20+22+24=．", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 计算6到24之间的偶数和\n    result = sum(range(6, 25, 2))\n    # 返回答案\n    return result"]}
{"question": "爷爷去医院看病．医生处方：每日3次，每次2片，一瓶药有90片，可以吃多少天？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 每日服用次数\n    dosage_frequency = 3\n    # 每次服用片数\n    dosage_per_time = 2\n    # 一瓶药的总片数\n    total_pills_per_bottle = 90\n    # 每天服用的总片数\n    total_dosage_per_day = dosage_frequency * dosage_per_time\n    # 可以吃的天数 = 一瓶药的总片数 / 每天服用的总片数\n    days_to_last = total_pills_per_bottle / total_dosage_per_day\n    # 答案是可以吃的天数\n    result = days_to_last\n    # 返回答案\n    return result"]}
{"question": "电动车厂前年生产80万辆电动车，去年比前年增产25%．去年生产了多少辆？", "target": 1000000.0, "answer": 1000000.0, "score": 1, "generation": ["def solution():\n    # 前年生产的电动车数量为80万辆\n    cars_last_year = 800000\n    # 去年比前年增产25%\n    increase_percentage = 0.25\n    # 去年生产的电动车数量 = 前年生产的数量 * (1 + 增长百分比)\n    cars_this_year = cars_last_year * (1 + increase_percentage)\n    # 答案是去年生产的电动车数量\n    result = cars_this_year\n    # 返回答案\n    return result"]}
{"question": "某班今天的出勤率为92.5%，请病假2人，事假1人，今天出勤多少人．", "target": 37.0, "answer": 97.0, "score": 0, "generation": ["def solution():\n    # 今天应该出勤的总人数\n    total_students = 100\n    # 病假人数为2人\n    sick_leave = 2\n    # 事假人数为1人\n    personal_leave = 1\n    # 出勤人数 = 应该出勤的总人数 - 病假人数 - 事假人数\n    present_students = total_students - sick_leave - personal_leave\n    # 答案是今天的出勤人数\n    result = present_students\n    # 返回答案\n    return result"]}
{"question": "王大妈卖鸡蛋，上午卖了12千克，下午卖了18千克，下午比上午多卖了55.2元．平均每千克鸡蛋卖多少元？", "target": 9.2, "answer": 2.8400000000000003, "score": 0, "generation": ["def solution():\n    # 上午卖了12千克\n    morning_sales = 12\n    # 下午卖了18千克\n    afternoon_sales = 18\n    # 下午比上午多卖了55.2元\n    extra_revenue = 55.2\n    # 平均每千克鸡蛋的售价 = （上午总销售额 + 下午总销售额）/ （上午销售量 + 下午销售量）\n    price_per_kg = (morning_sales + afternoon_sales + extra_revenue) / (morning_sales + afternoon_sales)\n    # 答案是平均每千克鸡蛋的售价\n    result = price_per_kg\n    # 返回答案\n    return result"]}
{"question": "树上一共有8只小鸟，第一次飞走了1只，第二次又飞走了2只，一共飞走了多少只．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 树上一共有8只小鸟\n    total_birds = 8\n    # 第一次飞走了1只\n    flew_away_first_time = 1\n    # 第二次飞走了2只\n    flew_away_second_time = 2\n    # 一共飞走的小鸟数量 = 第一次飞走的数量 + 第二次飞走的数量\n    total_flew_away = flew_away_first_time + flew_away_second_time\n    # 答案是一共飞走的小鸟数量\n    result = total_flew_away\n    # 返回答案\n    return result"]}
{"question": "修一段路，已经修好了75千米，没修的比修好的2倍多15千米，这段路多少千米？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 已经修好的路程为75千米\n    repaired_distance = 75\n    # 没修的路程比修好的路程多15千米，且是修好路程的2倍\n    unrepaired_distance = repaired_distance * 2 + 15\n    # 总路程 = 已修好的路程 + 未修好的路程\n    total_distance = repaired_distance + unrepaired_distance\n    # 答案是这段路的总长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某修路队修一条公路，原计划每天修300米，实际每天比原计划多修12%，实际每天修多少米？", "target": 336.0, "answer": 336.00000000000006, "score": 1, "generation": ["def solution():\n    # 原计划每天修路300米\n    planned_daily_distance = 300\n    # 实际每天比原计划多修12%\n    extra_percentage = 0.12\n    # 实际每天修路距离 = 原计划每天修路距离 * (1 + 额外百分比)\n    actual_daily_distance = planned_daily_distance * (1 + extra_percentage)\n    # 答案是实际每天修路的距离\n    result = actual_daily_distance\n    # 返回答案\n    return result"]}
{"question": "有5个同学投沙包，老师如果发给每人2个沙包就差1个，老师共有多少个沙包？", "target": 9.0, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 有5个同学投沙包\n    num_students = 5\n    # 每人发2个沙包就差1个\n    difference = 1\n    # 如果共有x个沙包，则总沙包数满足 x % num_students == difference\n    total_bags = 0\n    while total_bags % num_students != difference:\n        total_bags += 1\n    # 答案是老师共有的沙包数量\n    result = total_bags\n    # 返回答案\n    return result"]}
{"question": "妈妈带100元钱去超市，买了一袋14.8元的奶粉，还买了15.2元的猪肉，最后还剩多少元钱？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 妈妈带去超市的钱为100元\n    total_money = 100\n    # 买了一袋14.8元的奶粉\n    cost_milk_powder = 14.8\n    # 还买了15.2元的猪肉\n    cost_pork = 15.2\n    # 购买商品的总花费 = 奶粉价格 + 猪肉价格\n    total_cost = cost_milk_powder + cost_pork\n    # 剩余的钱 = 总钱数 - 总花费\n    remaining_money = total_money - total_cost\n    # 答案是剩余的钱数\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "我国的淡水鱼类大约有700种，比海洋鱼类少65%．我国的海洋鱼类大约有多少种？", "target": 2000.0, "answer": 2000.0000000000002, "score": 1, "generation": ["def solution():\n    # 我国的淡水鱼类大约有700种\n    num_freshwater_fish = 700\n    # 海洋鱼类比淡水鱼类少65%\n    percentage_less = 0.65\n    # 海洋鱼类种类数 = 淡水鱼类种类数 / (1 - 减少的比例)\n    num_marine_fish = num_freshwater_fish / (1 - percentage_less)\n    # 答案是海洋鱼类的种类数\n    result = num_marine_fish\n    # 返回答案\n    return result"]}
{"question": "学校购进面包76箱，购进的牛奶是面包的9倍，学校购进的面包和牛奶一共有多少箱？", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 学校购进的面包箱数为76箱\n    num_bread_boxes = 76\n    # 牛奶是面包的9倍\n    num_milk_boxes = 9 * num_bread_boxes\n    # 购进的面包和牛奶一共的箱数 = 面包箱数 + 牛奶箱数\n    total_boxes = num_bread_boxes + num_milk_boxes\n    # 答案是购进的面包和牛奶一共的箱数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "小李从家到学校，每分钟走50米，7分钟走了一半路程，剩下的一半路程要5分钟走完，平均每分钟要走多少米．", "target": 70.0, "answer": 50.0, "score": 0, "generation": ["def solution():\n    # 每分钟走的距离为50米\n    distance_per_minute = 50\n    # 第一段路程走了7分钟，占总路程的一半\n    time_first_half = 7\n    # 第二段路程走了5分钟，占总路程的一半\n    time_second_half = 5\n    # 总路程 = 第一段路程 + 第二段路程\n    total_distance = distance_per_minute * (time_first_half + time_second_half)\n    # 平均每分钟走的距离 = 总路程 / 总时间\n    average_distance_per_minute = total_distance / (time_first_half + time_second_half)\n    # 答案是平均每分钟要走的距离\n    result = average_distance_per_minute\n    # 返回答案\n    return result"]}
{"question": "菜场上有342千克大白菜，比胡萝卜多16千克，大白菜和胡萝卜一共有多少千克？", "target": 668.0, "answer": 668.0, "score": 1, "generation": ["def solution():\n    # 大白菜的重量为342千克\n    weight_cabbage = 342\n    # 大白菜比胡萝卜多16千克\n    weight_difference = 16\n    # 胡萝卜的重量 = 大白菜的重量 - 差值\n    weight_carrot = weight_cabbage - weight_difference\n    # 大白菜和胡萝卜一共的重量 = 大白菜的重量 + 胡萝卜的重量\n    total_weight = weight_cabbage + weight_carrot\n    # 答案是大白菜和胡萝卜一共的重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "李芳用彩纸制作了一条花边，一共排列了100朵花．每朵花的宽是4.5厘米，每两朵花之间的距离是1.2厘米．请算出这条花边一共长多少厘米？", "target": 568.8, "answer": 568.8, "score": 1, "generation": ["def solution():\n    # 每朵花的宽度为4.5厘米\n    flower_width = 4.5\n    # 每两朵花之间的距离为1.2厘米\n    distance_between_flowers = 1.2\n    # 总共有100朵花\n    total_flowers = 100\n    # 每朵花及其间距的总宽度\n    total_width_per_flower = flower_width + distance_between_flowers\n    # 花边的总长度 = 总花朵数 * 每朵花及其间距的总宽度 - 最后一朵花与前一朵花的间距\n    total_length = total_flowers * total_width_per_flower - distance_between_flowers\n    # 答案是花边的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "永红小学六年级学生参加课外活动生物组的有35人，参加微机组的人数是生物组的(4/5)，又是美术组的(7/8)．美术组有多少人？", "target": 32.0, "answer": 30.625, "score": 0, "generation": ["def solution():\n    # 生物组的学生人数为35人\n    num_biology = 35\n    # 微机组的人数是生物组的(4/5)\n    num_computer = (4/5) * num_biology\n    # 美术组的人数是生物组的(7/8)\n    num_art = (7/8) * num_biology\n    # 答案是美术组的人数\n    result = num_art\n    # 返回答案\n    return result"]}
{"question": "水果批发部要运进一批水果，第一次运进总量的22%，第二次运进1.5吨，两次共运进这批水果的62%，这批水果一共有多少吨．", "target": 3.75, "answer": 1.240694789081886, "score": 0, "generation": ["def solution():\n    # 第一次运进总量的22%\n    first_delivery_percentage = 0.22\n    # 第二次运进的数量是1.5吨\n    second_delivery_amount = 1.5\n    # 两次共运进这批水果的62%\n    total_delivery_percentage = 0.62\n    # 让这批水果的总量为x吨\n    total_fruit_amount = (total_delivery_percentage - first_delivery_percentage) / total_delivery_percentage * second_delivery_amount / (1 - first_delivery_percentage)\n    # 答案是这批水果的总量\n    result = total_fruit_amount\n    # 返回答案\n    return result"]}
{"question": "某图书馆的童话书占图书总数的25%，科技书占图书总数的15%，童话书和科技书共有230本．这个图书馆共有图书多少本？", "target": 575.0, "answer": 575.0, "score": 1, "generation": ["def solution():\n    # 童话书占图书总数的25%\n    fairy_tale_percentage = 0.25\n    # 科技书占图书总数的15%\n    science_percentage = 0.15\n    # 童话书和科技书共有230本\n    total_fairy_tale_science_books = 230\n    # 童话书数量 = 总数 * 童话书占比\n    fairy_tale_books = total_fairy_tale_science_books * fairy_tale_percentage\n    # 科技书数量 = 总数 * 科技书占比\n    science_books = total_fairy_tale_science_books * science_percentage\n    # 总图书数量 = 童话书数量 + 科技书数量\n    total_books = total_fairy_tale_science_books / (fairy_tale_percentage + science_percentage)\n    # 答案是图书馆共有的图书总数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一辆旅游车3小时行驶了150千米，照这样的速度这辆旅游车行驶了13小时到达目的地，这辆旅游车行驶了多少千米？", "target": 650.0, "answer": 650.0, "score": 1, "generation": ["def solution():\n    # 旅游车行驶了3小时的距离为150千米\n    distance_in_3_hours = 150\n    # 总共行驶了13小时\n    total_hours = 13\n    # 平均每小时行驶的距离 = 3小时行驶的距离\n    average_speed = distance_in_3_hours / 3\n    # 总共行驶的距离 = 平均每小时行驶的距离 * 总小时数\n    total_distance = average_speed * total_hours\n    # 答案是总共行驶的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "李明有存款130元，王芳有存款70元，王芳想赶上李明，李明每月存10元，王芳每次存15元，多少个月后，王芳才能赶上李明．", "target": 12.0, "answer": -12.0, "score": 0, "generation": ["def solution():\n    # 李明的存款为130元\n    savings_li = 130\n    # 王芳的存款为70元\n    savings_wang = 70\n    # 李明每月存款10元\n    monthly_savings_li = 10\n    # 王芳每次存款15元\n    savings_per_deposit_wang = 15\n    # 王芳需要赶上李明的存款差距\n    difference = savings_li - savings_wang\n    # 每月存款差额\n    monthly_difference = monthly_savings_li - savings_per_deposit_wang\n    # 月数 = 存款差距 / 每月存款差额\n    months_needed = difference / monthly_difference\n    # 答案是多少个月后王芳才能赶上李明\n    result = months_needed\n    # 返回答案\n    return result"]}
{"question": "花生仁的出油率为38%，要榨380千克花生油大约需要多少千克花生仁？", "target": 1000.0, "answer": 1000.0, "score": 1, "generation": ["def solution():\n    # 花生仁的出油率为38%\n    oil_extraction_rate = 0.38\n    # 需要榨出的花生油重量为380千克\n    required_oil_weight = 380\n    # 榨出380千克花生油所需的花生仁重量 = 花生油重量 / 出油率\n    required_peanut_weight = required_oil_weight / oil_extraction_rate\n    # 答案是需要的花生仁重量\n    result = required_peanut_weight\n    # 返回答案\n    return result"]}
{"question": "甲乙丙3人共同加工一批零件，甲加工了总数的40%，乙加工了总数的(3/8)还多26个，丙加工了剩下的64个．这批零件一共有多少个？", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 甲加工了总数的40%\n    portion_processed_by_A = 0.4\n    # 乙加工了总数的(3/8)还多26个\n    extra_processed_by_B = 26\n    portion_processed_by_B = 3/8\n    # 丙加工了剩下的64个\n    processed_by_C = 64\n    # 甲、乙、丙三人加工的总数为 total\n    # 甲加工的数量 + 乙加工的数量 + 丙加工的数量 = total\n    # 甲加工的数量 = total * 0.4\n    # 乙加工的数量 = total * (3/8) + 26\n    # 丙加工的数量 = total - 甲加工的数量 - 乙加工的数量\n    # 代入上述三个等式，解得 total = 400\n    total = 400\n    # 答案是这批零件的总数\n    result = total\n    # 返回答案\n    return result"]}
{"question": "商店运来800只塑料盒，上午买出(1/4)，下午卖出(2/5)．一天共卖出多少只？", "target": 520.0, "answer": 520.0, "score": 1, "generation": ["def solution():\n    # 商店运来塑料盒的总数为800只\n    total_boxes = 800\n    # 上午卖出的比例为1/4\n    morning_sold_fraction = 1/4\n    # 下午卖出的比例为2/5\n    afternoon_sold_fraction = 2/5\n    # 上午卖出的数量 = 总数 * 上午卖出比例\n    morning_sold_boxes = total_boxes * morning_sold_fraction\n    # 下午卖出的数量 = 总数 * 下午卖出比例\n    afternoon_sold_boxes = total_boxes * afternoon_sold_fraction\n    # 一天共卖出的数量 = 上午卖出数量 + 下午卖出数量\n    total_sold_boxes = morning_sold_boxes + afternoon_sold_boxes\n    # 答案是一天共卖出的数量\n    result = total_sold_boxes\n    # 返回答案\n    return result"]}
{"question": "一头大象4天吃320千克食物，一只熊猫每天吃40千克食物．大象每天吃的食物是熊猫的多少倍？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 一头大象4天吃320千克食物\n    food_elephant = 320\n    days_elephant = 4\n    # 一只熊猫每天吃40千克食物\n    food_panda_per_day = 40\n    # 大象每天吃的食物量 = 大象总食物量 / 天数\n    food_elephant_per_day = food_elephant / days_elephant\n    # 大象每天吃的食物是熊猫的多少倍 = 大象每天吃的食物量 / 熊猫每天吃的食物量\n    times_more = food_elephant_per_day / food_panda_per_day\n    # 答案是大象每天吃的食物是熊猫的多少倍\n    result = times_more\n    # 返回答案\n    return result"]}
{"question": "一列火车长75米，每秒行驶24米，30秒通过一条隧道，这条隧道长多少米？", "target": 645.0, "answer": 795.0, "score": 0, "generation": ["def solution():\n    # 火车的长度为75米\n    train_length = 75\n    # 火车每秒行驶24米\n    train_speed = 24\n    # 火车通过隧道所需时间为30秒\n    time_to_pass = 30\n    # 火车通过隧道时，隧道的长度 = 火车速度 * 通过时间 + 火车长度\n    tunnel_length = train_speed * time_to_pass + train_length\n    # 答案是隧道的长度\n    result = tunnel_length\n    # 返回答案\n    return result"]}
{"question": "小圆的面积相当于大圆的面积(2/3)，这两个圆的面积和是100平方厘米，大圆的面积=多少平方厘米．", "target": 60.0, "answer": 60.00000000000001, "score": 1, "generation": ["def solution():\n    # 两个圆的总面积是100平方厘米\n    total_area = 100\n    # 小圆的面积是大圆的(2/3)\n    small_circle_area_ratio = 2/3\n    # 设大圆的面积为x，则小圆的面积为small_circle_area_ratio * x\n    # 由题意可得：x + small_circle_area_ratio * x = total_area\n    # 解方程得到大圆的面积\n    big_circle_area = total_area / (1 + small_circle_area_ratio)\n    # 答案是大圆的面积\n    result = big_circle_area\n    # 返回答案\n    return result"]}
{"question": "修一条长4500米的路，已经修了24天，平均每天修185米．还剩下多少米？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 道路的总长度为4500米\n    total_length = 4500\n    # 已经修了的天数为24天\n    days_completed = 24\n    # 每天修的平均长度为185米\n    daily_progress = 185\n    # 已经完成的长度 = 天数 * 每天的平均修路长度\n    completed_length = days_completed * daily_progress\n    # 剩余长度 = 总长度 - 已经完成的长度\n    remaining_length = total_length - completed_length\n    # 答案是剩余的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "服装厂加工一批服装，前3天加工了180套，照这样计算，再用15天就能完成任务，这批服装共有多少套？", "target": 1080.0, "answer": 900.0, "score": 0, "generation": ["def solution():\n    # 前3天加工了180套服装\n    clothes_in_first_three_days = 180\n    # 用时15天就能完成任务\n    total_days = 15\n    # 每天加工的服装套数 = 总服装套数 / 总天数\n    daily_clothes = clothes_in_first_three_days / 3\n    # 总服装套数 = 每天加工的服装套数 * 总天数\n    total_clothes = daily_clothes * total_days\n    # 答案是这批服装共有的套数\n    result = total_clothes\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从A城开往B城，上午行驶3小时，每小时行驶75千米，中午休息了1小时，下午用同样的速度又行驶了4小时到达B城，A、B两城相距多远？", "target": 525.0, "answer": 525.0, "score": 1, "generation": ["def solution():\n    # 上午行驶的时间为3小时\n    morning_hours = 3\n    # 上午的速度为每小时行驶75千米\n    morning_speed = 75\n    # 中午休息了1小时\n    rest_hours = 1\n    # 下午行驶的时间为4小时\n    afternoon_hours = 4\n    # 下午的速度为每小时行驶75千米\n    afternoon_speed = 75\n    # 上午行驶的距离 = 上午的速度 * 上午行驶的时间\n    morning_distance = morning_speed * morning_hours\n    # 下午行驶的距离 = 下午的速度 * 下午行驶的时间\n    afternoon_distance = afternoon_speed * afternoon_hours\n    # 总距离 = 上午行驶的距离 + 下午行驶的距离\n    total_distance = morning_distance + afternoon_distance\n    # 答案是A、B两城相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "商店以每双13元购进一批凉鞋，售价为14.8元，卖到剩下5双时，除去购进这批凉鞋的全部开销外还获利88元，这批凉鞋共有多少双．", "target": 90.0, "answer": 12.461538461538462, "score": 0, "generation": ["def solution():\n    # 每双凉鞋的购入价为13元\n    purchase_price_per_pair = 13\n    # 每双凉鞋的售价为14.8元\n    selling_price_per_pair = 14.8\n    # 剩下的凉鞋数量为5双\n    remaining_pairs = 5\n    # 总利润为88元\n    total_profit = 88\n    # 除去利润后的总收入 = 总利润 + 剩下凉鞋的售价 * 剩下凉鞋数量\n    total_revenue = total_profit + selling_price_per_pair * remaining_pairs\n    # 这批凉鞋的总数量 = 总收入 / 购入价\n    total_pairs = total_revenue / purchase_price_per_pair\n    # 答案是这批凉鞋的总数量\n    result = total_pairs\n    # 返回答案\n    return result"]}
{"question": "一辆汽车运一堆货物，运走了总数的35%，这时剩下的比运走的还多18吨．原来这堆货物有多少吨？", "target": 60.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 剩下的货物比运走的多18吨，设剩下的货物为x吨\n    remaining_goods = x\n    # 运走的货物占总数的35%\n    goods_sold_fraction = 0.35\n    # 剩下的货物比运走的多18吨，即 x = 1.18 * 运走的货物\n    # 所以剩下的货物 = 运走的货物 / (1 - 运走的比例)\n    remaining_goods = goods_sold / (1 - goods_sold_fraction)\n    # 剩下的货物比运走的多18吨，即 x = 运走的货物 + 18\n    # 代入得到：运走的货物 / (1 - 0.35) = 运走的货物 + 18\n    # 解方程得到：运走的货物 = 27\n    goods_sold = 27\n    # 原来这堆货物有多少吨 = 运走的货物 / 运走的比例\n    total_goods = goods_sold / goods_sold_fraction\n    # 答案是原来这堆货物有多少吨\n    result = total_goods\n    # 返回答案\n    return result"]}
{"question": "体育馆有960个皮球，6个装一盒，8盒装一箱，这些皮球能装多少箱？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 体育馆有960个皮球\n    total_soccer_balls = 960\n    # 一盒装6个皮球\n    balls_per_box = 6\n    # 一箱装8盒\n    boxes_per_case = 8\n    # 每箱的皮球数量 = 一盒的数量 * 一箱的盒数\n    balls_per_case = balls_per_box * boxes_per_case\n    # 总箱数 = 总皮球数除以每箱的皮球数量\n    total_cases = total_soccer_balls // balls_per_case\n    # 答案是能装的箱数\n    result = total_cases\n    # 返回答案\n    return result"]}
{"question": "爸爸将2500元存入银行，整存整取两年，年利率为4%，2年后利息共有多少元？若利息税为20%，那么税后利息和本金一共多元？", "target": 2660.0, "answer": 2660.0, "score": 1, "generation": ["def solution():\n    # 存入银行的本金为2500元\n    principal = 2500\n    # 存款年限为2年\n    years = 2\n    # 年利率为4%\n    interest_rate = 0.04\n    # 计算利息：利息 = 本金 * 年利率 * 存款年限\n    interest = principal * interest_rate * years\n    # 计算税后利息：税后利息 = 利息 * (1 - 税率)\n    tax_rate = 0.20\n    after_tax_interest = interest * (1 - tax_rate)\n    # 计算税后利息和本金之和\n    total_after_tax = principal + after_tax_interest\n    # 答案是税后利息和本金之和\n    result = total_after_tax\n    # 返回答案\n    return result"]}
{"question": "新建小学修建教学楼用去90万元，比计划节约了30万元，节约了百分之几？", "target": 25.0, "answer": 33.33333333333333, "score": 0, "generation": ["def solution():\n    # 修建教学楼用去的金额为90万元\n    total_cost = 90\n    # 比计划节约了30万元\n    saved_amount = 30\n    # 节约的百分比 = 节约的金额 / 总金额 * 100%\n    saving_percentage = (saved_amount / total_cost) * 100\n    # 答案是节约的百分比\n    result = saving_percentage\n    # 返回答案\n    return result"]}
{"question": "张阿姨家住在郊区，周末她从家公共汽车去华美电器城买电冰箱．去时公交车的速度是60千米/小时，用了2小时．回来时用了3小时．她返回时公交车的速度=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 去时公交车的速度是60千米/小时\n    speed_to = 60\n    # 去时用了2小时\n    time_to = 2\n    # 回来时用了3小时\n    time_back = 3\n    # 去时的距离 = 回来时的距离\n    distance = speed_to * time_to\n    # 回来时的速度 = 距离 / 回来时用的时间\n    speed_back = distance / time_back\n    # 答案是返回时公交车的速度\n    result = speed_back\n    # 返回答案\n    return result"]}
{"question": "夏日超市一天卖了57箱杏仁露和43箱矿泉水，每箱杏仁露和矿泉水都是24瓶．夏日超市一共卖了杏仁露和矿泉水多少瓶？", "target": 2400.0, "answer": 2400.0, "score": 1, "generation": ["def solution():\n    # 一天卖了57箱杏仁露\n    almond_milk_boxes = 57\n    # 一天卖了43箱矿泉水\n    mineral_water_boxes = 43\n    # 每箱杏仁露和矿泉水都是24瓶\n    bottles_per_box = 24\n    # 夏日超市一共卖了杏仁露和矿泉水的瓶数 = (杏仁露箱数 + 矿泉水箱数) * 每箱瓶数\n    total_bottles_sold = (almond_milk_boxes + mineral_water_boxes) * bottles_per_box\n    # 答案是夏日超市一共卖了杏仁露和矿泉水的瓶数\n    result = total_bottles_sold\n    # 返回答案\n    return result"]}
{"question": "男生有24人，比女生少4%．女生有多少人？", "target": 25.0, "answer": 1.0, "score": 0, "generation": ["def solution():\n    # 男生人数为24人\n    num_boys = 24\n    # 女生比男生少4%，即男生人数占总人数的96%\n    boys_percentage = 96\n    # 女生人数 = (男生人数 / 男生所占比例) * 女生所占比例\n    num_girls = (num_boys / boys_percentage) * (100 - boys_percentage)\n    # 答案是女生人数\n    result = num_girls\n    # 返回答案\n    return result"]}
{"question": "某工地需要沙50吨，用一辆载重0.5吨的汽车运了5次，余下的改用一辆重2.5吨的汽车来运，还要运多少次？", "target": 19.0, "answer": 20.0, "score": 0, "generation": ["def solution():\n    # 工地需要的沙量为50吨\n    total_sand = 50\n    # 一辆载重0.5吨的汽车每次运输量\n    small_truck_capacity = 0.5\n    # 一辆重2.5吨的汽车每次运输量\n    large_truck_capacity = 2.5\n    # 用载重0.5吨的汽车运输的次数\n    small_truck_trips = total_sand // (5 * small_truck_capacity)\n    # 余下的沙量\n    remaining_sand = total_sand % (5 * small_truck_capacity)\n    # 还需要用重2.5吨的汽车运输的次数\n    large_truck_trips = remaining_sand / large_truck_capacity\n    # 总共需要运输的次数\n    total_trips = small_truck_trips + large_truck_trips\n    # 答案是总共需要运输的次数\n    result = total_trips\n    # 返回答案\n    return result"]}
{"question": "(7/8)*2.4=．", "target": 2.1, "answer": 2.1, "score": 1, "generation": ["def solution():\n    # 计算(7/8)*2.4\n    result = (7/8) * 2.4\n    # 返回答案\n    return result"]}
{"question": "一堆糖果共200块，其中奶糖占这堆糖果的40%，再加入多少块奶糖后，奶糖占现有糖果60%．", "target": 100.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 糖果的总数为200块\n    total_candies = 200\n    # 奶糖占40%，即奶糖的数量为总数的40%\n    initial_milk_candies = total_candies * 0.4\n    # 加入x块奶糖后，奶糖占60%，即奶糖的数量为总数的60%\n    final_milk_candies = total_candies * 0.6\n    # 初始奶糖数量加上加入的奶糖数量等于最终奶糖数量\n    added_milk_candies = final_milk_candies - initial_milk_candies\n    # 答案是加入的奶糖数量\n    result = added_milk_candies\n    # 返回答案\n    return result"]}
{"question": "小林家的果园里种了5行桃树，每行159棵，又种了586棵苹果，桃树比苹果多多少棵？", "target": 209.0, "answer": 209.0, "score": 1, "generation": ["def solution():\n    # 每行桃树的数量为159棵\n    num_peach_per_row = 159\n    # 桃树的行数为5行\n    num_rows_peach = 5\n    # 总共种植的桃树数量 = 每行桃树的数量 * 桃树的行数\n    total_peach_trees = num_peach_per_row * num_rows_peach\n    # 种植的苹果树数量为586棵\n    num_apple_trees = 586\n    # 桃树比苹果树多的数量 = 桃树的总数量 - 苹果树的数量\n    difference = total_peach_trees - num_apple_trees\n    # 答案是桃树比苹果树多的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "商场运来6箱毛巾，每箱8条，一共卖了480元，平均每条毛巾卖了多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 商场运来的毛巾箱数为6箱\n    num_boxes = 6\n    # 每箱毛巾条数为8条\n    towels_per_box = 8\n    # 总共卖出的金额为480元\n    total_revenue = 480\n    # 总共卖出的毛巾条数 = 箱数 * 每箱毛巾条数\n    total_towels = num_boxes * towels_per_box\n    # 平均每条毛巾售价 = 总销售额 / 总毛巾条数\n    price_per_towel = total_revenue / total_towels\n    # 答案是平均每条毛巾的售价\n    result = price_per_towel\n    # 返回答案\n    return result"]}
{"question": "一列客车从东城开往西城，行了全程的(5/8)，正好是365千米，东西两成之间的铁路长多少千米？", "target": 584.0, "answer": 584.0, "score": 1, "generation": ["def solution():\n    # 客车行驶全程的(5/8)是365千米\n    total_distance_covered = 365\n    # 客车行驶全程的比例\n    covered_fraction = 5/8\n    # 客车行驶全程的距离 = 总铁路长度 * 客车行驶全程的比例\n    total_railway_distance = total_distance_covered / covered_fraction\n    # 答案是东西两城之间的铁路长度\n    result = total_railway_distance\n    # 返回答案\n    return result"]}
{"question": "养禽厂养的鸭是鸡的(2/3)，同时又是鹅的(4/5)，养的鸡有2400只，养的鹅有多少只？", "target": 2000.0, "answer": 1280.0, "score": 0, "generation": ["def solution():\n    # 养的鸡的数量是2400只\n    num_chickens = 2400\n    # 鸭是鸡的(2/3)\n    duck_to_chicken_ratio = 2/3\n    # 鹅是鸭的(4/5)\n    goose_to_duck_ratio = 4/5\n    # 鸭是鸡的比例关系\n    duck_to_chicken = duck_to_chicken_ratio * num_chickens\n    # 养的鹅的数量 = 鸭的数量 * 鹅是鸭的比例\n    num_geese = duck_to_chicken * goose_to_duck_ratio\n    # 答案是养的鹅的数量\n    result = num_geese\n    # 返回答案\n    return result"]}
{"question": "计算：666*778+333*444=．", "target": 666000.0, "answer": 666000.0, "score": 1, "generation": ["def solution():\n    # 计算666乘以778\n    first_calculation = 666 * 778\n    # 计算333乘以444\n    second_calculation = 333 * 444\n    # 计算结果为两个计算的和\n    result = first_calculation + second_calculation\n    # 返回答案\n    return result"]}
{"question": "3个好朋友约好一起去少年宫玩．他们各自从家去到少年宫，小明用了(3/4)小时，小青比小明少用(1/5)小时，小王比小青多花了(1/10)小时．小王从家去到少年宫用了多少时间？", "target": 0.65, "answer": 0.65, "score": 1, "generation": ["def solution():\n    # 小明用了(3/4)小时\n    time_ming = 3/4\n    # 小青比小明少用(1/5)小时\n    time_qing = time_ming - 1/5\n    # 小王比小青多花了(1/10)小时\n    time_wang = time_qing + 1/10\n    # 小王从家到少年宫的总时间 = 小王花费的时间\n    total_time = time_wang\n    # 返回答案\n    return total_time"]}
{"question": "合唱队里有男生21人，比女生少(1/4)，合唱队共有多少人．", "target": 49.0, "answer": 26.25, "score": 0, "generation": ["def solution():\n    # 合唱队里男生人数为21人\n    num_boys = 21\n    # 女生人数比男生少(1/4)\n    ratio_girls_to_boys = 1/4\n    # 女生人数 = 男生人数 * 比例\n    num_girls = num_boys * ratio_girls_to_boys\n    # 合唱队总人数 = 男生人数 + 女生人数\n    total_students = num_boys + num_girls\n    # 答案是合唱队总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "做5节底面直径是2分米，长8分米的圆柱形通风管，至少需要多少铁皮？", "target": 251.3274, "answer": 56.52, "score": 0, "generation": ["def solution():\n    # 圆柱形通风管的底面直径是2分米\n    diameter = 2\n    # 圆柱形通风管的长度是8分米\n    length = 8\n    # 圆柱形通风管的侧面积公式为：周长 * 高\n    # 圆的周长公式为：π * 直径\n    # 圆柱形通风管的侧面积 = π * 直径 * 长度\n    lateral_area = 3.14 * diameter * length\n    # 圆柱形通风管的底面积公式为：π * 半径的平方\n    # 圆柱形通风管的底面积 = π * (直径的一半)的平方\n    base_area = 3.14 * (diameter/2)**2\n    # 至少需要的铁皮面积 = 2 * 底面积 + 侧面积\n    total_area = 2 * base_area + lateral_area\n    # 答案是至少需要的铁皮面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "从567中连续减去7，要得到结果是0，需减多少次．", "target": 81.0, "answer": 81.0, "score": 1, "generation": ["def solution():\n    # 初始数值为567\n    number = 567\n    # 每次减去的数值为7\n    subtract_value = 7\n    # 计算减去多少次可以得到结果为0\n    num_subtractions = number // subtract_value\n    # 答案是减去的次数\n    result = num_subtractions\n    # 返回答案\n    return result"]}
{"question": "体育老师用720元钱买了18个足球，还买了数量同样多的篮球花了1080元．每个篮球比每个足球贵多少元？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 体育老师买了18个足球花了720元\n    num_footballs = 18\n    total_cost_footballs = 720\n    # 体育老师买了相同数量的篮球花了1080元\n    total_cost_basketballs = 1080\n    # 篮球比足球贵的价格 = (篮球总价 - 足球总价) / 足球数量\n    price_difference = (total_cost_basketballs - total_cost_footballs) / num_footballs\n    # 答案是篮球比足球贵的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "小花妈妈打算将20000元定期存入银行3年，如果按年利率3.69%计算，到期时小花妈妈实际的本息共有多少元？（另记利息税10%）", "target": 21992.6, "answer": 21992.6, "score": 1, "generation": ["def solution():\n    # 初始存入银行的金额为20000元\n    initial_amount = 20000\n    # 存款年限为3年\n    years = 3\n    # 年利率为3.69%\n    annual_interest_rate = 3.69\n    # 利息税率为10%\n    tax_rate = 0.1\n    # 计算利息 = 初始金额 * 年利率 * 存款年限\n    interest = initial_amount * (annual_interest_rate / 100) * years\n    # 计算利息税 = 利息 * 税率\n    tax = interest * tax_rate\n    # 计算实际本息 = 初始金额 + 利息 - 利息税\n    total_amount = initial_amount + interest - tax\n    # 答案是实际的本息总额\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "4个小朋友通电话，每2人通一次话，一共通多少次话．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 4个小朋友两两通话的组合方式可以看作是从4个人中选取2个人的组合数\n    # 通话次数 = 组合数\n    # 组合数的计算公式为：C(n, k) = n! / (k! * (n-k)!)\n    # 其中，4的阶乘为 4! = 4 * 3 * 2 * 1 = 24\n    # 2的阶乘为 2! = 2 * 1 = 2\n    # 4-2的阶乘为 2! = 2 * 1 = 2\n    # 组合数 = 4! / (2! * 2!) = 6\n    total_calls = 6\n    # 答案是通话的总次数\n    result = total_calls\n    # 返回答案\n    return result"]}
{"question": "合唱小组的同学排队，若每排站24人，可以站8排，如果每排站6人，能站多少排？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 每排站24人\n    num_per_row_1 = 24\n    # 可以站8排\n    num_rows_1 = 8\n    # 每排站6人\n    num_per_row_2 = 6\n    # 计算能站多少排\n    num_rows_2 = (num_per_row_1 * num_rows_1) / num_per_row_2\n    # 答案是能站的排数\n    result = num_rows_2\n    # 返回答案\n    return result"]}
{"question": "希望小学6（1）班男生人数的(2/3)等于全班人数的(4/13)，该班有女生28人，男生有多少人．", "target": 24.0, "answer": -52.0, "score": 0, "generation": ["def solution():\n    # 该班女生人数为28人\n    num_girls = 28\n    # 男生人数为全班人数减去女生人数\n    total_students = 28 / (1 - (2/3) / (4/13))\n    num_boys = total_students - num_girls\n    # 答案是男生人数\n    result = num_boys\n    # 返回答案\n    return result"]}
{"question": "小东计划到周口店参观猿人遗址．如果他坐汽车以40千米/小时的速度行驶，那么比骑车去早到3小时，如果他以8千米/小时的速度步行去，那么比骑车晚到5小时，小东的出发点到周口店有多少千米？", "target": 80.0, "answer": 48.0, "score": 0, "generation": ["def solution():\n    # 坐汽车的速度为40千米/小时\n    speed_car = 40\n    # 骑车的速度为8千米/小时\n    speed_bike = 8\n    # 步行的速度为8千米/小时\n    speed_walk = 8\n    # 坐汽车比骑车早到3小时，设汽车行驶时间为t小时，则骑车行驶时间为t+3小时\n    # 根据速度和时间的关系，距离 = 速度 * 时间\n    # 因为两者的距离相同，所以40t = 8(t+3)\n    # 解方程得到 t = 1.2\n    # 小东坐汽车到达周口店的时间为1.2小时\n    time_car = 1.2\n    # 步行比骑车晚到5小时，设步行时间为x小时，则骑车时间为x-5小时\n    # 同理，40x = 8(x-5)，解方程得到 x = 6\n    # 小东步行到达周口店的时间为6小时\n    time_walk = 6\n    # 根据速度和时间的关系，距离 = 速度 * 时间\n    # 小东的出发点到周口店的距离 = 40 * 1.2 = 8 * 6 = 48千米\n    distance = speed_car * time_car\n    # 答案是小东的出发点到周口店的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "图书馆科技书占该馆藏书的25%，如果该馆有科技书1.2万册，那么该馆藏书多少万册？", "target": 4.8, "answer": 4.8, "score": 1, "generation": ["def solution():\n    # 科技书占比为25%\n    tech_books_percentage = 0.25\n    # 科技书数量为1.2万册\n    tech_books_count = 1.2\n    # 科技书数量占总藏书数量的比例为25%，所以总藏书数量 = 科技书数量 / 科技书占比\n    total_books_count = tech_books_count / tech_books_percentage\n    # 答案是总藏书数量（单位：万册）\n    result = total_books_count\n    # 返回答案\n    return result"]}
{"question": "一位老红军伯伯准备用自己多年的积蓄9900元资助一批失学儿童返校园，他先拿出540元，资助了3名失学儿童．照这样计算，剩下的钱还可以资助多少名失学儿童？", "target": 52.0, "answer": 51.0, "score": 0, "generation": ["def solution():\n    # 老红军伯伯准备用的资助金额为9900元\n    total_money = 9900\n    # 先拿出的资助金额为540元\n    first_donation = 540\n    # 每次资助的失学儿童数量为3名\n    children_per_donation = 3\n    # 每次资助后剩余的金额 = 总金额 - 已经资助的金额\n    remaining_money = total_money - first_donation\n    # 每次资助后剩余的金额可以资助的失学儿童数量 = 剩余金额 / 每次资助的金额\n    remaining_children = remaining_money // first_donation * children_per_donation\n    # 答案是剩下的钱还可以资助的失学儿童数量\n    result = remaining_children\n    # 返回答案\n    return result"]}
{"question": "食堂运进一批大米，吃掉(4/5)吨，比剩下的多(1/4)吨．这批大米原有多少吨？", "target": 1.35, "answer": 4.250000000000001, "score": 0, "generation": ["def solution():\n    # 吃掉的大米重量占总重量的(4/5)\n    eaten_fraction = 4/5\n    # 剩下的大米比吃掉的多(1/4)吨\n    remaining_difference = 1/4\n    # 剩下的大米重量 = 吃掉的大米重量 / (1 - 吃掉的比例)\n    remaining_rice = eaten_fraction / (1 - eaten_fraction)\n    # 总重量 = 剩下的大米重量 + 吃掉的大米重量\n    total_rice = remaining_rice + remaining_difference\n    # 答案是这批大米原有的总重量\n    result = total_rice\n    # 返回答案\n    return result"]}
{"question": "王飞同学2006年元旦把积攒的800元零花钱存入银行，存整存整取一年．准备到期后把利息捐赠给“希望工程”，支援贫困地区的失学儿童．如果年利率按3.5%计算，到期时他可以捐赠给“希望工程”多少元．", "target": 28.0, "answer": 28.000000000000004, "score": 1, "generation": ["def solution():\n    # 王飞同学存入银行的零花钱为800元\n    initial_money = 800\n    # 年利率为3.5%\n    annual_interest_rate = 0.035\n    # 利息 = 存款金额 * 年利率\n    interest = initial_money * annual_interest_rate\n    # 答案是到期时可以捐赠给“希望工程”的利息金额\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一堆沙子，第一天运走总数的(1/5)，第二天运走总数的(1/4)还多4.5吨，剩下12吨第3天全部运完，这堆沙子一共有多少吨？", "target": 30.0, "answer": 80.0, "score": 0, "generation": ["def solution():\n    # 第一天运走总数的(1/5)\n    fraction_day1 = 1/5\n    # 第二天运走总数的(1/4)\n    fraction_day2 = 1/4\n    # 第二天比第一天多运4.5吨\n    difference = 4.5\n    # 剩下12吨\n    remaining_day3 = 12\n    # 第一天运走的量为x\n    x = remaining_day3 / (1 - fraction_day2)\n    # 第一天运走的量为总量的(1/5)，即总量为5x\n    total_amount = 5 * x\n    # 答案是这堆沙子一共有多少吨\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "甲，乙两列火车同时从A、B两地相向而行，甲车平均每小时行驶120千米，乙车平均每小时行驶110千米，3小时相遇．A、B两地相距多少千米？", "target": 690.0, "answer": 690.0, "score": 1, "generation": ["def solution():\n    # 甲车的速度是每小时行120千米\n    speed_a = 120\n    # 乙车的速度是每小时行110千米\n    speed_b = 110\n    # 两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 两车相遇时间为3小时\n    time_to_meet = 3\n    # 相遇时两车行驶的总距离 = 相对速度 * 相遇时间\n    total_distance = relative_speed * time_to_meet\n    # 答案是A、B两地的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "王老师乘车从绍兴去杭州参加教学活动，客车已行了33千米，还剩全程的(3/4)没有行．绍兴到杭州全程多少千米？", "target": 132.0, "answer": 132.0, "score": 1, "generation": ["def solution():\n    # 客车已行了33千米\n    distance_covered = 33\n    # 还剩全程的(3/4)没有行\n    remaining_fraction = 3/4\n    # 全程距离 = 已行距离 / (1 - 剩余比例)\n    total_distance = distance_covered / (1 - remaining_fraction)\n    # 答案是绍兴到杭州全程的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "修路队每天修路105米，已经修了25天，还剩215米没有修．这条路长多少米？", "target": 2840.0, "answer": 2840.0, "score": 1, "generation": ["def solution():\n    # 每天修路的长度为105米\n    daily_length = 105\n    # 已经修路的天数为25天\n    days_completed = 25\n    # 还剩下215米没有修\n    remaining_length = 215\n    # 总路程 = 已经修的路程 + 剩余的路程\n    total_length = (days_completed * daily_length) + remaining_length\n    # 答案是这条路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "被除数是288，商和余数分别是2、4，求除数．", "target": 142.0, "answer": "", "score": 0, "generation": ["被除数是288，商和余数分别是2、4，求除数．\n\n首先，我们知道被除数等于除数乘以商再加上余数，即：\n被除数 = 除数 * 商 + 余数\n\n根据题目中的信息，我们可以列出方程：\n288 = 2 * 2 + 4\n\n解方程可得：\n288 = 4 + 4\n288 = 8\n\n所以，除数为8．\n\n```python\ndef solution():\n    # 被除数是288\n    dividend = 288\n    # 商是2\n    quotient = 2\n    # 余数是4\n    remainder = 4\n    # 根据被除数 = 除数 * 商 + 余数，解方程得到除数\n    divisor = (dividend - remainder) / quotient\n    # 答案是除数\n    result = divisor\n    # 返回答案\n    return result\n```"]}
{"question": "学校建综合楼，实际投资220万元，节约了30万元，节约了百分之几？", "target": 12.0, "answer": 13.636363636363635, "score": 0, "generation": ["def solution():\n    # 实际投资为220万元\n    actual_investment = 220\n    # 节约了30万元\n    saved_amount = 30\n    # 节约的百分比 = 节约的金额 / 实际投资 * 100%\n    saved_percentage = (saved_amount / actual_investment) * 100\n    # 答案是节约的百分比\n    result = saved_percentage\n    # 返回答案\n    return result"]}
{"question": "(1/5)的(5/2)倍-(1/12)/(2/3)的商，差=？", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # 计算(1/5)的(5/2)倍\n    calculation_1 = (1/5) * (5/2)\n    # 计算(1/12)/(2/3)的商\n    calculation_2 = (1/12) / (2/3)\n    # 计算两者的差\n    difference = calculation_1 - calculation_2\n    # 答案是差\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "某县城到省城的公路长180千米．一辆汽车走高速公路的速度是90千米/小时，走普通公路的速度是60千米/小时．从县城到省城走高速公路比普通公路节省多少时间？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["```python\ndef solution():\n    # 公路的总长度为180千米\n    total_distance = 180\n    # 高速公路的速度为90千米/小时\n    speed_highway = 90\n    # 普通公路的速度为60千米/小时\n    speed_normal = 60\n    # 高速公路所需时间 = 总长度 / 高速公路速度\n    time_highway = total_distance / speed_highway\n    # 普通公路所需时间 = 总长度 / 普通公路速度\n    time_normal = total_distance / speed_normal\n    # 节省的时间 = 普通公路所需时间 - 高速公路所需时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result\n```"]}
{"question": "小红看一本小说，第一天看了总页数的25%少17页，第二天看的比总页数的(1/8)还多16页，还剩下61页没看，这本小说一共有多少页？", "target": 96.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 剩下61页没看\n    remaining_pages = 61\n    # 第一天看了总页数的25%少17页\n    pages_read_day1 = 0.25 * total_pages - 17\n    # 第二天看的比总页数的(1/8)还多16页\n    pages_read_day2 = total_pages * (1/8) + 16\n    # 一共有多少页 = 第一天看的页数 + 第二天看的页数 + 剩下没看的页数\n    total_pages = pages_read_day1 + pages_read_day2 + remaining_pages\n    # 答案是这本小说一共有多少页\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "学校食堂运进豆角120千克，茄子是豆角的(3/4)，运进的茄子=多少千克？", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 运进的豆角重量为120千克\n    weight_of_beans = 120\n    # 茄子是豆角的(3/4)\n    eggplant_ratio = 3/4\n    # 运进的茄子重量 = 豆角重量 * 茄子与豆角的比例\n    weight_of_eggplants = weight_of_beans * eggplant_ratio\n    # 答案是运进的茄子重量\n    result = weight_of_eggplants\n    # 返回答案\n    return result"]}
{"question": "650+11与30的积，再除以35，商=？", "target": 28.0, "answer": 566.5714285714286, "score": 0, "generation": ["def solution():\n    # 计算650 + 11\n    sum_result = 650 + 11\n    # 计算上一步结果与30的乘积\n    product_result = sum_result * 30\n    # 计算上一步结果除以35的商\n    quotient = product_result / 35\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一支钢笔4.5元，一支圆珠笔3.5元，小明买一支钢笔和一支圆珠笔，付给售货员阿姨10元钱，应找回多少元钱？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 钢笔的价格为4.5元\n    price_pen = 4.5\n    # 圆珠笔的价格为3.5元\n    price_ballpen = 3.5\n    # 小明付给售货员的钱为10元\n    payment = 10\n    # 小明买了一支钢笔和一支圆珠笔的总价格\n    total_price = price_pen + price_ballpen\n    # 找零金额 = 支付的钱 - 总价格\n    change = payment - total_price\n    # 答案是找回的金额\n    result = change\n    # 返回答案\n    return result"]}
{"question": "把(8/9)米长的绳子平均剪成4段，每段长多少米．", "target": 0.2222222222222222, "answer": 0.2222222222222222, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为8/9米\n    total_length = 8/9\n    # 要平均剪成4段\n    num_segments = 4\n    # 每段的长度 = 总长度 / 段数\n    segment_length = total_length / num_segments\n    # 答案是每段的长度\n    result = segment_length\n    # 返回答案\n    return result"]}
{"question": "一种生理盐水重250克，含盐率是10%，现在使含盐率提高到25%，应加入多少克盐．", "target": 50.0, "answer": 37.5, "score": 0, "generation": ["def solution():\n    # 生理盐水的重量为250克\n    total_weight = 250\n    # 当前的盐率为10%\n    current_salt_rate = 0.1\n    # 目标盐率为25%\n    target_salt_rate = 0.25\n    # 当前含盐量 = 当前盐率 * 总重量\n    current_salt_amount = current_salt_rate * total_weight\n    # 目标含盐量 = 目标盐率 * 总重量\n    target_salt_amount = target_salt_rate * total_weight\n    # 需要增加的盐量 = 目标含盐量 - 当前含盐量\n    additional_salt = target_salt_amount - current_salt_amount\n    # 答案是需要增加的盐量\n    result = additional_salt\n    # 返回答案\n    return result"]}
{"question": "丁丁的外婆有一个4合院正在出租，院子里的大房每月租金为2310元，小房每月租金为1925元，且大房比小房多7平方米．丁丁想知道外婆的出租房每平方米的租金，你能帮他算一算？试一试．（说明：假设每平方米的租金一定．）", "target": 55.0, "answer": "", "score": 0, "generation": ["首先，我们设小房每平方米的租金为x元，则大房每平方米的租金为x+7元。\n\n根据题意可列出方程组：\n1. 2310 = 大房面积 * (x+7)\n2. 1925 = 小房面积 * x\n\n由题可知，大房比小房多7平方米，因此大房面积 = 小房面积 + 7。\n\n将大房面积表示为小房面积的形式，代入方程组中解方程，即可求得每平方米的租金。\n\n现在我们来写Python代码来解决这个问题：\n\n```python\ndef solution():\n    # 大房每月租金为2310元\n    rent_big_house = 2310\n    # 小房每月租金为1925元\n    rent_small_house = 1925\n    # 设小房每平方米的租金为x元\n    x = 0\n    # 根据方程组解方程得到每平方米的租金\n    x = (rent_big_house - rent_small_house) / 7\n    # 答案是每平方米的租金\n    result = x\n    # 返回答案\n    return result\n```"]}
{"question": "5星小学的同学去参观博物馆，六年级去了354人，比五年级去的人数的3倍少了63人，五年级去了多少人？", "target": 139.0, "answer": 139.0, "score": 1, "generation": ["def solution():\n    # 六年级同学参观博物馆的人数为354人\n    num_sixth_grade = 354\n    # 六年级人数是五年级人数的3倍少了63人\n    num_fifth_grade = (num_sixth_grade + 63) / 3\n    # 五年级同学参观博物馆的人数\n    result = num_fifth_grade\n    # 返回答案\n    return result"]}
{"question": "小明读一本书，已知他已读的页数比全书的20%多2页，没读的页数比全书的75%多10页，这本书共有多少页？", "target": 240.0, "answer": 12.95, "score": 0, "generation": ["def solution():\n    # 已知已读的页数比全书的20%多2页\n    pages_read = 0.2 + 2\n    # 已知没读的页数比全书的75%多10页\n    pages_not_read = 0.75 + 10\n    # 全书的总页数 = 已读的页数 + 没读的页数\n    total_pages = pages_read + pages_not_read\n    # 答案是全书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一块花布，用去(5/8)，还剩(1/8)米．这块花布有多少米？", "target": 0.3333333333333333, "answer": "", "score": 0, "generation": ["def solution():\n    # 花布总长度为x米\n    total_length = x\n    # 用去的长度为(5/8)米\n    used_fraction = 5/8\n    # 剩余的长度为(1/8)米\n    remaining_fraction = 1/8\n    # 用去的长度 = 总长度 * 用去比例\n    used_length = total_length * used_fraction\n    # 剩余的长度 = 总长度 * 剩余比例\n    remaining_length = total_length * remaining_fraction\n    # 用去的长度 + 剩余的长度 = 总长度\n    total_length = used_length + remaining_length\n    # 答案是花布的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "一根铁箍长11.49分米，正好做成一个木桶的一道箍．已知铁箍接头处是0.5分米．这个木桶的外直径=多少分米？", "target": 3.4982, "answer": 3.5, "score": 0, "generation": ["def solution():\n    # 铁箍的总长度为11.49分米\n    total_length = 11.49\n    # 铁箍接头处长度为0.5分米\n    joint_length = 0.5\n    # 木桶的周长等于铁箍的总长度减去接头处的长度\n    circumference = total_length - joint_length\n    # 木桶的外直径等于周长除以π\n    outer_diameter = circumference / 3.14\n    # 答案是木桶的外直径\n    result = outer_diameter\n    # 返回答案\n    return result"]}
{"question": "小春在计算减法时，把减数72写成27，得到的差是176，正确的差应该=．", "target": 131.0, "answer": 221.0, "score": 0, "generation": ["def solution():\n    # 错误的减数\n    wrong_subtrahend = 27\n    # 正确的减数\n    correct_subtrahend = 72\n    # 错误的差\n    wrong_difference = 176\n    # 正确的差 = 错误的差 + (正确的减数 - 错误的减数)\n    correct_difference = wrong_difference + (correct_subtrahend - wrong_subtrahend)\n    # 答案是正确的差\n    result = correct_difference\n    # 返回答案\n    return result"]}
{"question": "每12支水彩笔要装一盒，每40盒要装一箱，现在要装5箱，需要多少支水彩笔？", "target": 2400.0, "answer": 2400.0, "score": 1, "generation": ["def solution():\n    # 每盒水彩笔数量\n    pens_per_box = 12\n    # 每箱盒数\n    boxes_per_case = 40\n    # 需要装的箱数\n    num_cases = 5\n    # 总共需要的水彩笔数量 = 每盒数量 * 每箱盒数 * 箱数\n    total_pens = pens_per_box * boxes_per_case * num_cases\n    # 答案是总共需要的水彩笔数量\n    result = total_pens\n    # 返回答案\n    return result"]}
{"question": "五年级学生在校园里栽树，一共栽了80棵，成活了75棵．成活的棵树占栽树总棵数的几分之几？", "target": 0.9375, "answer": 0.9375, "score": 1, "generation": ["def solution():\n    # 栽树总棵数为80棵\n    total_planted = 80\n    # 成活的棵树数为75棵\n    survived = 75\n    # 成活的棵树占栽树总棵数的比例 = 成活的棵树数 / 栽树总棵数\n    survival_rate = survived / total_planted\n    # 答案是成活的棵树占栽树总棵数的比例\n    result = survival_rate\n    # 返回答案\n    return result"]}
{"question": "A、B两地相距864千米，甲乙两辆汽车分别从两地相对开出，6.4小时两辆汽车在途中相遇，已知乙车每小时行87.5千米，甲车每小时行多少千米？", "target": 47.5, "answer": 47.5, "score": 1, "generation": ["def solution():\n    # 两地之间的距离为864千米\n    distance = 864\n    # 乙车的速度是每小时行87.5千米\n    speed_b = 87.5\n    # 两车相向而行，相对速度为甲车与乙车速度之和\n    # 相遇时间为6.4小时\n    time_to_meet = 6.4\n    # 甲车的速度 = (距离 / 相遇时间) - 乙车的速度\n    speed_a = (distance / time_to_meet) - speed_b\n    # 答案是甲车每小时行驶的千米数\n    result = speed_a\n    # 返回答案\n    return result"]}
{"question": "某件商品按每个5元的利润卖出4个钱数，与按每个20元的利润卖出3个的钱数一样多，这种商品每个成本=多少元？", "target": 40.0, "answer": 5.0, "score": 0, "generation": ["def solution():\n    # 每个商品按每个5元的利润卖出4个的钱数\n    revenue_5 = 5 * 4\n    # 每个商品按每个20元的利润卖出3个的钱数\n    revenue_20 = 20 * 3\n    # 两种情况的销售额相等，所以成本也相等\n    cost = revenue_5 / 4\n    # 答案是每个商品的成本\n    result = cost\n    # 返回答案\n    return result"]}
{"question": "小文今年11岁，爷爷的年龄比他的5倍多8岁，爷爷明年多少岁？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 小文今年的年龄是11岁\n    age_xiaowen = 11\n    # 爷爷的年龄比小文的年龄大了5倍多8岁\n    age_difference = 5 * age_xiaowen + 8\n    # 爷爷明年的年龄 = 爷爷今年的年龄 + 1\n    age_grandpa_next_year = age_difference + 1\n    # 答案是爷爷明年的年龄\n    result = age_grandpa_next_year\n    # 返回答案\n    return result"]}
{"question": "跳绳比赛中，刘红跳了160下，是李明跳的下数的(4/5)，张华跳的下数是李明的(3/4)，张华跳了多少下？", "target": 150.0, "answer": 96.0, "score": 0, "generation": ["def solution():\n    # 刘红跳的下数为160下\n    jumps_liuhong = 160\n    # 李明跳的下数是刘红的(4/5)\n    jumps_liming = jumps_liuhong * (4/5)\n    # 张华跳的下数是李明的(3/4)\n    jumps_zhanghua = jumps_liming * (3/4)\n    # 答案是张华跳的下数\n    result = jumps_zhanghua\n    # 返回答案\n    return result"]}
{"question": "一头大象重3.4吨，一头鲸鱼的重量是大象的5.8倍，鲸鱼比大象重多少吨？", "target": 16.32, "answer": 16.32, "score": 1, "generation": ["def solution():\n    # 大象的重量为3.4吨\n    weight_elephant = 3.4\n    # 鲸鱼的重量是大象的5.8倍\n    weight_whale = 5.8 * weight_elephant\n    # 鲸鱼比大象重的重量 = 鲸鱼的重量 - 大象的重量\n    weight_difference = weight_whale - weight_elephant\n    # 答案是鲸鱼比大象重的重量\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "学校买来故事书、科技书各9包．故事书每包25本，科技书每包18本．一共买来书多少本？", "target": 387.0, "answer": 387.0, "score": 1, "generation": ["def solution():\n    # 学校买来的故事书包数为9包\n    num_story_packages = 9\n    # 学校买来的科技书包数为9包\n    num_tech_packages = 9\n    # 每包故事书的本数为25本\n    num_books_per_story_package = 25\n    # 每包科技书的本数为18本\n    num_books_per_tech_package = 18\n    # 故事书的总本数 = 故事书包数 * 每包故事书的本数\n    total_story_books = num_story_packages * num_books_per_story_package\n    # 科技书的总本数 = 科技书包数 * 每包科技书的本数\n    total_tech_books = num_tech_packages * num_books_per_tech_package\n    # 一共买来的书的总本数 = 故事书的总本数 + 科技书的总本数\n    total_books = total_story_books + total_tech_books\n    # 答案是一共买来的书的总本数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一个县去年计划造林1000公顷，实际超过计划的(1/10)，实际造林多少公顷？", "target": 1100.0, "answer": 1100.0, "score": 1, "generation": ["def solution():\n    # 去年计划造林1000公顷\n    planned_forest_area = 1000\n    # 实际超过计划的(1/10)\n    exceeded_fraction = 1/10\n    # 实际超过的面积 = 计划面积 * 超过比例\n    exceeded_area = planned_forest_area * exceeded_fraction\n    # 实际造林的总面积 = 计划面积 + 实际超过的面积\n    total_forest_area = planned_forest_area + exceeded_area\n    # 答案是实际造林的总面积\n    result = total_forest_area\n    # 返回答案\n    return result"]}
{"question": "(4/5)吨煤，用去(13/20)，还剩下这堆煤的几分之几？多少．", "target": 0.35, "answer": 0.35000000000000003, "score": 1, "generation": ["def solution():\n    # 总共有(4/5)吨煤\n    total_coal = 4/5\n    # 用去的比例为(13/20)\n    used_fraction = 13/20\n    # 用去的煤的数量 = 总煤 * 用去比例\n    used_coal = total_coal * used_fraction\n    # 剩下的煤的数量 = 总煤 - 用去的煤\n    remaining_coal = total_coal - used_coal\n    # 剩下的煤占总煤的比例 = 剩下的煤 / 总煤\n    remaining_fraction = remaining_coal / total_coal\n    # 答案是剩下这堆煤的几分之几\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "把一根钢管锯成一样长的小段，锯了5次，每段占全长的多少．", "target": 0.16666666666666666, "answer": 0.16666666666666666, "score": 1, "generation": ["def solution():\n    # 将钢管锯成的段数为6段（包括原始的一根）\n    num_segments = 6\n    # 每次锯下的段数为2段\n    num_cuts = 5\n    # 每段占全长的比例为1 / 段数\n    length_ratio = 1 / num_segments\n    # 答案是每段占全长的比例\n    result = length_ratio\n    # 返回答案\n    return result"]}
{"question": "学校书法组有25人，器乐组的人数是书法组的3倍．器乐组有多少人？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 书法组的人数为25人\n    num_calligraphy_group = 25\n    # 器乐组的人数是书法组的3倍\n    num_music_group = 3 * num_calligraphy_group\n    # 答案是器乐组的人数\n    result = num_music_group\n    # 返回答案\n    return result"]}
{"question": "一本书共有440页．小华已经读了8天，一共读了240页．剩下的如果要5天读完，每天至少要读多少页？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 一本书共有440页\n    total_pages = 440\n    # 小华已经读了240页\n    pages_read = 240\n    # 小华已经读了8天\n    days_read = 8\n    # 剩下的天数\n    remaining_days = 5\n    # 剩下的页数\n    remaining_pages = total_pages - pages_read\n    # 每天至少要读的页数 = 剩下的页数 / 剩下的天数\n    pages_per_day = remaining_pages / remaining_days\n    # 答案是每天至少要读的页数\n    result = pages_per_day\n    # 返回答案\n    return result"]}
{"question": "姐姐今年15岁，我今年12岁．5年后，姐姐比我大多少岁．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 姐姐今年15岁\n    sister_age = 15\n    # 我今年12岁\n    my_age = 12\n    # 5年后\n    years_later = 5\n    # 姐姐5年后的年龄\n    sister_future_age = sister_age + years_later\n    # 我5年后的年龄\n    my_future_age = my_age + years_later\n    # 姐姐比我大的岁数 = 姐姐5年后的年龄 - 我5年后的年龄\n    age_difference = sister_future_age - my_future_age\n    # 答案是姐姐比我大的岁数\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "有一条宽4米的人行道，占地面积480平方米，为了方便，道路的宽度要增加到12米，长不变，扩宽后这条人行道的面积=？", "target": 1440.0, "answer": 1440.0, "score": 1, "generation": ["def solution():\n    # 初始人行道的宽度为4米\n    initial_width = 4\n    # 初始人行道的面积为480平方米\n    initial_area = 480\n    # 扩宽后的人行道宽度为12米\n    new_width = 12\n    # 面积与宽度的关系为：面积 = 宽度 * 长度\n    # 扩宽后的人行道面积 = 新宽度 * 长度 = (新宽度 / 初始宽度) * 初始面积\n    new_area = (new_width / initial_width) * initial_area\n    # 答案是扩宽后的人行道面积\n    result = new_area\n    # 返回答案\n    return result"]}
{"question": "东华小学中年级有学生220名，高年级比中年级多(1/4)，而比低年级少(1/6)，低年级有学生多少人？", "target": 330.0, "answer": 183.33333333333334, "score": 0, "generation": ["def solution():\n    # 中年级学生人数为220人\n    num_middle_grade = 220\n    # 高年级比中年级多(1/4)\n    num_high_grade = num_middle_grade + num_middle_grade * (1/4)\n    # 低年级比中年级少(1/6)\n    num_low_grade = num_middle_grade - num_middle_grade * (1/6)\n    # 答案是低年级学生人数\n    result = num_low_grade\n    # 返回答案\n    return result"]}
{"question": "加工1920个零件，王师傅单独完成要12天，李师傅单独完成要16天，李师傅每天比王师傅少加工多少个零件？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 加工的总零件数为1920个\n    total_parts = 1920\n    # 王师傅单独完成需要的天数为12天\n    days_wang = 12\n    # 李师傅单独完成需要的天数为16天\n    days_li = 16\n    # 王师傅每天完成的零件数\n    parts_per_day_wang = total_parts / days_wang\n    # 李师傅每天完成的零件数\n    parts_per_day_li = total_parts / days_li\n    # 李师傅每天比王师傅少加工的零件数\n    difference_per_day = parts_per_day_wang - parts_per_day_li\n    # 答案是李师傅每天比王师傅少加工的零件数\n    result = difference_per_day\n    # 返回答案\n    return result"]}
{"question": "秦庄去年玉米每公顷产量达到8吨，进行改良后，今年每公顷达到9.6吨，比去年增产百分之几？", "target": 20.0, "answer": 19.999999999999996, "score": 1, "generation": ["def solution():\n    # 去年玉米每公顷产量为8吨\n    yield_last_year = 8\n    # 今年玉米每公顷产量为9.6吨\n    yield_this_year = 9.6\n    # 增产量 = 今年产量 - 去年产量\n    increase = yield_this_year - yield_last_year\n    # 增产百分比 = (增产量 / 去年产量) * 100%\n    increase_percentage = (increase / yield_last_year) * 100\n    # 答案是增产百分比\n    result = increase_percentage\n    # 返回答案\n    return result"]}
{"question": "小红今年12岁，爸爸的年龄比小红年龄的3倍大2岁，爸爸今年多少岁？", "target": 38.0, "answer": 38.0, "score": 1, "generation": ["def solution():\n    # 小红今年的年龄是12岁\n    age_red = 12\n    # 爸爸年龄比小红的3倍大2岁\n    age_difference = 2\n    # 爸爸的年龄是小红的3倍加上年龄差\n    age_dad = 3 * age_red + age_difference\n    # 答案是爸爸今年的年龄\n    result = age_dad\n    # 返回答案\n    return result"]}
{"question": "学校组织4、五年级学生看望烈士家属，四年级去了80人，五年级去的人数是四年级的5倍，他们一共去了多少人？", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 四年级学生的人数为80人\n    num_fourth_grade = 80\n    # 五年级学生去的人数是四年级的5倍\n    num_fifth_grade = 5 * num_fourth_grade\n    # 一共去的人数 = 四年级人数 + 五年级人数\n    total_students = num_fourth_grade + num_fifth_grade\n    # 答案是一共去的人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "A城到B城的公路长150千米．一辆汽车走高速路的速度是75千米/时，走普通公路的速度是50千米/时．从A城去B城走高速路比普通公路节省多少时间？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # A城到B城的公路长150千米\n    distance = 150\n    # 高速路速度为75千米/时\n    speed_highway = 75\n    # 普通公路速度为50千米/时\n    speed_normal = 50\n    # 高速路所需时间 = 距离 / 速度\n    time_highway = distance / speed_highway\n    # 普通公路所需时间 = 距离 / 速度\n    time_normal = distance / speed_normal\n    # 节省的时间 = 普通公路所需时间 - 高速路所需时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result"]}
{"question": "码头上有165吨货物，现用6辆载重为5.5吨的卡车运，需要运多少次才能运完？", "target": 5.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 码头上的货物总重量为165吨\n    total_weight = 165\n    # 每辆卡车的载重为5.5吨\n    truck_capacity = 5.5\n    # 每次运输的货物重量 = 6辆卡车的总载重\n    total_capacity_per_trip = 6 * truck_capacity\n    # 运输次数 = 总重量 / 每次运输的货物重量\n    total_trips = total_weight / total_capacity_per_trip\n    # 为了确保所有货物都被运走，向上取整运输次数\n    total_trips = math.ceil(total_trips)\n    # 答案是运输的次数\n    result = total_trips\n    # 返回答案\n    return result"]}
{"question": "运动会上315个同学参加体操表演．他们平均分成5队，每队平均分成7组．每组有多少个同学？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 运动会上参加体操表演的同学总数为315人\n    total_students = 315\n    # 平均分成5队\n    num_teams = 5\n    # 每队平均分成7组\n    num_groups_per_team = 7\n    # 每组的同学数量 = 总人数 / (队数 * 每队组数)\n    num_students_per_group = total_students / (num_teams * num_groups_per_team)\n    # 答案是每组的同学数量\n    result = num_students_per_group\n    # 返回答案\n    return result"]}
{"question": "张阳读一本科普书，第一周读了这本书的(1/3)，第二周读了160页，剩下这本书的(2/5)没有读，这本科普书共有多少页？", "target": 600.0, "answer": 267.22222222222223, "score": 0, "generation": ["def solution():\n    # 第一周读了科普书的(1/3)\n    fraction_read_first_week = 1/3\n    # 第二周读了160页\n    pages_read_second_week = 160\n    # 剩下的(2/5)没有读\n    fraction_not_read = 2/5\n    # 总页数 = 第一周读的页数 + 第二周读的页数 + 剩下没有读的页数\n    total_pages = (fraction_read_first_week + pages_read_second_week) / (1 - fraction_not_read)\n    # 答案是科普书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "某工地需要运黄土44.5吨，用一辆载重2.5吨的汽车运了10次，余下改用一辆载重1.5吨的汽车运，还要运多少次？", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 需要运输的黄土重量为44.5吨\n    total_weight = 44.5\n    # 一辆载重2.5吨的汽车运输一次的重量\n    weight_per_trip_truck1 = 2.5\n    # 一辆载重1.5吨的汽车运输一次的重量\n    weight_per_trip_truck2 = 1.5\n    # 第一辆汽车已经运输了10次，计算已经运输的总重量\n    total_weight_trucked1 = 10 * weight_per_trip_truck1\n    # 剩余需要运输的重量\n    remaining_weight = total_weight - total_weight_trucked1\n    # 计算剩余需要运输的次数\n    remaining_trips = remaining_weight / weight_per_trip_truck2\n    # 答案是剩余需要运输的次数\n    result = remaining_trips\n    # 返回答案\n    return result"]}
{"question": "用49-38的差乘以8/64的商，积=？", "target": 1.375, "answer": 1.375, "score": 1, "generation": ["def solution():\n    # 差为49-38\n    difference = 49 - 38\n    # 商为8/64\n    quotient = 8 / 64\n    # 积为差乘以商\n    product = difference * quotient\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "甲、乙两个工程队共同修一条7.15米长的公路，甲队每天修0.65米，乙队每天比甲队多修0.13米，多少天能修完这条公路？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 公路的长度为7.15米\n    road_length = 7.15\n    # 甲队每天修0.65米\n    team_a_rate = 0.65\n    # 乙队每天比甲队多修0.13米\n    team_b_rate = team_a_rate + 0.13\n    # 两队合作的修路速度为两队速度之和\n    combined_rate = team_a_rate + team_b_rate\n    # 修完公路所需天数 = 公路长度 / 合作修路速度\n    days_to_complete = road_length / combined_rate\n    # 答案是修完这条公路所需的天数\n    result = days_to_complete\n    # 返回答案\n    return result"]}
{"question": "一艘货轮从上海到广州航程是1800千米．平均每天行300千米．几天可以到达？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 航程是1800千米\n    distance = 1800\n    # 平均每天行300千米\n    daily_distance = 300\n    # 到达所需天数 = 航程 / 每天行驶的距离\n    days_to_arrive = distance / daily_distance\n    # 答案是到达所需天数\n    result = days_to_arrive\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3人共加工1000个零件．甲、乙两人完成数量的比是7：5，丙比甲少完成64个零件，乙完成了多少个零件．", "target": 280.0, "answer": 438.1176470588235, "score": 0, "generation": ["def solution():\n    # 甲、乙、丙三人共加工1000个零件\n    total_parts = 1000\n    # 甲、乙两人完成数量的比是7：5\n    ratio_ab = 7 / 5\n    # 丙比甲少完成64个零件\n    difference_c_a = 64\n    # 设甲完成的零件数量为x，则乙完成的零件数量为ratio_ab * x，丙完成的零件数量为x - difference_c_a\n    # 根据上述三人完成的零件数量之和等于总零件数量，列出方程并解\n    x = (total_parts + difference_c_a) / (2 + ratio_ab)\n    # 乙完成的零件数量为ratio_ab * x\n    parts_done_b = ratio_ab * x\n    # 答案是乙完成的零件数量\n    result = parts_done_b\n    # 返回答案\n    return result"]}
{"question": "李老师有415本练习本，发给二年级同学196本，一年级同学208本．李老师还剩多少本？", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 李老师有的练习本总数为415本\n    total_books = 415\n    # 发给二年级同学的练习本数量为196本\n    books_second_grade = 196\n    # 发给一年级同学的练习本数量为208本\n    books_first_grade = 208\n    # 发出去的练习本总数 = 二年级同学的数量 + 一年级同学的数量\n    total_given_books = books_second_grade + books_first_grade\n    # 剩余的练习本数量 = 总数 - 发出去的数量\n    remaining_books = total_books - total_given_books\n    # 答案是剩余的练习本数量\n    result = remaining_books\n    # 返回答案\n    return result"]}
{"question": "爸爸身高1.74米，妈妈身高1.5米，小明踩在一块石头上与妈妈一样高，妈妈踩在这块石头上与爸爸一样高．小明身高=多少米．", "target": 1.26, "answer": "", "score": 0, "generation": ["首先我们设小明踩在石头上后的身高为x米。\n\n根据题意可列出方程：\n1.74 = x + 1.5 (小明踩在石头上后与妈妈一样高)\n1.5 = x + 1.74 (妈妈踩在石头上后与爸爸一样高)\n\n解方程得到小明的身高。\n\n```python\ndef solution():\n    # 爸爸的身高为1.74米\n    height_dad = 1.74\n    # 妈妈的身高为1.5米\n    height_mom = 1.5\n    # 设小明踩在石头上后的身高为x米\n    x = (height_dad - height_mom) + height_mom\n    # 答案是小明的身高\n    result = x\n    # 返回答案\n    return result\n```"]}
{"question": "一个除法算式，除数是5，商是48，余数是4，那么被除数=．", "target": 244.0, "answer": 244.0, "score": 1, "generation": ["def solution():\n    # 除数\n    divisor = 5\n    # 商\n    quotient = 48\n    # 余数\n    remainder = 4\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "修一条路，已修和未修的千米数比是3：5．如果再修12千米，则已修和未修的千米数9：1，这条路共长多少千米？", "target": 22.857142857142858, "answer": 36.0, "score": 0, "generation": ["def solution():\n    # 已修和未修的比例是3:5\n    ratio_initial = 3 / 5\n    # 再修12千米后的比例是9:1\n    ratio_final = 9 / 1\n    # 再修的距离是12千米\n    additional_distance = 12\n    # 设已修的千米数为3x，未修的千米数为5x\n    # 根据比例得到方程：3x + 5x = 9x + 12\n    # 解方程得到x\n    x = 12 / 4\n    # 总长 = 已修的千米数 + 未修的千米数 + 再修的千米数\n    total_distance = 3 * x + 5 * x + additional_distance\n    # 答案是这条路的总长\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "工厂一共做了48个玩具熊，送给幼儿园15个，剩下的平均分给一年级3个班，每班可分得几个？", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 工厂一共做了48个玩具熊\n    total_toys = 48\n    # 送给幼儿园的玩具熊数量为15个\n    toys_for_kindergarten = 15\n    # 剩下的玩具熊数量 = 总数 - 送给幼儿园的数量\n    remaining_toys = total_toys - toys_for_kindergarten\n    # 一年级有3个班\n    num_classes = 3\n    # 每班平均分得的玩具熊数量 = 剩下的数量 / 班级数\n    toys_per_class = remaining_toys / num_classes\n    # 答案是每班平均分得的玩具熊数量\n    result = toys_per_class\n    # 返回答案\n    return result"]}
{"question": "少先队员共采集标本120只，其中62.5%是植物标本，其余是昆虫标本，昆虫标本有多少只？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 共采集的标本数量为120只\n    total_specimens = 120\n    # 植物标本占62.5%\n    plant_specimens_percentage = 62.5\n    # 植物标本数量 = 总数量 * 植物标本所占比例\n    plant_specimens = total_specimens * (plant_specimens_percentage / 100)\n    # 昆虫标本数量 = 总数量 - 植物标本数量\n    insect_specimens = total_specimens - plant_specimens\n    # 答案是昆虫标本数量\n    result = insect_specimens\n    # 返回答案\n    return result"]}
{"question": "商场1-6月份共卖出彩色电视机264台，平均每个月卖出多少台？", "target": 44.0, "answer": 44.0, "score": 1, "generation": ["def solution():\n    # 商场1-6月份共卖出彩色电视机264台\n    total_sold = 264\n    # 一共6个月\n    total_months = 6\n    # 平均每个月卖出的台数 = 总销量 / 总月数\n    average_per_month = total_sold / total_months\n    # 答案是平均每个月卖出的台数\n    result = average_per_month\n    # 返回答案\n    return result"]}
{"question": "(2/3)-(3/5)的差乘(5/7)，积=？", "target": 0.047619047619047616, "answer": 0.04761904761904761, "score": 1, "generation": ["def solution():\n    # 计算(2/3) - (3/5)\n    difference = (2/3) - (3/5)\n    # 计算差乘以(5/7)\n    product = difference * (5/7)\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "一艘大船运了6次货，一艘小船运了9次货，大船每次运30吨，小船每次运12吨，大船和小船一共运了多少吨货？", "target": 288.0, "answer": 288.0, "score": 1, "generation": ["def solution():\n    # 大船每次运货量为30吨\n    cargo_per_trip_large_ship = 30\n    # 小船每次运货量为12吨\n    cargo_per_trip_small_ship = 12\n    # 大船共运了6次货\n    trips_large_ship = 6\n    # 小船共运了9次货\n    trips_small_ship = 9\n    # 大船一共运的货量 = 大船每次运货量 * 大船总次数\n    total_cargo_large_ship = cargo_per_trip_large_ship * trips_large_ship\n    # 小船一共运的货量 = 小船每次运货量 * 小船总次数\n    total_cargo_small_ship = cargo_per_trip_small_ship * trips_small_ship\n    # 大船和小船一共运的货量 = 大船总货量 + 小船总货量\n    total_cargo = total_cargo_large_ship + total_cargo_small_ship\n    # 答案是大船和小船一共运的货量\n    result = total_cargo\n    # 返回答案\n    return result"]}
{"question": "杭州到黄山相距240千米．一列火车的速度是120千米/时，一辆汽车的速度是80千米/时．如果火车和汽车同时从杭州出发，那么火车比汽车到达黄山的时间早多少小时．", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 杭州到黄山的距离为240千米\n    distance = 240\n    # 火车的速度为120千米/时\n    speed_train = 120\n    # 汽车的速度为80千米/时\n    speed_car = 80\n    # 火车到达黄山所需时间 = 距离 / 火车速度\n    time_train = distance / speed_train\n    # 汽车到达黄山所需时间 = 距离 / 汽车速度\n    time_car = distance / speed_car\n    # 火车比汽车到达早的时间 = 汽车到达时间 - 火车到达时间\n    time_difference = time_car - time_train\n    # 答案是火车比汽车到达早的时间\n    result = time_difference\n    # 返回答案\n    return result"]}
{"question": "阳光小学三年级有学生248人，比四年级学生少63人，四年级有多少人？", "target": 311.0, "answer": 311.0, "score": 1, "generation": ["def solution():\n    # 三年级学生人数为248人\n    num_third_grade = 248\n    # 三年级比四年级少63人\n    difference = 63\n    # 四年级学生人数 = 三年级学生人数 - 差值\n    num_fourth_grade = num_third_grade + difference\n    # 答案是四年级学生人数\n    result = num_fourth_grade\n    # 返回答案\n    return result"]}
{"question": "滑冰场上午有72人，中午有44人离去，又有85人到来．现在有多少人滑冰？", "target": 113.0, "answer": 113.0, "score": 1, "generation": ["def solution():\n    # 上午在滑冰场的人数为72人\n    morning_people = 72\n    # 中午离去的人数为44人\n    noon_departures = 44\n    # 中午到来的人数为85人\n    noon_arrivals = 85\n    # 离去后剩余的人数 = 上午人数 - 中午离去人数 + 中午到来人数\n    remaining_people = morning_people - noon_departures + noon_arrivals\n    # 答案是现在滑冰场上的人数\n    result = remaining_people\n    # 返回答案\n    return result"]}
{"question": "小红在跳绳比赛中，前3次每次平均跳96下，第4次跳了104下，她平均每次跳多少下？", "target": 98.0, "answer": 98.0, "score": 1, "generation": ["def solution():\n    # 前3次每次平均跳96下，总共跳了3次\n    total_jumps_first_three = 96 * 3\n    # 第4次跳了104下\n    jumps_fourth = 104\n    # 总共跳的次数 = 前3次总次数 + 第4次次数\n    total_jumps = total_jumps_first_three + jumps_fourth\n    # 平均每次跳的次数 = 总共跳的次数 / 总次数\n    average_jumps = total_jumps / 4\n    # 答案是平均每次跳的次数\n    result = average_jumps\n    # 返回答案\n    return result"]}
{"question": "某汽车厂去年产汽车20000辆，其中小型车占(1/8)，其余为大型车，今年计划大型车产量未变，增产小型车若干辆使小型车产量占总产量的(1/5)，求今年增产多少辆小型车（列式解答）", "target": 1875.0, "answer": 1500.0, "score": 0, "generation": ["def solution():\n    # 去年生产的汽车总数为20000辆\n    total_cars_last_year = 20000\n    # 去年小型车的数量为总数的(1/8)\n    num_small_cars_last_year = total_cars_last_year * (1/8)\n    # 去年大型车的数量为总数减去小型车的数量\n    num_large_cars_last_year = total_cars_last_year - num_small_cars_last_year\n    # 今年小型车产量占总产量的(1/5)\n    small_cars_fraction_this_year = 1/5\n    # 今年小型车的数量为总数乘以小型车产量占比\n    num_small_cars_this_year = total_cars_last_year * small_cars_fraction_this_year\n    # 今年大型车的数量与去年相同\n    num_large_cars_this_year = num_large_cars_last_year\n    # 增产的小型车数量为今年小型车的数量减去去年小型车的数量\n    additional_small_cars = num_small_cars_this_year - num_small_cars_last_year\n    # 答案是今年增产的小型车数量\n    result = additional_small_cars\n    # 返回答案\n    return result"]}
{"question": "原来做一条裙子用布(7/10)米，现在只要(3/5)米．原来做900条裙子所用的布，现在可以做多少条？", "target": 1050.0, "answer": 1050.0, "score": 1, "generation": ["def solution():\n    # 原来做一条裙子用布7/10米\n    original_cloth_per_skirt = 7/10\n    # 现在只需要3/5米\n    new_cloth_per_skirt = 3/5\n    # 原来做900条裙子所用的布\n    original_total_cloth = original_cloth_per_skirt * 900\n    # 现在可以做多少条裙子\n    new_total_skirts = original_total_cloth / new_cloth_per_skirt\n    # 答案是现在可以做的裙子数量\n    result = new_total_skirts\n    # 返回答案\n    return result"]}
{"question": "甲数的80%与乙数的30%相等，已知甲数的倒数是3+(1/5)，乙数=．", "target": 0.8333333333333334, "answer": 0.8333333333333334, "score": 1, "generation": ["def solution():\n    # 甲数的倒数是3+(1/5)，即1/甲数 = 3 + 1/5\n    # 解方程得到甲数为5/16\n    num_a = 5/16\n    # 甲数的80%与乙数的30%相等，即0.8 * num_a = 0.3 * num_b\n    # 解方程得到乙数为2/3\n    num_b = (0.8 * num_a) / 0.3\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从宝应去扬州，已经行了42千米，占全程的(2/5)，两地相距多少千米？", "target": 105.0, "answer": 105.0, "score": 1, "generation": ["def solution():\n    # 汽车已经行驶的距离为42千米\n    distance_covered = 42\n    # 全程距离占比为2/5\n    fraction_of_total_distance = 2/5\n    # 全程距离 = 已行驶距离 / 占比\n    total_distance = distance_covered / fraction_of_total_distance\n    # 答案是两地相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "超市原有西瓜348千克，上午卖出153千克，下午又运来213千克，这时超市有西瓜多少千克？", "target": 408.0, "answer": 408.0, "score": 1, "generation": ["def solution():\n    # 超市原有西瓜348千克\n    initial_watermelon = 348\n    # 上午卖出153千克\n    sold_morning = 153\n    # 下午运来213千克\n    arrived_afternoon = 213\n    # 超市现有西瓜 = 原有西瓜 - 上午卖出 + 下午运来\n    total_watermelon = initial_watermelon - sold_morning + arrived_afternoon\n    # 答案是超市现有西瓜的重量\n    result = total_watermelon\n    # 返回答案\n    return result"]}
{"question": "某织布厂第一车间有工人250人，相当于第二车间人数的(5/6)，两车间人数的总数占职工总数的11%．全厂职工有多少人？", "target": 5000.0, "answer": 4166.666666666667, "score": 0, "generation": ["def solution():\n    # 第一车间的工人数为250人\n    num_workers_first = 250\n    # 第一车间人数相当于第二车间人数的(5/6)\n    num_workers_second = (5/6) * num_workers_first\n    # 两车间人数的总数占职工总数的11%\n    total_workers_percentage = 0.11\n    # 两车间人数的总数 = 第一车间人数 + 第二车间人数\n    total_workers = num_workers_first + num_workers_second\n    # 职工总数 = 两车间人数的总数 / 11%\n    total_all_workers = total_workers / total_workers_percentage\n    # 答案是全厂职工的总人数\n    result = total_all_workers\n    # 返回答案\n    return result"]}
{"question": "小明看一本150页的故事书，前3天看了整本书的(3/5)．平均每天看多少页？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为150页\n    total_pages = 150\n    # 前3天看了整本书的(3/5)\n    fraction_read = 3/5\n    # 前3天看的页数 = 总页数 * 看的比例\n    pages_read = total_pages * fraction_read\n    # 平均每天看的页数 = 前3天看的页数 / 3天\n    average_pages_per_day = pages_read / 3\n    # 答案是平均每天看的页数\n    result = average_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "学校图书室科技书的本数是故事书的(2/3)，故事书的本数占图书总数的(3/5)，图书室共有图书4500，科技书有多少本？", "target": 1800.0, "answer": 1800.0, "score": 1, "generation": ["def solution():\n    # 图书室共有图书4500本\n    total_books = 4500\n    # 故事书的本数占图书总数的(3/5)\n    fraction_story_books = 3/5\n    # 故事书的本数 = 图书总数 * 故事书比例\n    num_story_books = total_books * fraction_story_books\n    # 科技书的本数是故事书的(2/3)\n    fraction_tech_books = 2/3\n    # 科技书的本数 = 故事书的本数 * 科技书比例\n    num_tech_books = num_story_books * fraction_tech_books\n    # 答案是科技书的本数\n    result = num_tech_books\n    # 返回答案\n    return result"]}
{"question": "喜羊羊和灰太狼在体育场进行20000米赛跑，灰太狼的速度是喜羊羊的6倍，当它们从起点一起出发后，喜羊羊不停地跑，灰太狼跑到某处后开始睡觉，等它醒来时喜羊羊已经领先它10000米，灰太狼奋起直追，当喜羊羊到达终点时，灰太狼仍然落后200米，那么灰太狼睡觉期间喜羊羊跑了多少米？", "target": 16700.0, "answer": "", "score": 0, "generation": ["首先我们设喜羊羊的速度为x，那么灰太狼的速度就是6x。根据题意可列出方程：\n\n1. 喜羊羊领先灰太狼10000米时，喜羊羊已经跑了的距离为10000米，即速度×时间 = 10000，即 x × t = 10000\n2. 喜羊羊到达终点时，灰太狼落后200米，即喜羊羊跑的距离 - 灰太狼跑的距离 = 200，即 x × (t + 20000) - 6x × t = 200\n\n解方程组得 t = 5000，即喜羊羊跑了5000米，所以灰太狼睡觉期间喜羊羊跑了10000 - 5000 = 5000米。\n\n```python\ndef solution():\n    # 设喜羊羊的速度为x\n    x = 1\n    # 喜羊羊领先灰太狼10000米时，喜羊羊已经跑了的距离为10000米\n    t = 10000 / x\n    # 喜羊羊到达终点时，灰太狼落后200米\n    distance_diff = 200\n    # 解方程得到喜羊羊跑了5000米\n    sheep_distance = 5000\n    # 答案是灰太狼睡觉期间喜羊羊跑了的距禿\n    result = sheep_distance\n    # 返回答案\n    return result\n```"]}
{"question": "学校组织同学们去看电影，三年级有260人，分别乘坐5辆车，平均每辆车坐多少人？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 三年级的人数为260人\n    num_students = 260\n    # 分别乘坐5辆车\n    num_cars = 5\n    # 平均每辆车坐的人数 = 三年级的人数 / 车辆数\n    average_students_per_car = num_students / num_cars\n    # 答案是平均每辆车坐的人数\n    result = average_students_per_car\n    # 返回答案\n    return result"]}
{"question": "一根铁丝用去10.5米，是剩下铁丝的5倍，剩下多少米？", "target": 2.1, "answer": 1.75, "score": 0, "generation": ["def solution():\n    # 铁丝总长度为10.5米\n    total_length = 10.5\n    # 用去的铁丝长度是剩下铁丝的5倍\n    used_length = 5\n    # 剩下的铁丝长度 = 铁丝总长度 / (1 + 用去的倍数)\n    remaining_length = total_length / (1 + used_length)\n    # 答案是剩下的铁丝长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "一头猪重208千克，一头牛的重量是它的3倍，一头牛和一头猪一共重多少千克？", "target": 832.0, "answer": 832.0, "score": 1, "generation": ["def solution():\n    # 一头猪的重量为208千克\n    weight_pig = 208\n    # 一头牛的重量是猪的3倍\n    weight_cow = 3 * weight_pig\n    # 一头牛和一头猪一共的重量 = 猪的重量 + 牛的重量\n    total_weight = weight_pig + weight_cow\n    # 答案是一头牛和一头猪一共的重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "甜美水果店上午卖苹果12箱，每箱重20千克．如果平均每千克苹果售价2元，这些苹果卖多少元？", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 上午卖出的苹果箱数为12箱\n    num_boxes = 12\n    # 每箱苹果的重量为20千克\n    weight_per_box = 20\n    # 每千克苹果的售价为2元\n    price_per_kg = 2\n    # 总重量 = 箱数 * 每箱重量\n    total_weight = num_boxes * weight_per_box\n    # 总售价 = 总重量 * 每千克售价\n    total_price = total_weight * price_per_kg\n    # 答案是苹果的总售价\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "桃林沟果园里有苹果树100棵，梨树的棵树比苹果树少(1/4)，梨树有多少棵？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 苹果树的棵树为100棵\n    num_apple_trees = 100\n    # 梨树比苹果树少(1/4)棵\n    ratio_pear_trees = 1/4\n    # 梨树的棵树 = 苹果树的棵树 * (1 - 梨树比例)\n    num_pear_trees = num_apple_trees * (1 - ratio_pear_trees)\n    # 答案是梨树的棵树数量\n    result = num_pear_trees\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人同时骑自行车从A城到B城，甲每小时行15千米，乙每小时行12千米，甲由于途中有事耽误了4小时，结果甲和乙同时到达B城．求A、B两城间的距离．", "target": 240.0, "answer": 900.0, "score": 0, "generation": ["def solution():\n    # 甲的速度是每小时行15千米\n    speed_a = 15\n    # 乙的速度是每小时行12千米\n    speed_b = 12\n    # 甲比乙多行驶了4小时\n    time_difference = 4\n    # 由于甲和乙同时到达B城，所以甲行驶的距离 = 乙行驶的距离\n    # 甲行驶的距离 = 甲的速度 * (总时间 - 甲耽误的时间)\n    # 乙行驶的距离 = 乙的速度 * 总时间\n    # 15 * (总时间 - 4) = 12 * 总时间\n    # 解方程得到总时间\n    total_time = 60  # 总时间为60小时\n    # A、B两城间的距离 = 甲的速度 * 总时间\n    distance = speed_a * total_time\n    # 答案是A、B两城间的距禀\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "李明家5月共支出2000元，其中购物支出占20%，伙食费支出占40%．两项支出共多少元？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 李明家5月共支出2000元\n    total_expense = 2000\n    # 购物支出占20%\n    shopping_percentage = 0.20\n    # 伙食费支出占40%\n    food_percentage = 0.40\n    # 购物支出 = 总支出 * 购物支出占比\n    shopping_expense = total_expense * shopping_percentage\n    # 伙食费支出 = 总支出 * 伙食费支出占比\n    food_expense = total_expense * food_percentage\n    # 两项支出共 = 购物支出 + 伙食费支出\n    total_shopping_food_expense = shopping_expense + food_expense\n    # 答案是两项支出共多少元\n    result = total_shopping_food_expense\n    # 返回答案\n    return result"]}
{"question": "饲养场有公鸡245只，母鸡的只数比公鸡的3倍多45只，饲养场一共有多少只母鸡？", "target": 780.0, "answer": 780.0, "score": 1, "generation": ["def solution():\n    # 公鸡的只数为245只\n    num_roosters = 245\n    # 母鸡的只数比公鸡的3倍多45只\n    num_hens = 3 * num_roosters + 45\n    # 饲养场一共的母鸡数量 = 母鸡的只数\n    total_hens = num_hens\n    # 答案是饲养场一共的母鸡数量\n    result = total_hens\n    # 返回答案\n    return result"]}
{"question": "某商店6月份的营业额是50万元，按5%缴纳营业税，这个商店要缴纳营业税多少万元．", "target": 2.5, "answer": 2.5, "score": 1, "generation": ["def solution():\n    # 6月份的营业额是50万元\n    revenue_june = 50\n    # 缴纳营业税的比例是5%\n    tax_rate = 0.05\n    # 缴纳的营业税 = 营业额 * 缴税比例\n    tax_amount = revenue_june * tax_rate\n    # 答案是缴纳的营业税金额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "一堆煤，第一周用去这堆煤的40%，每二周用去这堆煤的(1/3)，刚好用去4吨．这堆煤原有多少吨？", "target": 5.454545454545454, "answer": 15.0, "score": 0, "generation": ["def solution():\n    # 初始煤的总量为x吨\n    # 第一周用去40%，剩余60%\n    # 第二周用去(1/3)，剩余2/3\n    # 用去的总量为4吨\n    # 因此，0.6x + 2/3 * 0.6x = 4\n    # 解方程得到x = 15\n    total_coal = 15\n    # 答案是这堆煤原有的总量\n    result = total_coal\n    # 返回答案\n    return result"]}
{"question": "学校计划用一些钱购买单价1050元得电子琴，正好可以买7台，实际买录音机用去了3150元，剩下的钱还够买几台？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 单价为1050元的电子琴可以买7台\n    num_pianos = 7\n    price_per_piano = 1050\n    total_price_pianos = num_pianos * price_per_piano\n    # 实际购买录音机用去了3150元\n    total_spent = 3150\n    # 剩下的钱\n    remaining_money = total_price_pianos - total_spent\n    # 剩下的钱可以购买的电子琴数量\n    remaining_pianos = remaining_money // price_per_piano\n    # 答案是剩下的钱可以购买的电子琴数量\n    result = remaining_pianos\n    # 返回答案\n    return result"]}
{"question": "一个数的(5/7)是114，这个数=？", "target": 159.6, "answer": 159.6, "score": 1, "generation": ["def solution():\n    # 一个数的(5/7)是114\n    fraction_value = 5/7\n    given_value = 114\n    # 这个数 = 给定值 / 分数值\n    result = given_value / fraction_value\n    # 答案是这个数\n    return result"]}
{"question": "黄河全长5464千米，长江全长6300千米，长江比黄河长多少千米？", "target": 836.0, "answer": 836.0, "score": 1, "generation": ["def solution():\n    # 黄河全长5464千米\n    length_huanghe = 5464\n    # 长江全长6300千米\n    length_changjiang = 6300\n    # 长江比黄河长多少千米 = 长江全长 - 黄河全长\n    difference_length = length_changjiang - length_huanghe\n    # 答案是长江比黄河长多少千米\n    result = difference_length\n    # 返回答案\n    return result"]}
{"question": "3、四年级学生向灾区捐款，三年级捐了769.3元，比四年级少48.9元，两个年级共捐了多少钱？", "target": 1587.5, "answer": 1587.5, "score": 1, "generation": ["def solution():\n    # 三年级学生捐款了769.3元\n    donation_third_grade = 769.3\n    # 三年级比四年级少了48.9元\n    difference = 48.9\n    # 两个年级共捐款 = 三年级捐款 + 四年级捐款\n    total_donation = donation_third_grade + (donation_third_grade + difference)\n    # 答案是两个年级共捐款的总额\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "王老师给营业员200元买了16个排球，找回8元，每个排球几元？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 王老师给营业员200元买了16个排球\n    total_money = 200\n    total_volleyballs = 16\n    # 找回8元\n    change = 8\n    # 每个排球的价格 = (总金额 - 找回的金额) / 排球数量\n    price_per_volleyball = (total_money - change) / total_volleyballs\n    # 答案是每个排球的价格\n    result = price_per_volleyball\n    # 返回答案\n    return result"]}
{"question": "为支援汶川抗震救灾，滨海市和平小学五年级一班41人共捐款943元，三年级一班38人共捐款722元，五年级平均每人比三年级多捐多少元？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 五年级一班41人共捐款943元\n    num_students_fifth_grade = 41\n    total_donation_fifth_grade = 943\n    # 三年级一班38人共捐款722元\n    num_students_third_grade = 38\n    total_donation_third_grade = 722\n    # 五年级平均每人捐款数 = 五年级总捐款数 / 五年级总人数\n    avg_donation_per_student_fifth_grade = total_donation_fifth_grade / num_students_fifth_grade\n    # 三年级平均每人捐款数 = 三年级总捐款数 / 三年级总人数\n    avg_donation_per_student_third_grade = total_donation_third_grade / num_students_third_grade\n    # 五年级平均每人比三年级多捐款数 = 五年级平均每人捐款数 - 三年级平均每人捐款数\n    difference_per_student = avg_donation_per_student_fifth_grade - avg_donation_per_student_third_grade\n    # 答案是五年级平均每人比三年级多捐款数\n    result = difference_per_student\n    # 返回答案\n    return result"]}
{"question": "我国供水不足的城市个数占全国总城市的(2/3)，其中又有(1/4)的城市严重缺水，全国严重缺水的城市个数占总城市个数的几分之几？", "target": 0.16666666666666666, "answer": 0.16666666666666666, "score": 1, "generation": ["def solution():\n    # 全国总城市个数\n    total_cities = 1\n    # 供水不足的城市个数占全国总城市的(2/3)\n    cities_lacking_water = total_cities * (2/3)\n    # 严重缺水的城市个数占供水不足城市的(1/4)\n    severely_lacking_water = cities_lacking_water * (1/4)\n    # 全国严重缺水的城市个数占总城市个数的比例\n    ratio_severely_lacking_water = severely_lacking_water / total_cities\n    # 答案是全国严重缺水的城市个数占总城市个数的比例\n    result = ratio_severely_lacking_water\n    # 返回答案\n    return result"]}
{"question": "从5050中连续减去5，最多能减多少次．", "target": 1010.0, "answer": 1010.0, "score": 1, "generation": ["def solution():\n    # 初始数字为5050\n    number = 5050\n    # 每次减去的数为5\n    subtract_value = 5\n    # 计算最多能减多少次，直到结果小于0为止\n    count = 0\n    while number >= 0:\n        number -= subtract_value\n        count += 1\n    # 最多能减的次数即为count-1，因为最后一次减去5后结果小于0\n    result = count - 1\n    # 返回答案\n    return result"]}
{"question": "某商店今天卖出15台电视机，7台洗衣机．卖出的电视机是洗衣机的多少．", "target": 2.142857142857143, "answer": 2.142857142857143, "score": 1, "generation": ["def solution():\n    # 今天卖出的电视机数量为15台\n    num_tv_sold = 15\n    # 今天卖出的洗衣机数量为7台\n    num_washer_sold = 7\n    # 电视机占比 = 电视机数量 / 洗衣机数量\n    tv_ratio = num_tv_sold / num_washer_sold\n    # 答案是电视机占洗衣机的比例\n    result = tv_ratio\n    # 返回答案\n    return result"]}
{"question": "12路公共汽车车队每月计划用汽油5400升，采取节油措施后，实际节约了(1/12)，实际节油多少升？", "target": 450.0, "answer": 450.0, "score": 1, "generation": ["def solution():\n    # 每月计划用汽油5400升\n    planned_gasoline = 5400\n    # 实际节约了(1/12)的汽油\n    saved_fraction = 1/12\n    # 实际节约的汽油量 = 计划用汽油量 * 节约比例\n    saved_gasoline = planned_gasoline * saved_fraction\n    # 答案是实际节约的汽油量\n    result = saved_gasoline\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开往乙地，已经行驶了全程的(5/7)，距离乙地还有132千米，甲、乙两地相距多少千米？", "target": 462.0, "answer": 462.0, "score": 1, "generation": ["def solution():\n    # 距离乙地还剩132千米\n    remaining_distance = 132\n    # 已经行驶了全程的(5/7)\n    fraction_traveled = 5/7\n    # 已经行驶的距离 = 全程距离 - 剩余距离\n    traveled_distance = remaining_distance / (1 - fraction_traveled)\n    # 甲、乙两地相距的距离 = 已经行驶的距离\n    distance_between_A_and_B = traveled_distance\n    # 答案是甲、乙两地相距的距离\n    result = distance_between_A_and_B\n    # 返回答案\n    return result"]}
{"question": "小红上个月买书花了15元，占总支出的20%，小红上个月一共花了多少元？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 小红上个月买书花了15元，占总支出的20%\n    spent_on_books = 15\n    percentage_of_total = 20\n    # 小红上个月一共花了多少元 = 书的花费 / 花费所占比例\n    total_spent = spent_on_books / (percentage_of_total / 100)\n    # 答案是小红上个月一共花了多少元\n    result = total_spent\n    # 返回答案\n    return result"]}
{"question": "买4支钢笔比买5支中性笔贵4.8元，每支中性笔的价钱是1.2元，每支钢笔多少元？", "target": 2.7, "answer": 2.7, "score": 1, "generation": ["def solution():\n    # 买钢笔的数量是4支\n    num_pens = 4\n    # 买中性笔的数量是5支\n    num_ballpens = 5\n    # 每支中性笔的价格是1.2元\n    price_ballpen = 1.2\n    # 买钢笔比买中性笔贵4.8元\n    total_price_difference = 4.8\n    # 中性笔的总价格 = 中性笔数量 * 每支中性笔的价格\n    total_price_ballpens = num_ballpens * price_ballpen\n    # 因为买钢笔比买中性笔贵，所以钢笔的总价格 = 钢笔与中性笔的价格差 + 中性笔的总价格\n    total_price_pens = total_price_difference + total_price_ballpens\n    # 每支钢笔的价格 = 钢笔的总价格 / 钢笔的数量\n    price_pen = total_price_pens / num_pens\n    # 答案是每支钢笔的价格\n    result = price_pen\n    # 返回答案\n    return result"]}
{"question": "一件衬衫原价140元，现在打0.9出售，这件衬衫现价多少元？", "target": 126.0, "answer": 126.0, "score": 1, "generation": ["def solution():\n    # 衬衫原价为140元\n    original_price = 140\n    # 打折后的折扣率为0.9\n    discount_rate = 0.9\n    # 现价 = 原价 * 折扣率\n    current_price = original_price * discount_rate\n    # 答案是现价\n    result = current_price\n    # 返回答案\n    return result"]}
{"question": "32与23的和乘75，积=？", "target": 4125.0, "answer": 4125.0, "score": 1, "generation": ["def solution():\n    # 计算32与23的和\n    sum_numbers = 32 + 23\n    # 计算和乘以75的积\n    product = sum_numbers * 75\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "小明有一本故事书，第一天看了16页，第二天看了20%，还剩下56页，这本书共有多少页？", "target": 90.0, "answer": 352.0, "score": 0, "generation": ["def solution():\n    # 第一天看了16页\n    pages_read_day1 = 16\n    # 第二天看了20%\n    fraction_read_day2 = 0.20\n    # 剩下56页\n    remaining_pages = 56\n    # 第二天看的页数 = 总页数 * 第二天看的比例\n    pages_read_day2 = remaining_pages / fraction_read_day2\n    # 故事书的总页数 = 第一天看的页数 + 第二天看的页数 + 剩下的页数\n    total_pages = pages_read_day1 + pages_read_day2 + remaining_pages\n    # 答案是故事书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一批牡丹花种的发芽率是80%，张叔叔打算培育3000株花苗，需要播种多少个红球．", "target": 3750.0, "answer": 120.0, "score": 0, "generation": ["def solution():\n    # 牡丹花种的发芽率是80%\n    germination_rate = 0.8\n    # 张叔叔打算培育3000株花苗\n    total_seedlings = 3000\n    # 实际发芽的花苗数量 = 总花苗数量 * 发芽率\n    germinated_seedlings = total_seedlings * germination_rate\n    # 因为每个红球代表20株花苗，所以需要播种的红球数量 = 实际发芽的花苗数量 / 20\n    red_balls_needed = germinated_seedlings / 20\n    # 答案是需要播种的红球数量\n    result = red_balls_needed\n    # 返回答案\n    return result"]}
{"question": "阳光小学在大礼堂举行开学典礼，礼堂座位是9排，每排有186个位置．现在位置空出了12个，一共有多少人参加这个开学典礼？", "target": 1662.0, "answer": 1662.0, "score": 1, "generation": ["def solution():\n    # 礼堂座位总排数为9排\n    num_rows = 9\n    # 每排座位数为186个\n    seats_per_row = 186\n    # 空出的座位数为12个\n    empty_seats = 12\n    # 总座位数 = 排数 * 每排座位数\n    total_seats = num_rows * seats_per_row\n    # 实际参加典礼的人数 = 总座位数 - 空出的座位数\n    total_attendees = total_seats - empty_seats\n    # 答案是实际参加典礼的人数\n    result = total_attendees\n    # 返回答案\n    return result"]}
{"question": "妈妈今年35岁，小红今年5岁，明年妈妈的年龄是小红的多少倍．", "target": 6.0, "answer": 7.2, "score": 0, "generation": ["def solution():\n    # 妈妈今年35岁\n    mom_age = 35\n    # 小红今年5岁\n    xiaohong_age = 5\n    # 明年妈妈的年龄\n    mom_next_year = mom_age + 1\n    # 妈妈明年的年龄是小红今年年龄的多少倍\n    multiple = mom_next_year / xiaohong_age\n    # 答案是妈妈明年的年龄是小红今年年龄的多少倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "一个数的(1/3)比它的(1/6)多60，求这个数．", "target": 360.0, "answer": 360.0, "score": 1, "generation": ["def solution():\n    # 令这个数为x\n    # x的(1/3)比x的(1/6)多60\n    # x * (1/3) - x * (1/6) = 60\n    # 化简得到\n    # x = 60 * 6\n    x = 60 * 6\n    # 答案是这个数x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "水果店有苹果180㎏，卖出(1/3)后，剩下的苹果正好是桔子的60%，水果店有桔子多少千克？", "target": 200.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 苹果的重量为180kg\n    weight_apple = 180\n    # 卖出的比例为1/3\n    sold_fraction = 1/3\n    # 剩下的苹果重量为剩下水果总重量的60%\n    remaining_apple_percentage = 60\n    # 卖出的苹果重量 = 苹果总重量 * 卖出比例\n    sold_apple = weight_apple * sold_fraction\n    # 剩下的水果总重量 = 剩下的苹果重量 / 剩下苹果的比例\n    total_remaining_fruit = sold_apple / (remaining_apple_percentage / 100)\n    # 剩下的桔子重量 = 总剩下水果重量 - 剩下的苹果重量\n    weight_orange = total_remaining_fruit - sold_apple\n    # 答案是桔子的重量\n    result = weight_orange\n    # 返回答案\n    return result"]}
{"question": "学校举行运动会，参加入场式的仪仗队同学共有205人，每5人排一行，每一行空2米．如果这个仪仗队以每分钟20米的速度通过主席台，需要多少分钟．", "target": 4.0, "answer": 6.15, "score": 0, "generation": ["def solution():\n    # 参加入场式的仪仗队同学共有205人\n    num_students = 205\n    # 每5人排一行\n    students_per_row = 5\n    # 每一行空2米\n    space_per_row = 2\n    # 仪仗队通过主席台的速度为每分钟20米\n    speed = 20\n    # 总行数 = 总人数 / 每行人数\n    total_rows = num_students / students_per_row\n    # 总空间 = 总行数 * 每行空间\n    total_space = total_rows * space_per_row\n    # 总距离 = 总空间 + 总行数\n    total_distance = total_space + total_rows\n    # 需要的时间 = 总距离 / 速度\n    time_needed = total_distance / speed\n    # 答案是需要的时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "计算：（(2/29)+(2/23)）*29*23=．", "target": 104.0, "answer": 103.99999999999999, "score": 1, "generation": ["def solution():\n    # 计算：（(2/29)+(2/23)）*29*23\n    result = ((2/29) + (2/23)) * 29 * 23\n    # 答案是计算结果\n    return result"]}
{"question": "希望小学六年级共有女生25人，男生28人，男生比女生多百分之几？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 六年级女生人数为25人\n    num_girls = 25\n    # 六年级男生人数为28人\n    num_boys = 28\n    # 男生比女生多的人数 = 男生人数 - 女生人数\n    extra_boys = num_boys - num_girls\n    # 男生比女生多的百分比 = (男生比女生多的人数 / 女生人数) * 100%\n    percentage_more_boys = (extra_boys / num_girls) * 100\n    # 答案是男生比女生多的百分比\n    result = percentage_more_boys\n    # 返回答案\n    return result"]}
{"question": "甲乙两艘船分别从两个码头同时相向而行．甲船每小时行驶40海里，乙船每小时行驶28海里，两船行驶4小时后相遇．甲、乙两个码头相距多少海里？", "target": 272.0, "answer": 272.0, "score": 1, "generation": ["```python\ndef solution():\n    # 甲船的速度是每小时行驶40海里\n    speed_a = 40\n    # 乙船的速度是每小时行驶28海里\n    speed_b = 28\n    # 两船行驶4小时后相遇，相遇时间为4小时\n    time_to_meet = 4\n    # 甲船行驶的距离 = 甲船速度 * 相遇时间\n    distance_a = speed_a * time_to_meet\n    # 乙船行驶的距离 = 乙船速度 * 相遇时间\n    distance_b = speed_b * time_to_meet\n    # 两个码头相距的距离 = 甲船行驶的距离 + 乙船行驶的距离\n    total_distance = distance_a + distance_b\n    # 答案是两个码头相距的距离\n    result = total_distance\n    # 返回答案\n    return result\n```"]}
{"question": "甲地到乙地的公路长250千米，一辆客车和一辆货车同时从甲地开往乙地，客车每小时行100千米，货车每小时行80千米．客车到达乙地时，货车行了多少千米？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 甲地到乙地的公路长250千米\n    distance = 250\n    # 客车的速度是每小时行100千米\n    speed_passenger = 100\n    # 货车的速度是每小时行80千米\n    speed_freight = 80\n    # 客车行驶的时间 = 距离 / 客车速度\n    time_passenger = distance / speed_passenger\n    # 货车行驶的距离 = 货车速度 * 客车行驶的时间\n    distance_freight = speed_freight * time_passenger\n    # 答案是货车行驶的距离\n    result = distance_freight\n    # 返回答案\n    return result"]}
{"question": "4（1）班有40人，其中15人会下国际象棋，23人会下中国象棋，两种象棋都不会下的有10人．两种象棋都会下的有多少人？", "target": 8.0, "answer": -8.0, "score": 0, "generation": ["def solution():\n    # 4（1）班总共有40人\n    total_students = 40\n    # 会下国际象棋的人数为15人\n    chess_international = 15\n    # 会下中国象棋的人数为23人\n    chess_chinese = 23\n    # 两种象棋都不会下的人数为10人\n    chess_none = 10\n    # 两种象棋都会下的人数 = 总人数 - (只会下国际象棋的人数 + 只会下中国象棋的人数 + 两种象棋都不会下的人数)\n    chess_both = total_students - (chess_international + chess_chinese + chess_none)\n    # 答案是两种象棋都会下的人数\n    result = chess_both\n    # 返回答案\n    return result"]}
{"question": "学校教学楼有4层，每层5间教室，共装120盏日光灯，平均每间教室安装多少盏日光灯．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 学校教学楼有4层\n    num_floors = 4\n    # 每层有5间教室\n    num_classrooms_per_floor = 5\n    # 总共有120盏日光灯\n    total_lights = 120\n    # 每间教室平均安装的日光灯数量 = 总日光灯数 / (楼层数 * 每层教室数)\n    lights_per_classroom = total_lights / (num_floors * num_classrooms_per_floor)\n    # 答案是每间教室平均安装的日光灯数量\n    result = lights_per_classroom\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人住在同一个地方，甲、乙骑车速度分别为300米/分、360米/分．乙从住处骑车到学校用时15分钟，求甲从家到学校用时几分钟？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 乙从住处到学校的时间为15分钟\n    time_b_to_school = 15\n    # 甲、乙骑车速度分别为300米/分、360米/分\n    speed_a = 300\n    speed_b = 360\n    # 乙从住处到学校的距离 = 乙的速度 * 时间\n    distance_b_to_school = speed_b * (time_b_to_school / 60)  # 将分钟转换为小时\n    # 甲从家到学校的时间 = 甲的速度 * 距离 / 60\n    time_a_to_school = (distance_b_to_school / speed_a) * 60  # 将小时转换为分钟\n    # 答案是甲从家到学校用时的分钟数\n    result = time_a_to_school\n    # 返回答案\n    return result"]}
{"question": "一种商品原价是100元，现在打0.8销售，现在便宜了多少元．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 商品原价是100元\n    original_price = 100\n    # 打0.8折后的价格\n    discounted_price = original_price * 0.8\n    # 便宜了多少元 = 原价 - 折后价\n    discount_amount = original_price - discounted_price\n    # 答案是便宜了多少元\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "计算：3333*13+4444*4+5555*9=．", "target": 111100.0, "answer": 111100.0, "score": 1, "generation": ["def solution():\n    # 计算3333*13+4444*4+5555*9的结果\n    result = 3333*13 + 4444*4 + 5555*9\n    # 返回答案\n    return result"]}
{"question": "学校图书室原有图书4200册，今年图书册数增加了(3/20)．今年有图书多少册？", "target": 4830.0, "answer": 4830.0, "score": 1, "generation": ["def solution():\n    # 学校图书室原有图书4200册\n    original_books = 4200\n    # 图书册数增加了(3/20)\n    increase_fraction = 3/20\n    # 今年图书册数 = 原有图书册数 + 增加的册数\n    total_books = original_books * (1 + increase_fraction)\n    # 答案是今年图书多少册\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "妈妈买来一些梨和6个苹果，吃了4个梨，剩下的梨是苹果的2倍，妈妈买了多少个梨．", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 假设妈妈买了x个梨\n    num_pears = 0\n    # 妈妈买了6个苹果\n    num_apples = 6\n    # 吃了4个梨\n    eaten_pears = 4\n    # 剩下的梨是苹果的2倍，即 x - 4 = 2 * 6\n    num_pears = 2 * num_apples + eaten_pears\n    # 答案是妈妈买的梨的数量\n    result = num_pears\n    # 返回答案\n    return result"]}
{"question": "两辆汽车同时从甲、乙两城出发相向而行，快车每小时行57千米，慢车每小时行43千米，5小时后相遇，则甲、乙两城相距多少千米．", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 快车的速度是每小时行57千米\n    speed_fast_car = 57\n    # 慢车的速度是每小时行43千米\n    speed_slow_car = 43\n    # 两车相向而行，相对速度为两车速度之和\n    relative_speed = speed_fast_car + speed_slow_car\n    # 5小时后相遇，相遇时间为5小时\n    time_to_meet = 5\n    # 甲、乙两城的距离 = 相对速度 * 相遇时间\n    distance_between_cities = relative_speed * time_to_meet\n    # 答案是甲、乙两城相距的距离\n    result = distance_between_cities\n    # 返回答案\n    return result"]}
{"question": "学校种植一批树苗，其中樟树有30，桂花树的棵数是樟树的了(4/5)，广玉兰的棵数是桂花树的(2/3)．学校种植了多少棵广玉兰？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 樟树的数量为30棵\n    num_camphor_trees = 30\n    # 桂花树的数量是樟树数量的(4/5)\n    num_osmanthus_trees = (4/5) * num_camphor_trees\n    # 广玉兰的数量是桂花树数量的(2/3)\n    num_magnolia_trees = (2/3) * num_osmanthus_trees\n    # 学校种植的广玉兰树数量 = 广玉兰的数量\n    total_magnolia_trees = num_magnolia_trees\n    # 答案是学校种植的广玉兰树数量\n    result = total_magnolia_trees\n    # 返回答案\n    return result"]}
{"question": "张师傅5天完成任务的(1/3)，完成任务他需要多少．", "target": 15.0, "answer": 1.6666666666666665, "score": 0, "generation": ["def solution():\n    # 张师傅完成任务的总时间为5天\n    total_days = 5\n    # 完成任务的比例为1/3\n    completion_fraction = 1/3\n    # 完成任务所需的天数 = 总时间 * 完成比例\n    days_needed = total_days * completion_fraction\n    # 答案是完成任务所需的天数\n    result = days_needed\n    # 返回答案\n    return result"]}
{"question": "王大伯花1740元买一台家电下乡冰箱，享受政府13%的补贴，这台冰箱原价=多少元？", "target": 2000.0, "answer": 2000.0, "score": 1, "generation": ["def solution():\n    # 王大伯花了1740元买冰箱\n    price_paid = 1740\n    # 政府补贴13%\n    subsidy_percentage = 0.13\n    # 冰箱原价 = 购买价格 / (1 - 补贴比例)\n    original_price = price_paid / (1 - subsidy_percentage)\n    # 答案是冰箱的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "一件商品打0.7出售，正好比原来便宜60元．这件商品原价多少元？", "target": 200.0, "answer": 199.99999999999997, "score": 1, "generation": ["def solution():\n    # 商品打折后的折扣率为0.7\n    discount_rate = 0.7\n    # 折扣后比原价便宜60元\n    discount_amount = 60\n    # 折扣后价格 = 原价 * 折扣率\n    discounted_price = discount_amount / (1 - discount_rate)\n    # 答案是商品的原价\n    result = discounted_price\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车从相距594千米的两地同时开出，甲车每小时行54千米，乙车每小时行45千米，经过几小时相遇？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["```python\ndef solution():\n    # 两地之间的距离为594千米\n    distance = 594\n    # 甲车的速度是每小时行54千米\n    speed_a = 54\n    # 乙车的速度是每小时行45千米\n    speed_b = 45\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result\n```"]}
{"question": "一个玻璃瓶装有含盐率为15%的盐水500克．如要配制成含盐率为5%的盐水，要加入多少克水？", "target": 1000.0, "answer": 200.0, "score": 0, "generation": ["def solution():\n    # 初始盐水的重量为500克\n    initial_salt_water_weight = 500\n    # 初始盐水的盐含量为15%\n    initial_salt_percentage = 0.15\n    # 目标盐水的盐含量为5%\n    target_salt_percentage = 0.05\n    # 设加入x克水后，盐的总重量不变，即0.15 * 500 = 0.05 * (500 + x)\n    # 解方程得到 x = 200 克\n    water_to_add = 200\n    # 答案是需要加入的水的重量\n    result = water_to_add\n    # 返回答案\n    return result"]}
{"question": "3.9与2.9的和除以3.4，商=？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 计算3.9与2.9的和\n    sum_numbers = 3.9 + 2.9\n    # 计算和除以3.4的商\n    quotient = sum_numbers / 3.4\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "“6•一”节那天，新华书店举行促销活动，所有书按原价打0.85出售．小红买了一套原价是200元的《安徒生童话》丛书，打折后比原价便宜多少元？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 书的原价为200元\n    original_price = 200\n    # 折扣率为0.85\n    discount_rate = 0.85\n    # 打折后的价格 = 原价 * 折扣率\n    discounted_price = original_price * discount_rate\n    # 便宜的金额 = 原价 - 打折后的价格\n    discount_amount = original_price - discounted_price\n    # 答案是便宜的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "工程队修一条公路，计划每天修100米，40天完成．实际2天就修了800米，照这样的速度，多少天可以完成？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 计划每天修的距离为100米\n    planned_distance_per_day = 100\n    # 计划完成整条公路需要的天数为40天\n    planned_days = 40\n    # 实际2天就修了800米\n    actual_distance_in_2_days = 800\n    # 实际每天的修路速度 = 实际2天修的距离 / 2\n    actual_speed_per_day = actual_distance_in_2_days / 2\n    # 按照实际速度，完成整条公路需要的天数 = 总距离 / 实际每天的修路速度\n    actual_days = (planned_distance_per_day * planned_days) / actual_speed_per_day\n    # 答案是实际完成整条公路需要的天数\n    result = actual_days\n    # 返回答案\n    return result"]}
{"question": "(4/5)+(3/15)=．", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 计算(4/5) + (3/15)\n    result = (4/5) + (3/15)\n    # 返回答案\n    return result"]}
{"question": "一件衣服打0.8出售，比原价便宜32元，原价多少元．", "target": 160.0, "answer": 160.00000000000003, "score": 1, "generation": ["def solution():\n    # 打折后的售价是原价的0.8\n    discounted_price_ratio = 0.8\n    # 便宜了32元\n    discount_amount = 32\n    # 售价 = 原价 - 32\n    # 售价 = 原价 * 0.8\n    # 所以原价 * 0.8 - 32 = 原价\n    # 整理得到原价 = 32 / (1 - 0.8)\n    original_price = discount_amount / (1 - discounted_price_ratio)\n    # 答案是原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "一个数除以7，商是9，余数最大=．", "target": 6.0, "answer": "", "score": 0, "generation": ["这个问题中，我们需要找到一个数除以7的余数最大值。\n\n首先，我们知道商是9，那么这个数可以表示为7 * 9 + 余数。\n\n为了使余数最大，我们需要找到小于7的最大余数，即6。\n\n因此，余数最大值为6。\n\n现在让我们用Python代码来表示这个过程：\n\n```python\ndef solution():\n    # 商是9\n    quotient = 9\n    # 除数是7\n    divisor = 7\n    # 余数最大值为除数-1\n    remainder = divisor - 1\n    # 答案是余数最大值\n    result = remainder\n    # 返回答案\n    return result\n```"]}
{"question": "一种毛衣，原价56元，现在的价钱比原来降低了(2/7)，降价多少钱？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 毛衣的原价为56元\n    original_price = 56\n    # 降价比例为(2/7)\n    discount_fraction = 2/7\n    # 降价的金额 = 原价 * 降价比例\n    discount_amount = original_price * discount_fraction\n    # 答案是降价的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "在1200米的跑道上等距离植树，最少要种多少棵树，才能保证至少有两棵树之间的距离小于15．", "target": 82.0, "answer": "", "score": 0, "generation": ["首先，我们计算1200米跑道上最多可以种植多少棵树，使得任意两棵树之间的距离都大于等于15米。\n\n最多种植的树的数量 = 1200 / 15 = 80棵树\n\n因此，为了保证至少有两棵树之间的距离小于15米，我们需要种植81棵树。\n\n现在让我们来编写这个问题的Python代码。\n\n```python\ndef solution():\n    # 跑道的长度为1200米\n    track_length = 1200\n    # 每棵树之间的最小距离为15米\n    min_distance = 15\n    # 计算最多可以种植的树的数量\n    max_trees = track_length // min_distance\n    # 为了保证至少有两棵树之间的距离小于15米，需要种植的树的数量为最多树的数量加1\n    min_trees = max_trees + 1\n    # 答案是需要种植的树的数量\n    result = min_trees\n    # 返回答案\n    return result\n```"]}
{"question": "某地的水库4周有长为8080米的防水堤，堤上每隔8米栽一棵树，然后在相邻的两棵树之间栽一棵柳树，应该准备两种树各多少棵？", "target": [1010.0, 1010.0], "answer": "", "score": 0, "generation": ["def solution():\n    # 防水堤的总长度为8080米\n    total_length = 8080\n    # 每隔8米栽一棵树\n    tree_interval = 8\n    # 每隔8米栽一棵树，相邻两棵树之间栽一棵柳树，所以总共是3棵树\n    total_trees = 3\n    # 树和柳树的间隔为8米，所以每4棵树为一个循环，包括2棵树和1棵柳树\n    cycle_length = tree_interval * total_trees\n    # 总共有多少个循环\n    total_cycles = total_length // cycle_length\n    # 树的数量为每个循环2棵\n    tree_count = total_cycles * 2\n    # 柳树的数量为每个循环1棵\n    willow_count = total_cycles * 1\n    # 答案是树和柳树的数量\n    result = (tree_count, willow_count)\n    # 返回答案\n    return result"]}
{"question": "压路机的滚筒是圆柱体，它的长是2米，滚筒横截面的半径是0.6米．如果每分转动5周，每分可以压多大的路面？（π取3.14）", "target": 37.68, "answer": 37.68, "score": 1, "generation": ["def solution():\n    # 滚筒的长度为2米\n    length = 2\n    # 滚筒横截面的半径为0.6米\n    radius = 0.6\n    # 每分钟转动5周，即每分钟转动5 * 2 * π * radius 米\n    distance_per_minute = 5 * 2 * 3.14 * radius\n    # 每分钟可以压多大的路面 = 滚筒的长度 * 每分钟转动的距离\n    area_per_minute = length * distance_per_minute\n    # 答案是每分钟可以压多大的路面\n    result = area_per_minute\n    # 返回答案\n    return result"]}
{"question": "一个因数=，另一个因数是44，则它们的积是836．", "target": 19.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 一个因数为x，另一个因数为44\n    factor_1 = x\n    factor_2 = 44\n    # 它们的积为836\n    product = 836\n    # 因为积等于因数1乘以因数2，所以 x * 44 = 836\n    # 解方程得到 x = 836 / 44\n    x = product / factor_2\n    # 答案是一个因数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一辆小汽车的速度是60千米/时，一辆货车的速度是48千米/时，两车从甲地同时出发到乙地，小汽车4小时到达乙地，货车要几小时才能到达乙地？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 小汽车的速度是60千米/时\n    speed_car = 60\n    # 货车的速度是48千米/时\n    speed_truck = 48\n    # 小汽车到达乙地用了4小时\n    time_car = 4\n    # 货车的到达时间 = 小汽车到达时间 * (小汽车速度 / 货车速度)\n    time_truck = time_car * (speed_car / speed_truck)\n    # 答案是货车到达乙地所需的时间\n    result = time_truck\n    # 返回答案\n    return result"]}
{"question": "张老师在文具店里买了一支钢笔和一本书，一支钢笔的单价15.8元，比一本书的单价少1.2元，张老师一共用了多少元？", "target": 32.8, "answer": 32.8, "score": 1, "generation": ["def solution():\n    # 钢笔的单价为15.8元\n    price_pen = 15.8\n    # 书的单价比钢笔少1.2元\n    price_book = price_pen + 1.2\n    # 张老师买了一支钢笔和一本书，总共花费 = 钢笔单价 + 书单价\n    total_cost = price_pen + price_book\n    # 答案是张老师一共用的钱数\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "一根绳子长120米，第一次用去全长的(2/5)，第二次用去40米，这根绳子短了多少米？", "target": 88.0, "answer": 32.0, "score": 0, "generation": ["def solution():\n    # 绳子的总长度为120米\n    total_length = 120\n    # 第一次用去全长的(2/5)\n    first_usage_fraction = 2/5\n    # 第二次用去40米\n    second_usage = 40\n    # 第一次用掉的长度 = 总长度 * 第一次使用比例\n    first_usage_length = total_length * first_usage_fraction\n    # 剩余长度 = 总长度 - 第一次使用长度 - 第二次使用长度\n    remaining_length = total_length - first_usage_length - second_usage\n    # 答案是绳子短了多少米\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "修一条长12000米的公路，原计划每天修300米，结果30天完成了任务，实际比原计划每天多修多少米？", "target": 100.0, "answer": -3000.0, "score": 0, "generation": ["def solution():\n    # 公路的总长度为12000米\n    total_length = 12000\n    # 原计划每天修的长度为300米\n    planned_daily_length = 300\n    # 实际完成任务的天数为30天\n    actual_days = 30\n    # 原计划完成任务需要的总天数 = 总长度 / 每天修的长度\n    planned_total_days = total_length / planned_daily_length\n    # 实际比原计划多修的长度 = 实际完成的长度 - 总长度\n    extra_length = actual_days * planned_daily_length - total_length\n    # 答案是实际比原计划多修的长度\n    result = extra_length\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树120棵，苹果树是桃树棵数的(3/4)，这两种树共有多少棵？", "target": 210.0, "answer": 210.0, "score": 1, "generation": ["def solution():\n    # 桃树的数量是120棵\n    num_peach_trees = 120\n    # 苹果树是桃树数量的(3/4)\n    num_apple_trees = (3/4) * num_peach_trees\n    # 这两种树共有的数量 = 桃树数量 + 苹果树数量\n    total_trees = num_peach_trees + num_apple_trees\n    # 答案是这两种树共有的数量\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "汽车3小时行驶243千米，火车6小时行驶606千米，火车的速度比汽车的速度快多少千米？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的时间为3小时\n    time_car = 3\n    # 汽车行驶的距离为243千米\n    distance_car = 243\n    # 火车行驶的时间为6小时\n    time_train = 6\n    # 火车行驶的距离为606千米\n    distance_train = 606\n    # 汽车的速度 = 距离 / 时间\n    speed_car = distance_car / time_car\n    # 火车的速度 = 距离 / 时间\n    speed_train = distance_train / time_train\n    # 火车比汽车快的距离 = 火车速度 - 汽车速度\n    speed_difference = speed_train - speed_car\n    # 答案是火车比汽车快的距离\n    result = speed_difference\n    # 返回答案\n    return result"]}
{"question": "电视机厂计划30天生产电视机1200台，实际每天比计划多生产10台，实际多少天完成任务？", "target": 24.0, "answer": 24.0, "score": 1, "generation": ["def solution():\n    # 计划生产电视机的总台数为1200台\n    planned_total_tv = 1200\n    # 计划生产电视机的总天数为30天\n    planned_days = 30\n    # 每天比计划多生产的台数为10台\n    extra_per_day = 10\n    # 实际每天生产的台数 = 计划生产的台数 / 计划天数 + 每天多生产的台数\n    actual_per_day = planned_total_tv / planned_days + extra_per_day\n    # 实际完成任务所需天数 = 计划生产的台数 / 实际每天生产的台数\n    actual_days = planned_total_tv / actual_per_day\n    # 答案是实际完成任务所需天数\n    result = actual_days\n    # 返回答案\n    return result"]}
{"question": "4（1）班共有50人参加语、数、英3科的兴趣小组．其中参加数学兴趣小组有20人，参加语文兴趣小组有15人，只参加英语兴趣小组的有24人．数学、语文两个兴趣小组都参加的有多少人．", "target": 9.0, "answer": "", "score": 0, "generation": ["首先，我们可以通过设定变量来表示题目中提到的人数情况：\n\n令参加数学兴趣小组的人数为 a = 20 人，\n\n参加语文兴趣小组的人数为 b = 15 人，\n\n只参加英语兴趣小组的人数为 c = 24 人。\n\n我们需要找到同时参加数学和语文兴趣小组的人数，即 a ∩ b。\n\n根据容斥原理，我们可以利用集合的关系来求解：\n\na ∪ b = a + b - a ∩ b\n\n根据题意可知，\n\na = 20,\n\nb = 15,\n\nc = 24.\n\n代入上述公式，得到：\n\n20 + 15 - a ∩ b = 50\n\n35 - a ∩ b = 50\n\na ∩ b = 35 - 50\n\na ∩ b = 15\n\n因此，同时参加数学和语文兴趣小组的人数为 15 人。\n\n接下来，我们将上述推理用 Python 代码表示出来：\n\n```python\ndef solution():\n    # 参加数学兴趣小组的人数为 20 人\n    num_math = 20\n    # 参加语文兴趣小组的人数为 15 人\n    num_chinese = 15\n    # 只参加英语兴趣小组的人数为 24 人\n    num_english = 24\n    # 同时参加数学和语文兴趣小组的人数为 a ∩ b\n    # 根据容斥原理，a ∪ b = a + b - a ∩ b\n    # 根据题意，a ∪ b + c = total_students\n    total_students = 50\n    # 则 a ∩ b = a + b - a ∪ b\n    num_math_chinese = num_math + num_chinese - total_students + num_english\n    # 答案是同时参加数学和语文兴趣小组的人数\n    result ="]}
{"question": "3.6比一个数的25%少1.2，求这个数．", "target": 19.2, "answer": 6.3999999999999995, "score": 0, "generation": ["def solution():\n    # 3.6比一个数的25%少1.2\n    difference = 1.2\n    percentage = 0.25\n    # 计算这个数\n    number = (3.6 + difference) / (1 - percentage)\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "小明看一本书，第一天看了全书的(1/7)，第二天看了27页，两天共看的页数与剩下页数的比是2：3，这本书共有多少页？", "target": 105.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天看了全书的(1/7)\n    fraction_day1 = 1/7\n    # 第二天看了27页\n    pages_day2 = 27\n    # 两天共看的页数与剩下页数的比是2：3\n    ratio = 2/3\n    # 设总页数为x\n    # 第一天看的页数 = x * fraction_day1\n    pages_day1 = x * fraction_day1\n    # 两天共看的页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_day1 + pages_day2\n    # 剩下的页数 = x - total_pages_read\n    remaining_pages = x - total_pages_read\n    # 根据比例关系，有 2 / 3 = total_pages_read / remaining_pages\n    # 解方程得到 x = 315\n    x = 315\n    # 答案是这本书共有315页\n    result = x\n    # 返回答案\n    return result"]}
{"question": "在一个有余数的除法算式里，余数是5，那么除数最小=．", "target": 6.0, "answer": "", "score": 0, "generation": ["余数是5，说明被除数至少比除数大5，所以除数最小为6。\n\n# solution in Python:\n\ndef solution():\n    # 余数为5\n    remainder = 5\n    # 除数最小为余数加1\n    divisor_min = remainder + 1\n    # 答案是除数最小值\n    result = divisor_min\n    # 返回答案\n    return result"]}
{"question": "小明用10.2元买文具，买了6支铅笔，每支0.45元，余下的钱买圆珠笔，每支2.5元，可以买多少支？", "target": 3.0, "answer": 2.9999999999999996, "score": 1, "generation": ["def solution():\n    # 小明用了10.2元\n    total_money = 10.2\n    # 铅笔的价格是每支0.45元\n    price_pencil = 0.45\n    # 铅笔的数量是6支\n    num_pencils = 6\n    # 小明买铅笔花的钱 = 铅笔的价格 * 铅笔的数量\n    money_spent_on_pencils = price_pencil * num_pencils\n    # 余下的钱 = 总钱数 - 买铅笔花的钱\n    remaining_money = total_money - money_spent_on_pencils\n    # 圆珠笔的价格是每支2.5元\n    price_ballpen = 2.5\n    # 可以买的圆珠笔数量 = 余下的钱 / 圆珠笔的价格\n    num_ballpens = remaining_money / price_ballpen\n    # 答案是可以买的圆珠笔数量\n    result = num_ballpens\n    # 返回答案\n    return result"]}
{"question": "有210吨黄沙要运到建筑工地，第一次运走了总数的(1/3)，第二次运走总数的40%，还要运多少吨才能运完？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 黄沙的总重量为210吨\n    total_sand = 210\n    # 第一次运走了总数的(1/3)\n    first_fraction = 1/3\n    # 第二次运走总数的40%\n    second_fraction = 0.4\n    # 第一次运走的黄沙重量 = 总重量 * 第一次比例\n    first_transport = total_sand * first_fraction\n    # 第二次运走的黄沙重量 = 总重量 * 第二次比例\n    second_transport = total_sand * second_fraction\n    # 剩余要运的黄沙重量 = 总重量 - 第一次运走的重量 - 第二次运走的重量\n    remaining_sand = total_sand - first_transport - second_transport\n    # 答案是剩余要运的黄沙重量\n    result = remaining_sand\n    # 返回答案\n    return result"]}
{"question": "妈妈带了500元钱，给我买了一双鞋花了228元，买一条裙子花了172元．还剩多少元？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 妈妈带了500元钱\n    total_money = 500\n    # 买了一双鞋花了228元\n    cost_shoes = 228\n    # 买一条裙子花了172元\n    cost_dress = 172\n    # 花掉的总钱数 = 买鞋的钱 + 买裙子的钱\n    total_spent = cost_shoes + cost_dress\n    # 剩余的钱数 = 总钱数 - 花掉的钱数\n    remaining_money = total_money - total_spent\n    # 答案是剩余的钱数\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "同学们沿小路一侧植树（两端都种），每隔8米种一棵，一共种了40棵．这条小路有多少米？", "target": 312.0, "answer": 273.0, "score": 0, "generation": ["def solution():\n    # 每隔8米种一棵树\n    tree_interval = 8\n    # 一共种了40棵树\n    total_trees = 40\n    # 因为两端都有树，所以实际种树的间隔为7米\n    actual_interval = tree_interval - 1\n    # 小路的长度 = (树的数量 - 1) * 实际种树的间隔\n    road_length = (total_trees - 1) * actual_interval\n    # 答案是小路的长度\n    result = road_length\n    # 返回答案\n    return result"]}
{"question": "小明看一本180页的故事书，已经看了(3/5)，已看了多少页？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为180页\n    total_pages = 180\n    # 已经看了(3/5)的比例\n    read_fraction = 3/5\n    # 已经看了的页数 = 总页数 * 已经看的比例\n    pages_read = total_pages * read_fraction\n    # 答案是已经看了的页数\n    result = pages_read\n    # 返回答案\n    return result"]}
{"question": "一个棱长为6分米的正方体木块的表面积=多少平方分米．", "target": 216.0, "answer": 216.0, "score": 1, "generation": ["def solution():\n    # 正方体木块的棱长为6分米\n    edge_length = 6\n    # 正方体木块的表面积 = 6 * (棱长的平方)\n    surface_area = 6 * (edge_length ** 2)\n    # 答案是正方体木块的表面积\n    result = surface_area\n    # 返回答案\n    return result"]}
{"question": "佳怡家去年收苹果650千克，今年比去年增产5%，今年收苹果多少千克？", "target": 682.5, "answer": 682.5, "score": 1, "generation": ["def solution():\n    # 去年收苹果的重量为650千克\n    last_year_harvest = 650\n    # 今年增产了5%\n    increase_percentage = 0.05\n    # 今年收苹果的重量 = 去年收苹果的重量 * (1 + 增产百分比)\n    this_year_harvest = last_year_harvest * (1 + increase_percentage)\n    # 答案是今年收苹果的重量\n    result = this_year_harvest\n    # 返回答案\n    return result"]}
{"question": "一桶油，第一次倒出40%，第二次比第一次少倒出10千克，桶里还剩30千克，这桶油原来有多少千克．", "target": 100.0, "answer": 3.9215686274509807, "score": 0, "generation": ["def solution():\n    # 桶里还剩30千克油\n    remaining_oil = 30\n    # 第一次倒出40%，第二次比第一次少倒出10千克\n    first_pour = 0.4\n    second_pour_less = 10\n    # 设桶里原来有x千克油\n    # 第一次倒出的油量为40% * x\n    # 第二次倒出的油量为(40% - 10) * x\n    # 剩余油量为x - 第一次倒出的油量 - 第二次倒出的油量\n    # 根据题意，剩余油量为30千克\n    # 解方程得到x的值\n    x = (remaining_oil + second_pour_less) / (1 - first_pour - (first_pour - second_pour_less))\n    # 答案是桶里原来有多少千克油\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一个数学检测只有两道题，结果全班有12人全对，有一题有27人做对，第二道题有21人做错，两道题都做错的有多少人．", "target": 6.0, "answer": -36.0, "score": 0, "generation": ["def solution():\n    # 全班有12人全对\n    all_correct = 12\n    # 有一题有27人做对\n    one_correct = 27\n    # 第二道题有21人做错\n    second_wrong = 21\n    # 两道题都做错的人数 = 全对的人数 - 有一题做对的人数 - 第二题做错的人数\n    both_wrong = all_correct - one_correct - second_wrong\n    # 答案是两道题都做错的人数\n    result = both_wrong\n    # 返回答案\n    return result"]}
{"question": "王大妈收了(1/2)吨瓜，第一天卖出总数的(1/5)，第二天卖出总数的(1/6)，还剩总数的几分之几没卖出？", "target": 0.6333333333333333, "answer": 0.6333333333333334, "score": 1, "generation": ["def solution():\n    # 王大妈收了的瓜数量为(1/2)吨\n    total_melons = 1/2\n    # 第一天卖出总数的(1/5)\n    sold_fraction_day1 = 1/5\n    # 第二天卖出总数的(1/6)\n    sold_fraction_day2 = 1/6\n    # 第一天卖出的瓜数量 = 总数 * 第一天卖出比例\n    sold_melons_day1 = total_melons * sold_fraction_day1\n    # 第二天卖出的瓜数量 = 总数 * 第二天卖出比例\n    sold_melons_day2 = total_melons * sold_fraction_day2\n    # 剩余的瓜数量 = 总数 - 第一天卖出数量 - 第二天卖出数量\n    remaining_melons = total_melons - sold_melons_day1 - sold_melons_day2\n    # 剩余的瓜数量占总数的比例 = 剩余的瓜数量 / 总数\n    fraction_remaining = remaining_melons / total_melons\n    # 答案是剩余总数的几分之几没卖出\n    result = fraction_remaining\n    # 返回答案\n    return result"]}
{"question": "一辆汽车每小时行驶80千米，从甲地到乙地共行驶了(4/5)小时．甲、乙两地相距多少千米？", "target": 64.0, "answer": 100.0, "score": 0, "generation": ["def solution():\n    # 汽车的速度是每小时行驶80千米\n    speed = 80\n    # 汽车行驶的时间是总时间的(4/5)\n    time_fraction = 4/5\n    # 汽车行驶的总时间 = 1小时 / 汽车行驶的时间比例\n    total_time = 1 / time_fraction\n    # 甲、乙两地的距离 = 速度 * 总时间\n    distance = speed * total_time\n    # 答案是甲、乙两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "张师傅去商店买大米，由于售货员疏忽，少给了他10斤大米，但收了他36元钱，已知每3斤大米1.2元．问售货员给了张师傅多少斤大米？", "target": 80.0, "answer": 100.00000000000001, "score": 0, "generation": ["def solution():\n    # 每3斤大米的价格为1.2元\n    price_per_3kg = 1.2\n    # 收了张师傅36元，少给了他10斤大米\n    total_paid = 36\n    missing_rice = 10\n    # 每斤大米的价格 = 每3斤的价格 / 3\n    price_per_kg = price_per_3kg / 3\n    # 少给的大米价值 = 少给的大米数量 * 每斤的价格\n    missing_value = missing_rice * price_per_kg\n    # 售货员给的大米数量 = 收的钱数 / 每斤的价格\n    rice_given = total_paid / price_per_kg\n    # 实际给的大米数量 = 给的大米数量 + 少给的大米数量\n    actual_rice_given = rice_given + missing_rice\n    # 答案是售货员给了张师傅的大米数量\n    result = actual_rice_given\n    # 返回答案\n    return result"]}
{"question": "玲玲和丫丫两人相距200米，玲玲在前每秒跑3米，丫丫在后每秒跑5米．两人同时出发，同向而行，几秒后丫丫能追上玲玲？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 玲玲每秒跑3米\n    speed_lingling = 3\n    # 丫丫每秒跑5米\n    speed_yaya = 5\n    # 两人相距200米\n    distance = 200\n    # 两人同向而行，丫丫追上玲玲需要的时间 = 相距距离 / 两人速度之差\n    time_to_catch_up = distance / (speed_yaya - speed_lingling)\n    # 答案是丫丫追上玲玲需要的时间\n    result = time_to_catch_up\n    # 返回答案\n    return result"]}
{"question": "540=多少的20倍．", "target": 27.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 540等于多少的20倍\n    total = 540\n    # 用x表示未知数\n    # 20倍的表达式为20*x\n    expression = 20 * x\n    # 根据题意，20*x = 540\n    # 解方程得到x = 540 / 20\n    x = total / 20\n    # 答案是x的值\n    result = x\n    # 返回答案\n    return result"]}
{"question": "小刚看一本课外书，第一天看了全书的(2/5)，第二天看了全书的(3/7)．小军两天一共看了这本书的几分之几？", "target": 0.8285714285714286, "answer": 0.657142857142857, "score": 0, "generation": ["def solution():\n    # 第一天看了全书的(2/5)\n    fraction_day1 = 2/5\n    # 第二天看了全书的(3/7)\n    fraction_day2 = 3/7\n    # 两天一共看了这本书的几分之几 = 第一天看的比例 + 第二天看的比例\n    total_fraction = fraction_day1 + fraction_day2 - (fraction_day1 * fraction_day2)\n    # 答案是两天一共看了这本书的几分之几\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "(12/5)小时的(7/24)=多少小时．", "target": 0.7, "answer": 0.7000000000000001, "score": 1, "generation": ["def solution():\n    # 计算(12/5)小时的(7/24)\n    result = (12/5) * (7/24)\n    # 返回答案\n    return result"]}
{"question": "小丽和小强共同打一份稿纸，他们打字速度比是5：3，完成任务时，小丽比小强多打1400个字．这份稿件共有多少个字．", "target": 5600.0, "answer": 2240.0, "score": 0, "generation": ["def solution():\n    # 小丽和小强的打字速度比是5：3\n    ratio = 5 / 3\n    # 小丽比小强多打了1400个字\n    extra_words = 1400\n    # 小丽多打的字数占总字数的比例为8（5+3）\n    extra_ratio = 5 / 8\n    # 小丽多打的字数 = 总字数 * 小丽多打的比例\n    total_words = extra_words / extra_ratio\n    # 答案是这份稿件共有的字数\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "三年级同学做操，如果每排站12人，可以站20排；如果每排站8人，可以站几排？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 每排站12人，可以站20排\n    num_per_row_12 = 12\n    num_rows_20 = 20\n    # 每排站8人，假设可以站x排\n    num_per_row_8 = 8\n    # 因为总人数不变，根据比例关系，12 * 20 = 8 * x\n    num_rows_8 = (num_per_row_12 * num_rows_20) / num_per_row_8\n    # 答案是可以站的排数\n    result = num_rows_8\n    # 返回答案\n    return result"]}
{"question": "《成长日记》一书有252页，小华前5天一共看了60页，照这样计算，余下的还需多少天看完？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 《成长日记》一书有252页\n    total_pages = 252\n    # 小华前5天一共看了60页\n    pages_read = 60\n    # 小华每天看的页数 = 前5天看的页数 / 天数\n    daily_pages_read = pages_read / 5\n    # 剩余需要看的页数 = 总页数 - 前5天看的页数\n    remaining_pages = total_pages - pages_read\n    # 需要多少天看完 = 剩余需要看的页数 / 每天看的页数\n    days_needed = remaining_pages / daily_pages_read\n    # 答案是需要多少天看完\n    result = days_needed\n    # 返回答案\n    return result"]}
{"question": "小丽读一本故事书，第一天读了全书的10%，以后每天读21页，又读了6天正好读完．这本书一共有多少页？", "target": 140.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一天读了全书的10%\n    first_day_fraction = 0.1\n    # 每天读的页数为21页\n    daily_pages = 21\n    # 总共读了6天\n    total_days = 6\n    # 以后每天读的页数\n    remaining_daily_pages = daily_pages * (1 - first_day_fraction)\n    # 6天内读完剩余的页数\n    remaining_pages = remaining_daily_pages * total_days\n    # 第一天读的页数 = 总页数 * 第一天读的比例\n    first_day_pages = first_day_fraction * total_pages\n    # 总页数 = 第一天读的页数 + 剩余的页数\n    total_pages = first_day_pages + remaining_pages\n    # 答案是这本书一共有多少页\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "甲、乙两城相距875千米，一辆汽车以每小时48千米从甲城开出，行驶11小时，离乙城还有多少千米？", "target": 347.0, "answer": 347.0, "score": 1, "generation": ["def solution():\n    # 两城相距875千米\n    distance = 875\n    # 汽车速度为每小时48千米\n    speed = 48\n    # 汽车行驶时间为11小时\n    time = 11\n    # 汽车行驶距离 = 速度 * 时间\n    distance_traveled = speed * time\n    # 离乙城还有的距离 = 两城距离 - 汽车行驶距离\n    distance_to_B = distance - distance_traveled\n    # 答案是离乙城还有的距离\n    result = distance_to_B\n    # 返回答案\n    return result"]}
{"question": "一个圆柱体的表面积比侧面积大6.28dm^2，高是10dm．这个圆柱体的体积=多少dm^3．", "target": 31.4, "answer": 62.80000000000002, "score": 0, "generation": ["def solution():\n    # 圆柱体的高度为10dm\n    height = 10\n    # 圆柱体的侧面积与底面积之比为2:1\n    side_to_base_ratio = 2\n    # 圆柱体的侧面积与底面积之和为表面积\n    # 表面积 - 侧面积 = 底面积\n    # 表面积 = 2 * 圆周率 * 半径 * (半径 + 高度)\n    # 侧面积 = 圆周率 * 半径 * 高度\n    # 底面积 = 圆周率 * 半径^2\n    # 表面积 - 侧面积 = 圆周率 * 半径^2\n    # 圆周率 * 半径^2 = 6.28\n    radius = (6.28 / 3.14) ** 0.5\n    # 底面积 = 圆周率 * 半径^2\n    base_area = 3.14 * radius ** 2\n    # 侧面积 = 圆周率 * 半径 * 高度\n    side_area = 3.14 * radius * height\n    # 表面积 = 2 * 圆周率 * 半径 * (半径 + 高度)\n    surface_area = 2 * 3.14 * radius * (radius + height)\n    # 圆柱体的体积 = 底面积 * 高度\n    volume = base_area * height\n    # 答案是圆柱体的体积\n    result = volume\n    # 返回答案\n    return result"]}
{"question": "一个饲养场，养鸭1200只，养的鸡比养的鸭多(3/5)，养的鸡比鸭多多少只？", "target": 720.0, "answer": 720.0, "score": 1, "generation": ["def solution():\n    # 饲养场养的鸭的数量为1200只\n    num_ducks = 1200\n    # 饲养场养的鸡比鸭多(3/5)\n    ratio_chicken_to_ducks = 3/5\n    # 饲养场养的鸡的数量 = 鸭的数量 * (养的鸡比鸭多的比例 + 1)\n    num_chickens = num_ducks * (ratio_chicken_to_ducks + 1)\n    # 养的鸡比鸭多的数量 = 饲养场养的鸡的数量 - 鸭的数量\n    difference = num_chickens - num_ducks\n    # 答案是养的鸡比鸭多的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "水果店运进36筐水果，每筐25千克．卖出320千克，还剩多少千克？", "target": 580.0, "answer": 580.0, "score": 1, "generation": ["def solution():\n    # 水果店运进的筐数为36筐\n    total_baskets = 36\n    # 每筐水果的重量为25千克\n    weight_per_basket = 25\n    # 卖出的总重量为320千克\n    sold_weight = 320\n    # 运进的总重量 = 筐数 * 每筐重量\n    total_weight = total_baskets * weight_per_basket\n    # 剩余的重量 = 总重量 - 卖出的重量\n    remaining_weight = total_weight - sold_weight\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "图书馆购进一批新书，其中385本是科技书，710本是文艺书，其余是连环画．连环画占总数的25%，这批新书有多少本？", "target": 1460.0, "answer": 1368.75, "score": 0, "generation": ["def solution():\n    # 科技书的数量为385本\n    num_science_books = 385\n    # 文艺书的数量为710本\n    num_literature_books = 710\n    # 连环画占总数的25%\n    comics_percentage = 0.25\n    # 连环画的数量 = 总数 * 连环画所占比例\n    num_comics = (num_science_books + num_literature_books) * comics_percentage\n    # 总书的数量 = 科技书数量 + 文艺书数量 + 连环画数量\n    total_books = num_science_books + num_literature_books + num_comics\n    # 答案是这批新书的总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "郭海燕同学买了3本《科学趣谈》，付了50元，找回8元．每本多少元？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 郭海燕同学买了3本书，总共付了50元\n    total_payment = 50\n    # 找回的金额为8元\n    change = 8\n    # 实际购买的总价 = 3本书的价格\n    total_price = total_payment - change\n    # 每本书的价格 = 实际购买的总价 / 3本书\n    price_per_book = total_price / 3\n    # 答案是每本书的价格\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "小明0.5小时行走2.6千米，一只蜜蜂的飞行速度是小明的3.8倍．这只蜜蜂每小时飞行多少千米？", "target": 19.76, "answer": 19.759999999999998, "score": 1, "generation": ["def solution():\n    # 小明0.5小时行走2.6千米\n    distance_walked_by_xiaoming = 2.6\n    time_walked_by_xiaoming = 0.5\n    # 计算小明的速度\n    speed_xiaoming = distance_walked_by_xiaoming / time_walked_by_xiaoming\n    # 蜜蜂的飞行速度是小明的3.8倍\n    speed_bee_multiple = 3.8\n    # 蜜蜂的飞行速度 = 小明的速度 * 蜜蜂的速度倍数\n    speed_bee = speed_xiaoming * speed_bee_multiple\n    # 答案是蜜蜂每小时飞行的千米数\n    result = speed_bee\n    # 返回答案\n    return result"]}
{"question": "一个长方体的体积是40立方厘米，底面是边长2厘米的正方形，这个长方体的高=多少厘米．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 长方体的体积为40立方厘米\n    volume = 40\n    # 底面是边长2厘米的正方形，即底面积为2*2=4平方厘米\n    base_area = 4\n    # 长方体的体积 = 底面积 * 高\n    # 高 = 长方体的体积 / 底面积\n    height = volume / base_area\n    # 答案是长方体的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "180的(4/9)比一个数的50%少20，求这个数．", "target": 200.0, "answer": 140.0, "score": 0, "generation": ["def solution():\n    # 已知的数为180\n    known_number = 180\n    # 比例为(4/9)\n    ratio = 4/9\n    # 比一个数的50%少20，表示为 x * 0.5 = 180 * (4/9) - 20\n    unknown_number = (known_number * ratio) / 0.5 - 20\n    # 答案是这个数\n    result = unknown_number\n    # 返回答案\n    return result"]}
{"question": "5（1）班昨天的出勤率是96%，昨天48人到校，多少人有事请假．", "target": 2.0, "answer": 1.9200000000000017, "score": 0, "generation": ["def solution():\n    # 昨天到校的总人数为48人\n    total_students = 48\n    # 昨天的出勤率是96%\n    attendance_rate = 0.96\n    # 实际到校人数 = 总人数 * 出勤率\n    present_students = total_students * attendance_rate\n    # 有事请假的人数 = 总人数 - 实际到校人数\n    absent_students = total_students - present_students\n    # 答案是有事请假的人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "何老师买了110本故事书，114本科技书，平均分给14个读书小组，每组可以分得多少本？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 何老师买了110本故事书\n    num_story_books = 110\n    # 何老师买了114本科技书\n    num_science_books = 114\n    # 何老师平均分给14个读书小组\n    num_groups = 14\n    # 每组可以分得故事书的数量 = 故事书总数 / 小组数\n    story_books_per_group = num_story_books / num_groups\n    # 每组可以分得科技书的数量 = 科技书总数 / 小组数\n    science_books_per_group = num_science_books / num_groups\n    # 答案是每组可以分得的书的总数\n    result = story_books_per_group + science_books_per_group\n    # 返回答案\n    return result"]}
{"question": "比25多9的数=．", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 比25多9的数\n    result = 25 + 9\n    # 答案是比25多9的数\n    return result"]}
{"question": "二年级买来科技书16本，故事书26本．把这些书平均分给二年级7个班，平均每个班分多少本？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 科技书的数量为16本\n    num_science_books = 16\n    # 故事书的数量为26本\n    num_story_books = 26\n    # 二年级有7个班\n    num_classes = 7\n    # 总共的书籍数量 = 科技书数量 + 故事书数量\n    total_books = num_science_books + num_story_books\n    # 平均每个班分到的书籍数量 = 总共的书籍数量 / 班级数量\n    books_per_class = total_books / num_classes\n    # 答案是平均每个班分到的书籍数量\n    result = books_per_class\n    # 返回答案\n    return result"]}
{"question": "一堆煤，第一次用去40%，第二次用去原来总量的(1/3)，还剩余12吨．这堆煤共有多少吨？", "target": 45.0, "answer": 30.000000000000004, "score": 0, "generation": ["def solution():\n    # 假设原始煤的总量为x吨\n    # 第一次用去40%，剩余60%\n    remaining_after_first_use = 0.6\n    # 第二次用去原来总量的(1/3)，剩余2/3\n    remaining_after_second_use = 2/3\n    # 剩余煤的量 = 原始煤的总量 * 剩余比例\n    # 根据题意，剩余煤的量为12吨\n    x = 12 / (remaining_after_first_use * remaining_after_second_use)\n    # 答案是煤的总量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一根4.8米长的竹竿直插入水池中，竹竿的入泥部分是0.4米，露出水面的部分是0.8米，池水深多少？", "target": 3.6, "answer": 3.5999999999999996, "score": 1, "generation": ["def solution():\n    # 竹竿的总长度为4.8米\n    total_length = 4.8\n    # 入泥部分长度为0.4米\n    submerged_part = 0.4\n    # 露出水面部分长度为0.8米\n    exposed_part = 0.8\n    # 池水深度 = 总长度 - 入泥部分长度 - 露出水面部分长度\n    water_depth = total_length - submerged_part - exposed_part\n    # 答案是池水的深度\n    result = water_depth\n    # 返回答案\n    return result"]}
{"question": "一根绳子的长度等于它本身长度的(1/3)+10米，这绳子长多少米．", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 设绳子的长度为x米\n    # 根据题意，x = x*(1/3) + 10\n    # 化简得到 2*x = 30\n    # 解方程得到 x = 15\n    # 绳子的长度为15米\n    result = 15\n    return result"]}
{"question": "光明小学新建了一幢8层的数字楼，每层有5个教室，每个教室放24张课桌，一共需要多少张课桌？", "target": 960.0, "answer": 960.0, "score": 1, "generation": ["def solution():\n    # 数字楼的总层数为8层\n    total_floors = 8\n    # 每层的教室数量为5个\n    classrooms_per_floor = 5\n    # 每个教室放置的课桌数量为24张\n    desks_per_classroom = 24\n    # 总共需要的课桌数量 = 总层数 * 每层教室数量 * 每个教室课桌数量\n    total_desks = total_floors * classrooms_per_floor * desks_per_classroom\n    # 答案是总共需要的课桌数量\n    result = total_desks\n    # 返回答案\n    return result"]}
{"question": "学校图书馆有故事书1820本，是科技书的2倍．借出一部分科技书后，剩下科技书900本．借出科技书多少本？", "target": 10.0, "answer": 2740.0, "score": 0, "generation": ["def solution():\n    # 图书馆故事书的数量为1820本\n    num_story_books = 1820\n    # 科技书的数量是故事书的2倍\n    num_tech_books = 2 * num_story_books\n    # 剩下的科技书数量为900本\n    remaining_tech_books = 900\n    # 借出的科技书数量 = 科技书总数 - 剩下的科技书数量\n    borrowed_tech_books = num_tech_books - remaining_tech_books\n    # 答案是借出的科技书数量\n    result = borrowed_tech_books\n    # 返回答案\n    return result"]}
{"question": "一项工程，由于采用了先进技术，只用了14.4万元，比原计划节约投资3.6万元，节约了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 实际使用的投资为14.4万元\n    actual_investment = 14.4\n    # 原计划投资比实际投资多3.6万元\n    saved_investment = 3.6\n    # 节约的投资金额占原计划投资的百分比\n    saved_percentage = (saved_investment / (actual_investment + saved_investment)) * 100\n    # 答案是节约的百分比\n    result = saved_percentage\n    # 返回答案\n    return result"]}
{"question": "被除数是除数的8倍，被除数是1000，除数=．", "target": 125.0, "answer": 125.0, "score": 1, "generation": ["def solution():\n    # 被除数是1000\n    dividend = 1000\n    # 被除数是除数的8倍\n    # dividend = divisor * 8\n    # 所以，除数 = 被除数 / 8\n    divisor = dividend / 8\n    # 答案是除数\n    result = divisor\n    # 返回答案\n    return result"]}
{"question": "某个地区有一个活动：用3个空瓶可以换一瓶水，小明现在有10个空瓶，那么小明可以喝到多少瓶水．", "target": 4.0, "answer": 14.0, "score": 0, "generation": ["def solution():\n    # 每3个空瓶可以换一瓶水\n    bottles_for_water = 3\n    # 初始空瓶数量为10个\n    initial_bottles = 10\n    # 初始可以喝到的水瓶数 = 初始空瓶数量\n    total_bottles = initial_bottles\n    # 当剩余空瓶数量大于等于可以换一瓶水的空瓶数时，继续循环\n    while initial_bottles >= bottles_for_water:\n        # 可以换来的水瓶数 = 当前空瓶数量除以可以换一瓶水的空瓶数\n        bottles_from_exchange = initial_bottles // bottles_for_water\n        # 喝掉的水瓶数 = 可以换来的水瓶数\n        total_bottles += bottles_from_exchange\n        # 剩余空瓶数量 = 可以换来的水瓶数 + 剩余空瓶数量 % 可以换一瓶水的空瓶数\n        initial_bottles = bottles_from_exchange + initial_bottles % bottles_for_water\n    # 答案是小明可以喝到的水瓶数\n    result = total_bottles\n    # 返回答案\n    return result"]}
{"question": "鸭比鸡多210只，鸡的只数和鸭的只数比是2：5．鸭和鸡共有多少只？", "target": 490.0, "answer": 490.0, "score": 1, "generation": ["def solution():\n    # 鸭比鸡多210只\n    duck_extra = 210\n    # 鸡的只数和鸭的只数比是2：5\n    # 设鸡的只数为2x，鸭的只数为5x\n    # 根据比例关系，5x - 2x = 210\n    x = duck_extra / 3\n    # 鸭的只数 = 5x\n    num_ducks = 5 * x\n    # 鸡的只数 = 2x\n    num_chickens = 2 * x\n    # 鸭和鸡的总数 = 鸭的只数 + 鸡的只数\n    total_animals = num_ducks + num_chickens\n    # 答案是鸭和鸡的总数\n    result = total_animals\n    # 返回答案\n    return result"]}
{"question": "一台计算机10小时用电(12/5)千瓦时．这台计算机平均每小时用电多少千瓦时？", "target": 0.24, "answer": 0.24, "score": 1, "generation": ["def solution():\n    # 一台计算机用电10小时消耗(12/5)千瓦时\n    total_power = 12/5\n    # 平均每小时用电量 = 总用电量 / 使用小时数\n    average_power_per_hour = total_power / 10\n    # 答案是平均每小时用电量\n    result = average_power_per_hour\n    # 返回答案\n    return result"]}
{"question": "437与368的差除1932，商=？", "target": 28.0, "answer": 0.03571428571428571, "score": 0, "generation": ["def solution():\n    # 第一个数是437\n    num1 = 437\n    # 第二个数是368\n    num2 = 368\n    # 差值\n    difference = num1 - num2\n    # 除数是1932\n    divisor = 1932\n    # 商 = 差值 / 除数\n    quotient = difference / divisor\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一块铜和锡的合金中，铜与锡的比是9：5，已知铜比锡重800克，这块合金有多少克．", "target": 2800.0, "answer": 1244.4444444444443, "score": 0, "generation": ["def solution():\n    # 铜与锡的比例是9：5\n    copper_to_tin_ratio = 9 / 5\n    # 已知铜比锡重800克\n    copper_weight = 800\n    # 铜和锡的总重量 = 铜的重量 + 锡的重量\n    total_weight = copper_weight + (copper_weight / copper_to_tin_ratio)\n    # 答案是合金的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "用一只水桶装水，把水加到原来的2倍，连桶重10千克，如果把水加到原来的5倍，连桶重22千克．桶里原有水多少千克？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 假设桶里原有水x千克\n    # 加水到原来的2倍，桶的重量为10千克\n    # 则桶的重量 = x + x + 10 = 2x + 10\n    # 加水到原来的5倍，桶的重量为22千克\n    # 则桶的重量 = x + x + 22 = 5x + 22\n    # 由上面两个等式可得\n    # 2x + 10 = 5x + 22\n    # 化简得 3x = 12\n    # 解得 x = 4\n    # 桶里原有水4千克\n    original_water = 4\n    # 返回答案\n    return original_water"]}
{"question": "五年级同学一共捐款640元，四年级捐的比五年级多(1/8)，四年级同学捐款多少元？", "target": 720.0, "answer": 80.0, "score": 0, "generation": ["def solution():\n    # 五年级同学一共捐款640元\n    total_donation_fifth_grade = 640\n    # 四年级捐的比五年级多(1/8)\n    ratio_fourth_to_fifth = 1/8\n    # 四年级捐款 = 五年级捐款 * 比例\n    total_donation_fourth_grade = total_donation_fifth_grade * ratio_fourth_to_fifth\n    # 答案是四年级同学捐款的金额\n    result = total_donation_fourth_grade\n    # 返回答案\n    return result"]}
{"question": "外国语实验小学三年级学生参加浇树活动，7个班一共浇了644棵树．平均每个班浇多少棵树？", "target": 92.0, "answer": 92.0, "score": 1, "generation": ["def solution():\n    # 外国语实验小学三年级学生参加浇树活动，7个班一共浇了644棵树\n    total_trees = 644\n    num_classes = 7\n    # 平均每个班浇的树数量 = 总树数量 / 班级数量\n    trees_per_class = total_trees / num_classes\n    # 答案是平均每个班浇的树数量\n    result = trees_per_class\n    # 返回答案\n    return result"]}
{"question": "小婷跳绳原来每分钟跳75下，现在每分钟可以跳100下．原来4分钟跳的下数，现在只要跳几分钟？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 小婷原来每分钟跳的次数为75下\n    original_rate = 75\n    # 现在每分钟跳的次数为100下\n    new_rate = 100\n    # 原来4分钟跳的总次数\n    original_total = original_rate * 4\n    # 现在只要跳几分钟 = 原来4分钟跳的总次数 / 现在每分钟跳的次数\n    minutes_needed = original_total / new_rate\n    # 答案是现在只要跳的分钟数\n    result = minutes_needed\n    # 返回答案\n    return result"]}
{"question": "203-198的差乘53与27的和，积=？", "target": 400.0, "answer": 292.0, "score": 0, "generation": ["def solution():\n    # 计算203-198的差\n    difference = 203 - 198\n    # 计算差乘以53\n    product = difference * 53\n    # 计算27的和\n    sum_value = 27\n    # 计算差乘以53与27的和\n    result = product + sum_value\n    # 返回答案\n    return result"]}
{"question": "甲数是18，乙数是40，甲数是乙数的百分之几？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 甲数是18\n    num_a = 18\n    # 乙数是40\n    num_b = 40\n    # 甲数是乙数的百分之几 = (甲数 / 乙数) * 100%\n    percentage = (num_a / num_b) * 100\n    # 答案是甲数是乙数的百分之几\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "襄樊市体育场是一个直径大约是400米的圆柱形，王叔叔每天早上要绕体育场跑跑4圈一共大约跑多少米？", "target": 5026.5482, "answer": 5024.0, "score": 0, "generation": ["def solution():\n    # 圆柱形体育场的直径约为400米\n    diameter = 400\n    # 圆周率取3.14\n    pi = 3.14\n    # 半径为直径的一半\n    radius = diameter / 2\n    # 一圈的周长为2 * π * 半径\n    circumference_one_round = 2 * pi * radius\n    # 王叔叔每天绕体育场跑4圈\n    total_distance = 4 * circumference_one_round\n    # 答案是王叔叔每天早上跑的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "每天放4场电影，每场最多可坐580人，每天最多有多少人看电影？", "target": 2320.0, "answer": 2320.0, "score": 1, "generation": ["def solution():\n    # 每天放映4场电影\n    num_movies_per_day = 4\n    # 每场电影最多可坐580人\n    max_capacity_per_movie = 580\n    # 每天最多有多少人看电影 = 每天放映的电影场次 * 每场最大可坐人数\n    max_people_per_day = num_movies_per_day * max_capacity_per_movie\n    # 答案是每天最多有多少人看电影\n    result = max_people_per_day\n    # 返回答案\n    return result"]}
{"question": "实验幼儿园食堂买来豆角和西红柿各16千克，每千克豆角3.4元，每千克西红柿1.6元，买两种菜共花多少钱？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 豆角和西红柿各购买了16千克\n    weight_per_vegetable = 16\n    # 每千克豆角的价格为3.4元\n    price_per_kg_bean = 3.4\n    # 每千克西红柿的价格为1.6元\n    price_per_kg_tomato = 1.6\n    # 豆角的总价格 = 豆角的重量 * 每千克豆角的价格\n    total_price_bean = weight_per_vegetable * price_per_kg_bean\n    # 西红柿的总价格 = 西红柿的重量 * 每千克西红柿的价格\n    total_price_tomato = weight_per_vegetable * price_per_kg_tomato\n    # 买两种菜共花的钱 = 豆角的总价格 + 西红柿的总价格\n    total_cost = total_price_bean + total_price_tomato\n    # 答案是买两种菜共花的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "车站有850千克蔬菜要运到菜场出售，运了4车还剩90千克．平均每车运多少千克？", "target": 190.0, "answer": 190.0, "score": 1, "generation": ["def solution():\n    # 车站有850千克蔬菜要运到菜场出售\n    total_vegetables = 850\n    # 运了4车还剩90千克\n    remaining_vegetables = 90\n    # 总共运输的千克数 = 初始总量 - 剩余量\n    total_transport = total_vegetables - remaining_vegetables\n    # 平均每车运输的千克数 = 总共运输的千克数 / 车的数量\n    average_per_car = total_transport / 4\n    # 答案是平均每车运多少千克\n    result = average_per_car\n    # 返回答案\n    return result"]}
{"question": "小丽的姐姐将一个月工资的25%存入银行，15%作为保险费，20%用于炒股，最后剩下800元作为生活费，她一个月工资多少元．", "target": 2000.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 存入银行的比例为25%\n    saving_percentage = 0.25\n    # 保险费的比例为15%\n    insurance_percentage = 0.15\n    # 炒股的比例为20%\n    stock_percentage = 0.20\n    # 剩下作为生活费的金额为800元\n    remaining_amount = 800\n    # 存入银行的金额 = 总工资 * 存入银行的比例\n    saving_amount = total_salary * saving_percentage\n    # 保险费的金额 = 总工资 * 保险费的比例\n    insurance_amount = total_salary * insurance_percentage\n    # 炒股的金额 = 总工资 * 炒股的比例\n    stock_amount = total_salary * stock_percentage\n    # 剩下的生活费 = 总工资 - 存入银行的金额 - 保险费的金额 - 炒股的金额\n    remaining_salary = total_salary - saving_amount - insurance_amount - stock_amount\n    # 根据题意，剩下的生活费应该等于800元，因此可以得到方程式：remaining_salary = 800\n    # 解方程得到总工资\n    total_salary = remaining_amount / (1 - saving_percentage - insurance_percentage - stock_percentage)\n    # 答案是总工资\n    result = total_salary\n    # 返回答案\n    return result"]}
{"question": "如果从一捆粗细均匀的电线上截取1米长的电线，称得它的重为0.2斤，再称得剩余电线的重为20斤，则原来这捆电线总长度为多少米．", "target": 101.0, "answer": 101.0, "score": 1, "generation": ["def solution():\n    # 截取的电线长度为1米，重为0.2斤\n    cut_length = 1\n    cut_weight = 0.2\n    # 剩余电线的重为20斤\n    remaining_weight = 20\n    # 剩余电线的长度 = 剩余电线的重 / 截取的电线重\n    remaining_length = remaining_weight / cut_weight\n    # 总长度 = 截取的电线长度 + 剩余电线长度\n    total_length = cut_length + remaining_length\n    # 答案是原来这捆电线总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "弟弟今年4岁，哥哥今年12岁，10年后，哥哥比弟弟大几岁？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 弟弟今年4岁\n    age_younger_brother = 4\n    # 哥哥今年12岁\n    age_older_brother = 12\n    # 10年后的年龄差\n    age_difference = age_older_brother - age_younger_brother\n    # 答案是10年后哥哥比弟弟大的岁数\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "两个铺路队从两端同时施工铺一条2070m的路，甲队每天铺46m，乙队每天铺44m，多少天能铺完这条路？", "target": 23.0, "answer": 23.0, "score": 1, "generation": ["def solution():\n    # 铺路的总长度为2070m\n    total_length = 2070\n    # 甲队每天铺46m\n    team_a_rate = 46\n    # 乙队每天铺44m\n    team_b_rate = 44\n    # 两队铺路的总速度为铺路速度之和\n    total_rate = team_a_rate + team_b_rate\n    # 铺完整条路所需天数 = 总长度 / 总速度\n    days_to_complete = total_length / total_rate\n    # 答案是铺完这条路所需的天数\n    result = days_to_complete\n    # 返回答案\n    return result"]}
{"question": "五年级有学生29人，比女生多16%，女生有多少人．", "target": 25.0, "answer": "", "score": 0, "generation": ["首先，计算出比例中16%代表的人数，然后用总人数减去男生人数即可得到女生人数。\n\n```python\ndef solution():\n    # 五年级学生总人数为29人\n    total_students = 29\n    # 比女生多的16%人数\n    extra_percentage = 16 / 100\n    # 比女生多的人数 = 总人数 * 16%\n    extra_students = total_students * extra_percentage\n    # 女生人数 = 总人数 - 比女生多的人数\n    num_girls = total_students - extra_students\n    # 答案是女生人数\n    result = num_girls\n    # 返回答案\n    return result\n```"]}
{"question": "平海家园要修一条420米长的自来水管道，如果每根自来水管长6米，至少需要多少根？", "target": 70.0, "answer": 71.0, "score": 0, "generation": ["def solution():\n    # 自来水管道的总长度为420米\n    total_length = 420\n    # 每根自来水管的长度为6米\n    pipe_length = 6\n    # 至少需要的自来水管数量 = 总长度 / 每根管道的长度\n    min_pipes_required = total_length // pipe_length + 1\n    # 答案是至少需要的自来水管数量\n    result = min_pipes_required\n    # 返回答案\n    return result"]}
{"question": "“5一”劳动节，家电商场搞促销活动，一款彩电原价4500元，现以原价的85%出售，现在的售价比原来便宜了多少元？", "target": 675.0, "answer": 675.0, "score": 1, "generation": ["def solution():\n    # 彩电的原价为4500元\n    original_price = 4500\n    # 现在以原价的85%出售，即打了15%的折扣\n    discount_percentage = 15\n    # 折扣的金额 = 原价 * 折扣百分比\n    discount_amount = original_price * (discount_percentage / 100)\n    # 现在的售价 = 原价 - 折扣的金额\n    current_price = original_price - discount_amount\n    # 便宜了多少元 = 原价 - 现在的售价\n    amount_saved = original_price - current_price\n    # 答案是便宜了多少元\n    result = amount_saved\n    # 返回答案\n    return result"]}
{"question": "一个比的前项是(1/6)，比值是(1/3)，后项=．", "target": 0.5, "answer": 0.05555555555555555, "score": 0, "generation": ["def solution():\n    # 比的前项是1/6\n    first_term = 1/6\n    # 比值是1/3\n    ratio = 1/3\n    # 后项 = 前项 * 比值\n    last_term = first_term * ratio\n    # 答案是后项\n    result = last_term\n    # 返回答案\n    return result"]}
{"question": "有10个铅笔盒，其中5个装有铅笔，4个装有钢笔，2个既装有铅笔又有钢笔，空笔盒有多少个．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 一共有10个铅笔盒\n    total_boxes = 10\n    # 5个盒子装有铅笔\n    pencil_boxes = 5\n    # 4个盒子装有钢笔\n    pen_boxes = 4\n    # 2个盒子既装有铅笔又有钢笔\n    both_boxes = 2\n    # 空笔盒的数量 = 总盒子数 - 装有铅笔的盒子数 - 装有钢笔的盒子数 + 既装有铅笔又有钢笔的盒子数\n    empty_boxes = total_boxes - pencil_boxes - pen_boxes + both_boxes\n    # 答案是空笔盒的数量\n    result = empty_boxes\n    # 返回答案\n    return result"]}
{"question": "西山村今年已积肥82万吨，比原计划多积14万吨，完成计划的几分之几？", "target": 1.2058823529411764, "answer": 0.8292682926829268, "score": 0, "generation": ["def solution():\n    # 西山村今年已积肥82万吨\n    total_fertilizer = 82\n    # 比原计划多积14万吨\n    extra_fertilizer = 14\n    # 完成计划的总量 = 已积肥量 - 多积的量\n    planned_fertilizer = total_fertilizer - extra_fertilizer\n    # 完成计划的几分之几 = 完成计划的总量 / 原计划总量\n    fraction_completed = planned_fertilizer / total_fertilizer\n    # 答案是完成计划的几分之几\n    result = fraction_completed\n    # 返回答案\n    return result"]}
{"question": "李师傅铺设1平方米地砖需要(1/8)小时．按照这样的速度计算，他铺好一个长16米、宽(16/3)米的长方形会议室，需要多少时间？", "target": 10.666666666666666, "answer": 10.666666666666666, "score": 1, "generation": ["def solution():\n    # 铺设1平方米地砖需要(1/8)小时\n    time_per_square_meter = 1/8\n    # 会议室的长为16米\n    length = 16\n    # 会议室的宽为(16/3)米\n    width = 16/3\n    # 会议室的面积 = 长 * 宽\n    area = length * width\n    # 铺设整个会议室的时间 = 面积 * 铺设1平方米地砖的时间\n    total_time = area * time_per_square_meter\n    # 答案是铺设整个会议室所需的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "鸡场养有小鸡2240只，中鸡是小鸡的(5/8)，大鸡是中鸡的(6/7)，大鸡有多少只？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 小鸡的数量为2240只\n    num_chicks = 2240\n    # 中鸡是小鸡的(5/8)\n    num_middle_chickens = (5/8) * num_chicks\n    # 大鸡是中鸡的(6/7)\n    num_big_chickens = (6/7) * num_middle_chickens\n    # 答案是大鸡的数量\n    result = num_big_chickens\n    # 返回答案\n    return result"]}
{"question": "一本《快乐学数学》定价4.5元，一本《数学小灵通》定价2.8元．王鹏有10元钱，他各买了一本，还剩下多少钱？", "target": 2.7, "answer": 2.7, "score": 1, "generation": ["def solution():\n    # 《快乐学数学》的定价为4.5元\n    price_math_book1 = 4.5\n    # 《数学小灵通》的定价为2.8元\n    price_math_book2 = 2.8\n    # 王鹏有10元钱\n    total_money = 10\n    # 王鹏购买了一本《快乐学数学》和一本《数学小灵通》后剩下的钱 = 总钱数 - 两本书的总价\n    remaining_money = total_money - (price_math_book1 + price_math_book2)\n    # 答案是剩下的钱数\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "小邵带500元去买《数学小灵通》，买了25套，还剩50元．每套价钱多少？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 小邵带去买书的钱数为500元\n    total_money = 500\n    # 买了25套书后还剩下50元\n    remaining_money = 50\n    # 买书的总套数为25套\n    num_sets = 25\n    # 总花费 = 买书的总套数 * 每套书的价格\n    total_cost = total_money - remaining_money\n    # 每套书的价格 = 总花费 / 买书的总套数\n    price_per_set = total_cost / num_sets\n    # 答案是每套书的价格\n    result = price_per_set\n    # 返回答案\n    return result"]}
{"question": "李明收集邮票49枚，王红收集的邮票比李明多(2/7)．李明比王红少收集邮票多少枚？", "target": 14.0, "answer": 13.999999999999993, "score": 1, "generation": ["def solution():\n    # 李明收集的邮票数量为49枚\n    num_stamps_lm = 49\n    # 王红比李明多收集的比例为(2/7)\n    extra_fraction = 2/7\n    # 王红收集的邮票数量 = 李明收集的数量 * (1 + 比例)\n    num_stamps_wh = num_stamps_lm * (1 + extra_fraction)\n    # 李明比王红少收集的邮票数量 = 王红收集的数量 - 李明收集的数量\n    difference = num_stamps_wh - num_stamps_lm\n    # 答案是李明比王红少收集的邮票数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "学校有808个同学，分乘6辆汽车去春游，第一辆车已经接走了128人，如果其余5辆车乘的人数相同，最后一辆车乘了几个同学？", "target": 136.0, "answer": 0.0, "score": 0, "generation": ["def solution():\n    # 学校的总同学数为808人\n    total_students = 808\n    # 第一辆车已经接走了128人\n    students_taken_by_first_car = 128\n    # 剩余需要乘车的人数\n    remaining_students = total_students - students_taken_by_first_car\n    # 剩余人数平均分配到5辆车上，每辆车乘坐的人数\n    students_per_car = remaining_students // 5\n    # 最后一辆车乘坐的人数 = 剩余人数对5取余\n    students_last_car = remaining_students % 5\n    # 答案是最后一辆车乘坐的人数\n    result = students_last_car\n    # 返回答案\n    return result"]}
{"question": "学校图书馆有科技书650本，文艺书本数比科技书本数的3倍多45本，图书馆有科技书、文艺书共多少本．", "target": 2645.0, "answer": 2645.0, "score": 1, "generation": ["def solution():\n    # 科技书的数量为650本\n    num_science_books = 650\n    # 文艺书比科技书多的数量为45本\n    extra_literature_books = 45\n    # 文艺书比科技书多的倍数为3\n    multiple = 3\n    # 文艺书的数量 = 科技书的数量 * 文艺书比科技书多的倍数 + 文艺书比科技书多的数量\n    num_literature_books = num_science_books * multiple + extra_literature_books\n    # 图书馆共有的书籍数量 = 科技书的数量 + 文艺书的数量\n    total_books = num_science_books + num_literature_books\n    # 答案是图书馆共有的书籍数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小明今年15岁，爸爸年龄是小明的3倍，爸爸比小明大几岁？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 小明今年的年龄是15岁\n    age_xiaoming = 15\n    # 爸爸的年龄是小明的3倍\n    age_dad = 3 * age_xiaoming\n    # 爸爸比小明大的岁数 = 爸爸的年龄 - 小明的年龄\n    age_difference = age_dad - age_xiaoming\n    # 答案是爸爸比小明大的岁数\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "新华小学今年春季新栽了一批树，其中松树比柏树多12棵，柏树比松树少(1/7)．新栽的柏树有多少棵？", "target": 72.0, "answer": 13.999999999999998, "score": 0, "generation": ["def solution():\n    # 松树比柏树多12棵\n    pine_more_than_cypress = 12\n    # 柏树比松树少(1/7)\n    cypress_less_than_pine_fraction = 1/7\n    # 设柏树数量为x，则松树数量为x+12\n    # 根据题意得到方程：x = (x + 12) * (1 - 1/7)\n    cypress_count = pine_more_than_cypress / (1 - cypress_less_than_pine_fraction)\n    # 答案是新栽的柏树数量\n    result = cypress_count\n    # 返回答案\n    return result"]}
{"question": "城西学校买了29只足球，足球的只数比篮球只数的2倍少3只，这两种求一共买了多少只？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 城西学校买了29只足球\n    num_footballs = 29\n    # 足球的只数比篮球只数的2倍少3只\n    # 设篮球的只数为x，则足球的只数为2x-3\n    # 根据题意，2x - 3 = num_footballs\n    num_basketballs = (num_footballs + 3) / 2\n    # 两种球一共买了多少只 = 足球的只数 + 篮球的只数\n    total_balls = num_footballs + num_basketballs\n    # 答案是两种球一共买了多少只\n    result = total_balls\n    # 返回答案\n    return result"]}
{"question": "商店运来5筐黄瓜和4筐茄子，共重230千克．每筐黄瓜重30千克，每筐茄子重多少千克？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 商店运来的黄瓜筐数为5筐\n    num_cucumbers = 5\n    # 商店运来的茄子筐数为4筐\n    num_eggplants = 4\n    # 总重量为230千克\n    total_weight = 230\n    # 每筐黄瓜重30千克\n    weight_per_cucumber = 30\n    # 计算黄瓜的总重量\n    total_cucumber_weight = num_cucumbers * weight_per_cucumber\n    # 计算每筐茄子的重量\n    weight_per_eggplant = (total_weight - total_cucumber_weight) / num_eggplants\n    # 答案是每筐茄子的重量\n    result = weight_per_eggplant\n    # 返回答案\n    return result"]}
{"question": "一种商品现价2400元，比原价降低了20%，这种商品比原价降低了多少元？", "target": 600.0, "answer": 480.0, "score": 0, "generation": ["def solution():\n    # 商品的原价为2400元\n    original_price = 2400\n    # 降价比例为20%\n    discount_percentage = 0.20\n    # 商品降价的金额 = 原价 * 降价比例\n    discount_amount = original_price * discount_percentage\n    # 答案是商品降价的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "一套服装的成本价是50元，零售商从生产厂家以出厂价买入，然后卖出．如果生产厂家的利润率为20%，零售商的利润率为30%，则这套服装的售价为：多少元．", "target": 78.0, "answer": 78.0, "score": 1, "generation": ["def solution():\n    # 服装的成本价为50元\n    cost_price = 50\n    # 生产厂家的利润率为20%\n    manufacturer_profit_rate = 0.20\n    # 零售商的利润率为30%\n    retailer_profit_rate = 0.30\n    # 生产厂家的售价 = 成本价 * (1 + 利润率)\n    manufacturer_price = cost_price * (1 + manufacturer_profit_rate)\n    # 零售商的售价 = 生产厂家售价 * (1 + 零售商利润率)\n    retail_price = manufacturer_price * (1 + retailer_profit_rate)\n    # 答案是这套服装的售价\n    result = retail_price\n    # 返回答案\n    return result"]}
{"question": "长跑锻炼，小雄跑了3千米，小雄跑的(5/6)等于小刚跑的．小刚跑的是小勇的(4/5)．小勇跑多少千米？", "target": 3.125, "answer": 3.125, "score": 1, "generation": ["def solution():\n    # 小雄跑了3千米\n    distance_xiaoxiong = 3\n    # 小雄跑的(5/6)等于小刚跑的\n    distance_xiaogang = (5/6) * distance_xiaoxiong\n    # 小刚跑的是小勇的(4/5)\n    distance_xiaoyong = (5/4) * distance_xiaogang\n    # 答案是小勇跑的距离\n    result = distance_xiaoyong\n    # 返回答案\n    return result"]}
{"question": "竹子在生长旺盛期每时约增高4厘米，钟状菌生长更快，生长旺盛期每时约增高25厘米．如果它们都在生长旺盛期，开始时竹子高32厘米，钟状菌高0.5厘米，几时后钟状菌的高度可赶上竹子？", "target": 1.5, "answer": "", "score": 0, "generation": ["首先我们计算竹子和钟状菌的高度增加速度差，竹子每小时增高4厘米，钟状菌每小时增高25厘米，所以钟状菌比竹子快的速度是25-4=21厘米/小时。\n\n接下来我们计算钟状菌需要多少小时才能赶上竹子的高度。开始时钟状菌比竹子低31.5厘米（32-0.5=31.5厘米），所以需要的时间为31.5/21=1.5小时。\n\n现在我们来写Python代码来计算这个问题：\n\n```python\ndef solution():\n    # 竹子每小时增高4厘米\n    bamboo_growth_rate = 4\n    # 钟状菌每小时增高25厘米\n    fungus_growth_rate = 25\n    # 钟状菌比竹子快的速度\n    speed_difference = fungus_growth_rate - bamboo_growth_rate\n    # 开始时钟状菌比竹子低31.5厘米\n    initial_height_difference = 32 - 0.5\n    # 钟状菌赶上竹子的时间\n    time_to_catch_up = initial_height_difference / speed_difference\n    # 答案是钟状菌赶上竹子的时间\n    result = time_to_catch_up\n    # 返回答案\n    return result\n```"]}
{"question": "挖一条水渠，如果每天挖全长的15%又20米，那么6天正好挖完．这一条水渠全长多少米？", "target": 1200.0, "answer": -39.33333333333333, "score": 0, "generation": ["def solution():\n    # 每天挖的长度为全长的15%又20米\n    daily_progress = 0.15\n    additional_progress = 20\n    # 总共挖了6天\n    total_days = 6\n    # 在6天内挖完整条水渠，总进度为1\n    total_progress = 1\n    # 每天挖的进度 = 每天挖的长度 + 1（表示当天挖的长度）\n    daily_total_progress = daily_progress + 1\n    # 总长度 = （总进度 - 6（表示6天的进度））/ 每天的进度\n    total_length = (total_progress - (total_days * daily_total_progress)) / daily_progress\n    # 答案是水渠的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "沃尔玛超市之前塑料袋的日均使用量为20000个，实施限塑令以后日用量下降了(3/4)，现在塑料袋的日用量为多少个？", "target": 5000.0, "answer": 15000.0, "score": 0, "generation": ["def solution():\n    # 沃尔玛超市之前塑料袋的日均使用量为20000个\n    original_daily_usage = 20000\n    # 实施限塑令以后日用量下降了(3/4)\n    decrease_fraction = 3/4\n    # 现在塑料袋的日用量 = 原始日用量 * 下降比例\n    current_daily_usage = original_daily_usage * decrease_fraction\n    # 答案是现在塑料袋的日用量\n    result = current_daily_usage\n    # 返回答案\n    return result"]}
{"question": "某校全体学生列队，不论他们人数相等的分成2队，3队，4队，5对，6对，7对，8对或9队，都会多出1人，那么该校至少有多少名学生？", "target": 2521.0, "answer": "", "score": 0, "generation": ["首先，我们可以列出这个问题的数学表达式。设学生总人数为x，则有以下等式：\n\nx % 2 = 1\nx % 3 = 1\nx % 4 = 1\nx % 5 = 1\nx % 6 = 1\nx % 7 = 1\nx % 8 = 1\nx % 9 = 1\n\n我们可以通过循环来找到符合这些条件的最小学生人数。\n\n```python\ndef solution():\n    # 初始化学生人数为1\n    num_students = 1\n    # 循环直到找到符合条件的学生人数\n    while True:\n        if num_students % 2 == 1 and num_students % 3 == 1 and num_students % 4 == 1 and num_students % 5 == 1 and num_students % 6 == 1 and num_students % 7 == 1 and num_students % 8 == 1 and num_students % 9 == 1:\n            break\n        num_students += 1\n    # 答案是符合条件的最小学生人数\n    result = num_students\n    # 返回答案\n    return result\n```"]}
{"question": "一个数的(2/5)与(3/4)*(2/3)的积相等．求这个数．", "target": 1.25, "answer": 1.25, "score": 1, "generation": ["def solution():\n    # 一个数的(2/5)与(3/4)*(2/3)的积相等，设这个数为x\n    # 则有 x * (2/5) = (3/4) * (2/3)\n    # 化简得 x = (3/4) * (2/3) / (2/5)\n    x = (3/4) * (2/3) / (2/5)\n    # 答案是这个数x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "股市交易中，无论买进和卖出，均需要交纳交易资金的0.3%作为手续费．某股民以每股10.65元买过某种股票3000股，过了一段时间，又以每股13.68元将这种股票全部卖出．此股民买卖这支股票赚了多少元？（只列式不计算）", "target": 8871.03, "answer": 8871.029999999999, "score": 1, "generation": ["def solution():\n    # 每股股票的购买价格为10.65元\n    purchase_price_per_share = 10.65\n    # 每股股票的卖出价格为13.68元\n    selling_price_per_share = 13.68\n    # 股票的数量为3000股\n    num_shares = 3000\n    # 买入时的交易费用 = 股票数量 * 每股购买价格 * 0.3%\n    purchase_transaction_fee = num_shares * purchase_price_per_share * 0.003\n    # 卖出时的交易费用 = 股票数量 * 每股卖出价格 * 0.3%\n    selling_transaction_fee = num_shares * selling_price_per_share * 0.003\n    # 赚取的总金额 = 卖出总价 - 买入总价 - 买入交易费用 - 卖出交易费用\n    total_earnings = (num_shares * selling_price_per_share) - (num_shares * purchase_price_per_share) - purchase_transaction_fee - selling_transaction_fee\n    # 答案是赚取的总金额\n    result = total_earnings\n    # 返回答案\n    return result"]}
{"question": "用13.1-6.9的差去除24.8，商=．", "target": 4.0, "answer": 4.000000000000001, "score": 1, "generation": ["def solution():\n    # 用13.1-6.9的差\n    difference = 13.1 - 6.9\n    # 被除数是24.8\n    dividend = 24.8\n    # 商 = 被除数 / 差\n    quotient = dividend / difference\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "农业机械厂有39吨煤，已经烧了16天，平均每天烧煤1.2吨．剩下的煤如果每天烧1.1吨，还可以烧多少天？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 农业机械厂有39吨煤\n    total_coal = 39\n    # 已经烧了16天\n    days_burned = 16\n    # 平均每天烧煤1.2吨\n    daily_burn_rate_initial = 1.2\n    # 剩下的煤每天烧1.1吨\n    daily_burn_rate_new = 1.1\n    # 已经烧掉的煤量 = 已经烧的天数 * 每天烧的量\n    coal_burned_initial = days_burned * daily_burn_rate_initial\n    # 剩余煤量 = 总煤量 - 已经烧掉的煤量\n    remaining_coal = total_coal - coal_burned_initial\n    # 剩余可以烧的天数 = 剩余煤量 / 每天烧的量\n    remaining_days = remaining_coal / daily_burn_rate_new\n    # 答案是剩余可以烧的天数\n    result = remaining_days\n    # 返回答案\n    return result"]}
{"question": "化肥厂计划生产一批化肥，第一天生产了全部任务的(1/6)，第二天又生产了余下任务的(1/4)，第3天又生产了前两天生产后余下的(1/5)，结果还剩下50吨没有完成．问化肥厂计划生产化肥多少吨？", "target": 100.0, "answer": 3050.0, "score": 0, "generation": ["def solution():\n    # 初始剩余的化肥重量为50吨\n    remaining_fertilizer = 50\n    # 第一天生产了全部任务的(1/6)\n    produced_first_day = remaining_fertilizer / (1/6)\n    # 第一天后剩余的化肥重量\n    remaining_fertilizer = remaining_fertilizer - produced_first_day\n    # 第二天生产了余下任务的(1/4)\n    produced_second_day = remaining_fertilizer / (1/4)\n    # 第二天后剩余的化肥重量\n    remaining_fertilizer = remaining_fertilizer - produced_second_day\n    # 第三天生产了前两天生产后余下的(1/5)\n    produced_third_day = remaining_fertilizer / (1/5)\n    # 总共计划生产的化肥重量 = 第一天 + 第二天 + 第三天\n    total_fertilizer = produced_first_day + produced_second_day + produced_third_day\n    # 答案是化肥厂计划生产的化肥总重量\n    result = total_fertilizer\n    # 返回答案\n    return result"]}
{"question": "一辆货车3.5小时行了227.5千米，一列火车的速度是货车的2倍，求火车的速度？", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 货车行驶的时间为3.5小时\n    time_truck = 3.5\n    # 货车行驶的距离为227.5千米\n    distance_truck = 227.5\n    # 货车的速度 = 距离 / 时间\n    speed_truck = distance_truck / time_truck\n    # 火车的速度是货车速度的2倍\n    speed_train = 2 * speed_truck\n    # 答案是火车的速度\n    result = speed_train\n    # 返回答案\n    return result"]}
{"question": "一个三角形的面积是15cm^2，它的底是5厘米，高=．", "target": 6.0, "answer": "", "score": 0, "generation": ["首先，我们知道三角形的面积公式为：面积 = 1/2 * 底 * 高。\n\n根据题目，面积为15cm^2，底为5厘米，代入公式得到：15 = 1/2 * 5 * 高。\n\n接下来，我们解方程得到高的数值。\n\n高 = 15 / (1/2 * 5) = 15 / 2.5 = 6。\n\n所以，这个三角形的高为6厘米。\n\n现在让我们用Python代码来计算这个问题。\n\n```python\ndef solution():\n    # 面积为15cm^2\n    area = 15\n    # 底为5厘米\n    base = 5\n    # 高 = 面积 / (1/2 * 底)\n    height = area / (0.5 * base)\n    # 答案是三角形的高\n    result = height\n    # 返回答案\n    return result\n```"]}
{"question": "一瓶油连瓶重3.4千克，瓶重0.5千克，用去1.52千克油后，还剩下多少千克油？", "target": 1.38, "answer": 1.38, "score": 1, "generation": ["def solution():\n    # 一瓶油连瓶重3.4千克\n    total_weight_initial = 3.4\n    # 瓶重0.5千克\n    bottle_weight = 0.5\n    # 用去1.52千克油后\n    oil_used = 1.52\n    # 剩下的油 = 初始油量 - 用去的油量\n    remaining_oil = total_weight_initial - oil_used - bottle_weight\n    # 答案是剩下的油量\n    result = remaining_oil\n    # 返回答案\n    return result"]}
{"question": "空调厂去年上半年完成全年计划任务的(9/16)，下半年和上半年完成的同样多，空调厂去年实际超额完成全年计划任务的几分之几？", "target": 0.125, "answer": 1.125, "score": 0, "generation": ["def solution():\n    # 去年上半年完成全年计划任务的比例为9/16\n    completion_first_half = 9/16\n    # 下半年和上半年完成的任务量相同，所以下半年完成比例也为9/16\n    completion_second_half = 9/16\n    # 去年实际完成的任务量为上半年 + 下半年\n    total_completion = completion_first_half + completion_second_half\n    # 实际超额完成的比例 = 实际完成任务量 / 计划任务量\n    excess_completion_fraction = total_completion / 1\n    # 答案是实际超额完成全年计划任务的比例\n    result = excess_completion_fraction\n    # 返回答案\n    return result"]}
{"question": "王叔叔每个月的收入扣除2000元后按5%的税率交了个人所得税22.5元，王叔叔的月收入=多少元？", "target": 2450.0, "answer": 2450.0, "score": 1, "generation": ["def solution():\n    # 个人所得税为22.5元\n    income_tax = 22.5\n    # 扣除2000元后的税前收入 = 个人所得税 / 税率\n    pre_tax_income = income_tax / 0.05\n    # 王叔叔的月收入 = 扣除2000元后的税前收入 + 2000元\n    monthly_income = pre_tax_income + 2000\n    # 答案是王叔叔的月收入\n    result = monthly_income\n    # 返回答案\n    return result"]}
{"question": "甲、乙两油库原存油数量的比是5：3，现因生产需要，从甲库调出了90桶油，这时甲、乙两库油数相等，求乙库原有油多少桶？", "target": 135.0, "answer": -224.99999999999997, "score": 0, "generation": ["def solution():\n    # 甲、乙两油库原存油数量的比是5：3\n    ratio = 5 / 3\n    # 从甲库调出的油桶数为90桶\n    oil_transferred = 90\n    # 两库油数相等时，乙库原有油数为x\n    original_oil_b = oil_transferred * ratio / (1 - ratio)\n    # 答案是乙库原有油数\n    result = original_oil_b\n    # 返回答案\n    return result"]}
{"question": "小亮的储蓄箱中有18元，小华储蓄的钱是小亮的(5/6)．小新储蓄的钱是小华的(2/3)．小新储蓄了多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 小亮的储蓄金额为18元\n    savings_xiaoliang = 18\n    # 小华储蓄的钱是小亮的(5/6)\n    savings_xiaohua = (5/6) * savings_xiaoliang\n    # 小新储蓄的钱是小华的(2/3)\n    savings_xiaoxin = (2/3) * savings_xiaohua\n    # 答案是小新储蓄的金额\n    result = savings_xiaoxin\n    # 返回答案\n    return result"]}
{"question": "一包茶叶重1千克，倒出(1/4)后还剩下多少克茶叶？", "target": 750.0, "answer": 750.0, "score": 1, "generation": ["def solution():\n    # 一包茶叶重1千克\n    total_weight = 1000\n    # 倒出(1/4)后剩下的茶叶重量\n    remaining_fraction = 3/4\n    # 剩下的茶叶重量 = 总重量 * 剩余比例\n    remaining_weight = total_weight * remaining_fraction\n    # 答案是剩下的茶叶重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "江东修一条长600米的水渠，第一天修了全长的(2/5)，第二天修了全长的(1/4)．一共修了多少米？", "target": 390.0, "answer": 390.0, "score": 1, "generation": ["def solution():\n    # 水渠的总长度为600米\n    total_length = 600\n    # 第一天修的长度为总长的(2/5)\n    first_day_fraction = 2/5\n    # 第二天修的长度为总长的(1/4)\n    second_day_fraction = 1/4\n    # 第一天修的长度 = 总长 * 第一天修的比例\n    length_first_day = total_length * first_day_fraction\n    # 第二天修的长度 = 总长 * 第二天修的比例\n    length_second_day = total_length * second_day_fraction\n    # 一共修的长度 = 第一天修的长度 + 第二天修的长度\n    total_length_fixed = length_first_day + length_second_day\n    # 答案是一共修的长度\n    result = total_length_fixed\n    # 返回答案\n    return result"]}
{"question": "板桥小学四年级有女生120人，男生人数比女生的2倍少105人．四年级共有学生多少人？", "target": 255.0, "answer": 255.0, "score": 1, "generation": ["def solution():\n    # 四年级女生人数为120人\n    num_girls = 120\n    # 男生人数比女生的2倍少105人\n    num_boys = (num_girls * 2) - 105\n    # 四年级共有学生人数 = 女生人数 + 男生人数\n    total_students = num_girls + num_boys\n    # 答案是四年级共有学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "小朋友们在红果果和绿泡泡指导下分糖果，如每个人10个还剩6个，如每个人12个就有1个小朋友分不到糖果，那么有多少小朋友．", "target": 9.0, "answer": 4.0, "score": 0, "generation": ["def solution():\n    # 每组糖果的数量差\n    candy_difference = 12 - 10\n    # 每组糖果的剩余量差\n    leftover_difference = 6 - 1\n    # 每组糖果的数量差与剩余量差的比值\n    ratio = leftover_difference / candy_difference\n    # 每组糖果的总量\n    total_candies = 10 * (1 / ratio)\n    # 答案是小朋友的数量，即每组糖果的总量\n    result = total_candies\n    # 返回答案\n    return result"]}
{"question": "有水果篮50个，盛有橘子的有25个，当中16个还放有苹果；8个水果篮是空的，余下的只放有香蕉？问只放有一种水果的水果篮有多少个﹖", "target": 26.0, "answer": "", "score": 0, "generation": ["首先，我们来分析一下题目：\n\n- 有50个水果篮\n- 其中25个篮子里有橘子，16个橘子篮子里还有苹果\n- 8个篮子是空的\n- 剩下的篮子里只有香蕉\n\n我们需要找出只放有一种水果的篮子有多少个。\n\n现在我们来解决这个问题：\n\n- 首先，有25个篮子里有橘子，16个篮子里还有苹果，所以有25-16=9个篮子里只有橘子\n- 8个篮子是空的，所以剩下的篮子里只有香蕉的篮子数为50 - 25（橘子） - 9（只有橘子） - 8（空篮子） = 8个\n\n所以，只放有一种水果的篮子有8个。\n\n接下来我们用Python来表示这个过程：\n\n```python\ndef solution():\n    # 有50个水果篮\n    total_baskets = 50\n    # 有25个篮子里有橘子，16个橘子篮子里还有苹果，所以只有橘子的篮子数为25-16=9\n    baskets_only_oranges = 9\n    # 8个篮子是空的，剩下的只有香蕉的篮子数为总篮子数减去其他篮子数\n    baskets_only_bananas = total_baskets - 25 - baskets_only_oranges - 8\n    # 答案是只放有一种水果的篮子数\n    result = baskets_only_bananas\n    # 返回答案\n    return result\n```"]}
{"question": "一个班有学生42人，参加体育代表队的有30人，参加文艺代表队的有25人，并且每个人至少参加了一个队，这个班两个队都参加的有几个人？", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为42人\n    total_students = 42\n    # 参加体育代表队的人数为30人\n    sports_team = 30\n    # 参加文艺代表队的人数为25人\n    arts_team = 25\n    # 体育代表队和文艺代表队都参加的人数 = 体育代表队人数 + 文艺代表队人数 - 班级总人数\n    both_teams = sports_team + arts_team - total_students\n    # 答案是两个队都参加的人数\n    result = both_teams\n    # 返回答案\n    return result"]}
{"question": "商店运来一些水果，梨的筐数比苹果筐数少(1/5)．已知运来梨40筐，运来苹果多少筐？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 运来的梨的筐数为40筐\n    num_pears = 40\n    # 梨的筐数比苹果筐数少(1/5)\n    pear_to_apple_ratio = 1/5\n    # 梨的筐数 = 运来的梨的筐数\n    # 苹果的筐数 = 梨的筐数 / (1 - 梨的筐数比苹果筐数少的比例)\n    num_apples = num_pears / (1 - pear_to_apple_ratio)\n    # 答案是运来苹果的筐数\n    result = num_apples\n    # 返回答案\n    return result"]}
{"question": "王大伯养鹅的只数是鸡的(2/5)，是鸭的(6/7)，养鸡480只，养鸭多少只？", "target": 224.0, "answer": 164.57142857142856, "score": 0, "generation": ["def solution():\n    # 养鸡的只数是480只\n    num_chickens = 480\n    # 鹅的只数是鸡的(2/5)\n    num_geese = (2/5) * num_chickens\n    # 鹭的只数是鸭的(6/7)\n    num_ducks = (6/7) * num_geese\n    # 答案是养鸭的只数\n    result = num_ducks\n    # 返回答案\n    return result"]}
{"question": "王老师买60本一样的故事书，付出250元，找回28元，每本图书多少钱？", "target": 3.7, "answer": 3.7, "score": 1, "generation": ["def solution():\n    # 王老师买了60本故事书\n    num_books = 60\n    # 付出的总金额为250元\n    total_payment = 250\n    # 找回的金额为28元\n    change = 28\n    # 实际花费 = 总金额 - 找回的金额\n    actual_payment = total_payment - change\n    # 每本书的价格 = 实际花费 / 书的数量\n    price_per_book = actual_payment / num_books\n    # 答案是每本书的价格\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "一筐苹果的(2/7)正好是20千克，这筐苹果重多少千克？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 一筐苹果的(2/7)正好是20千克\n    weight_fraction = 2/7\n    total_weight = 20\n    # 这筐苹果的重量 = 总重量 / 比例\n    basket_weight = total_weight / weight_fraction\n    # 答案是这筐苹果的重量\n    result = basket_weight\n    # 返回答案\n    return result"]}
{"question": "一个数的45%比4.8的2倍少0.6，这个数=？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 一个数的45%比4.8的2倍少0.6\n    # 设这个数为x\n    # 则0.45x = 2*4.8 - 0.6\n    x = (2*4.8 - 0.6) / 0.45\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "有纯酒精60克，配制浓度为75%的酒精溶液需加水多少克．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 纯酒精的质量为60克\n    mass_alcohol = 60\n    # 酒精溶液的浓度为75%\n    concentration_required = 0.75\n    # 设加水x克，则酒精的质量为60克，酒精溶液的总质量为60+x克\n    # 根据浓度的定义，酒精的质量占总质量的比例为75%\n    # 因此，60 / (60 + x) = 0.75\n    # 解方程得到 x = 20 克\n    water_to_add = 20\n    # 答案是需要加水的质量\n    result = water_to_add\n    # 返回答案\n    return result"]}
{"question": "修一段公路，第一天修了这段路的(5/16)，第二天与第一天修的同样多，还剩下这段路的几分之几没有修？", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # 第一天修的比例为5/16\n    fraction_day1 = 5/16\n    # 第二天修的比例与第一天相同\n    fraction_day2 = fraction_day1\n    # 剩下的比例 = 1 - 第一天修的比例 - 第二天修的比例\n    remaining_fraction = 1 - fraction_day1 - fraction_day2\n    # 答案是剩下的比例\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "为了保护3峡库区的生态竦境，国家给幸福村拨款800万元专款，其中(3/5)用于退耕还林，(3/10)用于农民生活、生产补偿，用于退耕还林的比用于生活、生产补偿的多多少万元？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 国家给幸福村拨款的总金额为800万元\n    total_funding = 800\n    # 用于退耕还林的比例为3/5\n    reforestation_ratio = 3/5\n    # 用于农民生活、生产补偿的比例为3/10\n    compensation_ratio = 3/10\n    # 用于退耕还林的金额 = 总金额 * 退耕还林比例\n    reforestation_amount = total_funding * reforestation_ratio\n    # 用于生活、生产补偿的金额 = 总金额 * 生活、生产补偿比例\n    compensation_amount = total_funding * compensation_ratio\n    # 退耕还林的金额比生活、生产补偿多的金额 = 用于退耕还林的金额 - 用于生活、生产补偿的金额\n    difference_amount = reforestation_amount - compensation_amount\n    # 答案是退耕还林的金额比生活、生产补偿多的金额\n    result = difference_amount\n    # 返回答案\n    return result"]}
{"question": "一个工厂由于采用了新工艺，现在每件产品的成本是37.4元，比原来降低了15%，原来每件成本=多少元？", "target": 44.0, "answer": 44.0, "score": 1, "generation": ["def solution():\n    # 现在每件产品的成本是37.4元\n    current_cost = 37.4\n    # 降低了15%\n    decrease_percentage = 0.15\n    # 原来每件产品的成本 = 现在每件产品的成本 / (1 - 降低的比例)\n    original_cost = current_cost / (1 - decrease_percentage)\n    # 答案是原来每件产品的成本\n    result = original_cost\n    # 返回答案\n    return result"]}
{"question": "小马的班上制作了100张彩券销售，这些彩券中只有一张能获奖．小马要购买多少张彩券才会有(1/10)机会获奖．", "target": 10.0, "answer": 9.0, "score": 0, "generation": ["def solution():\n    # 制作的彩券总数为100张\n    total_tickets = 100\n    # 有一张是获奖彩券\n    winning_ticket = 1\n    # 想要有(1/10)的机会获奖，即中奖彩券数量为总数的1/10\n    desired_winning_fraction = 1/10\n    # 中奖彩券数量 = 总数 * 想要的中奖比例\n    desired_winning_tickets = total_tickets * desired_winning_fraction\n    # 需要购买的彩券数量 = 中奖彩券数量 - 已有的中奖彩券数量\n    tickets_to_buy = desired_winning_tickets - winning_ticket\n    # 答案是需要购买的彩券数量\n    result = tickets_to_buy\n    # 返回答案\n    return result"]}
{"question": "多少除以32，商和余数都是16．", "target": 528.0, "answer": 528.0, "score": 1, "generation": ["def solution():\n    # 商是16，余数也是16，所以被除数 = 商 * 除数 + 余数\n    dividend = 16 * 32 + 16\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一批零件共有5400个，王师傅6小时做了全部的(1/3)，以这样的速度，还需几小时才能全部做完？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 零件的总数量为5400个\n    total_parts = 5400\n    # 王师傅做了全部的(1/3)需要6小时\n    hours_for_one_third = 6\n    # 王师傅每小时完成的零件数量 = 总数量 * 完成比例 / 完成时间\n    parts_per_hour = total_parts * (1/3) / hours_for_one_third\n    # 剩余的零件数量 = 总数量 - 已完成的数量\n    remaining_parts = total_parts - (1/3) * total_parts\n    # 剩余需要的时间 = 剩余的零件数量 / 每小时完成的数量\n    remaining_hours = remaining_parts / parts_per_hour\n    # 答案是还需的小时数\n    result = remaining_hours\n    # 返回答案\n    return result"]}
{"question": "花园小学组织学生植树，五年级植树160棵，正好是四年级的2倍，三年级比四年级少20棵，三年级植树多少棵．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 五年级植树160棵\n    num_trees_fifth_grade = 160\n    # 四年级的植树数量是五年级的2倍\n    num_trees_fourth_grade = num_trees_fifth_grade / 2\n    # 三年级比四年级少20棵\n    num_trees_third_grade = num_trees_fourth_grade - 20\n    # 答案是三年级植树的数量\n    result = num_trees_third_grade\n    # 返回答案\n    return result"]}
{"question": "服装厂要做一批童装，如果每天做35套，18天完成，实际少用3天完成了任务．实际每天做多少套？", "target": 42.0, "answer": 42.0, "score": 1, "generation": ["def solution():\n    # 每天做35套，需要18天完成\n    planned_sets_per_day = 35\n    planned_days = 18\n    # 实际比计划少用了3天\n    actual_days_taken = planned_days - 3\n    # 计划完成的总套数 = 每天完成的套数 * 计划天数\n    planned_total_sets = planned_sets_per_day * planned_days\n    # 实际每天完成的套数 = 计划完成的总套数 / 实际天数\n    actual_sets_per_day = planned_total_sets / actual_days_taken\n    # 答案是实际每天完成的套数\n    result = actual_sets_per_day\n    # 返回答案\n    return result"]}
{"question": "一场足球赛的票价为240元，因为票很紧张，涨价20%，涨价后的票价=？", "target": 288.0, "answer": 288.0, "score": 1, "generation": ["def solution():\n    # 足球赛的原始票价为240元\n    original_price = 240\n    # 涨价的百分比为20%\n    increase_percentage = 0.20\n    # 涨价后的票价 = 原始票价 + 原始票价 * 涨价百分比\n    new_price = original_price + original_price * increase_percentage\n    # 答案是涨价后的票价\n    result = new_price\n    # 返回答案\n    return result"]}
{"question": "幸福村要修一条乡村公路，预计每天修240米，15天就能完成；如果12天修完这条公路，平均每天要修多少米？", "target": 300.0, "answer": 240.0, "score": 0, "generation": ["def solution():\n    # 预计每天修240米，15天完成\n    planned_daily_progress = 240\n    planned_days = 15\n    # 实际天数为12天\n    actual_days = 12\n    # 实际完成的工作量 = 实际天数 * 预计每天的进度\n    actual_progress = actual_days * planned_daily_progress\n    # 每天需要的平均进度 = 总进度 / 总天数\n    average_daily_progress = actual_progress / actual_days\n    # 答案是每天需要的平均进度\n    result = average_daily_progress\n    # 返回答案\n    return result"]}
{"question": "服装厂要加工一批儿童服装，如果每套用布1.65米，可以加工450套．如果每套用布1.5米，可以加工多少套？", "target": 495.0, "answer": 495.0, "score": 1, "generation": ["def solution():\n    # 每套服装用布1.65米可以加工450套\n    fabric_per_set_1 = 1.65\n    sets_1 = 450\n    # 每套服装用布1.5米\n    fabric_per_set_2 = 1.5\n    # 可以加工的套数 = 总布长 / 每套布长\n    sets_2 = (fabric_per_set_1 * sets_1) / fabric_per_set_2\n    # 答案是可以加工的套数\n    result = sets_2\n    # 返回答案\n    return result"]}
{"question": "在一条公路的一边，每隔4米栽一棵树，一共栽了200棵树，这条路全长有多少米？", "target": 796.0, "answer": 800.0, "score": 0, "generation": ["def solution():\n    # 每隔4米栽一棵树\n    distance_between_trees = 4\n    # 一共栽了200棵树\n    total_trees = 200\n    # 公路上树的总间距 = 树的数量 - 1 乘以 每棵树之间的距离\n    total_distance = (total_trees - 1) * distance_between_trees\n    # 公路的总长度 = 公路上树的总间距 + 最后一棵树到起点的距离\n    road_length = total_distance + distance_between_trees\n    # 答案是公路的总长度\n    result = road_length\n    # 返回答案\n    return result"]}
{"question": "妈妈拿20元买了3千克苹果，找回9.2元．每千克苹果多少元？", "target": 3.6, "answer": 3.6, "score": 1, "generation": ["def solution():\n    # 妈妈花了20元买了3千克苹果\n    total_cost = 20\n    total_weight = 3\n    # 找回了9.2元\n    change = 9.2\n    # 实际花费 = 总花费 - 找回的钱\n    actual_cost = total_cost - change\n    # 每千克苹果的价格 = 实际花费 / 总重量\n    price_per_kg = actual_cost / total_weight\n    # 答案是每千克苹果的价格\n    result = price_per_kg\n    # 返回答案\n    return result"]}
{"question": "姐姐的年龄比小红大(1/6)，小红比姐姐小2岁．小红今年多少岁．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 姐姐的年龄比小红大(1/6)\n    age_difference_fraction = 1/6\n    # 小红比姐姐小2岁\n    age_difference = 2\n    # 设小红的年龄为x岁，则姐姐的年龄为x + x*(1/6) = x + x/6 = (6x + x) / 6 = 7x / 6 岁\n    # 根据题意，姐姐的年龄比小红大2岁，所以 7x / 6 = x + 2\n    # 化简得 x = 12\n    age_of_xiaohong = 12\n    # 答案是小红今年的年龄\n    result = age_of_xiaohong\n    # 返回答案\n    return result"]}
{"question": "放寒假了，叔叔送给强强一本有许多个故事的书，强强计划每天看同样个数的故事，用20天可看完．但强强在看书时发现故事很有趣，实际每天比原计划多看3个故事，结果提前4天看完了故事书．这本故事书一共有多少个故事．", "target": 240.0, "answer": "", "score": 0, "generation": ["首先，我们设原计划每天看的故事数为x个。根据题意可列出方程：\n\n20x = 故事书总数\n\n实际每天看的故事数为x+3个，提前4天看完，所以实际天数为20-4=16天。根据题意可列出方程：\n\n16(x+3) = 故事书总数\n\n将上述两个方程联立，解方程得到故事书总数。\n\n现在我们来写Python代码来解决这个问题：\n\n```python\ndef solution():\n    # 原计划每天看的故事数\n    x = symbols('x')\n    # 方程1：20x = 故事书总数\n    eq1 = Eq(20*x, x)\n    # 方程2：16(x+3) = 故事书总数\n    eq2 = Eq(16*(x+3), x)\n    # 解方程得到故事书总数\n    total_stories = solve((eq1, eq2), (x))[0]\n    # 答案是故事书总数\n    result = total_stories\n    # 返回答案\n    return result\n```"]}
{"question": "一个农场计划28天完成收割任务，由于每天多收割7公顷，结果18天就完成了任务．实际每天收割多少公顷？", "target": 19.6, "answer": -5.444444444444445, "score": 0, "generation": ["def solution():\n    # 计划完成收割任务需要的天数为28天\n    planned_days = 28\n    # 实际完成收割任务的天数为18天\n    actual_days = 18\n    # 每天多收割的公顷数\n    extra_harvest_per_day = 7\n    # 每天实际收割的公顷数 = 总任务量 / 实际完成天数\n    actual_harvest_per_day = 28 / actual_days\n    # 计划每天收割的公顷数 = 实际每天收割的公顷数 - 每天多收割的公顷数\n    planned_harvest_per_day = actual_harvest_per_day - extra_harvest_per_day\n    # 答案是每天实际收割的公顷数\n    result = planned_harvest_per_day\n    # 返回答案\n    return result"]}
{"question": "建筑一座楼房，实际投资840万元，超过计划5%，计划投资多少万元？", "target": 800.0, "answer": 800.0, "score": 1, "generation": ["def solution():\n    # 实际投资为840万元\n    actual_investment = 840\n    # 超过计划的投资比例为5%\n    exceed_percentage = 0.05\n    # 计划投资 = 实际投资 / (1 + 超过计划的投资比例)\n    planned_investment = actual_investment / (1 + exceed_percentage)\n    # 答案是计划投资的金额\n    result = planned_investment\n    # 返回答案\n    return result"]}
{"question": "某希望小学有男生120人，女生人数比男生多(1/4)，学校里共有学生多少人？", "target": 270.0, "answer": 150.0, "score": 0, "generation": ["def solution():\n    # 希望小学男生人数为120人\n    num_boys = 120\n    # 女生人数比男生多(1/4)\n    ratio_girls_to_boys = 1/4\n    # 女生人数 = 男生人数 * 比例\n    num_girls = num_boys * ratio_girls_to_boys\n    # 总学生人数 = 男生人数 + 女生人数\n    total_students = num_boys + num_girls\n    # 答案是总学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一张光盘能刻录资料600兆，现已用它的80%，还剩下多少兆空白部分？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 光盘的刻录容量为600兆\n    total_capacity = 600\n    # 已经使用了80%\n    used_percentage = 0.8\n    # 已使用的容量 = 总容量 * 使用比例\n    used_capacity = total_capacity * used_percentage\n    # 剩余空白部分 = 总容量 - 已使用的容量\n    remaining_capacity = total_capacity - used_capacity\n    # 答案是剩余的兆空白部分\n    result = remaining_capacity\n    # 返回答案\n    return result"]}
{"question": "一个长方形宽是4分米，长是宽的3倍，这个长方形的面积=．", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 长方形的宽是4分米\n    width = 4\n    # 长是宽的3倍\n    length = 3 * width\n    # 长方形的面积 = 长 * 宽\n    area = length * width\n    # 答案是长方形的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树42棵，桃树的棵树是苹果树的(6/7)，苹果树有多少棵？", "target": 49.0, "answer": 36.0, "score": 0, "generation": ["def solution():\n    # 桃树的棵树是苹果树的(6/7)\n    peach_trees = 42\n    apple_trees = (6/7) * peach_trees\n    # 答案是苹果树的棵树\n    result = apple_trees\n    # 返回答案\n    return result"]}
{"question": "有一桶油，第一次用去20%，第二次又用去(2/5)千克，两次一共用去3.6千克．这桶油重多少千克？", "target": 16.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 两次一共用去的油量为3.6千克\n    total_oil_used = 3.6\n    # 第一次用去的油量为20%\n    first_usage_fraction = 0.20\n    # 第二次用去的油量为(2/5)千克\n    second_usage = 2/5\n    # 设这桶油的重量为x千克\n    # 第一次用去的油量为x * 20%\n    first_usage = x * first_usage_fraction\n    # 第二次用去的油量为2/5千克\n    second_usage = 2/5\n    # 两次一共用去的油量为3.6千克，即第一次和第二次用去的油量之和\n    total_oil_used = first_usage + second_usage\n    # 解方程得到x的值\n    x = total_oil_used / (first_usage_fraction + second_usage_fraction)\n    # 答案是这桶油的重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "某电器有限公司要生产5000台彩电迎接建国60周年庆典，前5天平均每天生产400台．余下的要在6天内完成，平均每天应生产多少台？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 公司要生产的彩电总数为5000台\n    total_televisions = 5000\n    # 前5天平均每天生产400台\n    televisions_produced_first_5_days = 400 * 5\n    # 余下的天数\n    remaining_days = 6\n    # 剩余要生产的彩电数量\n    remaining_televisions = total_televisions - televisions_produced_first_5_days\n    # 平均每天应生产的彩电数量 = 剩余要生产的彩电数量 / 剩余的天数\n    televisions_per_day = remaining_televisions / remaining_days\n    # 答案是平均每天应生产的彩电数量\n    result = televisions_per_day\n    # 返回答案\n    return result"]}
{"question": "植物园上午有游客935人，中午有357人离去，下午又来了397人，这时园内有游客多少人？", "target": 975.0, "answer": 975.0, "score": 1, "generation": ["def solution():\n    # 上午游客数量为935人\n    morning_visitors = 935\n    # 中午离去的游客数量为357人\n    noon_departures = 357\n    # 下午来的游客数量为397人\n    afternoon_arrivals = 397\n    # 园内游客总数 = 上午游客数量 - 中午离去的游客数量 + 下午来的游客数量\n    total_visitors = morning_visitors - noon_departures + afternoon_arrivals\n    # 答案是园内游客总数\n    result = total_visitors\n    # 返回答案\n    return result"]}
{"question": "李阿姨花了120元钱买了3箱苹果，每箱苹果多少元钱．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 李阿姨花了120元买了3箱苹果\n    total_cost = 120\n    num_boxes = 3\n    # 每箱苹果的价格 = 总花费 / 箱数\n    price_per_box = total_cost / num_boxes\n    # 答案是每箱苹果的价格\n    result = price_per_box\n    # 返回答案\n    return result"]}
{"question": "第16届亚运会于2010年11月12日至27日再中国广州进行，广州是中国第二个取得亚运会主办权的城市．届时广州的体育馆数量达72个，比原来体育馆数量增加20%，广州原有体育馆多少个？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 广州亚运会时的体育馆数量为72个\n    total_gyms = 72\n    # 增加了20%的体育馆数量\n    increase_percentage = 0.20\n    # 原有体育馆数量 = 总体育馆数量 / (1 + 增加百分比)\n    original_gyms = total_gyms / (1 + increase_percentage)\n    # 答案是原有体育馆的数量\n    result = original_gyms\n    # 返回答案\n    return result"]}
{"question": "笑笑有4件上衣，2条裙子，她有多少种不同的穿法．", "target": 8.0, "answer": "", "score": 0, "generation": ["首先，笑笑可以选择穿的上衣有4件，裙子有2条，所以穿法的组合数为4 * 2 = 8种。\n\n```python\ndef solution():\n    # 笑笑有4件上衣\n    num_tops = 4\n    # 笑笑有2条裙子\n    num_skirts = 2\n    # 不同的穿法 = 上衣数量 * 裙子数量\n    total_outfits = num_tops * num_skirts\n    # 答案是不同的穿法数量\n    result = total_outfits\n    # 返回答案\n    return result\n```"]}
{"question": "甲、乙两车从A、B两地同时相向而行，甲车每小时开60km，乙车从B地开到A地需4小时．两车相遇时，甲、乙两车行驶的路程比是3：5，相遇时甲车行驶了多少千米？", "target": 150.0, "answer": 90.0, "score": 0, "generation": ["def solution():\n    # 甲车的速度是每小时60km\n    speed_a = 60\n    # 乙车从B地开到A地需4小时\n    time_b_to_a = 4\n    # 甲车行驶的时间 = 乙车从B地开到A地的时间\n    time_a = time_b_to_a\n    # 甲车行驶的距离与乙车行驶的距离比为3：5\n    distance_ratio = 3 / 5\n    # 甲车行驶的距离比 = 3 / (3 + 5)\n    distance_ratio_a = 3 / (3 + 5)\n    # 甲车行驶的距离 = 甲车行驶的距离比 * 总距离\n    distance_a = distance_ratio_a * speed_a * time_a\n    # 答案是甲车行驶的距离\n    result = distance_a\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人在周长为200米的圆形跑道的同一地点同时起跑，甲每秒跑6米，乙每秒跑4米，经过多少秒钟，甲比乙多跑一圈．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 圆形跑道的周长为200米\n    circumference = 200\n    # 甲每秒跑6米\n    speed_a = 6\n    # 乙每秒跑4米\n    speed_b = 4\n    # 甲比乙多跑一圈，即甲比乙多跑的距离为一个周长\n    extra_distance = circumference\n    # 甲比乙快的速度为甲的速度减去乙的速度\n    speed_difference = speed_a - speed_b\n    # 经过的时间 = 多跑的距离 / 速度差\n    time_to_overtake = extra_distance / speed_difference\n    # 答案是经过的时间（秒）\n    result = time_to_overtake\n    # 返回答案\n    return result"]}
{"question": "修一条450千米的公路，已修好(4/15)，还剩多少千米没修？", "target": 330.0, "answer": 330.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为450千米\n    total_length = 450\n    # 已修好的比例为(4/15)\n    repaired_fraction = 4/15\n    # 已修好的长度 = 总长度 * 已修好的比例\n    repaired_length = total_length * repaired_fraction\n    # 剩余未修长度 = 总长度 - 已修好的长度\n    remaining_length = total_length - repaired_length\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "小明今年14岁，爷爷的年龄比小明的5倍小4岁，爷爷今年多少岁？", "target": 66.0, "answer": 66.0, "score": 1, "generation": ["def solution():\n    # 小明今年的年龄为14岁\n    age_xiaoming = 14\n    # 爷爷的年龄比小明的5倍小4岁\n    age_grandfather = 5 * age_xiaoming - 4\n    # 答案是爷爷今年的年龄\n    result = age_grandfather\n    # 返回答案\n    return result"]}
{"question": "一个厂计划全年生产洗衣机6万台，实际生产了7.2万台，超过了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 计划生产的洗衣机数量为6万台\n    planned_production = 60000\n    # 实际生产的洗衣机数量为7.2万台\n    actual_production = 72000\n    # 超过的数量 = 实际生产数量 - 计划生产数量\n    excess_production = actual_production - planned_production\n    # 超过的百分比 = (超过的数量 / 计划生产数量) * 100%\n    percentage_excess = (excess_production / planned_production) * 100\n    # 答案是超过的百分比\n    result = percentage_excess\n    # 返回答案\n    return result"]}
{"question": "聪聪要看一本484页的书，他每天看86页，看了5天，还剩下多少页没有看？", "target": 54.0, "answer": 54.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为484页\n    total_pages = 484\n    # 每天看的页数为86页\n    pages_per_day = 86\n    # 已经看了5天\n    days_already_read = 5\n    # 已经看的总页数 = 每天看的页数 * 已经看的天数\n    total_pages_read = pages_per_day * days_already_read\n    # 剩下的页数 = 总页数 - 已经看的总页数\n    remaining_pages = total_pages - total_pages_read\n    # 答案是剩下的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "甲数的(2/5)是乙数的(5/6)，乙数是12，甲数=．", "target": 25.0, "answer": 4.0, "score": 0, "generation": ["def solution():\n    # 乙数是12\n    num_b = 12\n    # 甲数的(2/5)是乙数的(5/6)\n    num_a = (2/5) * (5/6) * num_b\n    # 答案是甲数\n    result = num_a\n    # 返回答案\n    return result"]}
{"question": "修一条200米的路，前6天修了全长的15%，照这样计算，修完全程还要多少天？", "target": 34.0, "answer": 40.0, "score": 0, "generation": ["def solution():\n    # 要修的路的总长度为200米\n    total_length = 200\n    # 前6天修了全长的15%\n    completed_fraction = 0.15\n    # 已完成的路程长度 = 总长度 * 完成比例\n    completed_length = total_length * completed_fraction\n    # 剩余路程长度 = 总长度 - 已完成的路程长度\n    remaining_length = total_length - completed_length\n    # 每天完成的路程长度 = 已完成的路程长度 / 6天\n    daily_length = completed_length / 6\n    # 预计剩余天数 = 剩余路程长度 / 每天完成的路程长度\n    remaining_days = remaining_length / daily_length\n    # 预计修完全程需要的总天数 = 已经花费的天数6天 + 预计剩余天数\n    total_days = 6 + remaining_days\n    # 答案是修完全程需要的总天数\n    result = total_days\n    # 返回答案\n    return result"]}
{"question": "两个修路队合修一条公路．甲队修了全长的(4/9)，乙队比甲队多修了(1/9)．乙队修了这条公路的几分之几？", "target": 0.5555555555555556, "answer": 0.5555555555555556, "score": 1, "generation": ["def solution():\n    # 公路总长的分数表示\n    total_length_fraction = 1\n    # 甲队修的比例为4/9\n    team_a_fraction = 4/9\n    # 乙队比甲队多修的比例为1/9\n    extra_fraction = 1/9\n    # 乙队修的比例为甲队修的比例加上乙队比甲队多修的比例\n    team_b_fraction = team_a_fraction + extra_fraction\n    # 乙队修的比例占总长的比例\n    team_b_total_fraction = team_b_fraction / total_length_fraction\n    # 答案是乙队修了这条公路的几分之几\n    result = team_b_total_fraction\n    # 返回答案\n    return result"]}
{"question": "李刚家要栽种一批树苗，这种树苗的成活率一般为75%-80%，如果要栽活1500棵树苗，那么至少应栽多少棵．", "target": 1875.0, "answer": "", "score": 0, "generation": ["首先，我们计算出成活率的范围，即75%和80%对应的树苗数量。然后取较低值作为至少需要栽种的树苗数量。\n\n- 成活率为75%时，栽种的树苗数量为：1500 / 0.75\n- 成活率为80%时，栽种的树苗数量为：1500 / 0.80\n\n因此，至少需要栽种的树苗数量为1500 / 0.80。\n\n```python\ndef solution():\n    # 成活率的范围为75%到80%\n    survival_rate_lower = 0.75\n    survival_rate_upper = 0.80\n    # 要栽活的树苗数量为1500棵\n    num_seedlings = 1500\n    # 计算成活率为75%和80%时的树苗数量\n    min_seedlings_lower = num_seedlings / survival_rate_upper\n    min_seedlings_upper = num_seedlings / survival_rate_lower\n    # 至少需要栽种的树苗数量为成活率80%时的数量\n    min_seedlings_required = min_seedlings_upper\n    # 答案是至少需要栽种的树苗数量\n    result = min_seedlings_required\n    # 返回答案\n    return result\n```"]}
{"question": "六年级同学上山植松树96棵、柏树24棵．松树的棵数是柏树的多少倍？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 松树的数量是96棵\n    num_pine_trees = 96\n    # 柏树的数量是24棵\n    num_cypress_trees = 24\n    # 松树的数量是柏树的多少倍 = 松树的数量 / 柏树的数量\n    multiple = num_pine_trees / num_cypress_trees\n    # 答案是松树的数量是柏树的多少倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "一个卷烟厂上月香烟的销售额为1600万元．如果按销售额的56%缴纳消费税，上月应缴纳消费税款多少万元？", "target": 896.0, "answer": 896.0000000000001, "score": 1, "generation": ["def solution():\n    # 上月香烟的销售额为1600万元\n    sales_amount = 1600\n    # 消费税率为56%\n    tax_rate = 0.56\n    # 应缴纳的消费税款 = 销售额 * 消费税率\n    tax_amount = sales_amount * tax_rate\n    # 答案是应缴纳的消费税款\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "老5屯今年修了4条水渠，总长1608米，等于去年修的3倍．今年比去年多修多少米？", "target": 1072.0, "answer": 1072.0, "score": 1, "generation": ["def solution():\n    # 今年修的水渠条数为4条\n    num_canals_this_year = 4\n    # 今年修的水渠总长为1608米\n    total_length_this_year = 1608\n    # 去年修的水渠总长是今年的3倍\n    total_length_last_year = total_length_this_year / 3\n    # 今年比去年多修的水渠长度 = 今年总长 - 去年总长\n    extra_length = total_length_this_year - total_length_last_year\n    # 答案是今年比去年多修的水渠长度\n    result = extra_length\n    # 返回答案\n    return result"]}
{"question": "水果店运来苹果120千克，梨相当于苹果的80%，是桔子的75%．桔子重多少千克？", "target": 128.0, "answer": 72.0, "score": 0, "generation": ["def solution():\n    # 苹果的重量为120千克\n    weight_apple = 120\n    # 梨相当于苹果的80%\n    weight_pear = 0.8 * weight_apple\n    # 桔子相当于梨的75%\n    weight_orange = 0.75 * weight_pear\n    # 答案是桔子的重量\n    result = weight_orange\n    # 返回答案\n    return result"]}
{"question": "修一条路，第一天修了全长的(1/5)，第二天修了全长的(1/4)，两天一共修了1800米，这条路有多少米？", "target": 4000.0, "answer": 4000.0, "score": 1, "generation": ["def solution():\n    # 第一天修的比例为1/5\n    fraction_day1 = 1/5\n    # 第二天修的比例为1/4\n    fraction_day2 = 1/4\n    # 两天一共修的长度为1800米\n    total_length = 1800\n    # 总长度 = 两天修的长度 / (第一天修的比例 + 第二天修的比例)\n    total_length_of_road = total_length / (fraction_day1 + fraction_day2)\n    # 答案是这条路的总长度\n    result = total_length_of_road\n    # 返回答案\n    return result"]}
{"question": "从甲地到乙地铺一条长840米的路，铺了24天后离乙地还有240米，平均每天铺了多少米？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 铺路的总长度为840米\n    total_distance = 840\n    # 铺了24天后离乙地还有240米\n    remaining_distance = 240\n    # 铺路的总天数为24天\n    total_days = 24\n    # 铺路的平均每天铺设的距离 = (总长度 - 剩余长度) / 总天数\n    average_daily_distance = (total_distance - remaining_distance) / total_days\n    # 答案是平均每天铺设的距离\n    result = average_daily_distance\n    # 返回答案\n    return result"]}
{"question": "商店出售一种电视机，原价1540元，现在降低了(4/11)，降低了多少元？", "target": 560.0, "answer": 560.0, "score": 1, "generation": ["def solution():\n    # 电视机的原价为1540元\n    original_price = 1540\n    # 降低了(4/11)的折扣\n    discount_fraction = 4/11\n    # 降低的金额 = 原价 * 折扣比例\n    discount_amount = original_price * discount_fraction\n    # 答案是降低的金额\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "一个平行四边形的面积是4.8平方分米，高是1.2分米，底=多少分米．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 平行四边形的面积为4.8平方分米\n    area = 4.8\n    # 高为1.2分米\n    height = 1.2\n    # 平行四边形的面积 = 底 * 高\n    # 所以底 = 面积 / 高\n    base = area / height\n    # 答案是平行四边形的底\n    result = base\n    # 返回答案\n    return result"]}
{"question": "一条水渠，已经修了5.6千米，未修的是已修的2.7倍，这条水渠全长多少千米？", "target": 20.72, "answer": 20.72, "score": 1, "generation": ["def solution():\n    # 已修水渠长度为5.6千米\n    repaired_length = 5.6\n    # 未修水渠是已修水渠的2.7倍\n    unrepaired_multiple = 2.7\n    # 未修水渠长度 = 已修水渠长度 * 未修水渠与已修水渠的比例\n    unrepaired_length = repaired_length * unrepaired_multiple\n    # 总长度 = 已修水渠长度 + 未修水渠长度\n    total_length = repaired_length + unrepaired_length\n    # 答案是水渠的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "我国第一长河--长江全长6380km，黄河比长江的(9/10)要短278km．黄河全长多少千米？", "target": 5464.0, "answer": 6102.0, "score": 0, "generation": ["def solution():\n    # 长江的全长为6380km\n    length_yangtze = 6380\n    # 黄河比长江的(9/10)要短278km\n    difference = 278\n    # 黄河的全长 = 长江的全长 - 黄河比长江短的长度\n    length_yellow = length_yangtze - difference\n    # 答案是黄河的全长\n    result = length_yellow\n    # 返回答案\n    return result"]}
{"question": "一本文艺书，小明第一天看了全书的(1/3)，第二天看了余下的(3/5)，还剩下48页，这本书共有多少页．", "target": 180.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 小明第一天看了全书的(1/3)\n    fraction_day1 = 1/3\n    # 第二天看了余下的(3/5)\n    fraction_day2 = 3/5\n    # 剩下的页数为48页\n    remaining_pages = 48\n    # 设全书总页数为x\n    # 第一天看的页数为x * (1/3)\n    pages_day1 = fraction_day1 * x\n    # 第二天看的页数为x * (3/5)\n    pages_day2 = fraction_day2 * x\n    # 剩下的页数为x - 第一天看的页数 - 第二天看的页数\n    remaining_pages = x - pages_day1 - pages_day2\n    # 根据剩下的页数为48页，解方程得到全书总页数x\n    x = remaining_pages / (1 - fraction_day1 - fraction_day2)\n    # 答案是全书总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "学校建综合楼，实际投资170万元，比计划节约了15%，计划投资多少万元？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 实际投资为170万元\n    actual_investment = 170\n    # 节约了15%，即实际投资为原计划的85%\n    actual_investment_percentage = 0.85\n    # 计划投资 = 实际投资 / 实际投资比例\n    planned_investment = actual_investment / actual_investment_percentage\n    # 答案是计划投资的金额\n    result = planned_investment\n    # 返回答案\n    return result"]}
{"question": "每包30本，一共要寄240本书，需要几包？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 每包书的数量为30本\n    books_per_package = 30\n    # 总共需要寄出的书籍数量为240本\n    total_books = 240\n    # 需要的包裹数量 = 总书籍数量 / 每包书的数量\n    total_packages = total_books / books_per_package\n    # 答案是需要的包裹数量\n    result = total_packages\n    # 返回答案\n    return result"]}
{"question": "广场新种了一批花木，其中(5/16)是玫瑰，(3/8)是月季．已知月季有36棵，玫瑰有多少棵？", "target": 30.0, "answer": 60.0, "score": 0, "generation": ["def solution():\n    # 月季的数量是36棵\n    num_roses = 36\n    # 花木中月季的比例是(3/8)\n    proportion_roses = 3/8\n    # 花木中玫瑰的比例是(5/16)\n    proportion_other_flowers = 5/16\n    # 月季的比例对应的总数量 = 月季的数量\n    total_flowers_according_to_roses = num_roses / proportion_roses\n    # 玫瑰的数量 = 总数量 - 月季的数量\n    num_total_roses = total_flowers_according_to_roses - num_roses\n    # 答案是玫瑰的数量\n    result = num_total_roses\n    # 返回答案\n    return result"]}
