{"question": "在一正方形花池的4周栽了44棵柳树，每两棵柳树之间的间隔是20米，这个正方形的周长=多少米？", "target": 880.0, "answer": 800.0, "score": 0, "generation": ["def solution():\n    # 花池四周栽了44棵柳树\n    num_willow_trees = 44\n    # 每两棵柳树之间的间隔是20米\n    distance_between_trees = 20\n    # 因为正方形有4条边，每条边上的柳树数量 = 总柳树数量 / 4\n    trees_per_side = num_willow_trees / 4\n    # 每条边的长度 = (柳树数量 - 1) * 间隔距离\n    side_length = (trees_per_side - 1) * distance_between_trees\n    # 正方形的周长 = 4 * 每条边的长度\n    perimeter = 4 * side_length\n    # 答案是正方形的周长\n    result = perimeter\n    # 返回答案\n    return result"]}
{"question": "张明有120元钱，买书用去80%，买文具的钱是买书的15%．买文具用去多少元？", "target": 14.4, "answer": 14.399999999999999, "score": 1, "generation": ["def solution():\n    # 张明有120元钱\n    total_money = 120\n    # 买书用去80%\n    book_percentage = 0.8\n    # 买书的钱 = 总钱数 * 买书比例\n    book_cost = total_money * book_percentage\n    # 买文具的钱是买书的15%\n    stationery_percentage = 0.15\n    # 买文具的钱 = 买书的钱 * 买文具比例\n    stationery_cost = book_cost * stationery_percentage\n    # 答案是买文具用去的钱\n    result = stationery_cost\n    # 返回答案\n    return result"]}
{"question": "一个工厂要生产3000个零件，前6天生产了750个，剩下的要在15天内完成，平均每天生产多少个？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 总零件数为3000个\n    total_parts = 3000\n    # 前6天生产了750个\n    parts_produced_in_6_days = 750\n    # 剩余零件数 = 总零件数 - 已生产的零件数\n    remaining_parts = total_parts - parts_produced_in_6_days\n    # 剩余时间15天\n    remaining_days = 15\n    # 平均每天生产零件数 = 剩余零件数 / 剩余天数\n    daily_production = remaining_parts / remaining_days\n    # 答案是平均每天生产零件数\n    result = daily_production\n    # 返回答案\n    return result"]}
{"question": "一本字典定价9元，0.8出售后还赚20%，这本字典进价=多少元．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 字典的定价为9元\n    listed_price = 9\n    # 以0.8的折扣出售\n    discount = 0.8\n    # 出售价格 = 定价 * 折扣\n    selling_price = listed_price * discount\n    # 出售后还赚20%，即出售价格是进价的120%\n    profit_percentage = 0.2\n    # 进价 = 出售价格 / (1 + 利润率)\n    cost_price = selling_price / (1 + profit_percentage)\n    # 答案是这本字典的进价\n    result = cost_price\n    # 返回答案\n    return result"]}
{"question": "修一段长324米的路，前8小时共修了240米，剩下的每小时修21米，还要几小时才能修完？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 路的总长度为324米\n    total_length = 324\n    # 前8小时共修了240米\n    length_repaired_initial = 240\n    # 剩下的路 = 总长度 - 已修的长度\n    remaining_length = total_length - length_repaired_initial\n    # 剩下的路每小时修21米\n    repair_rate = 21\n    # 还需要的时间 = 剩下的路 / 每小时修的长度\n    time_needed = remaining_length / repair_rate\n    # 答案是还需要的时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "一个圆的半径是3厘米，如果把它的半径延长2厘米，那么面积增加多少．", "target": 50.26548, "answer": 50.26548245743669, "score": 1, "generation": ["def solution():\n    # 初始圆的半径是3厘米\n    initial_radius = 3\n    # 半径延长了2厘米\n    radius_increase = 2\n    # 新的圆的半径 = 初始半径 + 半径延长\n    new_radius = initial_radius + radius_increase\n    # 圆的面积公式是πr²\n    import math\n    # 初始圆的面积 = π * (初始半径)²\n    initial_area = math.pi * initial_radius ** 2\n    # 新的圆的面积 = π * (新的半径)²\n    new_area = math.pi * new_radius ** 2\n    # 面积增加量 = 新的圆的面积 - 初始圆的面积\n    area_increase = new_area - initial_area\n    # 答案是面积增加量\n    result = area_increase\n    # 返回答案\n    return result"]}
{"question": "山上有苹果树200棵，桃树比苹果树多(1/5)，桃树有多少棵？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 山上有苹果树200棵\n    num_apple_trees = 200\n    # 桃树比苹果树多(1/5)\n    peach_tree_increase = 1/5\n    # 桃树的数量 = 苹果树的数量 * (1 + 增加比例)\n    num_peach_trees = num_apple_trees * (1 + peach_tree_increase)\n    # 答案是桃树的数量\n    result = num_peach_trees\n    # 返回答案\n    return result"]}
{"question": "除数是6，商是75，余数是1，被除数=．", "target": 451.0, "answer": 451.0, "score": 1, "generation": ["def solution():\n    # 除数是6\n    divisor = 6\n    # 商是75\n    quotient = 75\n    # 余数是1\n    remainder = 1\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一捆电线，第一次用去全长的(1/4)，第二天用去余下的(1/5)，这时还剩108米．这捆电线共长多少米？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 设电线的总长度为x米\n    # 第一次用去全长的(1/4)，剩余(3/4)x\n    # 第二天用去余下的(1/5)，即(3/4)x * (1/5) = (3/20)x\n    # 剩余的电线 = (3/4)x - (3/20)x = (15/20)x - (3/20)x = (12/20)x = (3/5)x\n    # 根据题意，(3/5)x = 108\n    # 解方程得x = 108 * (5/3) = 180\n    remaining_length = 108\n    # 剩余部分占总长度的比例是3/5\n    remaining_fraction = 3/5\n    # 总长度 = 剩余长度 / 剩余比例\n    total_length = remaining_length / remaining_fraction\n    # 答案是电线的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "甲乙两辆汽车同时从同一地点向相反的方向行驶，4小时后两车相距300千米，已知甲车每小时行40千米，乙车每小时行多少千米？", "target": 35.0, "answer": 35.0, "score": 1, "generation": ["def solution():\n    # 两车相距300千米\n    distance = 300\n    # 行驶时间为4小时\n    time = 4\n    # 甲车的速度是每小时40千米\n    speed_a = 40\n    # 因为两车向相反方向行驶，所以两车的相对速度 = 甲车速度 + 乙车速度\n    # 相对速度 = 距离 / 时间\n    relative_speed = distance / time\n    # 乙车的速度 = 相对速度 - 甲车速度\n    speed_b = relative_speed - speed_a\n    # 答案是乙车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两根绳子分别长9米和6米，各剪去同样长的一段后，乙根的长是甲根的(3/5)，甲根剪去多少米．", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 甲绳子的初始长度为9米\n    initial_length_a = 9\n    # 乙绳子的初始长度为6米\n    initial_length_b = 6\n    # 剪去同样长的一段后，乙根的长度是甲根的(3/5)\n    ratio_after_cut = 3/5\n    # 设剪去的长度为x米\n    # 剪去后甲绳子的长度 = 初始长度 - x\n    # 剪去后乙绳子的长度 = 初始长度 - x\n    # 根据题意，剪去后乙绳子的长度 = 剪去后甲绳子的长度 * (3/5)\n    # 即 (6 - x) = (9 - x) * (3/5)\n    # 解这个方程\n    # 5*(6 - x) = 3*(9 - x)\n    # 30 - 5x = 27 - 3x\n    # 30 - 27 = 5x - 3x\n    # 3 = 2x\n    # x = 1.5\n    x = (5 * initial_length_b - 3 * initial_length_a) / (5 - 3)\n    # 答案是甲根剪去的长度\n    result = x\n    # 返回答案\n    return result"]}
{"question": "鸡蛋有120个，鸭蛋比鸡蛋多(1/6)，请问两种蛋共有几个？", "target": 260.0, "answer": 260.0, "score": 1, "generation": ["def solution():\n    # 鸡蛋的数量为120个\n    num_chicken_eggs = 120\n    # 鸭蛋比鸡蛋多(1/6)\n    duck_eggs_increase = 1/6\n    # 鸭蛋的数量 = 鸡蛋的数量 * (1 + 增加比例)\n    num_duck_eggs = num_chicken_eggs * (1 + duck_eggs_increase)\n    # 两种蛋的总数量 = 鸡蛋的数量 + 鸭蛋的数量\n    total_eggs = num_chicken_eggs + num_duck_eggs\n    # 答案是两种蛋的总数量\n    result = total_eggs\n    # 返回答案\n    return result"]}
{"question": "计算：234+432-4*8+330/5=．", "target": 700.0, "answer": 700.0, "score": 1, "generation": ["def solution():\n    # 计算234 + 432\n    step1 = 234 + 432\n    # 计算4 * 8\n    step2 = 4 * 8\n    # 计算330 / 5\n    step3 = 330 / 5\n    # 计算总和 = step1 - step2 + step3\n    total = step1 - step2 + step3\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "54除多少的商是6，余数是20．", "target": 344.0, "answer": 5.666666666666667, "score": 0, "generation": ["def solution():\n    # 被除数是54\n    dividend = 54\n    # 商是6\n    quotient = 6\n    # 余数是20\n    remainder = 20\n    # 根据除法公式：被除数 = 除数 * 商 + 余数\n    # 所以除数 = (被除数 - 余数) / 商\n    divisor = (dividend - remainder) / quotient\n    # 答案是除数\n    result = divisor\n    # 返回答案\n    return result"]}
{"question": "图书馆里有一些科技书和文艺书，其中科技书占(4/5)，如果用文艺书换走科技书20本，那么科技书占全部的(8/15)，问原来科技书有多少本？", "target": 60.0, "answer": 28.0, "score": 0, "generation": ["def solution():\n    # 设原来科技书有x本，文艺书有y本\n    # 根据题意，科技书占(4/5)，所以 x / (x + y) = 4/5\n    # 用文艺书换走科技书20本后，科技书占(8/15)，所以 (x - 20) / (x + y - 20) = 8/15\n    # 解这个方程组\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x / (x + y), 4/5)\n    eq2 = Eq((x - 20) / (x + y - 20), 8/15)\n    solution = solve((eq1, eq2), (x, y))\n    # 答案是原来科技书的数量\n    result = solution[x]\n    # 返回答案\n    return result"]}
{"question": "甲队调(1/6)的人给乙队，两队的人数就相等．原来乙队是甲队人数的多少．", "target": 0.6666666666666666, "answer": 0.6666666666666666, "score": 1, "generation": ["def solution():\n    # 设甲队原来的人数为A，乙队原来的人数为B\n    # 甲队调(1/6)的人给乙队后，两队人数相等\n    # 甲队调出(1/6)后剩下的人数为 (5/6)A\n    # 乙队接收(1/6)A后的人数为 B + (1/6)A\n    # 因为两队人数相等，所以 (5/6)A = B + (1/6)A\n    # 解这个方程得到 B = (5/6)A - (1/6)A = (4/6)A = (2/3)A\n    # 所以原来乙队是甲队人数的(2/3)\n    result = 2/3\n    # 返回答案\n    return result"]}
{"question": "一项工程，12个工人25天完成．如果要20天完成，需要多少个工人？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 初始工人数量为12人\n    initial_workers = 12\n    # 初始完成天数为25天\n    initial_days = 25\n    # 目标完成天数为20天\n    target_days = 20\n    # 总工作量 = 工人数量 * 工作天数\n    total_work = initial_workers * initial_days\n    # 需要的工人数量 = 总工作量 / 目标完成天数\n    required_workers = total_work / target_days\n    # 答案是需要的工人数量\n    result = required_workers\n    # 返回答案\n    return result"]}
{"question": "教室的长是8米，宽是6米，高是3.5米，现在要粉刷教室4周的墙壁，扣除门窗的面积16平方米，要粉刷的面积=多少平方米？如果每2平方米用涂料1千克，粉刷这个教室共需涂料多少千克？", "target": [82, 41], "answer": [82, 41], "score": 1, "generation": ["def solution():\n    # 教室的长是8米\n    length = 8\n    # 教室的宽是6米\n    width = 6\n    # 教室的高是3.5米\n    height = 3.5\n    # 门窗的面积是16平方米\n    door_window_area = 16\n    # 每2平方米用涂料1千克\n    paint_per_area = 1 / 2\n    \n    # 计算四周墙壁的总面积\n    # 四周墙壁的面积 = 2 * (长 * 高 + 宽 * 高)\n    total_wall_area = 2 * (length * height + width * height)\n    \n    # 扣除门窗的面积后需要粉刷的面积\n    area_to_paint = total_wall_area - door_window_area\n    \n    # 计算需要的涂料量\n    paint_needed = area_to_paint * paint_per_area\n    \n    # 返回需要粉刷的面积和需要的涂料量\n    result = (area_to_paint, paint_needed)\n    return result"]}
{"question": "王华和张强两人骑自行车同时从两地相对出发，王华骑到全程的(5/8)与张强相遇，张强继续以每小时12千米的速度向前骑，用2.5小时骑完余下的路程，求王华的速度．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 张强的速度是每小时12千米\n    zhang_speed = 12\n    # 张强骑完余下路程的时间是2.5小时\n    zhang_time = 2.5\n    # 张强骑完余下路程的距离 = 速度 * 时间\n    zhang_distance = zhang_speed * zhang_time\n    # 因为王华骑到全程的5/8与张强相遇，所以张强骑的距离是全程的3/8\n    total_distance = zhang_distance / (3/8)\n    # 王华骑的距离 = 全程的5/8\n    wang_distance = total_distance * (5/8)\n    # 王华骑的时间 = 张强骑的时间 = 2.5小时\n    wang_time = zhang_time\n    # 王华的速度 = 王华骑的距离 / 王华骑的时间\n    wang_speed = wang_distance / wang_time\n    # 答案是王华的速度\n    result = wang_speed\n    # 返回答案\n    return result"]}
{"question": "饲养场养了257只公鸡，268只母鸡，平均每只卖35元，一共卖多少元钱？", "target": 18375.0, "answer": 18375.0, "score": 1, "generation": ["def solution():\n    # 公鸡的数量为257只\n    num_roosters = 257\n    # 母鸡的数量为268只\n    num_hens = 268\n    # 每只鸡的售价为35元\n    price_per_chicken = 35\n    # 总鸡数 = 公鸡数量 + 母鸡数量\n    total_chickens = num_roosters + num_hens\n    # 总售价 = 总鸡数 * 每只鸡的售价\n    total_price = total_chickens * price_per_chicken\n    # 答案是一共卖的钱数\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "某工程队4天完成一项工程的(2/7)，照这样计算，完成这项工程一共需要多少天？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 4天完成工程的(2/7)\n    days_for_partial_completion = 4\n    partial_completion_fraction = 2/7\n    # 计算每天完成的工程比例\n    daily_completion_rate = partial_completion_fraction / days_for_partial_completion\n    # 完成整个工程需要的天数 = 1 / 每天完成的工程比例\n    total_days_needed = 1 / daily_completion_rate\n    # 答案是完成整个工程需要的天数\n    result = total_days_needed\n    # 返回答案\n    return result"]}
{"question": "春季植树．五年级植树12棵，六年级植树16棵，全校植树的棵数是5、六年级植树棵数的3倍，全校共植树多少棵？", "target": 84.0, "answer": 84.0, "score": 1, "generation": ["def solution():\n    # 五年级植树12棵\n    fifth_grade_trees = 12\n    # 六年级植树16棵\n    sixth_grade_trees = 16\n    # 全校植树的总数是5、六年级植树棵数的3倍\n    total_trees_multiplier = 3\n    # 5、六年级植树的总数 = 五年级植树数 + 六年级植树数\n    fifth_sixth_total = fifth_grade_trees + sixth_grade_trees\n    # 全校植树的总数 = 5、六年级植树的总数 * 3\n    total_trees = fifth_sixth_total * total_trees_multiplier\n    # 答案是全校植树的总数\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "小明8分钟行走了35米，那么小明平均每分钟行走了多少．", "target": 4.375, "answer": 4.375, "score": 1, "generation": ["def solution():\n    # 小明行走的总距离为35米\n    total_distance = 35\n    # 行走的总时间为8分钟\n    total_time = 8\n    # 平均每分钟行走的距离 = 总距离 / 总时间\n    average_speed = total_distance / total_time\n    # 答案是平均每分钟行走的距离\n    result = average_speed\n    # 返回答案\n    return result"]}
{"question": "文具盒22元一个，买3个文具盒，一共需要多少元．", "target": 66.0, "answer": 66.0, "score": 1, "generation": ["def solution():\n    # 文具盒的价格为22元一个\n    price_per_box = 22\n    # 购买文具盒的数量为3个\n    num_boxes = 3\n    # 总费用 = 文具盒的价格 * 购买的数量\n    total_cost = price_per_box * num_boxes\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "服装店购进一批衬衫，其中男式衬衫150件，女式衬衫比男式衬衫的(2/5)多20件．购进女式衬衫多少件？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 男式衬衫的数量为150件\n    num_mens_shirts = 150\n    # 女式衬衫比男式衬衫的(2/5)多20件\n    womens_shirts_fraction = 2/5\n    additional_shirts = 20\n    # 女式衬衫的数量 = 男式衬衫数量 * (2/5) + 20\n    num_womens_shirts = num_mens_shirts * womens_shirts_fraction + additional_shirts\n    # 答案是女式衬衫的数量\n    result = num_womens_shirts\n    # 返回答案\n    return result"]}
{"question": "为了庆祝国庆节，在润扬大桥的栏杆上插彩旗，从头到尾共插500面，每两面彩旗中间放一盆花，一共需要多少盆花．", "target": 499.0, "answer": 499.0, "score": 1, "generation": ["def solution():\n    # 彩旗的总数为500面\n    total_flags = 500\n    # 每两面彩旗中间放一盆花\n    flowers_per_gap = 1\n    # 彩旗之间的间隔数 = 彩旗总数 - 1\n    total_gaps = total_flags - 1\n    # 需要的花盆总数 = 间隔数 * 每个间隔的花盆数\n    total_flowers = total_gaps * flowers_per_gap\n    # 答案是需要的花盆总数\n    result = total_flowers\n    # 返回答案\n    return result"]}
{"question": "果园里苹果树棵数的(2/5)相当于梨树棵数的(3/7)，梨树56棵，苹果树有多少棵？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 梨树的数量为56棵\n    pear_trees = 56\n    # 苹果树棵数的(2/5)相当于梨树棵数的(3/7)\n    apple_fraction = 2/5\n    pear_fraction = 3/7\n    # 苹果树棵数的(2/5) = 梨树棵数的(3/7)\n    # 所以苹果树的数量 = (梨树的数量 * 梨树的比例) / 苹果树的比例\n    apple_trees = (pear_trees * pear_fraction) / apple_fraction\n    # 答案是苹果树的数量\n    result = apple_trees\n    # 返回答案\n    return result"]}
{"question": "食堂大米比面粉多(5/6)，正好多300千克，食堂面粉有多少千克？", "target": 360.0, "answer": 360.0, "score": 1, "generation": ["def solution():\n    # 大米比面粉多(5/6)\n    rice_fraction_more = 5/6\n    # 大米比面粉多300千克\n    rice_more_kg = 300\n    # 设面粉的重量为x千克，则大米的重量为x + (5/6)*x = (11/6)*x\n    # 根据题意，(5/6)*x = 300\n    # 所以面粉的重量x = 300 / (5/6)\n    flour_kg = rice_more_kg / rice_fraction_more\n    # 答案是食堂面粉的重量\n    result = flour_kg\n    # 返回答案\n    return result"]}
{"question": "小红到书店想买一本7.8元的童话书，可是差0.7元，她只好买了5.1元的笔记本一本，剩下的钱正好买了一枝钢笔，这枝钢笔多少钱？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 童话书的价格是7.8元\n    fairy_tale_price = 7.8\n    # 小红差0.7元买童话书\n    money_short = 0.7\n    # 小红实际拥有的钱 = 童话书价格 - 差的钱\n    money_have = fairy_tale_price - money_short\n    # 笔记本的价格是5.1元\n    notebook_price = 5.1\n    # 买笔记本后剩下的钱 = 实际拥有的钱 - 笔记本价格\n    remaining_money = money_have - notebook_price\n    # 剩下的钱正好买了一枝钢笔，所以钢笔的价格 = 剩下的钱\n    pen_price = remaining_money\n    # 答案是钢笔的价格\n    result = pen_price\n    # 返回答案\n    return result"]}
{"question": "爸爸开车从家去动物园，去时平均每时行37.5千米，0.4时到达．回来时，为了赶时间，只用了0.3时．爸爸回来时平均每时行多少千米？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 去时的平均速度为每小时37.5千米\n    speed_going = 37.5\n    # 去时用了0.4小时\n    time_going = 0.4\n    # 计算家到动物园的距离 = 速度 * 时间\n    distance = speed_going * time_going\n    # 回来时用了0.3小时\n    time_returning = 0.3\n    # 回来时的平均速度 = 距离 / 时间\n    speed_returning = distance / time_returning\n    # 答案是回来时的平均速度\n    result = speed_returning\n    # 返回答案\n    return result"]}
{"question": "在一个比例中，两个内项的积是10，其中一个外项是(5/2)，另一个外项=．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 两个内项的积是10\n    product_of_inner_terms = 10\n    # 其中一个外项是(5/2)\n    one_outer_term = 5/2\n    # 在比例中，两个内项的积等于两个外项的积\n    # 所以另一个外项 = 两个内项的积 / 已知的外项\n    other_outer_term = product_of_inner_terms / one_outer_term\n    # 答案是另一个外项\n    result = other_outer_term\n    # 返回答案\n    return result"]}
{"question": "某机关原有工作人员120人，现有90人．精简了百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 原有工作人员120人\n    original_staff = 120\n    # 现有工作人员90人\n    current_staff = 90\n    # 精简的人数 = 原有工作人员 - 现有工作人员\n    reduced_staff = original_staff - current_staff\n    # 精简的百分比 = (精简的人数 / 原有工作人员) * 100\n    reduction_percentage = (reduced_staff / original_staff) * 100\n    # 答案是精简的百分比\n    result = reduction_percentage\n    # 返回答案\n    return result"]}
{"question": "一桶油，分两次倒完．第一次倒出全部的(1/4)，第二次比第一次多倒出75千克，求第一次倒出多少千克？", "target": 37.5, "answer": 37.5, "score": 1, "generation": ["def solution():\n    # 第一次倒出全部的(1/4)\n    first_pour_fraction = 1/4\n    # 第二次比第一次多倒出75千克\n    additional_pour = 75\n    # 设总油量为x千克\n    # 第一次倒出x * (1/4)千克\n    # 第二次倒出x * (1/4) + 75千克\n    # 因为两次倒完，所以x = x * (1/4) + x * (1/4) + 75\n    # 解方程得x = 150千克\n    total_oil = 150\n    # 第一次倒出的油量 = 总油量 * (1/4)\n    first_pour = total_oil * first_pour_fraction\n    # 答案是第一次倒出的油量\n    result = first_pour\n    # 返回答案\n    return result"]}
{"question": "光大花卉市场举办花展，展出玫瑰780盆，展出的兰花是玫瑰的(2/5)，展出兰花多少盆？", "target": 312.0, "answer": 312.0, "score": 1, "generation": ["def solution():\n    # 展出的玫瑰数量为780盆\n    num_roses = 780\n    # 展出的兰花数量是玫瑰的(2/5)\n    fraction_orchids = 2/5\n    # 展出的兰花数量 = 玫瑰数量 * 兰花比例\n    num_orchids = num_roses * fraction_orchids\n    # 答案是展出的兰花数量\n    result = num_orchids\n    # 返回答案\n    return result"]}
{"question": "六年级一班有50人，数学测验有38人得优秀，成绩优秀的学生占全班总人数的百分之几？", "target": 76.0, "answer": 76.0, "score": 1, "generation": ["def solution():\n    # 六年级一班的总人数为50人\n    total_students = 50\n    # 数学测验得优秀的人数为38人\n    excellent_students = 38\n    # 成绩优秀的学生占全班总人数的比例 = 优秀学生人数 / 总人数\n    excellent_ratio = excellent_students / total_students\n    # 将比例转换为百分数\n    excellent_percentage = excellent_ratio * 100\n    # 答案是成绩优秀的学生占全班总人数的百分数\n    result = excellent_percentage\n    # 返回答案\n    return result"]}
{"question": "甲乙两个修路队合修完一条公路，甲队修的公路长增加到2倍多30米，才和乙对修的一样多，甲队修了250米．这条公路长多少米？", "target": 780.0, "answer": 780.0, "score": 1, "generation": ["def solution():\n    # 甲队修了250米\n    team_a_length = 250\n    # 甲队修的公路长增加到2倍多30米，才和乙队修的一样多\n    team_b_length = 2 * team_a_length + 30\n    # 这条公路的总长度 = 甲队修的长度 + 乙队修的长度\n    total_road_length = team_a_length + team_b_length\n    # 答案是这条公路的总长度\n    result = total_road_length\n    # 返回答案\n    return result"]}
{"question": "小刚和小强在400米的环形跑道上，从同一地点相背出发．小刚每秒跑4.5米，小强每秒跑5.5米，出发后多少秒两人第一次相遇？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 环形跑道的长度为400米\n    track_length = 400\n    # 小刚的速度是每秒4.5米\n    speed_xiaogang = 4.5\n    # 小强的速度是每秒5.5米\n    speed_xiaoqiang = 5.5\n    # 因为两人相背出发，相对速度为两人速度之和\n    relative_speed = speed_xiaogang + speed_xiaoqiang\n    # 相遇时间 = 跑道长度 / 相对速度\n    time_to_meet = track_length / relative_speed\n    # 答案是两人第一次相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "一根钢材长18.4米，锯下3.8米后，剩下的比锯下的长几米？", "target": 10.8, "answer": 10.799999999999997, "score": 1, "generation": ["def solution():\n    # 钢材的总长度为18.4米\n    total_length = 18.4\n    # 锯下的长度为3.8米\n    cut_length = 3.8\n    # 剩下的长度 = 总长度 - 锯下的长度\n    remaining_length = total_length - cut_length\n    # 剩下的比锯下的长的长度 = 剩下的长度 - 锯下的长度\n    difference = remaining_length - cut_length\n    # 答案是剩下的比锯下的长的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "在一个停车场上，汽车、摩托车共停了48辆，其中每辆汽车有4个轮子，每辆摩托车有3个轮子，这些车共172个轮子，停车场上有摩托车多少辆．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 汽车和摩托车的总数为48辆\n    total_vehicles = 48\n    # 汽车有4个轮子\n    wheels_per_car = 4\n    # 摩托车有3个轮子\n    wheels_per_motorcycle = 3\n    # 总轮子数为172个\n    total_wheels = 172\n    # 设汽车的数量为x，摩托车的数量为y\n    # 根据题意，x + y = 48\n    # 4x + 3y = 172\n    # 解这个方程组\n    # 从第一个方程中，x = 48 - y\n    # 将x代入第二个方程：4*(48 - y) + 3y = 172\n    # 192 - 4y + 3y = 172\n    # -y = -20\n    # y = 20\n    # 所以摩托车的数量为20辆\n    num_motorcycles = 20\n    # 答案是摩托车的数量\n    result = num_motorcycles\n    # 返回答案\n    return result"]}
{"question": "比12与40的积少60的数=．", "target": 420.0, "answer": 420.0, "score": 1, "generation": ["def solution():\n    # 第一个数是12\n    num1 = 12\n    # 第二个数是40\n    num2 = 40\n    # 积 = 12 * 40\n    product = num1 * num2\n    # 比积少60的数 = 积 - 60\n    result = product - 60\n    # 返回答案\n    return result"]}
{"question": "王老师要买一个足球和4根跳绳共用50元，每个足球38元，每根跳绳多少元？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 王老师要买一个足球和4根跳绳共用50元\n    total_cost = 50\n    # 每个足球的价格是38元\n    price_football = 38\n    # 跳绳的数量是4根\n    num_ropes = 4\n    # 跳绳的总价格 = 总价格 - 足球的价格\n    total_price_ropes = total_cost - price_football\n    # 每根跳绳的价格 = 跳绳的总价格 / 跳绳的数量\n    price_per_rope = total_price_ropes / num_ropes\n    # 答案是每根跳绳的价格\n    result = price_per_rope\n    # 返回答案\n    return result"]}
{"question": "一个圆形水池周围每隔2米栽一棵杨树，共栽了40棵，水池的周长=多少米．", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 共栽了40棵杨树\n    num_trees = 40\n    # 每隔2米栽一棵杨树\n    distance_between_trees = 2\n    # 水池的周长 = 杨树的数量 * 每两棵树之间的距离\n    circumference = num_trees * distance_between_trees\n    # 答案是水池的周长\n    result = circumference\n    # 返回答案\n    return result"]}
{"question": "(3/7)再添上多少个(1/7)是1．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 初始分数为(3/7)\n    initial_fraction = 3/7\n    # 目标分数为1\n    target_fraction = 1\n    # 每次添加的分数为(1/7)\n    add_fraction = 1/7\n    # 需要添加的次数 = (目标分数 - 初始分数) / 每次添加的分数\n    num_additions = (target_fraction - initial_fraction) / add_fraction\n    # 答案是需要添加的次数\n    result = num_additions\n    # 返回答案\n    return result"]}
{"question": "喜洋洋和灰太狼在体育场进行20000米赛跑，灰太狼的速度是喜洋洋速度的6倍．当它们从起点一起出发后，喜洋洋不停地跑，灰太狼跑到某一处开始睡觉，当灰太狼醒来后，喜洋洋已经领先灰太狼10000米，灰太狼奋起直追，当喜洋洋到达终点时，灰太狼仍落后200米，那么灰太狼睡觉期间，喜洋洋跑了多少米．", "target": 16700.0, "answer": 16700.0, "score": 1, "generation": ["def solution():\n    # 总赛跑距离为20000米\n    total_distance = 20000\n    # 灰太狼的速度是喜洋洋速度的6倍\n    wolf_speed_ratio = 6\n    # 喜洋洋到达终点时，灰太狼落后200米\n    wolf_behind_at_end = 200\n    # 灰太狼睡觉醒来时，喜洋洋领先10000米\n    wolf_behind_when_woke = 10000\n    # 设喜洋洋的速度为v，灰太狼的速度为6v\n    # 喜洋洋跑完全程的时间 = 总距离 / 喜洋洋的速度 = 20000 / v\n    # 灰太狼跑的距离 = 6v * (20000 / v) - 200 = 20000 - 200 = 19800\n    # 灰太狼睡觉的时间 = 喜洋洋跑完全程的时间 - 灰太狼跑19800米的时间\n    # 灰太狼跑19800米的时间 = 19800 / (6v) = 3300 / v\n    # 灰太狼睡觉的时间 = (20000 / v) - (3300 / v) = 16700 / v\n    # 喜洋洋在灰太狼睡觉期间跑的距离 = v * (16700 / v) = 16700\n    # 答案是喜洋洋在灰太狼睡觉期间跑的距离\n    result = 16700\n    # 返回答案\n    return result"]}
{"question": "某厂去年第一季度各月分别完成本季度计划的(2/5)、(1/3)、(3/8)，超额完成第一季度计划的几分之几？", "target": 0.10833333333333334, "answer": 0.10833333333333339, "score": 1, "generation": ["def solution():\n    # 第一季度各月完成本季度计划的比例分别为(2/5)、(1/3)、(3/8)\n    month1_completion = 2/5\n    month2_completion = 1/3\n    month3_completion = 3/8\n    # 第一季度总完成比例 = 各月完成比例之和\n    total_completion = month1_completion + month2_completion + month3_completion\n    # 超额完成比例 = 总完成比例 - 1（因为1表示完成计划的100%）\n    excess_completion = total_completion - 1\n    # 答案是超额完成第一季度计划的比例\n    result = excess_completion\n    # 返回答案\n    return result"]}
{"question": "一个除法算式，除数是2.5，商是5，被除数=．", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 除数是2.5\n    divisor = 2.5\n    # 商是5\n    quotient = 5\n    # 被除数 = 除数 * 商\n    dividend = divisor * quotient\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开往乙地，行了全程(3/8)时，正好是108千米，如果这辆汽车行了全程的(2/3)，这时，这辆汽车行了多少千米？", "target": 192.0, "answer": 192.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶了全程的(3/8)时，行驶了108千米\n    distance_part1 = 108\n    fraction_part1 = 3/8\n    # 全程的距离 = 行驶的距离 / 行驶的比例\n    total_distance = distance_part1 / fraction_part1\n    # 汽车行驶了全程的(2/3)时\n    fraction_part2 = 2/3\n    # 行驶的距离 = 全程的距离 * 行驶的比例\n    distance_part2 = total_distance * fraction_part2\n    # 答案是汽车行驶的距离\n    result = distance_part2\n    # 返回答案\n    return result"]}
{"question": "甲数的(4/5)与乙数的(3/4)相等，乙数是24，甲数=．", "target": 22.5, "answer": 22.5, "score": 1, "generation": ["def solution():\n    # 乙数是24\n    number_b = 24\n    # 乙数的(3/4) = 24 * (3/4)\n    fraction_b = number_b * (3/4)\n    # 甲数的(4/5)等于乙数的(3/4)\n    fraction_a = fraction_b\n    # 甲数 = 甲数的(4/5) / (4/5)\n    number_a = fraction_a / (4/5)\n    # 答案是甲数\n    result = number_a\n    # 返回答案\n    return result"]}
{"question": "一列火车每小时行95千米，小明家和省城相距285千米，小明坐火车到省城需要几小时？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 火车的速度是每小时95千米\n    train_speed = 95\n    # 小明家和省城之间的距离是285千米\n    distance = 285\n    # 所需时间 = 距离 / 速度\n    time_needed = distance / train_speed\n    # 答案是所需时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "800板巧克力，每2板包一包，每8包装一盒．一共可以装多少盒？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 巧克力的总数量为800板\n    total_chocolates = 800\n    # 每包包含2板巧克力\n    chocolates_per_package = 2\n    # 每盒包含8包\n    packages_per_box = 8\n    # 总包数 = 总巧克力数量 / 每包包含的巧克力数量\n    total_packages = total_chocolates / chocolates_per_package\n    # 总盒数 = 总包数 / 每盒包含的包数\n    total_boxes = total_packages / packages_per_box\n    # 答案是一共可以装的盒数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "王叔叔存入银行6000元，年利率是3.24%，存期2年．到期后可以取回多少钱？", "target": 6388.8, "answer": 6388.8, "score": 1, "generation": ["def solution():\n    # 王叔叔存入银行的金额为6000元\n    principal = 6000\n    # 年利率是3.24%\n    annual_interest_rate = 0.0324\n    # 存期是2年\n    years = 2\n    # 计算利息 = 本金 * 年利率 * 存期\n    interest = principal * annual_interest_rate * years\n    # 到期后可以取回的总金额 = 本金 + 利息\n    total_amount = principal + interest\n    # 答案是到期后可以取回的总金额\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "小涛家买了一套房子准备装修，原计划花12万元装修，实际装修后用去了10.8万元．小涛家实际用去的装修费比原计划节约百分之几？", "target": 10.0, "answer": 9.999999999999993, "score": 1, "generation": ["def solution():\n    # 原计划装修费用为12万元\n    planned_cost = 12\n    # 实际装修费用为10.8万元\n    actual_cost = 10.8\n    # 节约的费用 = 原计划费用 - 实际费用\n    saved_cost = planned_cost - actual_cost\n    # 节约的百分比 = (节约的费用 / 原计划费用) * 100\n    saved_percentage = (saved_cost / planned_cost) * 100\n    # 答案是节约的百分比\n    result = saved_percentage\n    # 返回答案\n    return result"]}
{"question": "甲乙两个小镇的公路长75千米．小王驾驶一辆汽车行驶30千米共用去2升汽油．照这样计算，这辆汽车行完全程还需要多少升汽油？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 甲乙两个小镇的公路长75千米\n    total_distance = 75\n    # 小王驾驶汽车行驶30千米共用去2升汽油\n    distance_driven = 30\n    gasoline_used = 2\n    # 计算每千米消耗的汽油量 = 汽油使用量 / 行驶距离\n    gasoline_per_km = gasoline_used / distance_driven\n    # 剩余距离 = 总距离 - 已行驶距离\n    remaining_distance = total_distance - distance_driven\n    # 行完全程还需要汽油量 = 剩余距离 * 每千米消耗的汽油量\n    additional_gasoline_needed = remaining_distance * gasoline_per_km\n    # 答案是行完全程还需要汽油量\n    result = additional_gasoline_needed\n    # 返回答案\n    return result"]}
{"question": "某工程队3天修完一条公路的(1/6)，修完这条路需多少天．", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 工程队3天修完公路的(1/6)\n    days_for_one_sixth = 3\n    fraction_completed = 1/6\n    # 修完整条公路需要的天数 = 修完(1/6)所需的天数 / (1/6)\n    total_days_needed = days_for_one_sixth / fraction_completed\n    # 答案是修完整条公路需要的天数\n    result = total_days_needed\n    # 返回答案\n    return result"]}
{"question": "某山庄今年稻谷收66吨，比去年增产10%，去年这山庄收稻谷多少吨？", "target": 60.0, "answer": 59.99999999999999, "score": 1, "generation": ["def solution():\n    # 今年稻谷的产量为66吨\n    current_year_yield = 66\n    # 今年比去年增产10%\n    increase_percentage = 0.1\n    # 去年的产量 = 今年的产量 / (1 + 增产比例)\n    last_year_yield = current_year_yield / (1 + increase_percentage)\n    # 答案是去年这山庄收稻谷的吨数\n    result = last_year_yield\n    # 返回答案\n    return result"]}
{"question": "一根水泥桩露出水面2m，在水中的占全长的(2/5)，水中的比泥中的多1m，这根桩全长多少米？", "target": 5.0, "answer": 5.000000000000001, "score": 1, "generation": ["def solution():\n    # 水泥桩露出水面的高度为2m\n    above_water = 2\n    # 水中的部分占全长的(2/5)\n    water_fraction = 2/5\n    # 水中的比泥中的多1m\n    water_more_than_mud = 1\n    # 设全长为x米\n    # 水中的部分 = x * water_fraction\n    # 泥中的部分 = 水中的部分 - water_more_than_mud\n    # 全长 = 水中的部分 + 泥中的部分 + 露出水面的部分\n    # 所以 x = x * water_fraction + (x * water_fraction - water_more_than_mud) + above_water\n    # 解方程得 x = (above_water - water_more_than_mud) / (1 - 2 * water_fraction)\n    total_length = (above_water - water_more_than_mud) / (1 - 2 * water_fraction)\n    # 答案是水泥桩的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "东华小学要买50套课桌椅，每张桌子75元，每把椅子25元．一共付多少元？", "target": 5000.0, "answer": 5000.0, "score": 1, "generation": ["def solution():\n    # 需要购买的课桌椅套数为50套\n    num_sets = 50\n    # 每张桌子的价格为75元\n    price_table = 75\n    # 每把椅子的价格为25元\n    price_chair = 25\n    # 每套课桌椅的总价格 = 桌子的价格 + 椅子的价格\n    price_per_set = price_table + price_chair\n    # 总费用 = 套数 * 每套的价格\n    total_cost = num_sets * price_per_set\n    # 答案是一共需要付的总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "甲数是3，乙数是0.25，甲数与乙数的比值=．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 甲数是3\n    num_a = 3\n    # 乙数是0.25\n    num_b = 0.25\n    # 甲数与乙数的比值 = 甲数 / 乙数\n    ratio = num_a / num_b\n    # 答案是甲数与乙数的比值\n    result = ratio\n    # 返回答案\n    return result"]}
{"question": "5箱蜜蜂一年可以酿375千克蜂蜜．小林家养了这样的蜜蜂13箱，一年可以酿多少千克蜜蜂？", "target": 975.0, "answer": 975.0, "score": 1, "generation": ["def solution():\n    # 5箱蜜蜂一年可以酿375千克蜂蜜\n    honey_5_boxes = 375\n    # 小林家养了13箱蜜蜂\n    boxes = 13\n    # 每箱蜜蜂一年可以酿的蜂蜜 = 5箱蜜蜂一年酿的蜂蜜 / 5\n    honey_per_box = honey_5_boxes / 5\n    # 13箱蜜蜂一年可以酿的蜂蜜 = 每箱蜜蜂一年酿的蜂蜜 * 13\n    total_honey = honey_per_box * boxes\n    # 答案是13箱蜜蜂一年可以酿的蜂蜜\n    result = total_honey\n    # 返回答案\n    return result"]}
{"question": "两只轮船同时从青岛去上海，18小时后，甲船落后乙船57.6千米，甲船平均每小时行32.5千米，乙船平均每小时行多少千米？", "target": 35.7, "answer": 35.7, "score": 1, "generation": ["def solution():\n    # 两船行驶的时间为18小时\n    time = 18\n    # 甲船落后乙船57.6千米\n    distance_difference = 57.6\n    # 甲船的平均速度为每小时32.5千米\n    speed_a = 32.5\n    # 甲船行驶的总距离 = 甲船的速度 * 时间\n    distance_a = speed_a * time\n    # 乙船行驶的总距离 = 甲船行驶的总距离 + 距离差\n    distance_b = distance_a + distance_difference\n    # 乙船的平均速度 = 乙船行驶的总距离 / 时间\n    speed_b = distance_b / time\n    # 答案是乙船的平均速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "2吨水泥，用去(1/4)，还剩多少吨？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 水泥的总重量为2吨\n    total_cement = 2\n    # 用去的比例为(1/4)\n    used_fraction = 1/4\n    # 用去的水泥重量 = 总重量 * 用去的比例\n    used_cement = total_cement * used_fraction\n    # 剩余的水泥重量 = 总重量 - 用去的重量\n    remaining_cement = total_cement - used_cement\n    # 答案是剩余的水泥重量\n    result = remaining_cement\n    # 返回答案\n    return result"]}
{"question": "一堆黄沙，第一天运走25%，比第二天少运4吨．这时还剩下56吨．这堆黄沙共多少吨？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 第一天运走25%\n    first_day_percentage = 0.25\n    # 第一天比第二天少运4吨\n    difference = 4\n    # 还剩下56吨\n    remaining = 56\n    # 设总黄沙为x吨\n    # 第一天运走的黄沙 = x * first_day_percentage\n    # 第二天运走的黄沙 = x * first_day_percentage + difference\n    # 总运走的黄沙 = 第一天运走的 + 第二天运走的\n    # 剩下的黄沙 = x - 总运走的黄沙 = remaining\n    # 所以 x - (x * first_day_percentage + x * first_day_percentage + difference) = remaining\n    # 解方程得 x = (remaining + difference) / (1 - 2 * first_day_percentage)\n    total_sand = (remaining + difference) / (1 - 2 * first_day_percentage)\n    # 答案是这堆黄沙的总吨数\n    result = total_sand\n    # 返回答案\n    return result"]}
{"question": "华阳小学六年级有女生100人，男生占全年级总人数的(5/9)，全年级有学生多少人？", "target": 225.0, "answer": 225.0, "score": 1, "generation": ["def solution():\n    # 六年级女生人数为100人\n    num_girls = 100\n    # 男生占全年级总人数的(5/9)\n    boys_fraction = 5/9\n    # 女生占全年级总人数的比例 = 1 - 男生比例\n    girls_fraction = 1 - boys_fraction\n    # 全年级总人数 = 女生人数 / 女生比例\n    total_students = num_girls / girls_fraction\n    # 答案是全年级总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一根木头，用32秒的时间分成了5段，以同样的速度将另一根木头分成7段，需要多少时间？", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 第一根木头分成5段用了32秒\n    time_for_five_pieces = 32\n    # 分成5段需要4次切割\n    cuts_for_five_pieces = 5 - 1\n    # 每次切割的时间 = 总时间 / 切割次数\n    time_per_cut = time_for_five_pieces / cuts_for_five_pieces\n    # 分成7段需要6次切割\n    cuts_for_seven_pieces = 7 - 1\n    # 分成7段所需的时间 = 每次切割的时间 * 切割次数\n    time_for_seven_pieces = time_per_cut * cuts_for_seven_pieces\n    # 答案是分成7段所需的时间\n    result = time_for_seven_pieces\n    # 返回答案\n    return result"]}
{"question": "一套运动服的售价是240元，其中上衣占售价的(5/8)，如果只买上衣，应付多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 运动服的总售价是240元\n    total_price = 240\n    # 上衣占售价的(5/8)\n    shirt_fraction = 5/8\n    # 上衣的价格 = 总售价 * 上衣所占比例\n    shirt_price = total_price * shirt_fraction\n    # 答案是只买上衣应付的价格\n    result = shirt_price\n    # 返回答案\n    return result"]}
{"question": "小明体重60千克，由于生病住院，他的体重减轻了(1/15)，这时小明的体重为多少千克？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 小明的初始体重为60千克\n    initial_weight = 60\n    # 体重减轻了(1/15)\n    weight_loss_fraction = 1/15\n    # 减轻的体重 = 初始体重 * 减轻比例\n    weight_loss = initial_weight * weight_loss_fraction\n    # 现在的体重 = 初始体重 - 减轻的体重\n    current_weight = initial_weight - weight_loss\n    # 答案是现在的体重\n    result = current_weight\n    # 返回答案\n    return result"]}
{"question": "东江水泥厂今年3月份生产水泥2700吨，比计划超产20%，计划生产水泥多少吨？", "target": 2250.0, "answer": 2250.0, "score": 1, "generation": ["def solution():\n    # 3月份实际生产水泥2700吨\n    actual_production = 2700\n    # 超产比例为20%\n    overproduction_rate = 0.2\n    # 计划生产水泥 = 实际生产水泥 / (1 + 超产比例)\n    planned_production = actual_production / (1 + overproduction_rate)\n    # 答案是计划生产水泥的数量\n    result = planned_production\n    # 返回答案\n    return result"]}
{"question": "一袋大米吃了15千克正好是这袋大米的(3/5)，还剩下多少千克？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 吃了15千克大米\n    eaten_rice = 15\n    # 吃了的大米占这袋大米的(3/5)\n    eaten_fraction = 3/5\n    # 这袋大米的总重量 = 吃了的大米 / 吃了的比例\n    total_rice = eaten_rice / eaten_fraction\n    # 剩下的大米 = 总重量 - 吃了的大米\n    remaining_rice = total_rice - eaten_rice\n    # 答案是剩下的大米重量\n    result = remaining_rice\n    # 返回答案\n    return result"]}
{"question": "小红看一本书故事书，第一天看了全书的(1/9)，还剩几分之几没看？", "target": 0.8888888888888888, "answer": 0.8888888888888888, "score": 1, "generation": ["def solution():\n    # 第一天看了全书的(1/9)\n    read_fraction_first_day = 1/9\n    # 剩余没看的比例 = 1 - 第一天看的比例\n    remaining_fraction = 1 - read_fraction_first_day\n    # 答案是剩余没看的比例\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "学校买来35套课桌椅，其中桌子每张115元，椅子每张85元．一共花了多少钱？", "target": 7000.0, "answer": 7000.0, "score": 1, "generation": ["def solution():\n    # 学校购买的课桌椅套数为35套\n    num_sets = 35\n    # 每张桌子的价格为115元\n    price_table = 115\n    # 每张椅子的价格为85元\n    price_chair = 85\n    # 每套课桌椅的价格 = 桌子的价格 + 椅子的价格\n    price_per_set = price_table + price_chair\n    # 总花费 = 套数 * 每套的价格\n    total_cost = num_sets * price_per_set\n    # 答案是一共花费的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "5一期间，商场打折促销．一款原来售价1500元的时尚手机打0.8出售，促销期间买这款手机可以节省多少元？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 手机原价为1500元\n    original_price = 1500\n    # 打折比例为0.8\n    discount_rate = 0.8\n    # 促销期间的价格 = 原价 * 打折比例\n    discounted_price = original_price * discount_rate\n    # 节省的金额 = 原价 - 促销期间的价格\n    savings = original_price - discounted_price\n    # 答案是节省的金额\n    result = savings\n    # 返回答案\n    return result"]}
{"question": "我过大多数的高速公路的最高时速为每小时120千米，比磁悬浮列车的时速的(3/10)少9千米，磁悬浮列车的时速可达到每小时多少千米．", "target": 430.0, "answer": 430.0, "score": 1, "generation": ["def solution():\n    # 高速公路的最高时速为每小时120千米\n    highway_speed = 120\n    # 高速公路的最高时速比磁悬浮列车的时速的(3/10)少9千米\n    speed_difference = 9\n    # 磁悬浮列车的时速的(3/10) = 高速公路的最高时速 + 9千米\n    maglev_speed_part = highway_speed + speed_difference\n    # 磁悬浮列车的时速 = 磁悬浮列车的时速的(3/10) / (3/10)\n    maglev_speed = maglev_speed_part / (3/10)\n    # 答案是磁悬浮列车的时速\n    result = maglev_speed\n    # 返回答案\n    return result"]}
{"question": "学校食堂买来面粉180千克，比买来的大米少(3/5)．学校买来的面粉和大米共多少千克？", "target": 630.0, "answer": 630.0, "score": 1, "generation": ["def solution():\n    # 学校食堂买来面粉180千克\n    flour_weight = 180\n    # 面粉比大米少(3/5)，即面粉是大米的(2/5)\n    rice_fraction = 5/2\n    # 大米的重量 = 面粉的重量 * (5/2)\n    rice_weight = flour_weight * rice_fraction\n    # 面粉和大米的总重量 = 面粉的重量 + 大米的重量\n    total_weight = flour_weight + rice_weight\n    # 答案是面粉和大米的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "小华的爸爸买了一辆15.6万元的小轿车，如果按车价的10%缴纳购置税，小华的爸爸应缴纳购置税多少元．", "target": 15600.0, "answer": 1.56, "score": 0, "generation": ["def solution():\n    # 小轿车的价格为15.6万元\n    car_price = 15.6\n    # 购置税的比例为10%\n    tax_rate = 0.1\n    # 购置税 = 车价 * 购置税比例\n    purchase_tax = car_price * tax_rate\n    # 答案是购置税\n    result = purchase_tax\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开乙地，行了全程的(1/3)，剩下的路程如果以每小时60千米的速度行驶，3小时可以到达，甲乙两地相距多少千米？", "target": 270.0, "answer": 269.99999999999994, "score": 1, "generation": ["def solution():\n    # 汽车已经行驶了全程的(1/3)\n    fraction_traveled = 1/3\n    # 剩下的路程 = 1 - 已经行驶的路程比例\n    fraction_remaining = 1 - fraction_traveled\n    # 剩下的路程以每小时60千米的速度行驶，3小时可以到达\n    speed_remaining = 60\n    time_remaining = 3\n    # 剩下的路程 = 速度 * 时间\n    distance_remaining = speed_remaining * time_remaining\n    # 因为剩下的路程是全程的(fraction_remaining)，所以全程 = 剩下的路程 / fraction_remaining\n    total_distance = distance_remaining / fraction_remaining\n    # 答案是甲乙两地的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "我校教学楼有4层，如果每层有6个教室，每个教室摆8盆花，一共要摆多少盆花？", "target": 192.0, "answer": 192.0, "score": 1, "generation": ["def solution():\n    # 教学楼有4层\n    num_floors = 4\n    # 每层有6个教室\n    num_classrooms_per_floor = 6\n    # 每个教室摆8盆花\n    num_flowers_per_classroom = 8\n    # 总教室数 = 楼层数 * 每层教室数\n    total_classrooms = num_floors * num_classrooms_per_floor\n    # 总花盆数 = 总教室数 * 每个教室的花盆数\n    total_flowers = total_classrooms * num_flowers_per_classroom\n    # 答案是总花盆数\n    result = total_flowers\n    # 返回答案\n    return result"]}
{"question": "超市运来一怕运动服，卖了6天，平均每天卖了108件，还剩112件，这批运动服一共有多少件？", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 超市卖了6天运动服\n    days_sold = 6\n    # 平均每天卖了108件\n    avg_daily_sales = 108\n    # 还剩112件\n    remaining_items = 112\n    # 卖出的总件数 = 卖的天数 * 平均每天卖的件数\n    total_sold = days_sold * avg_daily_sales\n    # 这批运动服的总件数 = 卖出的总件数 + 剩余的件数\n    total_items = total_sold + remaining_items\n    # 答案是这批运动服的总件数\n    result = total_items\n    # 返回答案\n    return result"]}
{"question": "5000元存入银行3年，年利率是2.5%．到期可得利息多少元．（不扣利息税）", "target": 375.0, "answer": 375.0, "score": 1, "generation": ["def solution():\n    # 存入银行的金额为5000元\n    principal = 5000\n    # 存款期限为3年\n    years = 3\n    # 年利率是2.5%\n    annual_interest_rate = 0.025\n    # 到期利息 = 本金 * 年利率 * 存款期限\n    interest = principal * annual_interest_rate * years\n    # 答案是到期利息\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一个数的2倍比它的1.5倍多1.9，这个数=？", "target": 3.8, "answer": 3.8, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    x = 1.0  # initial guess\n    # 根据题意，2x = 1.5x + 1.9\n    # 解这个方程\n    # 2x - 1.5x = 1.9\n    # 0.5x = 1.9\n    # x = 1.9 / 0.5\n    x = 1.9 / 0.5\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "某书店经每本14.98元的价格购进一批书，每本售价21.7元，卖完后，除了收回成本外，还获得了504元的利润，这个书店共购进这批书多少本？", "target": 75.0, "answer": 75.00000000000001, "score": 1, "generation": ["def solution():\n    # 每本书的购进价格为14.98元\n    purchase_price_per_book = 14.98\n    # 每本书的售价为21.7元\n    selling_price_per_book = 21.7\n    # 卖完后获得的利润为504元\n    profit = 504\n    # 每本书的利润 = 售价 - 购进价格\n    profit_per_book = selling_price_per_book - purchase_price_per_book\n    # 总购进数量 = 总利润 / 每本书的利润\n    total_books_purchased = profit / profit_per_book\n    # 答案是书店共购进的这批书的数量\n    result = total_books_purchased\n    # 返回答案\n    return result"]}
{"question": "爱心超市运来1780千克大米，卖了8天后，还剩100千克，平均每天卖大米多少千克？", "target": 210.0, "answer": 210.0, "score": 1, "generation": ["def solution():\n    # 爱心超市运来大米的总重量为1780千克\n    total_rice = 1780\n    # 8天后剩余的大米重量为100千克\n    remaining_rice = 100\n    # 8天内卖出的大米重量 = 总重量 - 剩余重量\n    sold_rice = total_rice - remaining_rice\n    # 平均每天卖出的大米重量 = 卖出重量 / 天数\n    average_daily_sale = sold_rice / 8\n    # 答案是平均每天卖出的大米重量\n    result = average_daily_sale\n    # 返回答案\n    return result"]}
{"question": "一桶油重(3/2)千克，(1/2)桶油重多少千克．", "target": 0.75, "answer": 0.75, "score": 1, "generation": ["def solution():\n    # 一桶油的重量为(3/2)千克\n    weight_per_barrel = 3/2\n    # (1/2)桶油的重量 = 一桶油的重量 * (1/2)\n    weight_half_barrel = weight_per_barrel * (1/2)\n    # 答案是(1/2)桶油的重量\n    result = weight_half_barrel\n    # 返回答案\n    return result"]}
{"question": "食堂买来8吨煤，11天烧完，平均每天烧煤多少吨？（用分数表示）", "target": 0.7272727272727273, "answer": 0.7272727272727273, "score": 1, "generation": ["def solution():\n    # 食堂买来煤的总量为8吨\n    total_coal = 8\n    # 煤烧完的天数为11天\n    days_to_burn = 11\n    # 平均每天烧煤的量 = 总煤量 / 烧煤天数\n    daily_coal_burned = total_coal / days_to_burn\n    # 答案是平均每天烧煤的量\n    result = daily_coal_burned\n    # 返回答案\n    return result"]}
{"question": "长方体的长、宽、高分别是7cm、6cm、3cm，它的表面积=多少cm^2．", "target": 162.0, "answer": 162.0, "score": 1, "generation": ["def solution():\n    # 长方体的长为7cm\n    length = 7\n    # 长方体的宽为6cm\n    width = 6\n    # 长方体的高为3cm\n    height = 3\n    # 长方体的表面积 = 2*(长*宽 + 长*高 + 宽*高)\n    surface_area = 2 * (length * width + length * height + width * height)\n    # 答案是长方体的表面积\n    result = surface_area\n    # 返回答案\n    return result"]}
{"question": "4个同学在假期里约定，每两人互通一封信，他们共要写多少封信．", "target": 12.0, "answer": 6.0, "score": 0, "generation": ["def solution():\n    # 有4个同学\n    num_students = 4\n    # 每两人互通一封信，所以信的数量等于从4个同学中选2个的组合数\n    num_letters = num_students * (num_students - 1) / 2\n    # 答案是总共要写的信的数量\n    result = num_letters\n    # 返回答案\n    return result"]}
{"question": "一种商品，第一次打了0.9，第二次又降价5%，现在该商品是原价的多少%．", "target": 85.5, "answer": 85.5, "score": 1, "generation": ["def solution():\n    # 第一次打了0.9折，即原价的90%\n    first_discount = 0.9\n    # 第二次又降价5%，即在第一次折扣后的价格基础上再打95%\n    second_discount = 0.95\n    # 现在的价格 = 原价 * 第一次折扣 * 第二次折扣\n    current_price_percentage = first_discount * second_discount\n    # 将小数转换为百分数\n    current_price_percentage *= 100\n    # 答案是现在该商品是原价的百分比\n    result = current_price_percentage\n    # 返回答案\n    return result"]}
{"question": "做5根长2米，管口直径是0.2米的通风管，至少需要铁皮多少平方米．", "target": 6.283185, "answer": 6.283185307179586, "score": 1, "generation": ["def solution():\n    # 通风管的数量是5根\n    num_pipes = 5\n    # 每根通风管的长度是2米\n    length_per_pipe = 2\n    # 管口直径是0.2米\n    diameter = 0.2\n    # 半径 = 直径 / 2\n    radius = diameter / 2\n    # 每根通风管的表面积 = 周长 * 长度 = 2 * π * 半径 * 长度\n    surface_area_per_pipe = 2 * 3.141592653589793 * radius * length_per_pipe\n    # 总表面积 = 每根通风管的表面积 * 通风管的数量\n    total_surface_area = surface_area_per_pipe * num_pipes\n    # 答案是至少需要的铁皮面积\n    result = total_surface_area\n    # 返回答案\n    return result"]}
{"question": "8+88+888+8888+88888=．", "target": 98760.0, "answer": 98760.0, "score": 1, "generation": ["def solution():\n    # 第一个数字是8\n    num1 = 8\n    # 第二个数字是88\n    num2 = 88\n    # 第三个数字是888\n    num3 = 888\n    # 第四个数字是8888\n    num4 = 8888\n    # 第五个数字是88888\n    num5 = 88888\n    # 总和 = 第一个数字 + 第二个数字 + 第三个数字 + 第四个数字 + 第五个数字\n    total = num1 + num2 + num3 + num4 + num5\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "小天才培训学校选出一批优秀的学生参加全国作文比赛和数学比赛，结果7人两项比赛都获奖了，有13人两项比赛都没有获奖，已知作文比赛获奖的有12人，数学比赛获奖的有28人．那么这批优秀的学生一共有多少人．", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 两项比赛都获奖的人数为7人\n    both_awards = 7\n    # 两项比赛都没有获奖的人数为13人\n    neither_award = 13\n    # 作文比赛获奖的人数为12人\n    essay_award = 12\n    # 数学比赛获奖的人数为28人\n    math_award = 28\n    # 只获得作文比赛的人数 = 作文比赛获奖人数 - 两项比赛都获奖的人数\n    essay_only = essay_award - both_awards\n    # 只获得数学比赛的人数 = 数学比赛获奖人数 - 两项比赛都获奖的人数\n    math_only = math_award - both_awards\n    # 总人数 = 只获得作文比赛的人数 + 只获得数学比赛的人数 + 两项比赛都获奖的人数 + 两项比赛都没有获奖的人数\n    total_students = essay_only + math_only + both_awards + neither_award\n    # 答案是这批优秀的学生总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "小明的体重是28千克，比表弟中6千克，而爸爸的体重是表弟的4倍，爸爸的体重=多少千克？", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 小明的体重是28千克\n    ming_weight = 28\n    # 小明比表弟重6千克\n    cousin_weight_difference = 6\n    # 表弟的体重 = 小明的体重 - 体重差\n    cousin_weight = ming_weight - cousin_weight_difference\n    # 爸爸的体重是表弟的4倍\n    father_weight_multiplier = 4\n    # 爸爸的体重 = 表弟的体重 * 4\n    father_weight = cousin_weight * father_weight_multiplier\n    # 答案是爸爸的体重\n    result = father_weight\n    # 返回答案\n    return result"]}
{"question": "光明小学有学生485人，其中40%的同学参加了课外科技活动小组，参加课外科技活动小组的有多少人？", "target": 194.0, "answer": 194.0, "score": 1, "generation": ["def solution():\n    # 光明小学有学生485人\n    total_students = 485\n    # 40%的同学参加了课外科技活动小组\n    percentage_participating = 0.4\n    # 参加课外科技活动小组的人数 = 总人数 * 参加比例\n    num_participating = total_students * percentage_participating\n    # 答案是参加课外科技活动小组的人数\n    result = num_participating\n    # 返回答案\n    return result"]}
{"question": "林场春天种500棵树苗，成活率为98%，成活了多少棵？", "target": 490.0, "answer": 490.0, "score": 1, "generation": ["def solution():\n    # 林场春天种500棵树苗\n    total_trees = 500\n    # 成活率为98%\n    survival_rate = 0.98\n    # 成活的树苗数量 = 总树苗数量 * 成活率\n    survived_trees = total_trees * survival_rate\n    # 答案是成活的树苗数量\n    result = survived_trees\n    # 返回答案\n    return result"]}
{"question": "县图书馆有故事书15.4万册，比科技书少5.8万册，这两种书共多少万册？", "target": 36.6, "answer": 36.6, "score": 1, "generation": ["def solution():\n    # 故事书的数量为15.4万册\n    num_story_books = 15.4\n    # 科技书比故事书多5.8万册\n    num_science_books = num_story_books + 5.8\n    # 两种书的总数量 = 故事书的数量 + 科技书的数量\n    total_books = num_story_books + num_science_books\n    # 答案是两种书的总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小红把1000元钱存入银行，存整存整取3年，年利率是3.24%．到期时小红可得利息=多少元．", "target": 97.2, "answer": 97.19999999999999, "score": 1, "generation": ["def solution():\n    # 存入银行的本金为1000元\n    principal = 1000\n    # 存款期限为3年\n    years = 3\n    # 年利率是3.24%\n    annual_interest_rate = 0.0324\n    # 利息 = 本金 * 年利率 * 存款期限\n    interest = principal * annual_interest_rate * years\n    # 答案是到期时小红可得的利息\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一件工作，甲每天完成全部工作的(1/8)，乙每天完成全部工作的(1/12)，两人合作2天，能完成全部工作的多少．", "target": 0.4166666666666667, "answer": 0.41666666666666663, "score": 1, "generation": ["def solution():\n    # 甲每天完成全部工作的(1/8)\n    daily_work_a = 1/8\n    # 乙每天完成全部工作的(1/12)\n    daily_work_b = 1/12\n    # 两人合作的天数为2天\n    days_worked = 2\n    # 两人合作每天完成的工作量 = 甲的工作量 + 乙的工作量\n    daily_work_total = daily_work_a + daily_work_b\n    # 两人合作2天完成的工作量 = 每天的工作量 * 合作天数\n    total_work_done = daily_work_total * days_worked\n    # 答案是两人合作2天完成的工作量\n    result = total_work_done\n    # 返回答案\n    return result"]}
{"question": "一根铁丝长10米，第一次剪去它的(2/5)，第二次剪去(3/10)米还剩下多少米．", "target": 5.7, "answer": 5.7, "score": 1, "generation": ["def solution():\n    # 铁丝的总长度为10米\n    total_length = 10\n    # 第一次剪去它的(2/5)\n    first_cut_fraction = 2/5\n    # 第一次剪去的长度 = 总长度 * 第一次剪去的比例\n    first_cut_length = total_length * first_cut_fraction\n    # 第一次剪去后的剩余长度 = 总长度 - 第一次剪去的长度\n    remaining_after_first_cut = total_length - first_cut_length\n    # 第二次剪去(3/10)米\n    second_cut_length = 3/10\n    # 第二次剪去后的剩余长度 = 第一次剪去后的剩余长度 - 第二次剪去的长度\n    remaining_after_second_cut = remaining_after_first_cut - second_cut_length\n    # 答案是最终剩余的长度\n    result = remaining_after_second_cut\n    # 返回答案\n    return result"]}
{"question": "3个同学比赛跳高，王军跳了1.52米，张华比王军多跳了0.18米，李林比张华少跳了0.11米，李林跳了多少米？", "target": 1.59, "answer": 1.5899999999999999, "score": 1, "generation": ["def solution():\n    # 王军跳了1.52米\n    wang_jun = 1.52\n    # 张华比王军多跳了0.18米\n    zhang_hua = wang_jun + 0.18\n    # 李林比张华少跳了0.11米\n    li_lin = zhang_hua - 0.11\n    # 答案是李林跳的高度\n    result = li_lin\n    # 返回答案\n    return result"]}
{"question": "一本故事书原价24.8元．现在按原价的0.6出售，便宜了多少元？", "target": 9.92, "answer": 9.920000000000002, "score": 1, "generation": ["def solution():\n    # 故事书的原价为24.8元\n    original_price = 24.8\n    # 现在的售价是原价的0.6\n    discount_rate = 0.6\n    # 现在的售价 = 原价 * 折扣率\n    discounted_price = original_price * discount_rate\n    # 便宜的价格 = 原价 - 现在的售价\n    price_difference = original_price - discounted_price\n    # 答案是便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "荣荣家买来一筐苹果，爸爸吃了其中的(1/3)，荣荣吃了其中的(1/4)，剩下的都是妈妈吃的，如果爸爸比荣荣多吃了3个苹果，那么，妈妈吃了多少个．", "target": 15.0, "answer": 15.000000000000005, "score": 1, "generation": ["def solution():\n    # 设一筐苹果的总数为x个\n    # 爸爸吃了其中的(1/3)\n    dad_ate = 1/3\n    # 荣荣吃了其中的(1/4)\n    rongrong_ate = 1/4\n    # 爸爸比荣荣多吃了3个苹果\n    difference = 3\n    # 爸爸比荣荣多吃的比例 = 爸爸吃的比例 - 荣荣吃的比例\n    difference_fraction = dad_ate - rongrong_ate\n    # 总苹果数 = 多吃的数量 / 多吃的比例\n    total_apples = difference / difference_fraction\n    # 爸爸吃的苹果数 = 总苹果数 * 爸爸吃的比例\n    dad_apples = total_apples * dad_ate\n    # 荣荣吃的苹果数 = 总苹果数 * 荣荣吃的比例\n    rongrong_apples = total_apples * rongrong_ate\n    # 妈妈吃的苹果数 = 总苹果数 - 爸爸吃的苹果数 - 荣荣吃的苹果数\n    mom_apples = total_apples - dad_apples - rongrong_apples\n    # 答案是妈妈吃的苹果数\n    result = mom_apples\n    # 返回答案\n    return result"]}
{"question": "学校准备发《感恩教育》读本给16个班，每班50本，还要给学校图书室留30本．学校应购买《感恩教育》多少本？", "target": 830.0, "answer": 830.0, "score": 1, "generation": ["def solution():\n    # 班级数量为16个\n    num_classes = 16\n    # 每个班级发放50本\n    books_per_class = 50\n    # 图书室保留30本\n    books_for_library = 30\n    # 发放给班级的总本数 = 班级数量 * 每个班级发放的本数\n    total_books_for_classes = num_classes * books_per_class\n    # 学校应购买的总本数 = 发放给班级的总本数 + 图书室保留的本数\n    total_books_to_purchase = total_books_for_classes + books_for_library\n    # 答案是学校应购买的总本数\n    result = total_books_to_purchase\n    # 返回答案\n    return result"]}
{"question": "已知等差数列首项是5，第8项是26，这个等差数列的公差=．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 等差数列的首项是5\n    first_term = 5\n    # 第8项是26\n    eighth_term = 26\n    # 等差数列的第n项公式为：a_n = a_1 + (n-1)*d\n    # 这里n=8，所以26 = 5 + (8-1)*d\n    # 解这个方程求d\n    # 26 - 5 = 7d\n    # 21 = 7d\n    # d = 21 / 7\n    d = (eighth_term - first_term) / (8 - 1)\n    # 答案是公差d\n    result = d\n    # 返回答案\n    return result"]}
{"question": "一个县今年小麦总产量是35万吨，比去年增产12%，去年全县小麦总产量=多少万吨？", "target": 31.25, "answer": 31.249999999999996, "score": 1, "generation": ["def solution():\n    # 今年小麦总产量是35万吨\n    current_year_production = 35\n    # 比去年增产12%\n    production_increase_percentage = 0.12\n    # 去年小麦总产量 = 今年小麦总产量 / (1 + 增产比例)\n    last_year_production = current_year_production / (1 + production_increase_percentage)\n    # 答案是去年全县小麦总产量\n    result = last_year_production\n    # 返回答案\n    return result"]}
{"question": "一道除法算式，除数是18，商是21，余数是5，则被除数=．", "target": 383.0, "answer": 383.0, "score": 1, "generation": ["def solution():\n    # 除数是18\n    divisor = 18\n    # 商是21\n    quotient = 21\n    # 余数是5\n    remainder = 5\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "五年级同学收集邮票48枚，六年级收集的比五年级多(1/3)，六年级收集邮票多少枚？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 五年级同学收集邮票48枚\n    fifth_grade_stamps = 48\n    # 六年级收集的比五年级多(1/3)\n    increase_fraction = 1/3\n    # 六年级比五年级多收集的邮票数量 = 五年级邮票数量 * 增加比例\n    additional_stamps = fifth_grade_stamps * increase_fraction\n    # 六年级收集的邮票数量 = 五年级邮票数量 + 多收集的数量\n    sixth_grade_stamps = fifth_grade_stamps + additional_stamps\n    # 答案是六年级收集的邮票数量\n    result = sixth_grade_stamps\n    # 返回答案\n    return result"]}
{"question": "弟弟(2/3)小时写了24个大字，弟弟平均每小时写几个大字？", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 弟弟写大字的时间为(2/3)小时\n    time_spent = 2/3\n    # 弟弟在这段时间内写了24个大字\n    characters_written = 24\n    # 平均每小时写的大字数 = 总字数 / 时间\n    characters_per_hour = characters_written / time_spent\n    # 答案是弟弟平均每小时写的大字数\n    result = characters_per_hour\n    # 返回答案\n    return result"]}
{"question": "一辆汽车上午行驶3小时，下午用同样的速度行驶4小时．如果上午行驶了315千米，下午行驶了多少千米？", "target": 420.0, "answer": 420.0, "score": 1, "generation": ["def solution():\n    # 上午行驶的时间为3小时\n    morning_hours = 3\n    # 下午行驶的时间为4小时\n    afternoon_hours = 4\n    # 上午行驶的距离为315千米\n    morning_distance = 315\n    # 汽车的速度 = 上午行驶的距离 / 上午行驶的时间\n    speed = morning_distance / morning_hours\n    # 下午行驶的距离 = 汽车的速度 * 下午行驶的时间\n    afternoon_distance = speed * afternoon_hours\n    # 答案是下午行驶的距离\n    result = afternoon_distance\n    # 返回答案\n    return result"]}
{"question": "45+129的和乘28，积=？", "target": 4872.0, "answer": 4872.0, "score": 1, "generation": ["def solution():\n    # 第一个数是45\n    num1 = 45\n    # 第二个数是129\n    num2 = 129\n    # 第三个数是28\n    num3 = 28\n    # 45和129的和\n    sum_num1_num2 = num1 + num2\n    # 和乘以28的积\n    product = sum_num1_num2 * num3\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "鸡有36只，鸭的只数是鸡的2倍，鸡和鸭一共有多少只？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 鸡的数量为36只\n    num_chickens = 36\n    # 鸭的数量是鸡的2倍\n    num_ducks = 2 * num_chickens\n    # 鸡和鸭的总数量 = 鸡的数量 + 鸭的数量\n    total_birds = num_chickens + num_ducks\n    # 答案是鸡和鸭的总数量\n    result = total_birds\n    # 返回答案\n    return result"]}
{"question": "3.14与268的和乘7=？", "target": 1897.98, "answer": 1897.98, "score": 1, "generation": ["def solution():\n    # 第一个数是3.14\n    num1 = 3.14\n    # 第二个数是268\n    num2 = 268\n    # 两个数的和\n    sum_nums = num1 + num2\n    # 和乘以7\n    result = sum_nums * 7\n    # 返回答案\n    return result"]}
{"question": "一堆煤用去20%，剩下的比用去的多12吨，这堆煤有多少吨？", "target": 20.0, "answer": 19.999999999999996, "score": 1, "generation": ["def solution():\n    # 用去的煤的比例是20%\n    used_percentage = 0.2\n    # 剩下的煤的比例 = 1 - 用去的比例\n    remaining_percentage = 1 - used_percentage\n    # 剩下的比用去的多12吨\n    difference = 12\n    # 设总煤量为x吨\n    # 剩下的煤量 = x * remaining_percentage\n    # 用去的煤量 = x * used_percentage\n    # 根据题意，剩下的煤量 - 用去的煤量 = difference\n    # 即 x * remaining_percentage - x * used_percentage = difference\n    # 解方程得 x = difference / (remaining_percentage - used_percentage)\n    total_coal = difference / (remaining_percentage - used_percentage)\n    # 答案是这堆煤的总量\n    result = total_coal\n    # 返回答案\n    return result"]}
{"question": "原来每台录音机售价500元，现在每台售价350元，每台降价了百分之几？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 原来的每台录音机售价为500元\n    original_price = 500\n    # 现在的每台录音机售价为350元\n    current_price = 350\n    # 降价金额 = 原价 - 现价\n    price_difference = original_price - current_price\n    # 降价百分比 = (降价金额 / 原价) * 100\n    percentage_decrease = (price_difference / original_price) * 100\n    # 答案是降价百分比\n    result = percentage_decrease\n    # 返回答案\n    return result"]}
{"question": "建筑工地有一堆垃圾分两次运走，每一次运15吨，第二次运的吨数是第一次的1.2倍．这堆垃圾有多少吨？", "target": 33.0, "answer": 33.0, "score": 1, "generation": ["def solution():\n    # 第一次运走的垃圾吨数为15吨\n    first_transport = 15\n    # 第二次运走的吨数是第一次的1.2倍\n    second_transport = 1.2 * first_transport\n    # 这堆垃圾的总吨数 = 第一次运走的吨数 + 第二次运走的吨数\n    total_garbage = first_transport + second_transport\n    # 答案是这堆垃圾的总吨数\n    result = total_garbage\n    # 返回答案\n    return result"]}
{"question": "甲数的(5/7)是10，甲数又是乙数的(3/2)倍，乙数=？", "target": 9.333333333333334, "answer": 9.333333333333334, "score": 1, "generation": ["def solution():\n    # 甲数的(5/7)是10\n    fraction_of_a = 5/7\n    value_of_fraction = 10\n    # 甲数 = 10 / (5/7)\n    a = value_of_fraction / fraction_of_a\n    # 甲数是乙数的(3/2)倍\n    multiple_of_b = 3/2\n    # 乙数 = 甲数 / (3/2)\n    b = a / multiple_of_b\n    # 答案是乙数\n    result = b\n    # 返回答案\n    return result"]}
{"question": "大豆出油率是16%，要榨豆油64千克，需用大豆多少千克．", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 大豆的出油率是16%\n    oil_extraction_rate = 0.16\n    # 需要榨取的豆油量为64千克\n    desired_oil = 64\n    # 需要的大豆量 = 需要的豆油量 / 出油率\n    required_soybeans = desired_oil / oil_extraction_rate\n    # 答案是需要的大豆量\n    result = required_soybeans\n    # 返回答案\n    return result"]}
{"question": "多少千克的(3/4)是(9/10)千克．", "target": 1.2, "answer": 1.2, "score": 1, "generation": ["def solution():\n    # 已知(3/4)倍的某个数等于(9/10)千克\n    fraction = 3/4\n    target_weight = 9/10\n    # 要求的数 = 目标重量 / 分数\n    required_weight = target_weight / fraction\n    # 答案是要求的数\n    result = required_weight\n    # 返回答案\n    return result"]}
{"question": "12*7的积除以8400，商=？", "target": 0.01, "answer": 0.01, "score": 1, "generation": ["def solution():\n    # 计算12*7的积\n    product = 12 * 7\n    # 积除以8400\n    quotient = product / 8400\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "从30里减去48的(1/3)，所得的差去除3，商=？", "target": 0.21428571428571427, "answer": 0.21428571428571427, "score": 1, "generation": ["def solution():\n    # 初始数值为30\n    initial_number = 30\n    # 48的(1/3)\n    fraction_of_48 = 48 * (1/3)\n    # 从30里减去48的(1/3)\n    difference = initial_number - fraction_of_48\n    # 用所得的差去除3\n    quotient = 3 / difference\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "4（1）班有42名同学：订阅《少年报》的有31名同学，订阅《童话报》的有27名同学．每人至少订其中一份报纸，有多少名同学既订《少年报》又订《童话报》．", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 4（1）班有42名同学\n    total_students = 42\n    # 订阅《少年报》的有31名同学\n    subscribed_young = 31\n    # 订阅《童话报》的有27名同学\n    subscribed_fairy = 27\n    # 每人至少订其中一份报纸，所以既订《少年报》又订《童话报》的同学数 = 订阅《少年报》的同学数 + 订阅《童话报》的同学数 - 总同学数\n    subscribed_both = subscribed_young + subscribed_fairy - total_students\n    # 答案是既订《少年报》又订《童话报》的同学数\n    result = subscribed_both\n    # 返回答案\n    return result"]}
{"question": "修一条公路，已经修了20千米，比未修的少(3/8)，这条公路有多少千米？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 已经修了20千米\n    repaired_distance = 20\n    # 比未修的少(3/8)，即已修的是未修的(5/8)\n    ratio_repaired_to_unrepaired = 5/8\n    # 未修的距离 = 已修的距离 / (5/8)\n    unrepaired_distance = repaired_distance / ratio_repaired_to_unrepaired\n    # 这条公路的总长度 = 已修的距离 + 未修的距离\n    total_distance = repaired_distance + unrepaired_distance\n    # 答案是这条公路的总长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一批货物120吨，2天运走这批货物的(3/4)．平均每天运货多少吨？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 货物的总重量为120吨\n    total_weight = 120\n    # 2天运走这批货物的(3/4)\n    transported_fraction = 3/4\n    # 运走的货物重量 = 总重量 * 运走比例\n    transported_weight = total_weight * transported_fraction\n    # 运货的天数为2天\n    days = 2\n    # 平均每天运货的重量 = 运走的货物重量 / 运货天数\n    average_daily_weight = transported_weight / days\n    # 答案是平均每天运货的重量\n    result = average_daily_weight\n    # 返回答案\n    return result"]}
{"question": "百货店运来15包毛巾，每包20条，每条售价4元．这些毛巾一共售价多少元？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 百货店运来15包毛巾\n    num_packages = 15\n    # 每包有20条毛巾\n    num_towels_per_package = 20\n    # 每条毛巾售价4元\n    price_per_towel = 4\n    # 总毛巾数量 = 包数 * 每包毛巾数量\n    total_towels = num_packages * num_towels_per_package\n    # 总售价 = 总毛巾数量 * 每条毛巾售价\n    total_price = total_towels * price_per_towel\n    # 答案是这些毛巾的总售价\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "李总务帮学校买来5张办公桌和8把椅子，共花去1236元钱．每张办公桌的价钱是180元，每把椅子多少元？", "target": 42.0, "answer": 42.0, "score": 1, "generation": ["def solution():\n    # 办公桌的数量是5张\n    num_desks = 5\n    # 椅子的数量是8把\n    num_chairs = 8\n    # 每张办公桌的价格是180元\n    price_desk = 180\n    # 办公桌和椅子的总价格是1236元\n    total_cost = 1236\n    # 办公桌的总价格 = 办公桌数量 * 每张办公桌的价格\n    total_desk_cost = num_desks * price_desk\n    # 椅子的总价格 = 总价格 - 办公桌的总价格\n    total_chair_cost = total_cost - total_desk_cost\n    # 每把椅子的价格 = 椅子的总价格 / 椅子的数量\n    price_chair = total_chair_cost / num_chairs\n    # 答案是每把椅子的价格\n    result = price_chair\n    # 返回答案\n    return result"]}
{"question": "服装厂3月份计划加工5400件衣服，结果上半月完成了(3/4)，下半月完成了(2/3)，这个月比原计划多加工多少件？", "target": 2250.0, "answer": 2250.0, "score": 1, "generation": ["def solution():\n    # 3月份计划加工5400件衣服\n    planned_production = 5400\n    # 上半月完成了(3/4)\n    first_half_completion = 3/4\n    # 下半月完成了(2/3)\n    second_half_completion = 2/3\n    # 上半月完成的衣服数量 = 计划加工数量 * 上半月完成比例\n    first_half_production = planned_production * first_half_completion\n    # 下半月完成的衣服数量 = 计划加工数量 * 下半月完成比例\n    second_half_production = planned_production * second_half_completion\n    # 实际完成的衣服数量 = 上半月完成数量 + 下半月完成数量\n    actual_production = first_half_production + second_half_production\n    # 比原计划多加工的数量 = 实际完成数量 - 计划加工数量\n    extra_production = actual_production - planned_production\n    # 答案是比原计划多加工的数量\n    result = extra_production\n    # 返回答案\n    return result"]}
{"question": "建筑工地运来了4车水泥，每车4.5吨，共用了4410元，平均每吨水泥多少元？", "target": 245.0, "answer": 245.0, "score": 1, "generation": ["def solution():\n    # 运来的水泥车数为4车\n    num_trucks = 4\n    # 每车水泥的重量为4.5吨\n    weight_per_truck = 4.5\n    # 总费用为4410元\n    total_cost = 4410\n    # 总重量 = 车数 * 每车重量\n    total_weight = num_trucks * weight_per_truck\n    # 平均每吨水泥的价格 = 总费用 / 总重量\n    price_per_ton = total_cost / total_weight\n    # 答案是平均每吨水泥的价格\n    result = price_per_ton\n    # 返回答案\n    return result"]}
{"question": "王老师要批改48篇作文，已经批改了13篇．如果每小时批改7篇，还要几小时能批改完？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 王老师要批改的总作文数为48篇\n    total_essays = 48\n    # 已经批改了13篇\n    essays_graded = 13\n    # 每小时批改7篇\n    grading_speed = 7\n    # 剩余的作文数 = 总作文数 - 已经批改的作文数\n    remaining_essays = total_essays - essays_graded\n    # 还需要的时间 = 剩余的作文数 / 每小时批改的作文数\n    time_needed = remaining_essays / grading_speed\n    # 答案是还需要的时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "某学校图书馆有故事书375本，比科技书少35本，连环画是科技书的3倍．连环画比故事书多多少本？", "target": 855.0, "answer": 855.0, "score": 1, "generation": ["def solution():\n    # 故事书的数量为375本\n    num_story_books = 375\n    # 故事书比科技书少35本\n    difference_tech_books = 35\n    # 科技书的数量 = 故事书的数量 + 35\n    num_tech_books = num_story_books + difference_tech_books\n    # 连环画的数量是科技书的3倍\n    num_comic_books = 3 * num_tech_books\n    # 连环画比故事书多的数量 = 连环画的数量 - 故事书的数量\n    difference_comic_story = num_comic_books - num_story_books\n    # 答案是连环画比故事书多的数量\n    result = difference_comic_story\n    # 返回答案\n    return result"]}
{"question": "甲、乙两数的和是60，甲数是乙数的50%，乙数=．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两数的和是60\n    total_sum = 60\n    # 甲数是乙数的50%\n    ratio_a_to_b = 0.5\n    # 设乙数为x，则甲数为0.5x\n    # 根据题意，x + 0.5x = 60\n    # 解方程得x = 60 / 1.5\n    x = total_sum / (1 + ratio_a_to_b)\n    # 答案是乙数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "9：6=15：多少．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 已知比例9:6=15:x\n    # 我们可以通过交叉相乘来解这个比例\n    # 9 * x = 6 * 15\n    # 解这个方程得到x的值\n    x = (6 * 15) / 9\n    # 答案是x的值\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地驶向乙地，第一小时行了50千米，第二小时行了全程的20%，还剩下190千米．甲乙两地相距多少千米？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 第一小时行驶的距离为50千米\n    first_hour_distance = 50\n    # 第二小时行驶了全程的20%\n    second_hour_fraction = 0.2\n    # 剩余的距离为190千米\n    remaining_distance = 190\n    # 设全程为x千米\n    # 根据题意，全程 = 第一小时行驶的距离 + 第二小时行驶的距离 + 剩余的距离\n    # 即 x = first_hour_distance + (second_hour_fraction * x) + remaining_distance\n    # 解这个方程：\n    # x - (0.2 * x) = first_hour_distance + remaining_distance\n    # 0.8 * x = 50 + 190\n    # 0.8 * x = 240\n    # x = 240 / 0.8\n    total_distance = (first_hour_distance + remaining_distance) / (1 - second_hour_fraction)\n    # 答案是甲乙两地相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一本故事书有197页，小军看了42页，剩下的要在5天看完，平均每天看几页？", "target": 31.0, "answer": 31.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为197页\n    total_pages = 197\n    # 小军已经看了42页\n    pages_read = 42\n    # 剩余的页数 = 总页数 - 已读页数\n    remaining_pages = total_pages - pages_read\n    # 需要在5天内看完剩余的页数\n    days_to_read = 5\n    # 平均每天需要看的页数 = 剩余页数 / 天数\n    average_pages_per_day = remaining_pages / days_to_read\n    # 答案是平均每天需要看的页数\n    result = average_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "一列快车和一列慢车同时从相距500千米的两地相向而行．已知快车每时行70千米，慢车每时行55千米，经过多少时两车相遇？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 两地的距离为500千米\n    distance = 500\n    # 快车的速度为每小时70千米\n    speed_fast = 70\n    # 慢车的速度为每小时55千米\n    speed_slow = 55\n    # 因为两车相向而行，两车相对速度为快车与慢车速度之和\n    relative_speed = speed_fast + speed_slow\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "每瓶洗发水18元，买4瓶送一瓶，妈妈一次买10瓶，共用多少元．", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 每瓶洗发水的价格为18元\n    price_per_bottle = 18\n    # 妈妈一次买10瓶\n    total_bottles_bought = 10\n    # 买4瓶送1瓶，意味着每5瓶只需要支付4瓶的价格\n    bottles_per_promotion = 5\n    paid_bottles_per_promotion = 4\n    # 计算可以享受多少次促销\n    num_promotions = total_bottles_bought // bottles_per_promotion\n    # 计算需要支付瓶数的部分\n    paid_bottles = num_promotions * paid_bottles_per_promotion\n    # 计算剩余需要支付瓶数的部分\n    remaining_bottles = total_bottles_bought % bottles_per_promotion\n    # 总支付瓶数 = 促销支付瓶数 + 剩余瓶数\n    total_paid_bottles = paid_bottles + remaining_bottles\n    # 总费用 = 总支付瓶数 * 每瓶价格\n    total_cost = total_paid_bottles * price_per_bottle\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "京沪速全长1300千米，一辆汽车从北京出发开往上海，已经行了700千米，剩下的路程每小时行120千米，还行几小时就到达？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 京沪速全长1300千米\n    total_distance = 1300\n    # 已经行驶了700千米\n    distance_traveled = 700\n    # 剩余的路程 = 总路程 - 已经行驶的路程\n    remaining_distance = total_distance - distance_traveled\n    # 剩下的路程每小时行120千米\n    speed = 120\n    # 还需要的时间 = 剩余的路程 / 速度\n    time_needed = remaining_distance / speed\n    # 答案是还需要的时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "加工一批零件，黄师傅(1/5)天完成，洪师傅(1/7)天完成．两人合作多少天就可以完成加工任务．", "target": 0.08333333333333333, "answer": 0.08333333333333333, "score": 1, "generation": ["def solution():\n    # 黄师傅完成加工任务需要(1/5)天\n    huang_time = 1/5\n    # 洪师傅完成加工任务需要(1/7)天\n    hong_time = 1/7\n    # 黄师傅的工作效率 = 1 / 黄师傅完成时间\n    huang_efficiency = 1 / huang_time\n    # 洪师傅的工作效率 = 1 / 洪师傅完成时间\n    hong_efficiency = 1 / hong_time\n    # 两人合作的总工作效率 = 黄师傅的工作效率 + 洪师傅的工作效率\n    total_efficiency = huang_efficiency + hong_efficiency\n    # 两人合作完成加工任务的时间 = 1 / 总工作效率\n    time_to_complete = 1 / total_efficiency\n    # 答案是两人合作完成加工任务的时间\n    result = time_to_complete\n    # 返回答案\n    return result"]}
{"question": "一瓶油，将它的(1/4)倒入一个重200克的玻璃杯里，再把杯放在天平的一个盘里，然后在天平的另一个盘中放人500克砝码，这时天平就平衡了．这瓶油重多少克．", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 玻璃杯的重量为200克\n    glass_weight = 200\n    # 砝码的重量为500克\n    counterweight = 500\n    # 将油的(1/4)倒入玻璃杯后，天平平衡\n    # 设油的总重量为x克\n    # 倒入玻璃杯的油重量为(1/4)*x\n    # 天平平衡时，玻璃杯和油的重量等于砝码的重量\n    # 所以 glass_weight + (1/4)*x = counterweight\n    # 解这个方程得到x = (counterweight - glass_weight) * 4\n    oil_weight = (counterweight - glass_weight) * 4\n    # 答案是这瓶油的总重量\n    result = oil_weight\n    # 返回答案\n    return result"]}
{"question": "王老师计划用100元钱买一些文具作为奖品奖给优秀学生干部．他先用65.4元买了6个笔记本，剩下的钱准备买5支钢笔，那么钢笔的单价必须控制在多少钱以内？", "target": 6.92, "answer": 6.919999999999999, "score": 1, "generation": ["def solution():\n    # 王老师计划用100元钱买文具\n    total_money = 100\n    # 先用65.4元买了6个笔记本\n    money_spent_on_notebooks = 65.4\n    # 剩下的钱 = 总钱数 - 买笔记本的钱\n    remaining_money = total_money - money_spent_on_notebooks\n    # 剩下的钱准备买5支钢笔\n    num_pens = 5\n    # 钢笔的单价必须控制在 = 剩下的钱 / 钢笔的数量\n    max_price_per_pen = remaining_money / num_pens\n    # 答案是钢笔的单价必须控制在多少钱以内\n    result = max_price_per_pen\n    # 返回答案\n    return result"]}
{"question": "小红看一本60页的故事书，第一天看了全书的(1/5)，第二天看了全书的(1/4)，两天共看了多少页？", "target": 27.0, "answer": 27.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为60页\n    total_pages = 60\n    # 第一天看了全书的(1/5)\n    read_fraction_first_day = 1/5\n    # 第二天看了全书的(1/4)\n    read_fraction_second_day = 1/4\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_first_day = total_pages * read_fraction_first_day\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_second_day = total_pages * read_fraction_second_day\n    # 两天共看了的页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_read_first_day + pages_read_second_day\n    # 答案是两天共看了的页数\n    result = total_pages_read\n    # 返回答案\n    return result"]}
{"question": "小平今年是他父亲年龄的(1/3)，若干年后他们相差22岁，那么小平今年多少岁．", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 设小平今年的年龄为x岁\n    x = 1  # 初始假设\n    while True:\n        # 父亲的年龄是小平的3倍\n        father_age = 3 * x\n        # 他们相差的年龄 = 父亲的年龄 - 小平的年龄\n        age_difference = father_age - x\n        # 题目中给出他们相差22岁\n        if age_difference == 22:\n            break\n        x += 1\n    # 答案是小平今年的年龄\n    result = x\n    # 返回答案\n    return result"]}
{"question": "20032003+20320030+23200300+22003003+20030032+20300320+23003200=．", "target": 148888888.0, "answer": 148888888.0, "score": 1, "generation": ["def solution():\n    # 定义所有需要相加的数字\n    num1 = 20032003\n    num2 = 20320030\n    num3 = 23200300\n    num4 = 22003003\n    num5 = 20030032\n    num6 = 20300320\n    num7 = 23003200\n    # 计算总和\n    total = num1 + num2 + num3 + num4 + num5 + num6 + num7\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "造纸厂今年前5个月完成全年造纸任务的45%，再生产1650吨就可以完成全年任务．造纸厂今年计划造纸多少吨？", "target": 3000.0, "answer": 2999.9999999999995, "score": 1, "generation": ["def solution():\n    # 前5个月完成全年任务的45%\n    completed_fraction = 0.45\n    # 再生产1650吨就可以完成全年任务\n    remaining_production = 1650\n    # 因为前5个月完成了45%，所以剩余的任务比例 = 1 - 45%\n    remaining_fraction = 1 - completed_fraction\n    # 全年计划造纸量 = 剩余生产量 / 剩余任务比例\n    total_planned_production = remaining_production / remaining_fraction\n    # 答案是全年计划造纸量\n    result = total_planned_production\n    # 返回答案\n    return result"]}
{"question": "饲养小组养灰兔75只，养的白兔是灰兔的5倍．两种兔共多少只？", "target": 450.0, "answer": 450.0, "score": 1, "generation": ["def solution():\n    # 灰兔的数量为75只\n    num_gray_rabbits = 75\n    # 白兔的数量是灰兔的5倍\n    num_white_rabbits = 5 * num_gray_rabbits\n    # 两种兔子的总数 = 灰兔数量 + 白兔数量\n    total_rabbits = num_gray_rabbits + num_white_rabbits\n    # 答案是两种兔子的总数\n    result = total_rabbits\n    # 返回答案\n    return result"]}
{"question": "某年9月份晴天有20天，雨天的天数比晴天少(4/5)，阴天的天数比雨天多(1/2)．这个月阴天有多少天？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 9月份晴天有20天\n    sunny_days = 20\n    # 雨天的天数比晴天少(4/5)\n    rainy_days = sunny_days - (4/5) * sunny_days\n    # 阴天的天数比雨天多(1/2)\n    cloudy_days = rainy_days + (1/2) * rainy_days\n    # 答案是阴天的天数\n    result = cloudy_days\n    # 返回答案\n    return result"]}
{"question": "超市运进水果，第一批运进320千克，第二排运进400千克，这两批运进水果的重量占超市现在所有水果的(2/3)，超市现在一共有水果多少千克？", "target": 1080.0, "answer": 1080.0, "score": 1, "generation": ["def solution():\n    # 第一批运进的水果重量为320千克\n    first_batch = 320\n    # 第二批运进的水果重量为400千克\n    second_batch = 400\n    # 两批运进水果的总重量 = 第一批 + 第二批\n    total_batches = first_batch + second_batch\n    # 这两批运进水果的重量占超市现在所有水果的(2/3)\n    fraction_of_total = 2/3\n    # 超市现在所有水果的总重量 = 两批运进水果的总重量 / 所占比例\n    total_fruits = total_batches / fraction_of_total\n    # 答案是超市现在所有水果的总重量\n    result = total_fruits\n    # 返回答案\n    return result"]}
{"question": "甲乙两数的差是144，甲数比乙数的3倍少14，那么甲数=．", "target": 223.0, "answer": 223.0, "score": 1, "generation": ["def solution():\n    # 甲乙两数的差是144\n    difference = 144\n    # 甲数比乙数的3倍少14\n    # 设乙数为x，则甲数为3x - 14\n    # 根据题意，甲数 - 乙数 = 144\n    # 即 (3x - 14) - x = 144\n    # 解方程得 2x - 14 = 144\n    # 2x = 158\n    # x = 79\n    # 所以甲数 = 3 * 79 - 14 = 223\n    x = (difference + 14) / 2\n    a = 3 * x - 14\n    # 答案是甲数\n    result = a\n    # 返回答案\n    return result"]}
{"question": "五年级一班48个同学集体合影．定价是24.5元，给4张相片．另外加印是每张2.3元．全班每人一张，再送给班主任和科任教师5张，一共要付多少元．", "target": 137.2, "answer": 137.2, "score": 1, "generation": ["def solution():\n    # 班级人数为48人\n    num_students = 48\n    # 定价为24.5元，给4张相片\n    base_price = 24.5\n    base_photos = 4\n    # 加印每张2.3元\n    additional_price_per_photo = 2.3\n    # 需要送给班主任和科任教师5张\n    photos_for_teachers = 5\n    # 每人一张相片，所以总需要的相片数 = 学生人数 + 教师相片数\n    total_photos_needed = num_students + photos_for_teachers\n    # 需要加印的相片数 = 总需要的相片数 - 基础相片数\n    additional_photos = total_photos_needed - base_photos\n    # 加印费用 = 加印相片数 * 加印每张价格\n    additional_cost = additional_photos * additional_price_per_photo\n    # 总费用 = 基础费用 + 加印费用\n    total_cost = base_price + additional_cost\n    # 答案是一共要付的总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "学校买来12只足球和18只篮球，共付出1392元，每只足球68元，每只篮球多少元？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 学校买来12只足球\n    num_footballs = 12\n    # 学校买来18只篮球\n    num_basketballs = 18\n    # 总共付出的金额为1392元\n    total_cost = 1392\n    # 每只足球的价格为68元\n    price_football = 68\n    # 足球的总价格 = 足球数量 * 每只足球的价格\n    total_football_cost = num_footballs * price_football\n    # 篮球的总价格 = 总金额 - 足球的总价格\n    total_basketball_cost = total_cost - total_football_cost\n    # 每只篮球的价格 = 篮球的总价格 / 篮球的数量\n    price_basketball = total_basketball_cost / num_basketballs\n    # 答案是每只篮球的价格\n    result = price_basketball\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲城到乙城3小时行126千米，照这样的速度，行完全程共用7小时，甲、乙两城相距多少千米？", "target": 294.0, "answer": 294.0, "score": 1, "generation": ["def solution():\n    # 汽车3小时行驶126千米\n    distance_in_3_hours = 126\n    time_3_hours = 3\n    # 计算汽车的速度 = 距离 / 时间\n    speed = distance_in_3_hours / time_3_hours\n    # 行完全程共用7小时\n    total_time = 7\n    # 甲、乙两城相距的距离 = 速度 * 总时间\n    total_distance = speed * total_time\n    # 答案是甲、乙两城相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "甲、乙两数的比是5：4，甲数比乙数多多少．", "target": 0.25, "answer": 0.25, "score": 1, "generation": ["def solution():\n    # 甲数与乙数的比是5：4\n    ratio_a = 5\n    ratio_b = 4\n    # 甲数比乙数多的比例 = 甲数的比例 - 乙数的比例\n    difference_ratio = ratio_a - ratio_b\n    # 甲数比乙数多的百分比 = (甲数比乙数多的比例) / 乙数的比例\n    percentage_difference = difference_ratio / ratio_b\n    # 答案是甲数比乙数多的百分比\n    result = percentage_difference\n    # 返回答案\n    return result"]}
{"question": "小兵与小军两人同时从两地相向而行，小兵每分钟走70米，比小军每分钟少走10米．12分钟后两个相遇，两地相距多少米．", "target": 1800.0, "answer": 1800.0, "score": 1, "generation": ["def solution():\n    # 小兵的速度是每分钟70米\n    speed_xiaobing = 70\n    # 小兵比小军每分钟少走10米，所以小军的速度 = 小兵的速度 + 10\n    speed_xiaojun = speed_xiaobing + 10\n    # 两人相向而行，相对速度 = 小兵的速度 + 小军的速度\n    relative_speed = speed_xiaobing + speed_xiaojun\n    # 两人相遇的时间是12分钟\n    time_to_meet = 12\n    # 两地距离 = 相对速度 * 相遇时间\n    distance = relative_speed * time_to_meet\n    # 答案是两地距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "某人出差从甲地到乙地，第一天坐火车行了全程的40%，第二天乘汽车行了270千米，这时离乙地还有全程的(3/8)，甲乙两地之间的路程=多少千米？", "target": 1200.0, "answer": 1200.0000000000002, "score": 1, "generation": ["def solution():\n    # 第一天坐火车行了全程的40%\n    first_day_percentage = 0.4\n    # 第二天乘汽车行了270千米\n    second_day_distance = 270\n    # 离乙地还有全程的(3/8)\n    remaining_percentage = 3/8\n    # 前两天行驶的总比例 = 第一天行驶的比例 + 第二天行驶的比例\n    # 第二天行驶的比例 = 1 - 第一天行驶的比例 - 剩余的比例\n    second_day_percentage = 1 - first_day_percentage - remaining_percentage\n    # 甲乙两地之间的路程 = 第二天行驶的距离 / 第二天行驶的比例\n    total_distance = second_day_distance / second_day_percentage\n    # 答案是甲乙两地之间的路程\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "把3米长的木料锯成4小段，每锯下一小段需5分钟．全部锯完需多少分钟？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 木料的总长度为3米\n    total_length = 3\n    # 锯成4小段\n    num_pieces = 4\n    # 每锯下一小段需要5分钟\n    time_per_cut = 5\n    # 锯成4小段需要锯3次\n    num_cuts = num_pieces - 1\n    # 全部锯完所需的时间 = 锯的次数 * 每次锯的时间\n    total_time = num_cuts * time_per_cut\n    # 答案是全部锯完所需的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "李师傅每小时织(2/5)米的毯子，(2/3)小时织多少米．", "target": 0.26666666666666666, "answer": 0.26666666666666666, "score": 1, "generation": ["def solution():\n    # 李师傅每小时织(2/5)米的毯子\n    weaving_rate = 2/5\n    # 工作时间为(2/3)小时\n    working_time = 2/3\n    # 织的毯子长度 = 织毯速度 * 工作时间\n    length_woven = weaving_rate * working_time\n    # 答案是织的毯子长度\n    result = length_woven\n    # 返回答案\n    return result"]}
{"question": "比的后项是2.5，比值是5，比的前项=．", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 比的后项是2.5\n    consequent = 2.5\n    # 比值是5\n    ratio = 5\n    # 比的前项 = 比值 * 比的后项\n    antecedent = ratio * consequent\n    # 答案是比的前项\n    result = antecedent\n    # 返回答案\n    return result"]}
{"question": "果园里一共收了220吨苹果，用13辆卡车运了一趟后还剩下12吨，每辆卡车一趟能运多少吨苹果？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 果园里一共收了220吨苹果\n    total_apples = 220\n    # 运了一趟后还剩下12吨\n    remaining_apples = 12\n    # 运走的苹果数量 = 总苹果数量 - 剩下的苹果数量\n    transported_apples = total_apples - remaining_apples\n    # 使用的卡车数量是13辆\n    num_trucks = 13\n    # 每辆卡车一趟能运的苹果数量 = 运走的苹果数量 / 卡车数量\n    apples_per_truck = transported_apples / num_trucks\n    # 答案是每辆卡车一趟能运的苹果数量\n    result = apples_per_truck\n    # 返回答案\n    return result"]}
{"question": "一个数的(5/8)与10的(4/5)相等，求这个数？", "target": 12.8, "answer": 12.8, "score": 1, "generation": ["def solution():\n    # 10的(4/5)等于8\n    ten_four_fifths = 10 * (4/5)\n    # 设这个数为x，根据题意，(5/8)*x = 8\n    # 解这个方程，x = 8 / (5/8)\n    x = ten_four_fifths / (5/8)\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "红星小学四年级有96名同学去参观科技馆，平均分成4队，每队分成3组，平均每组有多少人？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 四年级有96名同学\n    total_students = 96\n    # 平均分成4队\n    num_teams = 4\n    # 每队分成3组\n    num_groups_per_team = 3\n    # 每队的人数 = 总人数 / 队数\n    students_per_team = total_students / num_teams\n    # 每组的人数 = 每队的人数 / 每队的组数\n    students_per_group = students_per_team / num_groups_per_team\n    # 答案是平均每组的人数\n    result = students_per_group\n    # 返回答案\n    return result"]}
{"question": "花园小学四年级两个班共有学生80人．开学初学校为四年级全部更换了新的单人课桌和椅子，每张课桌68元，每把椅子32元，花园小学四年级一共用了多少钱？", "target": 8000.0, "answer": 8000.0, "score": 1, "generation": ["def solution():\n    # 四年级两个班共有学生80人\n    num_students = 80\n    # 每张课桌的价格为68元\n    price_per_desk = 68\n    # 每把椅子的价格为32元\n    price_per_chair = 32\n    # 每个学生需要一张课桌和一把椅子\n    # 总费用 = 学生人数 * (每张课桌价格 + 每把椅子价格)\n    total_cost = num_students * (price_per_desk + price_per_chair)\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "98/16*112=．", "target": 686.0, "answer": 686.0, "score": 1, "generation": ["def solution():\n    # 计算98除以16\n    division_result = 98 / 16\n    # 将结果乘以112\n    final_result = division_result * 112\n    # 答案是最终的计算结果\n    result = final_result\n    # 返回答案\n    return result"]}
{"question": "三角形的面积是6.2cm^2，高是3.1米厘米，底=多少厘米．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 三角形的面积是6.2cm^2\n    area = 6.2\n    # 高是3.1厘米\n    height = 3.1\n    # 三角形的面积公式是：面积 = (底 * 高) / 2\n    # 所以底 = (面积 * 2) / 高\n    base = (area * 2) / height\n    # 答案是底的长度\n    result = base\n    # 返回答案\n    return result"]}
{"question": "用货车运水泥，要运45吨，已经运了15吨，剩下的用载重5吨的货车一次运完，需要几辆这样的货车？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 需要运的水泥总重量为45吨\n    total_weight = 45\n    # 已经运了15吨\n    weight_transported = 15\n    # 剩余的水泥重量 = 总重量 - 已运重量\n    remaining_weight = total_weight - weight_transported\n    # 每辆货车的载重为5吨\n    truck_capacity = 5\n    # 需要的货车数量 = 剩余重量 / 每辆货车的载重，向上取整\n    num_trucks = remaining_weight / truck_capacity\n    # 答案是需要的货车数量\n    result = num_trucks\n    # 返回答案\n    return result"]}
{"question": "有一列长200米的火车，每秒行驶15米．它通过一座长850米的大桥需要多少秒．", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 火车的长度为200米\n    train_length = 200\n    # 大桥的长度为850米\n    bridge_length = 850\n    # 火车的速度为每秒15米\n    train_speed = 15\n    # 火车通过大桥的总距离 = 火车长度 + 大桥长度\n    total_distance = train_length + bridge_length\n    # 通过大桥所需的时间 = 总距离 / 火车速度\n    time_to_cross = total_distance / train_speed\n    # 答案是火车通过大桥所需的时间\n    result = time_to_cross\n    # 返回答案\n    return result"]}
{"question": "0.58/0.14竖式计算时，除得的商是4，余数=．", "target": 0.02, "answer": 0.019999999999999907, "score": 1, "generation": ["def solution():\n    # 被除数是0.58\n    dividend = 0.58\n    # 除数是0.14\n    divisor = 0.14\n    # 商是4\n    quotient = 4\n    # 余数 = 被除数 - 除数 * 商\n    remainder = dividend - divisor * quotient\n    # 答案是余数\n    result = remainder\n    # 返回答案\n    return result"]}
{"question": "三年级5个班参加欢迎中国航天英雄报告团活动，每班选15个同学，每个同学要2个气球，一共要多少个气球？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 三年级有5个班\n    num_classes = 5\n    # 每班选15个同学\n    students_per_class = 15\n    # 每个同学要2个气球\n    balloons_per_student = 2\n    # 总学生数 = 班级数 * 每班学生数\n    total_students = num_classes * students_per_class\n    # 总气球数 = 总学生数 * 每个同学要的气球数\n    total_balloons = total_students * balloons_per_student\n    # 答案是总气球数\n    result = total_balloons\n    # 返回答案\n    return result"]}
{"question": "三年级同学参加“陈省身杯竞赛颁奖典礼”，如果每排坐6人，可以坐满12排；如果每排坐8人，则可以坐满多少排．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 每排坐6人，可以坐满12排\n    seats_per_row_initial = 6\n    rows_initial = 12\n    # 总人数 = 每排坐的人数 * 排数\n    total_people = seats_per_row_initial * rows_initial\n    # 如果每排坐8人\n    seats_per_row_new = 8\n    # 可以坐满的排数 = 总人数 / 每排坐的人数\n    rows_new = total_people / seats_per_row_new\n    # 答案是新的排数\n    result = rows_new\n    # 返回答案\n    return result"]}
{"question": "李阿姨用1080元买了30箱饮料．上网查询后，发现该产品从厂家直接购买，每箱只需28元．她多花了多少元？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 李阿姨实际花费1080元买了30箱饮料\n    actual_cost = 1080\n    num_boxes = 30\n    # 从厂家直接购买每箱只需28元\n    factory_price_per_box = 28\n    # 从厂家直接购买的总费用 = 箱数 * 每箱价格\n    factory_total_cost = num_boxes * factory_price_per_box\n    # 多花的钱 = 实际花费 - 厂家直接购买的总费用\n    extra_cost = actual_cost - factory_total_cost\n    # 答案是李阿姨多花的钱\n    result = extra_cost\n    # 返回答案\n    return result"]}
{"question": "一件上衣与一条裤子的总价为360元，上衣与裤子的价钱比是5：4，买一条裤子应花多少元．", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 上衣与裤子的总价为360元\n    total_price = 360\n    # 上衣与裤子的价钱比是5：4\n    ratio_shirt = 5\n    ratio_pants = 4\n    # 总比例 = 上衣比例 + 裤子比例\n    total_ratio = ratio_shirt + ratio_pants\n    # 裤子的价格 = 总价 * (裤子比例 / 总比例)\n    price_pants = total_price * (ratio_pants / total_ratio)\n    # 答案是裤子的价格\n    result = price_pants\n    # 返回答案\n    return result"]}
{"question": "一堆黄沙重400吨，第一天运走了(1/4)，第二天运走30%，还剩多少吨？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 黄沙的总重量为400吨\n    total_sand = 400\n    # 第一天运走了(1/4)\n    first_day_fraction = 1/4\n    # 第二天运走了30%\n    second_day_percentage = 0.3\n    # 第一天运走的重量 = 总重量 * 第一天运走的比例\n    first_day_sand = total_sand * first_day_fraction\n    # 第二天运走的重量 = 总重量 * 第二天运走的比例\n    second_day_sand = total_sand * second_day_percentage\n    # 剩余重量 = 总重量 - 第一天运走的重量 - 第二天运走的重量\n    remaining_sand = total_sand - first_day_sand - second_day_sand\n    # 答案是剩余的重量\n    result = remaining_sand\n    # 返回答案\n    return result"]}
{"question": "已知：梨子4千克6元，桔子5千克11元．张大妈买12千克梨子和20千克桔子，共应付多少钱？", "target": 62.0, "answer": 62.0, "score": 1, "generation": ["def solution():\n    # 梨子4千克6元\n    pear_weight = 4\n    pear_price = 6\n    # 桔子5千克11元\n    orange_weight = 5\n    orange_price = 11\n    # 张大妈买12千克梨子\n    bought_pear_weight = 12\n    # 张大妈买20千克桔子\n    bought_orange_weight = 20\n    # 梨子的单价 = 梨子的价格 / 梨子的重量\n    pear_price_per_kg = pear_price / pear_weight\n    # 桔子的单价 = 桔子的价格 / 桔子的重量\n    orange_price_per_kg = orange_price / orange_weight\n    # 梨子的总价 = 购买的梨子重量 * 梨子的单价\n    total_pear_price = bought_pear_weight * pear_price_per_kg\n    # 桔子的总价 = 购买的桔子重量 * 桔子的单价\n    total_orange_price = bought_orange_weight * orange_price_per_kg\n    # 共应付的钱 = 梨子的总价 + 桔子的总价\n    total_price = total_pear_price + total_orange_price\n    # 答案是共应付的钱\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "果园里有255棵苹果树，再种35棵梨树就正好和苹果树相等．如果梨树每20棵种一排，梨树一共可以种多少排？", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 果园里有255棵苹果树\n    num_apple_trees = 255\n    # 再种35棵梨树就正好和苹果树相等\n    additional_pear_trees = 35\n    # 梨树的总数 = 苹果树的数量 - 再种的梨树数量\n    total_pear_trees = num_apple_trees - additional_pear_trees\n    # 每排种20棵梨树\n    trees_per_row = 20\n    # 梨树可以种的排数 = 梨树总数 / 每排的梨树数量\n    num_rows = total_pear_trees / trees_per_row\n    # 答案是梨树可以种的排数\n    result = num_rows\n    # 返回答案\n    return result"]}
{"question": "超市上午运进水果402.3千克，下午运进398.7千克，要把这些水果分装在每箱可装4.5千克的包装箱里，需要准备多少个这样的包装箱？", "target": 178.0, "answer": 178.0, "score": 1, "generation": ["def solution():\n    # 上午运进水果的重量为402.3千克\n    morning_weight = 402.3\n    # 下午运进水果的重量为398.7千克\n    afternoon_weight = 398.7\n    # 每箱可装4.5千克\n    box_capacity = 4.5\n    # 总重量 = 上午重量 + 下午重量\n    total_weight = morning_weight + afternoon_weight\n    # 需要的包装箱数量 = 总重量 / 每箱容量，向上取整\n    num_boxes = total_weight / box_capacity\n    # 答案是需要的包装箱数量\n    result = num_boxes\n    # 返回答案\n    return result"]}
{"question": "杨树与柳树棵数的比是5：4，柳树的棵数比杨树少((())/(()))．", "target": 0.2, "answer": 0.2, "score": 1, "generation": ["def solution():\n    # 杨树与柳树棵数的比是5：4\n    poplar_to_willow_ratio = 5/4\n    # 杨树的棵数\n    poplar = 5\n    # 柳树的棵数\n    willow = 4\n    # 柳树的棵数比杨树少的数量 = 杨树的棵数 - 柳树的棵数\n    difference = poplar - willow\n    # 柳树的棵数比杨树少的比例 = 少的数量 / 杨树的棵数\n    difference_ratio = difference / poplar\n    # 答案是柳树的棵数比杨树少的比例\n    result = difference_ratio\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距496千米，一辆客车从甲地开往乙地，每小时行64千米，行驶1小时后，一辆货车从乙地开往甲地，每小时行56千米，货车开出几小时后与客车相遇？", "target": 3.6, "answer": 3.6, "score": 1, "generation": ["def solution():\n    # 甲乙两地相距496千米\n    total_distance = 496\n    # 客车的速度是每小时64千米\n    bus_speed = 64\n    # 货车的速度是每小时56千米\n    truck_speed = 56\n    # 客车行驶1小时后，行驶的距离\n    bus_distance_1h = bus_speed * 1\n    # 剩余的距离 = 总距离 - 客车行驶的距离\n    remaining_distance = total_distance - bus_distance_1h\n    # 两车相向而行，相对速度 = 客车速度 + 货车速度\n    relative_speed = bus_speed + truck_speed\n    # 相遇时间 = 剩余距离 / 相对速度\n    time_to_meet = remaining_distance / relative_speed\n    # 答案是货车开出后与客车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "某修路队前3天每天修路160千米，后4天共修路710千米．平均每天修路多少千米？", "target": 170.0, "answer": 170.0, "score": 1, "generation": ["def solution():\n    # 前3天每天修路160千米\n    first_days = 3\n    daily_repair_first = 160\n    # 后4天共修路710千米\n    last_days = 4\n    total_repair_last = 710\n    # 前3天修路的总长度 = 天数 * 每天修路的长度\n    total_repair_first = first_days * daily_repair_first\n    # 总修路长度 = 前3天修路长度 + 后4天修路长度\n    total_repair = total_repair_first + total_repair_last\n    # 总天数 = 前3天 + 后4天\n    total_days = first_days + last_days\n    # 平均每天修路长度 = 总修路长度 / 总天数\n    average_daily_repair = total_repair / total_days\n    # 答案是平均每天修路的长度\n    result = average_daily_repair\n    # 返回答案\n    return result"]}
{"question": "王叔叔把年终奖金2500元存入银行，定期3年，年利率是3.25%．到期时，王叔叔可拿到本息多少元．", "target": 2743.75, "answer": 2743.75, "score": 1, "generation": ["def solution():\n    # 王叔叔的年终奖金为2500元\n    principal = 2500\n    # 定期3年\n    years = 3\n    # 年利率是3.25%\n    annual_interest_rate = 0.0325\n    # 计算利息 = 本金 * 年利率 * 年数\n    interest = principal * annual_interest_rate * years\n    # 计算本息 = 本金 + 利息\n    total_amount = principal + interest\n    # 答案是王叔叔可拿到的本息\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "工厂有一堆煤，用掉(2/3)后，又运来36吨，这时工厂的煤正好与原来一样多，这个工厂原有煤多少吨．", "target": 54.0, "answer": 54.0, "score": 1, "generation": ["def solution():\n    # 设工厂原有煤为x吨\n    # 用掉(2/3)后，剩下的煤为x - (2/3)x = (1/3)x\n    remaining_coal = (1/3)\n    # 又运来36吨煤\n    added_coal = 36\n    # 这时工厂的煤正好与原来一样多，即(1/3)x + 36 = x\n    # 解方程：(1/3)x + 36 = x\n    # 移项得：36 = x - (1/3)x\n    # 合并同类项得：36 = (2/3)x\n    # 解得：x = 36 * (3/2) = 54\n    original_coal = added_coal * (3/2)\n    # 答案是工厂原有煤的吨数\n    result = original_coal\n    # 返回答案\n    return result"]}
{"question": "在路的一侧从头至尾栽树，每隔9米栽一棵，共栽了100棵，这条路有多长？", "target": 891.0, "answer": 891.0, "score": 1, "generation": ["def solution():\n    # 每隔9米栽一棵树\n    distance_between_trees = 9\n    # 共栽了100棵树\n    total_trees = 100\n    # 因为从头至尾栽树，所以路的长度 = (树的数量 - 1) * 树之间的距离\n    road_length = (total_trees - 1) * distance_between_trees\n    # 答案是路的长度\n    result = road_length\n    # 返回答案\n    return result"]}
{"question": "在学校举行的体育达标测试中，六年级200名同学参加测试，合格率是98%，有多少名同学达标．", "target": 196.0, "answer": 196.0, "score": 1, "generation": ["def solution():\n    # 六年级参加测试的同学总数为200名\n    total_students = 200\n    # 测试的合格率是98%\n    pass_rate = 0.98\n    # 达标的同学数量 = 总人数 * 合格率\n    passed_students = total_students * pass_rate\n    # 答案是达标的同学数量\n    result = passed_students\n    # 返回答案\n    return result"]}
{"question": "一本225页的故事书，读了多少页后，还剩全书的(2/5)．", "target": 135.0, "answer": 135.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为225页\n    total_pages = 225\n    # 还剩全书的(2/5)\n    remaining_fraction = 2/5\n    # 剩余的页数 = 总页数 * 剩余比例\n    remaining_pages = total_pages * remaining_fraction\n    # 已读的页数 = 总页数 - 剩余的页数\n    read_pages = total_pages - remaining_pages\n    # 答案是已读的页数\n    result = read_pages\n    # 返回答案\n    return result"]}
{"question": "小张的劳动生产技术不断提高，第一天生产零件30个，第二天生产零件32个，第3天生产零件34个…，照这样，每天增加2个，他第12天应生产零件多少个．", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 第一天生产零件30个\n    first_day_production = 30\n    # 每天增加2个零件\n    daily_increase = 2\n    # 第12天的生产数量 = 第一天的生产数量 + (12 - 1) * 每天增加的数量\n    twelfth_day_production = first_day_production + (12 - 1) * daily_increase\n    # 答案是第12天的生产数量\n    result = twelfth_day_production\n    # 返回答案\n    return result"]}
{"question": "鸵鸟每小时能跑64千米，照这样的速度，它2小时能跑多少千米．", "target": 128.0, "answer": 128.0, "score": 1, "generation": ["def solution():\n    # 鸵鸟每小时能跑64千米\n    speed = 64\n    # 跑的时间为2小时\n    time = 2\n    # 跑的总距离 = 速度 * 时间\n    distance = speed * time\n    # 答案是跑的总距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "佳佳5分钟走300米，照这样的速度，她从家里到学校走了15分钟，佳佳家到学校的路程有多少米？", "target": 900.0, "answer": 900.0, "score": 1, "generation": ["def solution():\n    # 佳佳5分钟走300米\n    distance_in_5_min = 300\n    time_in_5_min = 5\n    # 计算佳佳的速度 = 距离 / 时间\n    speed = distance_in_5_min / time_in_5_min\n    # 佳佳从家里到学校走了15分钟\n    time_to_school = 15\n    # 佳佳家到学校的路程 = 速度 * 时间\n    distance_to_school = speed * time_to_school\n    # 答案是佳佳家到学校的路程\n    result = distance_to_school\n    # 返回答案\n    return result"]}
{"question": "小红看一本故事书，第一天看了68页，第二天比第一天多看了16页，还剩下116页没看．这本故事书有多少页？", "target": 268.0, "answer": 268.0, "score": 1, "generation": ["def solution():\n    # 第一天看了68页\n    first_day_pages = 68\n    # 第二天比第一天多看了16页\n    second_day_extra_pages = 16\n    # 第二天看了的页数 = 第一天看的页数 + 第二天多看的页数\n    second_day_pages = first_day_pages + second_day_extra_pages\n    # 还剩下116页没看\n    remaining_pages = 116\n    # 故事书的总页数 = 第一天看的页数 + 第二天看的页数 + 剩余的页数\n    total_pages = first_day_pages + second_day_pages + remaining_pages\n    # 答案是故事书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一个平行四边形相邻的两条边的长度是3厘米和4厘米，它的周长=多少厘米．", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 平行四边形相邻的两条边的长度分别是3厘米和4厘米\n    side1 = 3\n    side2 = 4\n    # 平行四边形的周长 = 2 * (第一条边 + 第二条边)\n    perimeter = 2 * (side1 + side2)\n    # 答案是平行四边形的周长\n    result = perimeter\n    # 返回答案\n    return result"]}
{"question": "设座位若干排，若每排坐30人，则有8人无座位，若每排坐31人，则空26个座位，共有几排座位？", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 设共有x排座位\n    # 第一种情况：每排坐30人，有8人无座位\n    # 总人数 = 30 * x + 8\n    # 第二种情况：每排坐31人，空26个座位\n    # 总人数 = 31 * x - 26\n    # 因为总人数相同，所以可以建立方程：30x + 8 = 31x - 26\n    # 解方程：x = 8 + 26 = 34\n    x = 8 + 26\n    # 答案是共有34排座位\n    result = x\n    # 返回答案\n    return result"]}
{"question": "修一条公路，第一天修了全路的(2/7)，第二天修了全路的(1/5)，还剩全路的多少没有修．", "target": 0.5142857142857142, "answer": 0.5142857142857142, "score": 1, "generation": ["def solution():\n    # 第一天修了全路的(2/7)\n    first_day_fraction = 2/7\n    # 第二天修了全路的(1/5)\n    second_day_fraction = 1/5\n    # 总工作量是1\n    total_work = 1\n    # 剩余的工作量 = 总工作量 - 第一天的工作量 - 第二天的工作量\n    remaining_work = total_work - first_day_fraction - second_day_fraction\n    # 答案是剩余的工作量\n    result = remaining_work\n    # 返回答案\n    return result"]}
{"question": "湖边有一排柳树，每两棵树之间相距6米，小明从第1棵树跑到第20棵树，共跑多少米．", "target": 114.0, "answer": 114.0, "score": 1, "generation": ["def solution():\n    # 每两棵树之间的距离为6米\n    distance_between_trees = 6\n    # 小明从第1棵树跑到第20棵树\n    start_tree = 1\n    end_tree = 20\n    # 树的数量差 = 结束树 - 开始树\n    tree_difference = end_tree - start_tree\n    # 因为每两棵树之间相距6米，所以总距离 = 树的数量差 * 每两棵树之间的距离\n    total_distance = tree_difference * distance_between_trees\n    # 答案是小明跑的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "有一批书，第一天卖出400本，第二天卖出占总数的(1/3)，第3天卖出总数的30%，还剩下150本．这批书一共有多少本？", "target": 1500.0, "answer": 1499.9999999999995, "score": 1, "generation": ["def solution():\n    # 第一天卖出的书为400本\n    day1_sold = 400\n    # 第二天卖出总数的(1/3)\n    day2_fraction = 1/3\n    # 第三天卖出总数的30%\n    day3_fraction = 0.3\n    # 还剩下150本\n    remaining_books = 150\n    # 设这批书的总数为x本\n    # 根据题意，可以列出方程：day1_sold + day2_fraction * x + day3_fraction * x + remaining_books = x\n    # 解这个方程可以得到x的值\n    # 方程可以简化为：day1_sold + remaining_books = x - day2_fraction * x - day3_fraction * x\n    # 即：day1_sold + remaining_books = x * (1 - day2_fraction - day3_fraction)\n    # 所以x = (day1_sold + remaining_books) / (1 - day2_fraction - day3_fraction)\n    total_books = (day1_sold + remaining_books) / (1 - day2_fraction - day3_fraction)\n    # 答案是这批书的总数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小明看一本120页的故事书，第一天看了20%，第二天看了40%，两天一共看了多少页？", "target": 72.0, "answer": 72.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为120页\n    total_pages = 120\n    # 第一天看了20%\n    first_day_percentage = 0.2\n    # 第二天看了40%\n    second_day_percentage = 0.4\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_first_day = total_pages * first_day_percentage\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_second_day = total_pages * second_day_percentage\n    # 两天一共看了的页数 = 第一天看的页数 + 第二天看的页数\n    total_pages_read = pages_read_first_day + pages_read_second_day\n    # 答案是两天一共看了的页数\n    result = total_pages_read\n    # 返回答案\n    return result"]}
{"question": "学校有一块800平方米实验田，用500平方米种豆角，剩余部分的40%种黄瓜，其余的全部种西红柿，种西红柿的面积=？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 实验田的总面积为800平方米\n    total_area = 800\n    # 种豆角的面积为500平方米\n    bean_area = 500\n    # 剩余的面积 = 总面积 - 种豆角的面积\n    remaining_area = total_area - bean_area\n    # 种黄瓜的面积 = 剩余面积的40%\n    cucumber_area = remaining_area * 0.4\n    # 种西红柿的面积 = 剩余面积 - 种黄瓜的面积\n    tomato_area = remaining_area - cucumber_area\n    # 答案是种西红柿的面积\n    result = tomato_area\n    # 返回答案\n    return result"]}
{"question": "一个数的(3/2)+(1/2)得(12/5)，这个数=？", "target": 1.2666666666666666, "answer": 1.2666666666666666, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    # 根据题意，(3/2)x + (1/2) = 12/5\n    # 解这个方程\n    # 首先，将(1/2)移到等式右边：(3/2)x = (12/5) - (1/2)\n    # 计算右边的值：(12/5) - (1/2) = (24/10) - (5/10) = 19/10\n    # 然后，(3/2)x = 19/10\n    # 解x：x = (19/10) / (3/2) = (19/10) * (2/3) = 38/30 = 19/15\n    # 所以这个数是19/15\n    result = 19/15\n    # 返回答案\n    return result"]}
{"question": "我们这栋教学楼有3层楼安排了教室，每层有6间教室，如果每间教室里装有8盏日光灯，问这栋教学楼总共要装多少盏日光灯？", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 教学楼有3层楼安排了教室\n    num_floors = 3\n    # 每层有6间教室\n    num_classrooms_per_floor = 6\n    # 每间教室里装有8盏日光灯\n    num_lights_per_classroom = 8\n    # 总教室数量 = 楼层数 * 每层教室数\n    total_classrooms = num_floors * num_classrooms_per_floor\n    # 总日光灯数量 = 总教室数量 * 每间教室日光灯数\n    total_lights = total_classrooms * num_lights_per_classroom\n    # 答案是总日光灯数量\n    result = total_lights\n    # 返回答案\n    return result"]}
{"question": "一堆煤，原计划每天烧4吨，可以75天，由于改进炉灶，每天烧3吨，这堆煤可以烧多少天？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 原计划每天烧4吨\n    planned_daily_consumption = 4\n    # 原计划可以烧75天\n    planned_days = 75\n    # 总煤量 = 每天烧的量 * 天数\n    total_coal = planned_daily_consumption * planned_days\n    # 改进炉灶后每天烧3吨\n    new_daily_consumption = 3\n    # 可以烧的天数 = 总煤量 / 新的每天烧的量\n    new_days = total_coal / new_daily_consumption\n    # 答案是改进炉灶后可以烧的天数\n    result = new_days\n    # 返回答案\n    return result"]}
{"question": "A、B两地相距2500千米，甲、乙两辆汽车同时从A地出发开往B地，4.2小时后乙领先甲42千米，已知甲每小时行70千米，乙每小时行多少千米？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # A、B两地相距2500千米\n    distance = 2500\n    # 甲、乙两辆汽车同时从A地出发开往B地\n    # 4.2小时后乙领先甲42千米\n    time = 4.2\n    lead_distance = 42\n    # 甲每小时行70千米\n    speed_a = 70\n    # 甲行驶的距离 = 甲的速度 * 时间\n    distance_a = speed_a * time\n    # 乙行驶的距离 = 甲行驶的距离 + 领先的距离\n    distance_b = distance_a + lead_distance\n    # 乙的速度 = 乙行驶的距离 / 时间\n    speed_b = distance_b / time\n    # 答案是乙每小时行驶的距离\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两辆汽车分别从南京和上海同时出发，在沪宁高速公路上相对而行．甲车每小时行103千米，乙车每小时行112千米，经过1.2小时两车还相距16千米．沪宁高速公路全长多少千米？", "target": 274.0, "answer": 274.0, "score": 1, "generation": ["def solution():\n    # 甲车的速度是每小时行103千米\n    speed_a = 103\n    # 乙车的速度是每小时行112千米\n    speed_b = 112\n    # 两车行驶的时间是1.2小时\n    time = 1.2\n    # 两车行驶后的剩余距离是16千米\n    remaining_distance = 16\n    # 两车的相对速度 = 甲车速度 + 乙车速度\n    relative_speed = speed_a + speed_b\n    # 两车行驶的总距离 = 相对速度 * 时间\n    distance_covered = relative_speed * time\n    # 沪宁高速公路全长 = 两车行驶的总距离 + 剩余距离\n    total_distance = distance_covered + remaining_distance\n    # 答案是沪宁高速公路的全长\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "在学校为四川地震举行的捐款活动中，六年级同学踊跃捐款献爱心，共捐款1200元，比五年级同学的捐款数多20%，两个年级共向灾区捐款多少元？", "target": 2200.0, "answer": 2200.0, "score": 1, "generation": ["def solution():\n    # 六年级同学的捐款金额为1200元\n    sixth_grade_donation = 1200\n    # 六年级比五年级多捐20%\n    donation_increase = 0.2\n    # 五年级的捐款金额 = 六年级的捐款金额 / (1 + 捐款增加比例)\n    fifth_grade_donation = sixth_grade_donation / (1 + donation_increase)\n    # 两个年级的总捐款金额 = 六年级的捐款金额 + 五年级的捐款金额\n    total_donation = sixth_grade_donation + fifth_grade_donation\n    # 答案是两个年级的总捐款金额\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "湖滨种着一排柳树，每相邻两棵树之间相距8米，小明从第5棵树跑到第100棵树，一共跑了多少米．", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 相邻两棵树之间的距离为8米\n    distance_between_trees = 8\n    # 小明从第5棵树跑到第100棵树\n    start_tree = 5\n    end_tree = 100\n    # 跑过的树的数量 = 结束树 - 开始树\n    num_trees_passed = end_tree - start_tree\n    # 因为每两棵树之间距离为8米，所以总距离 = 跑过的树的数量 * 每两棵树之间的距离\n    total_distance = num_trees_passed * distance_between_trees\n    # 答案是小明一共跑的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一块长方形菜地，宽是20米，长比宽多(1/4)，问这块菜地的面积=？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 菜地的宽为20米\n    width = 20\n    # 长比宽多(1/4)\n    length_increase = 1/4\n    # 菜地的长 = 宽 + 宽 * 长比宽多的比例\n    length = width + width * length_increase\n    # 菜地的面积 = 长 * 宽\n    area = length * width\n    # 答案是菜地的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "小猴分桃．一共有30千克桃子，平均分给5个小伙伴．每只小猴能分到多少千克的桃子？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 桃子的总重量为30千克\n    total_peaches = 30\n    # 小伙伴的数量为5个\n    num_friends = 5\n    # 每只小猴分到的桃子重量 = 总重量 / 小伙伴的数量\n    peaches_per_friend = total_peaches / num_friends\n    # 答案是每只小猴分到的桃子重量\n    result = peaches_per_friend\n    # 返回答案\n    return result"]}
{"question": "五年级的同学去参观东莞展览馆，共用去4小时，其中路上用去的时间占(1/5)，休息的时间占(1/6)，剩下的是游览时间，游览的时间占几分之几？", "target": 0.6333333333333333, "answer": 0.6333333333333334, "score": 1, "generation": ["def solution():\n    # 总共用去的时间为4小时\n    total_time = 4\n    # 路上用去的时间占(1/5)\n    time_on_road = 1/5\n    # 休息的时间占(1/6)\n    time_resting = 1/6\n    # 游览时间占总时间的比例 = 1 - 路上时间比例 - 休息时间比例\n    time_touring = 1 - time_on_road - time_resting\n    # 答案是游览时间占总时间的比例\n    result = time_touring\n    # 返回答案\n    return result"]}
{"question": "一个油桶，装进(2/5)桶花生油后，连桶共重3.5千克，把桶装满连桶共重6.5千克，这桶油重多少千克？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 油桶装进(2/5)桶花生油后，连桶共重3.5千克\n    weight_partial = 3.5\n    # 油桶装满后，连桶共重6.5千克\n    weight_full = 6.5\n    # 油桶装进(2/5)桶花生油后的重量与装满后的重量差 = 6.5 - 3.5 = 3.0千克\n    weight_difference = weight_full - weight_partial\n    # 这个重量差对应的是(3/5)桶花生油的重量\n    oil_fraction = 3/5\n    # 所以一桶花生油的重量 = 重量差 / (3/5)\n    oil_weight = weight_difference / oil_fraction\n    # 答案是这桶油的重量\n    result = oil_weight\n    # 返回答案\n    return result"]}
{"question": "甲数是32，甲乙两数的最小公倍数288，最大公约数是4，那乙数应该=．", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 甲数是32\n    num_a = 32\n    # 最小公倍数是288\n    lcm = 288\n    # 最大公约数是4\n    gcd = 4\n    # 根据公式：甲数 * 乙数 = 最小公倍数 * 最大公约数\n    # 所以乙数 = (最小公倍数 * 最大公约数) / 甲数\n    num_b = (lcm * gcd) / num_a\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "A城到B城的公路长160千米．一辆汽车走高速路的速度是80千米/时，走普通公路的速度是40千米/时．从A城去B城走高速路比普通公路节省多少时间？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # A城到B城的公路长160千米\n    distance = 160\n    # 高速路的速度是80千米/时\n    speed_highway = 80\n    # 普通公路的速度是40千米/时\n    speed_normal = 40\n    # 走高速路的时间 = 距离 / 高速路速度\n    time_highway = distance / speed_highway\n    # 走普通公路的时间 = 距离 / 普通公路速度\n    time_normal = distance / speed_normal\n    # 节省的时间 = 走普通公路的时间 - 走高速路的时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result"]}
{"question": "在家电下乡活动中，陈伯伯买了一台彩色电视机，获得政府给予销售价的13%资金补贴后，这样他实际付出1131元．这台彩色电视机的销售价=多少元？", "target": 1300.0, "answer": 1300.0, "score": 1, "generation": ["def solution():\n    # 陈伯伯实际付出的金额为1131元\n    actual_payment = 1131\n    # 政府给予销售价的13%资金补贴\n    subsidy_rate = 0.13\n    # 因为实际付出金额 = 销售价 - 补贴金额\n    # 所以销售价 = 实际付出金额 / (1 - 补贴率)\n    sales_price = actual_payment / (1 - subsidy_rate)\n    # 答案是彩色电视机的销售价\n    result = sales_price\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车分别从相距650km的A、B两地同时出发，相向而行．甲车每小时行70km，乙车每小时行60km．几小时相遇？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # A、B两地的距离为650km\n    distance = 650\n    # 甲车的速度是每小时70km\n    speed_a = 70\n    # 乙车的速度是每小时60km\n    speed_b = 60\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "某班统计数学考试成绩，平均成绩为85.13分．事后复查，发现将小玲的成绩87分误作78分计算，经重新计算后，该班平均成绩是85.31分．这个班有多少个个学生．", "target": 50.0, "answer": 49.9999999999981, "score": 1, "generation": ["def solution():\n    # 初始平均成绩为85.13分\n    initial_average = 85.13\n    # 小玲的实际成绩为87分\n    actual_score = 87\n    # 小玲的错误成绩为78分\n    incorrect_score = 78\n    # 重新计算后的平均成绩为85.31分\n    new_average = 85.31\n    # 成绩差异 = 实际成绩 - 错误成绩\n    score_difference = actual_score - incorrect_score\n    # 平均成绩差异 = 重新计算后的平均成绩 - 初始平均成绩\n    average_difference = new_average - initial_average\n    # 班级学生人数 = 成绩差异 / 平均成绩差异\n    num_students = score_difference / average_difference\n    # 答案是班级学生人数\n    result = num_students\n    # 返回答案\n    return result"]}
{"question": "从小行小区开往云南北路的26路公交车，从总站开出时车上有(1/8)的座位空着，到“雨花新村”这一站时，有6人下车，10人上车，这时车上座位全部坐满，这辆公交车共有多少个座位．", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 从总站开出时车上有(1/8)的座位空着\n    empty_seats_fraction = 1/8\n    # 到“雨花新村”这一站时，有6人下车，10人上车\n    passengers_off = 6\n    passengers_on = 10\n    # 净增加乘客数 = 上车人数 - 下车人数\n    net_passengers = passengers_on - passengers_off\n    # 因为到站后座位全部坐满，说明之前空着的座位数等于净增加乘客数\n    # 设总座位数为x，则空座位数 = x * (1/8)\n    # 所以 x * (1/8) = net_passengers\n    total_seats = net_passengers / empty_seats_fraction\n    # 答案是公交车的总座位数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "期中考试中，我们班语文优秀的有28人，数学优秀的有25人．全班共有的35人中两门都优秀的有多少人？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 语文优秀的有28人\n    chinese_excellent = 28\n    # 数学优秀的有25人\n    math_excellent = 25\n    # 全班共有35人\n    total_students = 35\n    # 两门都优秀的人数 = 语文优秀人数 + 数学优秀人数 - 全班总人数\n    both_excellent = chinese_excellent + math_excellent - total_students\n    # 答案是两门都优秀的人数\n    result = both_excellent\n    # 返回答案\n    return result"]}
{"question": "李丽看一本故事书，第一周看了(2/5)，还剩几分之几没有看？", "target": 0.6, "answer": 0.6, "score": 1, "generation": ["def solution():\n    # 第一周看了(2/5)的故事书\n    read_fraction_first_week = 2/5\n    # 剩余未看的部分 = 1 - 已看的部分\n    remaining_fraction = 1 - read_fraction_first_week\n    # 答案是剩余未看的部分\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "某厂计划投资30万元，实际投资24万元，节省了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 计划投资30万元\n    planned_investment = 30\n    # 实际投资24万元\n    actual_investment = 24\n    # 节省的投资 = 计划投资 - 实际投资\n    saved_investment = planned_investment - actual_investment\n    # 节省的百分比 = (节省的投资 / 计划投资) * 100\n    percentage_saved = (saved_investment / planned_investment) * 100\n    # 答案是节省的百分比\n    result = percentage_saved\n    # 返回答案\n    return result"]}
{"question": "王老师从报社获得了1780元的稿费，按照国家标准，超过800元的部分按照20%的税率纳税．王老师实际得到稿费多少元？", "target": 1584.0, "answer": 1584.0, "score": 1, "generation": ["def solution():\n    # 王老师获得的稿费总额为1780元\n    total_income = 1780\n    # 免税额度为800元\n    tax_free_allowance = 800\n    # 超过800元的部分需要纳税\n    taxable_income = total_income - tax_free_allowance\n    # 税率为20%\n    tax_rate = 0.2\n    # 需要缴纳的税款 = 应纳税部分 * 税率\n    tax_payment = taxable_income * tax_rate\n    # 实际得到的稿费 = 总稿费 - 税款\n    actual_income = total_income - tax_payment\n    # 答案是王老师实际得到的稿费\n    result = actual_income\n    # 返回答案\n    return result"]}
{"question": "水果店运来15箱苹果，每箱重12千克，水果店运来苹果多少千克？", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 水果店运来15箱苹果\n    num_boxes = 15\n    # 每箱苹果重12千克\n    weight_per_box = 12\n    # 总重量 = 箱数 * 每箱的重量\n    total_weight = num_boxes * weight_per_box\n    # 答案是水果店运来苹果的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "滨河公园原来有20条船，每天收入360元，照这样计算，现在增加了15条船，每天可以多收入多少元？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 滨河公园原来有20条船\n    original_boats = 20\n    # 每天收入360元\n    daily_income = 360\n    # 现在增加了15条船\n    additional_boats = 15\n    # 每条船每天的收入 = 每天收入 / 原来的船数\n    income_per_boat = daily_income / original_boats\n    # 现在每天可以多收入 = 增加的船数 * 每条船每天的收入\n    additional_income = additional_boats * income_per_boat\n    # 答案是每天可以多收入的金额\n    result = additional_income\n    # 返回答案\n    return result"]}
{"question": "学校阅览室看书的人，人人有座位，而且座无虚席．过了一会儿，看书的人走了(1/4)，又新来了24人，现在座位不够了，其中8人是2人合坐一个座位，这时在阅览室看书的人有多少？", "target": 84.0, "answer": 84.0, "score": 1, "generation": ["def solution():\n    # 初始时人人有座位，座无虚席\n    # 设初始人数为x\n    # 走了(1/4)的人，剩下(3/4)x\n    # 新来了24人，总人数变为(3/4)x + 24\n    # 座位不够，其中8人是2人合坐一个座位\n    # 这意味着有8人需要共享4个座位（因为2人合坐一个座位）\n    # 所以实际需要的座位数为 (3/4)x + 24 - 4\n    # 因为初始座位数为x，所以 (3/4)x + 24 - 4 > x\n    # 解这个不等式可以得到x的值\n    # 但题目问的是现在在阅览室看书的人有多少，即(3/4)x + 24\n    # 我们可以通过解方程来找到x的值\n    # 设初始座位数为x\n    # 走了(1/4)x人后，剩下(3/4)x人\n    # 新来24人后，总人数为(3/4)x + 24\n    # 其中8人是2人合坐一个座位，相当于需要4个座位\n    # 所以需要的座位数为 (3/4)x + 24 - 4 = x\n    # 解这个方程：\n    # (3/4)x + 20 = x\n    # 20 = x - (3/4)x\n    # 20 = (1/4)x\n    # x = 80\n    # 现在在阅览室看书的人数为(3/4)*80 + 24 = 60 + 24 = 84\n    # 答案是现在在阅览室看书的人数\n    result = 84\n    # 返回答案\n    return result"]}
{"question": "某地出租车收费标准为：起步价为6元，3千米后每千米加收1.2元，某人乘坐出租车5千米，则应付款多少元．", "target": 8.4, "answer": 8.4, "score": 1, "generation": ["def solution():\n    # 起步价为6元\n    starting_price = 6\n    # 起步距离为3千米\n    starting_distance = 3\n    # 超过起步距离后每千米加收1.2元\n    additional_price_per_km = 1.2\n    # 某人乘坐出租车的总距离为5千米\n    total_distance = 5\n    # 超过起步距离的距离 = 总距离 - 起步距离\n    additional_distance = total_distance - starting_distance\n    # 应付款 = 起步价 + 超过起步距离的距离 * 每千米加收的价格\n    total_price = starting_price + additional_distance * additional_price_per_km\n    # 答案是应付款\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "一种服装现在售价180元，比原来便宜了(3/8)，便宜了多少元？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 现在的售价为180元\n    current_price = 180\n    # 比原来便宜了(3/8)\n    discount_fraction = 3/8\n    # 设原来的价格为x元，根据题意有：x - (3/8)*x = 180\n    # 解这个方程可以得到：x = 180 / (1 - 3/8) = 180 / (5/8) = 180 * (8/5) = 288\n    original_price = current_price / (1 - discount_fraction)\n    # 便宜的价格 = 原来的价格 - 现在的价格\n    discount_amount = original_price - current_price\n    # 答案是便宜的价格\n    result = discount_amount\n    # 返回答案\n    return result"]}
{"question": "11+88+66+33+77+55=．", "target": 330.0, "answer": 330.0, "score": 1, "generation": ["def solution():\n    # 计算11 + 88\n    step1 = 11 + 88\n    # 计算step1 + 66\n    step2 = step1 + 66\n    # 计算step2 + 33\n    step3 = step2 + 33\n    # 计算step3 + 77\n    step4 = step3 + 77\n    # 计算step4 + 55\n    total = step4 + 55\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "龟兔赛跑，全程2000米，龟每分钟爬25米，兔每分钟跑320米．兔自以为速度快，在途中睡了一觉，结果龟到终点时，兔离终点还有400米，兔在途中睡了几分钟？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 全程2000米\n    total_distance = 2000\n    # 龟的速度是每分钟25米\n    turtle_speed = 25\n    # 兔的速度是每分钟320米\n    rabbit_speed = 320\n    # 龟到达终点的时间 = 总距离 / 龟的速度\n    turtle_time = total_distance / turtle_speed\n    # 兔离终点还有400米，所以兔跑了 = 总距离 - 400\n    rabbit_distance = total_distance - 400\n    # 兔跑的时间 = 兔跑的距离 / 兔的速度\n    rabbit_running_time = rabbit_distance / rabbit_speed\n    # 兔睡觉的时间 = 龟到达终点的时间 - 兔跑的时间\n    rabbit_sleeping_time = turtle_time - rabbit_running_time\n    # 答案是兔在途中睡觉的时间\n    result = rabbit_sleeping_time\n    # 返回答案\n    return result"]}
{"question": "长方体的体积是120m^3，长是5米，宽是4米，高=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 长方体的体积是120立方米\n    volume = 120\n    # 长方体的长是5米\n    length = 5\n    # 长方体的宽是4米\n    width = 4\n    # 长方体的高 = 体积 / (长 * 宽)\n    height = volume / (length * width)\n    # 答案是长方体的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "一堆垃圾共280吨，环卫工人第一天运走全部垃圾的20%，第二天运走全部垃圾的45%，还有多少垃圾没运走？", "target": 98.0, "answer": 98.0, "score": 1, "generation": ["def solution():\n    # 垃圾的总重量为280吨\n    total_garbage = 280\n    # 第一天运走全部垃圾的20%\n    first_day_percentage = 0.20\n    # 第二天运走全部垃圾的45%\n    second_day_percentage = 0.45\n    # 第一天运走的垃圾重量 = 总重量 * 第一天运走的比例\n    first_day_garbage = total_garbage * first_day_percentage\n    # 第二天运走的垃圾重量 = 总重量 * 第二天运走的比例\n    second_day_garbage = total_garbage * second_day_percentage\n    # 总共运走的垃圾重量 = 第一天运走的重量 + 第二天运走的重量\n    total_garbage_removed = first_day_garbage + second_day_garbage\n    # 剩余的垃圾重量 = 总重量 - 总共运走的重量\n    remaining_garbage = total_garbage - total_garbage_removed\n    # 答案是剩余的垃圾重量\n    result = remaining_garbage\n    # 返回答案\n    return result"]}
{"question": "果园里有苹果树120棵，梨树的棵数是苹果树的(2/3)，果园里有梨树多少棵？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 苹果树的数量为120棵\n    num_apple_trees = 120\n    # 梨树的棵数是苹果树的(2/3)\n    pear_tree_fraction = 2/3\n    # 梨树的数量 = 苹果树的数量 * 梨树的比例\n    num_pear_trees = num_apple_trees * pear_tree_fraction\n    # 答案是梨树的数量\n    result = num_pear_trees\n    # 返回答案\n    return result"]}
{"question": "李叔叔在一栋大楼里乘电梯从地上10层到地上9层要(3/20)分钟，他乘电梯从地上8层到地下1层车库，要用多少分钟？", "target": 1.2, "answer": 1.3499999999999999, "score": 0, "generation": ["def solution():\n    # 从地上10层到地上9层需要(3/20)分钟\n    time_10_to_9 = 3/20\n    # 从地上10层到地上9层共经过1层\n    floors_10_to_9 = 1\n    # 计算每层所需时间 = 总时间 / 经过的层数\n    time_per_floor = time_10_to_9 / floors_10_to_9\n    # 从地上8层到地下1层共经过9层\n    floors_8_to_b1 = 9\n    # 总时间 = 每层所需时间 * 经过的层数\n    total_time = time_per_floor * floors_8_to_b1\n    # 答案是从地上8层到地下1层车库所需的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "妈妈今年40岁，是小芳的4倍，小芳今年多少岁．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 妈妈今年40岁\n    mother_age = 40\n    # 妈妈是小芳的4倍\n    mother_multiple = 4\n    # 小芳的年龄 = 妈妈的年龄 / 妈妈是小芳的倍数\n    xiaofang_age = mother_age / mother_multiple\n    # 答案是小芳的年龄\n    result = xiaofang_age\n    # 返回答案\n    return result"]}
{"question": "强强读一本故事书，第一天读了(3/8)，第二天读了36页，这时一共读了全书的60%．这本故事书一共有多少页？", "target": 160.0, "answer": 160.00000000000003, "score": 1, "generation": ["def solution():\n    # 第一天读了全书的(3/8)\n    first_day_fraction = 3/8\n    # 第二天读了36页\n    second_day_pages = 36\n    # 两天一共读了全书的60%\n    total_read_fraction = 0.6\n    # 设全书共有x页\n    # 第一天读的页数 = x * first_day_fraction\n    # 两天一共读的页数 = x * first_day_fraction + second_day_pages\n    # 两天一共读的比例 = total_read_fraction\n    # 所以 x * first_day_fraction + second_day_pages = x * total_read_fraction\n    # 解这个方程得到 x = second_day_pages / (total_read_fraction - first_day_fraction)\n    x = second_day_pages / (total_read_fraction - first_day_fraction)\n    # 答案是这本故事书的总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "5里面有多少个(1/4)．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 总数为5\n    total = 5\n    # 每个(1/4)的大小\n    fraction = 1/4\n    # 计算5里面有多少个(1/4) = 总数 / 每个(1/4)的大小\n    number_of_fractions = total / fraction\n    # 答案是5里面有多少个(1/4)\n    result = number_of_fractions\n    # 返回答案\n    return result"]}
{"question": "一件运动服原价120元，现在打0.8出售，这件运动服现价多少元．", "target": 96.0, "answer": 96.0, "score": 1, "generation": ["def solution():\n    # 运动服的原价为120元\n    original_price = 120\n    # 现在打0.8出售\n    discount_rate = 0.8\n    # 运动服的现价 = 原价 * 折扣率\n    current_price = original_price * discount_rate\n    # 答案是运动服的现价\n    result = current_price\n    # 返回答案\n    return result"]}
{"question": "粮食仓库存有大米1650袋，正好是存有的面粉袋数的6倍．粮库中存有的面粉比大米少多少袋？", "target": 1375.0, "answer": 1375.0, "score": 1, "generation": ["def solution():\n    # 大米的数量为1650袋\n    rice_bags = 1650\n    # 大米的数量是面粉袋数的6倍\n    flour_bags = rice_bags / 6\n    # 面粉比大米少的袋数 = 大米袋数 - 面粉袋数\n    difference = rice_bags - flour_bags\n    # 答案是面粉比大米少的袋数\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一盒糖，连盒共重500克，如果吃去40%，剩下的糖连盒重还有340克，求原来盒中糖的重量．", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 一盒糖，连盒共重500克\n    total_weight = 500\n    # 吃去40%的糖\n    eaten_percentage = 0.4\n    # 剩下的糖连盒重还有340克\n    remaining_weight = 340\n    # 设原来盒中糖的重量为x克，盒子的重量为y克\n    # 根据题意，x + y = 500\n    # 吃去40%的糖后，剩下的糖重量为0.6x\n    # 所以0.6x + y = 340\n    # 解这个方程组：\n    # 从第一个方程得到 y = 500 - x\n    # 代入第二个方程：0.6x + (500 - x) = 340\n    # 化简：-0.4x + 500 = 340\n    # 移项：-0.4x = -160\n    # 解得：x = 400\n    # 所以原来盒中糖的重量为400克\n    original_sugar_weight = 400\n    # 答案是原来盒中糖的重量\n    result = original_sugar_weight\n    # 返回答案\n    return result"]}
{"question": "小芳平均每分打字32个．一份稿子有1250个字，小芳打了30分后，还剩下多少个字没打？", "target": 290.0, "answer": 290.0, "score": 1, "generation": ["def solution():\n    # 小芳平均每分钟打字32个\n    typing_speed = 32\n    # 稿子总共有1250个字\n    total_words = 1250\n    # 小芳打了30分钟\n    time_spent = 30\n    # 小芳已经打的字数 = 打字速度 * 打字时间\n    words_typed = typing_speed * time_spent\n    # 剩余未打的字数 = 总字数 - 已打的字数\n    remaining_words = total_words - words_typed\n    # 答案是剩余未打的字数\n    result = remaining_words\n    # 返回答案\n    return result"]}
{"question": "一箱苹果重8千克，吃了(1/4)．还剩多少千克？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 一箱苹果的总重量为8千克\n    total_weight = 8\n    # 吃了(1/4)的重量\n    eaten_fraction = 1/4\n    # 吃了的重量 = 总重量 * 吃的比例\n    weight_eaten = total_weight * eaten_fraction\n    # 剩余的重量 = 总重量 - 吃了的重量\n    remaining_weight = total_weight - weight_eaten\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "水果店星期天卖出香蕉、桔子和菠萝3种水果一共150千克，其中香蕉27.5千克，卖出的桔子的数量是香蕉的3.6倍．水果店星期天卖出菠萝多少千克？", "target": 23.5, "answer": 23.5, "score": 1, "generation": ["def solution():\n    # 水果店星期天卖出的总重量为150千克\n    total_weight = 150\n    # 卖出的香蕉重量为27.5千克\n    banana_weight = 27.5\n    # 卖出的桔子重量是香蕉的3.6倍\n    orange_weight = 3.6 * banana_weight\n    # 卖出的菠萝重量 = 总重量 - 香蕉重量 - 桔子重量\n    pineapple_weight = total_weight - banana_weight - orange_weight\n    # 答案是卖出的菠萝重量\n    result = pineapple_weight\n    # 返回答案\n    return result"]}
{"question": "某玻璃厂要为商场运送1000个玻璃杯，双方商定每个运费为1元．如果打碎一个，这个不但不给运费，而且要赔偿3元，结果运到目的地后结算时，玻璃杯厂共得运费920元，求打碎了几个玻璃杯？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 运送的玻璃杯总数为1000个\n    total_cups = 1000\n    # 每个玻璃杯的运费为1元\n    shipping_fee_per_cup = 1\n    # 打碎一个玻璃杯的赔偿为3元\n    compensation_per_broken_cup = 3\n    # 实际获得的运费为920元\n    actual_shipping_fee = 920\n    # 如果没有打碎玻璃杯，应得运费 = 总数 * 每个运费\n    expected_shipping_fee = total_cups * shipping_fee_per_cup\n    # 打碎的玻璃杯数量 = (应得运费 - 实际运费) / (每个运费 + 每个赔偿)\n    broken_cups = (expected_shipping_fee - actual_shipping_fee) / (shipping_fee_per_cup + compensation_per_broken_cup)\n    # 答案是打碎的玻璃杯数量\n    result = broken_cups\n    # 返回答案\n    return result"]}
{"question": "张师傅与李师傅共同加工1000个零件．张师傅先做了4天，一共做了220个，剩下的由李师傅15天做完，李师傅每天做多少个？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 总零件数为1000个\n    total_parts = 1000\n    # 张师傅先做了4天，一共做了220个\n    parts_zhang = 220\n    # 剩下的零件数 = 总零件数 - 张师傅做的零件数\n    remaining_parts = total_parts - parts_zhang\n    # 李师傅15天做完剩下的零件\n    days_li = 15\n    # 李师傅每天做的零件数 = 剩下的零件数 / 李师傅的工作天数\n    parts_per_day_li = remaining_parts / days_li\n    # 答案是李师傅每天做的零件数\n    result = parts_per_day_li\n    # 返回答案\n    return result"]}
{"question": "光明小学有毕业生210人，考入重点中学的占(1/15)，其余升入普通中学，升入普通中学的有多少人？", "target": 196.0, "answer": 196.0, "score": 1, "generation": ["def solution():\n    # 光明小学有毕业生210人\n    total_graduates = 210\n    # 考入重点中学的比例是(1/15)\n    key_school_fraction = 1/15\n    # 考入重点中学的人数 = 总毕业生数 * 考入重点中学的比例\n    key_school_students = total_graduates * key_school_fraction\n    # 升入普通中学的人数 = 总毕业生数 - 考入重点中学的人数\n    regular_school_students = total_graduates - key_school_students\n    # 答案是升入普通中学的人数\n    result = regular_school_students\n    # 返回答案\n    return result"]}
{"question": "用面积为9平方分米的方砖，480块正好铺满，如果用边长为4分米的方砖，需要多少块？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 第一种方砖的面积为9平方分米\n    area_first_tile = 9\n    # 第一种方砖的数量为480块\n    num_first_tiles = 480\n    # 第二种方砖的边长为4分米\n    side_second_tile = 4\n    # 第二种方砖的面积 = 边长 * 边长\n    area_second_tile = side_second_tile * side_second_tile\n    # 总铺砖面积 = 第一种方砖的面积 * 第一种方砖的数量\n    total_area = area_first_tile * num_first_tiles\n    # 需要的第二种方砖的数量 = 总铺砖面积 / 第二种方砖的面积\n    num_second_tiles = total_area / area_second_tile\n    # 答案是需要的第二种方砖的数量\n    result = num_second_tiles\n    # 返回答案\n    return result"]}
{"question": "小麦上学要走18分钟，她的速度是130米/分．她家到学校有多少米？", "target": 2340.0, "answer": 2340.0, "score": 1, "generation": ["def solution():\n    # 小麦上学要走18分钟\n    time_to_school = 18\n    # 她的速度是130米/分\n    speed = 130\n    # 她家到学校的距离 = 时间 * 速度\n    distance = time_to_school * speed\n    # 答案是她家到学校的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "挖一个长和宽都是5米的长方体菜窖，要使菜窖的容积是50立方米，应该挖多少米深．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 菜窖的长为5米\n    length = 5\n    # 菜窖的宽为5米\n    width = 5\n    # 菜窖的容积为50立方米\n    volume = 50\n    # 菜窖的深度 = 容积 / (长 * 宽)\n    depth = volume / (length * width)\n    # 答案是菜窖的深度\n    result = depth\n    # 返回答案\n    return result"]}
{"question": "男比女多10人，女比男少10%，女生=多少人？", "target": 90.0, "answer": 100.0, "score": 0, "generation": ["def solution():\n    # 男比女多10人\n    men_more_than_women = 10\n    # 女比男少10%\n    women_less_than_men_percentage = 0.1\n    # 设女生人数为x，则男生人数为x + 10\n    # 根据题意，女生比男生少10%，即x = (x + 10) * (1 - 0.1)\n    # 解方程：x = 0.9x + 9\n    # 0.1x = 9\n    # x = 90\n    women = men_more_than_women / women_less_than_men_percentage\n    # 答案是女生人数\n    result = women\n    # 返回答案\n    return result"]}
{"question": "李强6月份的生活费为255元，比计划节省了15%，节省了多少元．", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 李强6月份的生活费为255元\n    actual_expense = 255\n    # 比计划节省了15%\n    saving_percentage = 0.15\n    # 计划的生活费 = 实际生活费 / (1 - 节省比例)\n    planned_expense = actual_expense / (1 - saving_percentage)\n    # 节省的金额 = 计划生活费 - 实际生活费\n    saved_amount = planned_expense - actual_expense\n    # 答案是节省的金额\n    result = saved_amount\n    # 返回答案\n    return result"]}
{"question": "东郊果园收获苹果2475千克，装了39筐，还剩1500千克，每筐苹果多少千克？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 东郊果园收获苹果的总重量为2475千克\n    total_weight = 2475\n    # 剩余的苹果重量为1500千克\n    remaining_weight = 1500\n    # 装筐的苹果重量 = 总重量 - 剩余重量\n    boxed_weight = total_weight - remaining_weight\n    # 装了39筐\n    num_boxes = 39\n    # 每筐苹果的重量 = 装筐的苹果重量 / 筐的数量\n    weight_per_box = boxed_weight / num_boxes\n    # 答案是每筐苹果的重量\n    result = weight_per_box\n    # 返回答案\n    return result"]}
{"question": "客、货两车分别从相距900千米的甲乙两城同时出发，相向而行．已知客车从甲城到乙城需要10小时，货车从乙城到甲城需要15小时．两车出发后多少小时相遇．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 两城之间的距离为900千米\n    distance = 900\n    # 客车从甲城到乙城需要10小时\n    time_bus = 10\n    # 货车从乙城到甲城需要15小时\n    time_truck = 15\n    # 客车的速度 = 距离 / 时间\n    speed_bus = distance / time_bus\n    # 货车的速度 = 距离 / 时间\n    speed_truck = distance / time_truck\n    # 因为两车相向而行，两车相对速度为客车与货车速度之和\n    relative_speed = speed_bus + speed_truck\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "我国岛屿海岸线长约14000km，是大陆海岸线长的(7/9)；大陆海岸线长是陆地边界线长的(9/11)．我国陆地边界线长多少km？", "target": 22000.0, "answer": 22000.0, "score": 1, "generation": ["def solution():\n    # 岛屿海岸线长约14000km\n    island_coastline = 14000\n    # 岛屿海岸线是大陆海岸线的(7/9)\n    island_to_mainland_ratio = 7/9\n    # 大陆海岸线长 = 岛屿海岸线长 / (7/9)\n    mainland_coastline = island_coastline / island_to_mainland_ratio\n    # 大陆海岸线长是陆地边界线长的(9/11)\n    mainland_to_land_ratio = 9/11\n    # 陆地边界线长 = 大陆海岸线长 / (9/11)\n    land_boundary = mainland_coastline / mainland_to_land_ratio\n    # 答案是陆地边界线长\n    result = land_boundary\n    # 返回答案\n    return result"]}
{"question": "一个棱长为20cm的正方体容器里装了一半的水，现将一块铁块投入容器中，铁块完全沉没在水底，水面上升了2cm，这块铁块的体积=多少立方厘米？", "target": 800.0, "answer": 800.0, "score": 1, "generation": ["def solution():\n    # 正方体容器的棱长为20cm\n    side_length = 20\n    # 容器里装了一半的水\n    water_fraction = 1/2\n    # 初始水位高度 = 棱长 * 水所占比例\n    initial_water_height = side_length * water_fraction\n    # 水面上升了2cm\n    water_rise = 2\n    # 铁块的体积 = 水面上升的体积 = 底面积 * 上升高度\n    # 底面积 = 棱长 * 棱长\n    base_area = side_length * side_length\n    iron_volume = base_area * water_rise\n    # 答案是铁块的体积\n    result = iron_volume\n    # 返回答案\n    return result"]}
{"question": "有78吨煤，已经运了2次，每次运16吨，还剩多少吨没运？", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 总煤量为78吨\n    total_coal = 78\n    # 已经运了2次\n    num_trips = 2\n    # 每次运16吨\n    coal_per_trip = 16\n    # 已经运的煤量 = 运的次数 * 每次运的煤量\n    coal_transported = num_trips * coal_per_trip\n    # 剩余的煤量 = 总煤量 - 已经运的煤量\n    remaining_coal = total_coal - coal_transported\n    # 答案是剩余的煤量\n    result = remaining_coal\n    # 返回答案\n    return result"]}
{"question": "135与815的和除以95，商=？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 第一个数是135\n    num1 = 135\n    # 第二个数是815\n    num2 = 815\n    # 除数是95\n    divisor = 95\n    # 两个数的和 = 135 + 815\n    sum_nums = num1 + num2\n    # 商 = 和 / 除数\n    quotient = sum_nums / divisor\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "服装厂原来做一套学生服用2.6米布料，采用新裁剪法后，每套节约用布0.3米．原来做460套学生服的布，现在可以做多少套？", "target": 520.0, "answer": 519.9999999999999, "score": 1, "generation": ["def solution():\n    # 原来做一套学生服用2.6米布料\n    original_cloth_per_suit = 2.6\n    # 采用新裁剪法后，每套节约用布0.3米\n    cloth_saved_per_suit = 0.3\n    # 原来做460套学生服的布\n    original_number_of_suits = 460\n    # 总布料 = 原来每套的布料 * 原来做的套数\n    total_cloth = original_cloth_per_suit * original_number_of_suits\n    # 新裁剪法每套的布料 = 原来每套的布料 - 节约的布料\n    new_cloth_per_suit = original_cloth_per_suit - cloth_saved_per_suit\n    # 现在可以做的套数 = 总布料 / 新裁剪法每套的布料\n    new_number_of_suits = total_cloth / new_cloth_per_suit\n    # 答案是现在可以做的套数\n    result = new_number_of_suits\n    # 返回答案\n    return result"]}
{"question": "乐乐从甲地步行去乙地，第一小时行了全程的(1/4)，第二小时行了全程的20%，这时离乙地还有22千米．甲、乙两地相距多少千米？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 第一小时行了全程的(1/4)\n    first_hour_fraction = 1/4\n    # 第二小时行了全程的20%\n    second_hour_fraction = 0.2\n    # 剩余距离为22千米\n    remaining_distance = 22\n    # 已经行驶的总比例 = 第一小时比例 + 第二小时比例\n    total_fraction_traveled = first_hour_fraction + second_hour_fraction\n    # 剩余比例 = 1 - 已经行驶的总比例\n    remaining_fraction = 1 - total_fraction_traveled\n    # 因为剩余距离对应剩余比例，所以总距离 = 剩余距离 / 剩余比例\n    total_distance = remaining_distance / remaining_fraction\n    # 答案是甲、乙两地相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一个数的(4/5)是80，这个数的(1/4)=．", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 一个数的(4/5)是80\n    four_fifths_of_number = 80\n    # 这个数 = 80 / (4/5)\n    number = four_fifths_of_number / (4/5)\n    # 这个数的(1/4) = 这个数 * (1/4)\n    one_fourth_of_number = number * (1/4)\n    # 答案是这个数的(1/4)\n    result = one_fourth_of_number\n    # 返回答案\n    return result"]}
{"question": "一段公路，汽车45分行了60千米，相当于这段路全长的(2/5)，这段路全长多少千米？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的距离为60千米\n    distance_traveled = 60\n    # 行驶的距离相当于全长的(2/5)\n    fraction_of_total = 2/5\n    # 这段路的全长 = 行驶的距离 / 所占比例\n    total_distance = distance_traveled / fraction_of_total\n    # 答案是这段路的全长\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一箱矿泉水24瓶，每瓶1.8元．买一箱一共需要多少元？", "target": 43.2, "answer": 43.2, "score": 1, "generation": ["def solution():\n    # 一箱矿泉水的数量为24瓶\n    num_bottles = 24\n    # 每瓶矿泉水的价格为1.8元\n    price_per_bottle = 1.8\n    # 一箱矿泉水的总价格 = 数量 * 每瓶价格\n    total_price = num_bottles * price_per_bottle\n    # 答案是一箱矿泉水的总价格\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "丽丽看一本书共240页，她已经看了这本书的40%，还剩多少页．", "target": 144.0, "answer": 144.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为240页\n    total_pages = 240\n    # 已经看了40%的页数\n    read_percentage = 40\n    # 已经看了的页数 = 总页数 * 已读百分比 / 100\n    pages_read = total_pages * read_percentage / 100\n    # 剩余的页数 = 总页数 - 已经看了的页数\n    remaining_pages = total_pages - pages_read\n    # 答案是剩余的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "红星小学买了一些体育用品．买足球用去了135.60元，买篮球比足球多花了12.20元．红星小学买足球和篮球共花了多少元钱？", "target": 283.4, "answer": 283.4, "score": 1, "generation": ["def solution():\n    # 买足球用去了135.60元\n    cost_football = 135.60\n    # 买篮球比足球多花了12.20元\n    cost_basketball = cost_football + 12.20\n    # 买足球和篮球共花的钱 = 买足球的钱 + 买篮球的钱\n    total_cost = cost_football + cost_basketball\n    # 答案是买足球和篮球共花的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "某服装厂计划每天加工服装125件，实际20天加工了3000件，实际每天比计划多加工服装多少件？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 计划每天加工服装125件\n    planned_daily_production = 125\n    # 实际20天加工了3000件\n    actual_total_production = 3000\n    actual_days = 20\n    # 实际每天加工服装数量 = 总加工数量 / 加工天数\n    actual_daily_production = actual_total_production / actual_days\n    # 实际每天比计划多加工的服装数量 = 实际每天加工数量 - 计划每天加工数量\n    extra_daily_production = actual_daily_production - planned_daily_production\n    # 答案是实际每天比计划多加工的服装数量\n    result = extra_daily_production\n    # 返回答案\n    return result"]}
{"question": "四年级一班有34人，共借书544本，四年级一班平均每人借书多少本．", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 四年级一班有34人\n    num_students = 34\n    # 共借书544本\n    total_books = 544\n    # 平均每人借书数量 = 总借书数量 / 人数\n    avg_books_per_student = total_books / num_students\n    # 答案是平均每人借书数量\n    result = avg_books_per_student\n    # 返回答案\n    return result"]}
{"question": "妈妈买了5米布，给小明做了2套同样的衣服，还剩下1.4米，小明的每套服装用不多少米？", "target": 1.8, "answer": 1.8, "score": 1, "generation": ["def solution():\n    # 妈妈买了5米布\n    total_cloth = 5\n    # 做了2套同样的衣服\n    num_clothes = 2\n    # 还剩下1.4米布\n    remaining_cloth = 1.4\n    # 用掉的布 = 总布 - 剩下的布\n    used_cloth = total_cloth - remaining_cloth\n    # 每套衣服用的布 = 用掉的布 / 衣服的数量\n    cloth_per_cloth = used_cloth / num_clothes\n    # 答案是每套衣服用的布\n    result = cloth_per_cloth\n    # 返回答案\n    return result"]}
{"question": "某校有女生280人，女生人数是男生的(4/5)．男生有多少人？", "target": 350.0, "answer": 350.0, "score": 1, "generation": ["def solution():\n    # 女生人数为280人\n    num_girls = 280\n    # 女生人数是男生的(4/5)\n    girls_to_boys_ratio = 4/5\n    # 男生人数 = 女生人数 / 女生与男生的比例\n    num_boys = num_girls / girls_to_boys_ratio\n    # 答案是男生人数\n    result = num_boys\n    # 返回答案\n    return result"]}
{"question": "小红有2件背心，3条短裤，她穿衣时有多少种搭配方法．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 小红有2件背心\n    num_vests = 2\n    # 小红有3条短裤\n    num_shorts = 3\n    # 每件背心可以与每条短裤搭配，所以总搭配方法 = 背心数量 * 短裤数量\n    total_outfits = num_vests * num_shorts\n    # 答案是总搭配方法\n    result = total_outfits\n    # 返回答案\n    return result"]}
{"question": "一辆货车从A地把苹果运到B地，去的时候每小时行40千米，用了6小时到达，回来的时候每小时行60千米，需要几小时才能回到A地？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 去的时候的速度是每小时40千米\n    speed_going = 40\n    # 去的时候用了6小时\n    time_going = 6\n    # 计算A地到B地的距离 = 速度 * 时间\n    distance = speed_going * time_going\n    # 回来的时候的速度是每小时60千米\n    speed_returning = 60\n    # 回来的时间 = 距离 / 速度\n    time_returning = distance / speed_returning\n    # 答案是回来的时间\n    result = time_returning\n    # 返回答案\n    return result"]}
{"question": "小芳在计算除法时，把除数32错写成320，结果得到商是48．正确的商应该=．", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 错误的除数是320\n    wrong_divisor = 320\n    # 错误的商是48\n    wrong_quotient = 48\n    # 正确的除数是32\n    correct_divisor = 32\n    # 被除数 = 错误的除数 * 错误的商\n    dividend = wrong_divisor * wrong_quotient\n    # 正确的商 = 被除数 / 正确的除数\n    correct_quotient = dividend / correct_divisor\n    # 答案是正确的商\n    result = correct_quotient\n    # 返回答案\n    return result"]}
{"question": "从30里面减去40个0.25的和，再乘0.05，积=？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 初始值为30\n    initial_value = 30\n    # 40个0.25的和\n    sum_of_forty_quarters = 40 * 0.25\n    # 从30里面减去40个0.25的和\n    subtracted_value = initial_value - sum_of_forty_quarters\n    # 再乘0.05\n    product = subtracted_value * 0.05\n    # 答案是最终的积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "六年级（1）班参加义务劳动，计划派16名同学去植树，平均每人要植3棵，后来增加了一些同学，这时平均每人只需植树2棵．问增加了多少名同学？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 初始计划派16名同学去植树\n    initial_students = 16\n    # 初始平均每人要植3棵\n    initial_trees_per_student = 3\n    # 后来平均每人只需植树2棵\n    new_trees_per_student = 2\n    # 总植树数量 = 初始学生数量 * 初始每人植树数量\n    total_trees = initial_students * initial_trees_per_student\n    # 新的学生数量 = 总植树数量 / 新的每人植树数量\n    new_students = total_trees / new_trees_per_student\n    # 增加的学生数量 = 新的学生数量 - 初始学生数量\n    additional_students = new_students - initial_students\n    # 答案是增加的学生数量\n    result = additional_students\n    # 返回答案\n    return result"]}
{"question": "4（1）班50人中有28人喜欢吃香蕉，27人喜欢吃苹果，14人两种水果都喜欢吃．请问有多少人喜欢的不是这两种水果？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为50人\n    total_students = 50\n    # 喜欢吃香蕉的人数为28人\n    banana_lovers = 28\n    # 喜欢吃苹果的人数为27人\n    apple_lovers = 27\n    # 两种水果都喜欢的人数为14人\n    both_lovers = 14\n    # 喜欢香蕉或苹果或两者的人数 = 喜欢香蕉的人数 + 喜欢苹果的人数 - 两者都喜欢的人数\n    either_lovers = banana_lovers + apple_lovers - both_lovers\n    # 不喜欢这两种水果的人数 = 总人数 - 喜欢香蕉或苹果或两者的人数\n    neither_lovers = total_students - either_lovers\n    # 答案是不喜欢这两种水果的人数\n    result = neither_lovers\n    # 返回答案\n    return result"]}
{"question": "用废纸生产再生纸的再生率为80%，利民造纸厂用回收的废纸生产了120吨再生纸．这些再生纸需要回收多少吨废纸才能生产出来？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 再生率为80%\n    recycling_rate = 0.8\n    # 生产了120吨再生纸\n    recycled_paper = 120\n    # 需要的废纸数量 = 再生纸数量 / 再生率\n    required_waste_paper = recycled_paper / recycling_rate\n    # 答案是需要的废纸数量\n    result = required_waste_paper\n    # 返回答案\n    return result"]}
{"question": "奥林匹克火炬在中国某省4天传递了820千米，平均每天传递了多少千米？", "target": 205.0, "answer": 205.0, "score": 1, "generation": ["def solution():\n    # 火炬传递的总距离为820千米\n    total_distance = 820\n    # 传递的总天数为4天\n    total_days = 4\n    # 平均每天传递的距离 = 总距离 / 总天数\n    average_distance_per_day = total_distance / total_days\n    # 答案是平均每天传递的距离\n    result = average_distance_per_day\n    # 返回答案\n    return result"]}
{"question": "育才学校有男生785人，女生576人，育才学校一共有学生多少人？", "target": 1361.0, "answer": 1361.0, "score": 1, "generation": ["def solution():\n    # 男生人数为785人\n    num_boys = 785\n    # 女生人数为576人\n    num_girls = 576\n    # 总学生人数 = 男生人数 + 女生人数\n    total_students = num_boys + num_girls\n    # 答案是总学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "51的28倍大约=？", "target": 1428.0, "answer": 1428.0, "score": 1, "generation": ["def solution():\n    # 数字51\n    number = 51\n    # 28倍\n    multiplier = 28\n    # 51的28倍 = 51 * 28\n    result = number * multiplier\n    # 答案是51的28倍\n    return result"]}
{"question": "拖拉机耕一块地，每时耕这块地的(1/9)，一天工作8时，耕了这块地的多少．", "target": 0.8888888888888888, "answer": 0.8888888888888888, "score": 1, "generation": ["def solution():\n    # 每小时耕这块地的(1/9)\n    hourly_rate = 1/9\n    # 一天工作8小时\n    hours_per_day = 8\n    # 一天耕的地 = 每小时耕的地 * 工作小时数\n    daily_work = hourly_rate * hours_per_day\n    # 答案是一天耕的地\n    result = daily_work\n    # 返回答案\n    return result"]}
{"question": "全班女生和男生的人数比是1：3．一次考试，男生平均分是80，全班的平均分是82，女生平均分=多少分．", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 女生和男生的人数比是1：3\n    female_to_male_ratio = 1/3\n    # 假设女生人数为1，男生人数为3\n    num_females = 1\n    num_males = 3\n    # 男生平均分是80\n    male_avg_score = 80\n    # 全班的平均分是82\n    total_avg_score = 82\n    # 全班总人数 = 女生人数 + 男生人数\n    total_students = num_females + num_males\n    # 全班总分 = 全班平均分 * 全班总人数\n    total_score = total_avg_score * total_students\n    # 男生总分 = 男生人数 * 男生平均分\n    male_total_score = num_males * male_avg_score\n    # 女生总分 = 全班总分 - 男生总分\n    female_total_score = total_score - male_total_score\n    # 女生平均分 = 女生总分 / 女生人数\n    female_avg_score = female_total_score / num_females\n    # 答案是女生平均分\n    result = female_avg_score\n    # 返回答案\n    return result"]}
{"question": "修一段长(7/8)千米的公路，已经修了(3/5)千米，剩下的比已修的少多少千米？", "target": 0.325, "answer": 0.32499999999999996, "score": 1, "generation": ["def solution():\n    # 公路的总长度为(7/8)千米\n    total_length = 7/8\n    # 已经修了(3/5)千米\n    repaired_length = 3/5\n    # 剩下的长度 = 总长度 - 已修的长度\n    remaining_length = total_length - repaired_length\n    # 剩下的比已修的少的长度 = 已修的长度 - 剩下的长度\n    difference = repaired_length - remaining_length\n    # 答案是剩下的比已修的少的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一本书有400页，小红已经看了265页，余下的准备9天看完，平均每天要看多少个好页？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为400页\n    total_pages = 400\n    # 已经看了265页\n    pages_read = 265\n    # 余下的页数 = 总页数 - 已读页数\n    remaining_pages = total_pages - pages_read\n    # 准备用9天看完余下的页数\n    days_to_read = 9\n    # 平均每天需要看的页数 = 余下的页数 / 天数\n    average_pages_per_day = remaining_pages / days_to_read\n    # 答案是平均每天需要看的页数\n    result = average_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "纸箱里放有大小、质量完全相同的塑料球，其中2个绿的、3个黄的、5个红的．从中任意摸一个，摸出红球的可能性=．", "target": 0.5, "answer": 0.5, "score": 1, "generation": ["def solution():\n    # 绿色塑料球的数量为2个\n    green_balls = 2\n    # 黄色塑料球的数量为3个\n    yellow_balls = 3\n    # 红色塑料球的数量为5个\n    red_balls = 5\n    # 总塑料球的数量 = 绿色 + 黄色 + 红色\n    total_balls = green_balls + yellow_balls + red_balls\n    # 摸出红球的可能性 = 红色塑料球的数量 / 总塑料球的数量\n    probability_red = red_balls / total_balls\n    # 答案是摸出红球的可能性\n    result = probability_red\n    # 返回答案\n    return result"]}
{"question": "今年比去年减产(1/5)，今年产量是去年的多少．", "target": 0.8, "answer": 0.8, "score": 1, "generation": ["def solution():\n    # 去年产量为1（假设为基准）\n    last_year_production = 1\n    # 今年比去年减产(1/5)\n    reduction_fraction = 1/5\n    # 今年产量 = 去年产量 - 去年产量 * 减产比例\n    this_year_production = last_year_production - (last_year_production * reduction_fraction)\n    # 答案是今年产量相对于去年的比例\n    result = this_year_production\n    # 返回答案\n    return result"]}
{"question": "某人在一次选举中，需全部选票的(2/3)才能当选，计算全部选票的(3/4)后，他得到的选票已达到当选选票数的(5/6)，他还需要得到剩下选票的多少才能当选．", "target": 0.4444444444444444, "answer": 0.4444444444444442, "score": 1, "generation": ["def solution():\n    # 当选需要全部选票的(2/3)\n    required_votes = 2/3\n    # 已经计算了全部选票的(3/4)\n    calculated_votes = 3/4\n    # 在已计算的选票中，他得到了当选选票数的(5/6)\n    votes_received = (5/6) * required_votes\n    # 剩余选票 = 1 - 已计算的选票\n    remaining_votes = 1 - calculated_votes\n    # 还需要得到的选票 = 当选需要的选票 - 已经得到的选票\n    votes_needed = required_votes - votes_received\n    # 还需要得到剩下选票的比例 = 还需要得到的选票 / 剩余选票\n    proportion_needed = votes_needed / remaining_votes\n    # 答案是还需要得到剩下选票的比例\n    result = proportion_needed\n    # 返回答案\n    return result"]}
{"question": "小明骑自行车从家到学校，已知他每分钟走310米，走12分钟，距学校还有210米，他家距学校多远？", "target": 3930.0, "answer": 3930.0, "score": 1, "generation": ["def solution():\n    # 小明骑自行车的速度是每分钟310米\n    speed = 310\n    # 他骑行了12分钟\n    time = 12\n    # 骑行距离 = 速度 * 时间\n    distance_covered = speed * time\n    # 距离学校还有210米\n    remaining_distance = 210\n    # 家到学校的总距离 = 骑行距离 + 剩余距离\n    total_distance = distance_covered + remaining_distance\n    # 答案是家到学校的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "商场开展店庆活动，一台冰箱打0.8后是2400元，这台冰箱原价多少元？", "target": 3000.0, "answer": 3000.0, "score": 1, "generation": ["def solution():\n    # 打折后的价格为2400元\n    discounted_price = 2400\n    # 折扣率为0.8\n    discount_rate = 0.8\n    # 原价 = 打折后的价格 / 折扣率\n    original_price = discounted_price / discount_rate\n    # 答案是冰箱的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "果园里苹果树比梨树多420棵，梨树的棵树是苹果树的(3/5)，苹果树有多少棵？", "target": 1050.0, "answer": 1050.0, "score": 1, "generation": ["def solution():\n    # 苹果树比梨树多420棵\n    difference = 420\n    # 梨树的棵树是苹果树的(3/5)\n    pear_to_apple_ratio = 3/5\n    # 设苹果树的数量为x，梨树的数量为(3/5)x\n    # 根据题意，x - (3/5)x = 420\n    # 解方程得x = 420 / (1 - 3/5)\n    apple_trees = difference / (1 - pear_to_apple_ratio)\n    # 答案是苹果树的数量\n    result = apple_trees\n    # 返回答案\n    return result"]}
{"question": "一种电脑现价每台3800元，比原来降低了200元，降低了百分之几？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 电脑的现价是3800元\n    current_price = 3800\n    # 比原来降低了200元\n    price_reduction = 200\n    # 原价 = 现价 + 降低的价格\n    original_price = current_price + price_reduction\n    # 降低的百分比 = (降低的价格 / 原价) * 100\n    reduction_percentage = (price_reduction / original_price) * 100\n    # 答案是降低的百分比\n    result = reduction_percentage\n    # 返回答案\n    return result"]}
{"question": "汽车的现价比原价降低了(1/7)，现价是原价的((())/(()))．", "target": 0.8571428571428571, "answer": 0.8571428571428572, "score": 1, "generation": ["def solution():\n    # 汽车的现价比原价降低了(1/7)\n    price_reduction = 1/7\n    # 现价是原价的(1 - 价格降低比例)\n    current_price_ratio = 1 - price_reduction\n    # 答案是现价与原价的比例\n    result = current_price_ratio\n    # 返回答案\n    return result"]}
{"question": "果园去年收苹果4500千克，比前年增25%，前年收苹果多少千克？", "target": 3600.0, "answer": 3600.0, "score": 1, "generation": ["def solution():\n    # 去年收苹果4500千克\n    last_year_harvest = 4500\n    # 去年比前年增产25%\n    increase_percentage = 0.25\n    # 前年收苹果的数量 = 去年收苹果的数量 / (1 + 增产比例)\n    previous_year_harvest = last_year_harvest / (1 + increase_percentage)\n    # 答案是前年收苹果的数量\n    result = previous_year_harvest\n    # 返回答案\n    return result"]}
{"question": "水果店运来25筐桃子，桃子的筐数是苹果的(5/6)，运来桃子和苹果一共多少筐？", "target": 55.0, "answer": 55.0, "score": 1, "generation": ["def solution():\n    # 桃子的筐数为25筐\n    peach_boxes = 25\n    # 桃子的筐数是苹果的(5/6)\n    apple_boxes = peach_boxes / (5/6)\n    # 桃子和苹果一共的筐数 = 桃子的筐数 + 苹果的筐数\n    total_boxes = peach_boxes + apple_boxes\n    # 答案是桃子和苹果一共的筐数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "机械加工厂加工一台机器原来需要1.2吨钢材．后来采用了新科技，每台只需要0.8吨钢材．现在加工300台机器的钢材，原来做多少台？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 原来加工一台机器需要1.2吨钢材\n    original_steel_per_machine = 1.2\n    # 现在加工一台机器需要0.8吨钢材\n    new_steel_per_machine = 0.8\n    # 现在加工300台机器需要的钢材总量 = 300 * 现在每台需要的钢材\n    total_steel_new = 300 * new_steel_per_machine\n    # 原来可以加工的机器数量 = 钢材总量 / 原来每台需要的钢材\n    original_machines = total_steel_new / original_steel_per_machine\n    # 答案是原来可以加工的机器数量\n    result = original_machines\n    # 返回答案\n    return result"]}
{"question": "少年宫乐队有女生18人，男生17人．合唱队的人数是乐队的4倍，合唱队有多少人？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 乐队女生人数为18人\n    num_girls = 18\n    # 乐队男生人数为17人\n    num_boys = 17\n    # 乐队总人数 = 女生人数 + 男生人数\n    total_band_members = num_girls + num_boys\n    # 合唱队的人数是乐队的4倍\n    choir_multiplier = 4\n    # 合唱队人数 = 乐队总人数 * 4\n    total_choir_members = total_band_members * choir_multiplier\n    # 答案是合唱队的人数\n    result = total_choir_members\n    # 返回答案\n    return result"]}
{"question": "商店以每枝10元的价格购进一批钢笔，加上40%的利润以后定价出售，当卖出这批钢笔的(3/4)时就已经获利240元．这批钢笔共有多少枝？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 每枝钢笔的购进价格为10元\n    purchase_price_per_pen = 10\n    # 利润率为40%\n    profit_margin = 0.4\n    # 出售价格 = 购进价格 * (1 + 利润率)\n    selling_price_per_pen = purchase_price_per_pen * (1 + profit_margin)\n    # 当卖出这批钢笔的(3/4)时就已经获利240元\n    sold_fraction = 3/4\n    total_profit = 240\n    # 每枝钢笔的利润 = 出售价格 - 购进价格\n    profit_per_pen = selling_price_per_pen - purchase_price_per_pen\n    # 已售出的钢笔数量 = 总利润 / 每枝钢笔的利润\n    sold_pens = total_profit / profit_per_pen\n    # 这批钢笔的总数量 = 已售出的钢笔数量 / 卖出比例\n    total_pens = sold_pens / sold_fraction\n    # 答案是这批钢笔的总数量\n    result = total_pens\n    # 返回答案\n    return result"]}
{"question": "鸡的孵化期是21天，鸭的孵化期比鸡长(1/3)，鸭的孵化期=多少天？", "target": 28.0, "answer": 28.0, "score": 1, "generation": ["def solution():\n    # 鸡的孵化期是21天\n    chicken_incubation = 21\n    # 鸭的孵化期比鸡长(1/3)\n    duck_incubation_increase = 1/3\n    # 鸭的孵化期 = 鸡的孵化期 + 鸡的孵化期 * 鸭的孵化期增加比例\n    duck_incubation = chicken_incubation + chicken_incubation * duck_incubation_increase\n    # 答案是鸭的孵化期\n    result = duck_incubation\n    # 返回答案\n    return result"]}
{"question": "五年级有学生180人，五年级比六年级的(5/9)还多15人，六年级有多少人？", "target": 297.0, "answer": 297.0, "score": 1, "generation": ["def solution():\n    # 五年级有学生180人\n    num_fifth_grade = 180\n    # 五年级比六年级的(5/9)还多15人\n    fraction_sixth_grade = 5/9\n    additional_students = 15\n    # 设六年级有x人，根据题意有：五年级人数 = (5/9) * 六年级人数 + 15\n    # 解方程：(5/9) * x + 15 = 180\n    # 移项得：(5/9) * x = 180 - 15\n    # 计算得：(5/9) * x = 165\n    # 解得：x = 165 / (5/9) = 165 * (9/5)\n    num_sixth_grade = (num_fifth_grade - additional_students) * (9/5)\n    # 答案是六年级的人数\n    result = num_sixth_grade\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地出发，3小时行了195千米，照这样的速度，再行4小时就可到达乙地．甲、乙两地相距多少千米？", "target": 455.0, "answer": 455.0, "score": 1, "generation": ["def solution():\n    # 汽车3小时行驶了195千米\n    distance_3h = 195\n    time_3h = 3\n    # 计算汽车的速度 = 距离 / 时间\n    speed = distance_3h / time_3h\n    # 再行4小时到达乙地\n    time_4h = 4\n    # 计算再行4小时的距离 = 速度 * 时间\n    distance_4h = speed * time_4h\n    # 甲、乙两地的总距离 = 已行驶的距离 + 再行驶的距离\n    total_distance = distance_3h + distance_4h\n    # 答案是甲、乙两地的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "小明有课外书48本，是小兰的(3/4)，是小红的(6/7)，小红比小兰多多少本书？", "target": 8.0, "answer": -8.0, "score": 0, "generation": ["def solution():\n    # 小明的课外书数量为48本\n    xiaoming_books = 48\n    # 小明的书是小兰的(3/4)\n    xiaolan_fraction = 3/4\n    # 小兰的书 = 小明的书 / 小兰的比例\n    xiaolan_books = xiaoming_books / xiaolan_fraction\n    # 小明的书是小红的(6/7)\n    xiaohong_fraction = 6/7\n    # 小红的书 = 小明的书 / 小红的比例\n    xiaohong_books = xiaoming_books / xiaohong_fraction\n    # 小红比小兰多的书 = 小红的书 - 小兰的书\n    difference = xiaohong_books - xiaolan_books\n    # 答案是小红比小兰多的书\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "刘校长带1300元去买篮球，买了16个后还剩20元，平均每个篮球多少元？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 刘校长带的钱为1300元\n    total_money = 1300\n    # 买了16个篮球后还剩20元\n    remaining_money = 20\n    num_basketballs = 16\n    # 买篮球花费的总金额 = 总金额 - 剩余金额\n    total_cost = total_money - remaining_money\n    # 平均每个篮球的价格 = 总花费 / 篮球数量\n    avg_price = total_cost / num_basketballs\n    # 答案是平均每个篮球的价格\n    result = avg_price\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3袋粮食重量比是3：4：5，已知甲、乙共重700克，求丙袋的重量=？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 甲、乙、丙3袋粮食重量比是3：4：5\n    ratio_a = 3\n    ratio_b = 4\n    ratio_c = 5\n    # 已知甲、乙共重700克\n    total_weight_ab = 700\n    # 甲和乙的重量比总和 = 3 + 4 = 7\n    ratio_sum_ab = ratio_a + ratio_b\n    # 每份的重量 = 甲和乙的总重量 / 甲和乙的重量比总和\n    weight_per_ratio = total_weight_ab / ratio_sum_ab\n    # 丙袋的重量 = 丙的重量比 * 每份的重量\n    weight_c = ratio_c * weight_per_ratio\n    # 答案是丙袋的重量\n    result = weight_c\n    # 返回答案\n    return result"]}
{"question": "超市运来45辆红色自行车，15辆黄色自行车．已经售出全部自行车的(2/3)，售出了多少辆？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 红色自行车的数量为45辆\n    red_bikes = 45\n    # 黄色自行车的数量为15辆\n    yellow_bikes = 15\n    # 总自行车数量 = 红色自行车 + 黄色自行车\n    total_bikes = red_bikes + yellow_bikes\n    # 售出的比例为(2/3)\n    sold_fraction = 2/3\n    # 售出的自行车数量 = 总自行车数量 * 售出比例\n    bikes_sold = total_bikes * sold_fraction\n    # 答案是售出的自行车数量\n    result = bikes_sold\n    # 返回答案\n    return result"]}
{"question": "一袋年奶3元钱，36元钱可以买到多少袋牛奶．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 一袋牛奶的价格是3元\n    price_per_milk = 3\n    # 总金额是36元\n    total_money = 36\n    # 可以买到的牛奶袋数 = 总金额 / 每袋牛奶的价格\n    num_milk = total_money / price_per_milk\n    # 答案是可以买到的牛奶袋数\n    result = num_milk\n    # 返回答案\n    return result"]}
{"question": "服装厂要生产6000套服装，前5天已经生产了这批服装的40%，余下的服装要在6天内完成，平均每天要生产多少套服装？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 服装厂要生产6000套服装\n    total_clothes = 6000\n    # 前5天已经生产了这批服装的40%\n    produced_fraction = 0.4\n    # 已经生产的服装数量 = 总数 * 生产比例\n    clothes_produced = total_clothes * produced_fraction\n    # 剩余的服装数量 = 总数 - 已经生产的数量\n    remaining_clothes = total_clothes - clothes_produced\n    # 余下的服装要在6天内完成\n    remaining_days = 6\n    # 平均每天要生产的服装数量 = 剩余的服装数量 / 剩余的天数\n    daily_production = remaining_clothes / remaining_days\n    # 答案是平均每天要生产的服装数量\n    result = daily_production\n    # 返回答案\n    return result"]}
{"question": "□/7=26…6，□里的数=．", "target": 188.0, "answer": 188.0, "score": 1, "generation": ["def solution():\n    # 除数是7\n    divisor = 7\n    # 商是26\n    quotient = 26\n    # 余数是6\n    remainder = 6\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一个西瓜被爸爸平均切成数块．爸爸和妈妈吃了这个西瓜的(3/4)，小强吃了2块，3人正好把这个西瓜吃完．这个西瓜被平均切成了多少块？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 爸爸和妈妈吃了这个西瓜的(3/4)\n    parents_ate_fraction = 3/4\n    # 小强吃了2块\n    xiaoqiang_ate = 2\n    # 因为3人正好吃完西瓜，所以小强吃的2块对应剩下的(1 - 3/4) = 1/4\n    xiaoqiang_fraction = 1 - parents_ate_fraction\n    # 西瓜被平均切成的块数 = 小强吃的块数 / 小强吃的比例\n    total_pieces = xiaoqiang_ate / xiaoqiang_fraction\n    # 答案是西瓜被平均切成的块数\n    result = total_pieces\n    # 返回答案\n    return result"]}
{"question": "2005*20062006-2006*20052005=．", "target": 0.0, "answer": 0.0, "score": 1, "generation": ["def solution():\n    # 第一个数是2005\n    num1 = 2005\n    # 第二个数是20062006\n    num2 = 20062006\n    # 第三个数是2006\n    num3 = 2006\n    # 第四个数是20052005\n    num4 = 20052005\n    # 计算2005 * 20062006\n    product1 = num1 * num2\n    # 计算2006 * 20052005\n    product2 = num3 * num4\n    # 计算差值\n    difference = product1 - product2\n    # 答案是差值\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "已知两个数的商是4，而这两个数的差是39，那么这两个数中较小的数=．", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 两个数的商是4\n    quotient = 4\n    # 两个数的差是39\n    difference = 39\n    # 设较小的数为x，较大的数为y\n    # 根据题意，y / x = 4 和 y - x = 39\n    # 由第一个方程可得 y = 4x\n    # 将y = 4x代入第二个方程：4x - x = 39\n    # 解得3x = 39，所以x = 13\n    x = difference / (quotient - 1)\n    # 答案是较小的数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "水果店运来410千克水果，上午卖出139千克，下午卖出183千克，还剩多少千克？", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 水果店运来水果的总重量为410千克\n    total_weight = 410\n    # 上午卖出的重量为139千克\n    sold_morning = 139\n    # 下午卖出的重量为183千克\n    sold_afternoon = 183\n    # 总共卖出的重量 = 上午卖出的重量 + 下午卖出的重量\n    total_sold = sold_morning + sold_afternoon\n    # 剩余的重量 = 总重量 - 总共卖出的重量\n    remaining_weight = total_weight - total_sold\n    # 答案是剩余的重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "一桶油用去40%，还剩84千克，这桶油原来有多少千克？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 用去的油的比例是40%\n    used_percentage = 0.4\n    # 剩余的油的重量是84千克\n    remaining_weight = 84\n    # 剩余油的比例 = 1 - 用去的比例\n    remaining_percentage = 1 - used_percentage\n    # 原来的油的重量 = 剩余的油的重量 / 剩余油的比例\n    original_weight = remaining_weight / remaining_percentage\n    # 答案是原来的油的重量\n    result = original_weight\n    # 返回答案\n    return result"]}
{"question": "2008年奥运会各项比赛门票销售正在火热进行中，一场手球比赛的最低票价为30元，一场游泳比赛的最低票价比手球比赛的4倍少20元，一场游泳比赛的最低票价比手球比赛贵多少元？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 手球比赛的最低票价为30元\n    handball_price = 30\n    # 游泳比赛的最低票价比手球比赛的4倍少20元\n    swimming_price = 4 * handball_price - 20\n    # 游泳比赛的最低票价比手球比赛贵的金额 = 游泳比赛票价 - 手球比赛票价\n    price_difference = swimming_price - handball_price\n    # 答案是游泳比赛比手球比赛贵的金额\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "小明与爸爸到电脑城去买电脑，他们看到了一台标价8000元的电脑．小明爸爸对经理说：“打0.8可以？”，经理想了想，说：“你说的价格，再加5%，”就成交了．请问小明家买这台电脑花了多少钱？", "target": 6720.0, "answer": 6720.0, "score": 1, "generation": ["def solution():\n    # 电脑的标价是8000元\n    original_price = 8000\n    # 小明爸爸提出的折扣是0.8\n    discount = 0.8\n    # 经理提出的价格是折扣价再加5%\n    additional_percentage = 0.05\n    # 折扣后的价格 = 标价 * 折扣\n    discounted_price = original_price * discount\n    # 最终价格 = 折扣后的价格 * (1 + 加价比例)\n    final_price = discounted_price * (1 + additional_percentage)\n    # 答案是小明家买这台电脑的花费\n    result = final_price\n    # 返回答案\n    return result"]}
{"question": "学校去年种树225棵，今年比去年增加8%，今年种树多少棵？", "target": 243.0, "answer": 243.0, "score": 1, "generation": ["def solution():\n    # 去年种树的数量为225棵\n    trees_last_year = 225\n    # 今年比去年增加了8%\n    increase_percentage = 0.08\n    # 今年增加的树的数量 = 去年数量 * 增加的百分比\n    trees_increase = trees_last_year * increase_percentage\n    # 今年种树的总数量 = 去年数量 + 今年增加的数量\n    trees_this_year = trees_last_year + trees_increase\n    # 答案是今年种树的总数量\n    result = trees_this_year\n    # 返回答案\n    return result"]}
{"question": "(1/5)*10=．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 计算(1/5)*10\n    result = (1/5) * 10\n    # 返回答案\n    return result"]}
{"question": "从1里面每次减去(1/10)，减去多少次得0．", "target": 10.0, "answer": 11.0, "score": 0, "generation": ["def solution():\n    # 初始值为1\n    initial_value = 1\n    # 每次减去的值为(1/10)\n    subtract_value = 1/10\n    # 计数器初始化为0\n    count = 0\n    # 当前值初始化为初始值\n    current_value = initial_value\n    # 循环减去(1/10)，直到当前值小于等于0\n    while current_value > 0:\n        current_value -= subtract_value\n        count += 1\n    # 答案是减去的次数\n    result = count\n    # 返回答案\n    return result"]}
{"question": "张新看一本120页的科普书，第一天看了全书的30%，第二天看了全书的(2/5)，还剩下多少页？", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 科普书的总页数为120页\n    total_pages = 120\n    # 第一天看了全书的30%\n    read_percentage_day1 = 0.3\n    # 第二天看了全书的(2/5)\n    read_fraction_day2 = 2/5\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_day1 = total_pages * read_percentage_day1\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_day2 = total_pages * read_fraction_day2\n    # 剩余的页数 = 总页数 - 第一天看的页数 - 第二天看的页数\n    remaining_pages = total_pages - pages_read_day1 - pages_read_day2\n    # 答案是剩余的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "春节过后，小明把400元压岁钱存入银行，年利率2.25%，存期一年．到期时，小明可以拿到利息多少元．（利息税忽略不计）", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 小明的压岁钱为400元\n    principal = 400\n    # 年利率为2.25%\n    annual_interest_rate = 0.0225\n    # 存期为1年\n    deposit_period = 1\n    # 利息 = 本金 * 年利率 * 存期\n    interest = principal * annual_interest_rate * deposit_period\n    # 答案是到期时小明可以拿到的利息\n    result = interest\n    # 返回答案\n    return result"]}
{"question": "一箱肥皂分发给某车间工人，平均每人可分到12块．若只分给女工，平均每人可分到20块；若只分给男工，平均每人可分到多少块？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 平均每人可分到12块\n    avg_per_person = 12\n    # 若只分给女工，平均每人可分到20块\n    avg_per_woman = 20\n    # 设女工人数为w，男工人数为m\n    # 总肥皂数 = 12 * (w + m)\n    # 总肥皂数 = 20 * w\n    # 所以 12 * (w + m) = 20 * w\n    # 12w + 12m = 20w\n    # 12m = 8w\n    # m = (8/12)w = (2/3)w\n    # 若只分给男工，平均每人可分到的块数 = 总肥皂数 / 男工人数\n    # 总肥皂数 = 20w\n    # 男工人数 = (2/3)w\n    # 所以平均每人可分到的块数 = 20w / (2/3)w = 20 / (2/3) = 30\n    avg_per_man = 30\n    # 答案是若只分给男工，平均每人可分到的块数\n    result = avg_per_man\n    # 返回答案\n    return result"]}
{"question": "农机厂计划生产800台，平均每天生产44台，生产了10天，余下的任务要求8天完成，平均每天要生产多少台？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 农机厂计划生产800台\n    total_machines = 800\n    # 平均每天生产44台\n    daily_production = 44\n    # 生产了10天\n    days_produced = 10\n    # 已经生产的机器数量 = 平均每天生产数量 * 生产天数\n    machines_produced = daily_production * days_produced\n    # 剩余需要生产的机器数量 = 总数量 - 已经生产的数量\n    remaining_machines = total_machines - machines_produced\n    # 余下的任务要求8天完成\n    remaining_days = 8\n    # 平均每天需要生产的数量 = 剩余数量 / 剩余天数\n    required_daily_production = remaining_machines / remaining_days\n    # 答案是平均每天需要生产的数量\n    result = required_daily_production\n    # 返回答案\n    return result"]}
{"question": "3名工人2小时加工零件90个，要在10小时完成1800个零件的加工，需要工人多少名．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 初始工人数量为3名\n    initial_workers = 3\n    # 初始工作时间为2小时\n    initial_hours = 2\n    # 初始加工的零件数量为90个\n    initial_parts = 90\n    # 目标零件数量为1800个\n    target_parts = 1800\n    # 目标工作时间为10小时\n    target_hours = 10\n    # 计算初始工作效率 = 零件数量 / (工人数量 * 工作时间)\n    initial_efficiency = initial_parts / (initial_workers * initial_hours)\n    # 计算需要的工人数量 = 目标零件数量 / (目标工作时间 * 初始工作效率)\n    required_workers = target_parts / (target_hours * initial_efficiency)\n    # 答案是需要的工人数量\n    result = required_workers\n    # 返回答案\n    return result"]}
{"question": "某厂4月份实际生产洗衣机5000台，超产1000台．超产百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 实际生产洗衣机5000台\n    actual_production = 5000\n    # 超产1000台\n    over_production = 1000\n    # 计划生产量 = 实际生产量 - 超产量\n    planned_production = actual_production - over_production\n    # 超产百分比 = (超产量 / 计划生产量) * 100\n    over_production_percentage = (over_production / planned_production) * 100\n    # 答案是超产百分比\n    result = over_production_percentage\n    # 返回答案\n    return result"]}
{"question": "一辆汽车4小时行了320公里，这辆汽车从甲城出发到乙城总共用了7小时．甲、乙两城之间距离多少千米？", "target": 560.0, "answer": 560.0, "score": 1, "generation": ["def solution():\n    # 汽车4小时行驶了320公里\n    distance_in_4_hours = 320\n    time_4_hours = 4\n    # 计算汽车的速度 = 行驶距离 / 时间\n    speed = distance_in_4_hours / time_4_hours\n    # 汽车从甲城到乙城总共用了7小时\n    total_time = 7\n    # 甲、乙两城之间的距离 = 速度 * 总时间\n    distance = speed * total_time\n    # 答案是甲、乙两城之间的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "将小数化为假分数：5.25=．", "target": 5.25, "answer": "", "score": 0, "generation": ["def solution():\n    # 小数5.25可以表示为5 + 0.25\n    whole_number = 5\n    decimal_part = 0.25\n    # 将小数部分0.25转换为分数形式\n    # 0.25 = 25/100 = 1/4\n    numerator_fraction = 1\n    denominator_fraction = 4\n    # 将整数部分转换为分数形式，分母与小数部分相同\n    # 5 = 20/4\n    numerator_whole = whole_number * denominator_fraction\n    # 假分数的分子 = 整数部分的分子 + 小数部分的分子\n    improper_numerator = numerator_whole + numerator_fraction\n    # 假分数的分母保持不变\n    improper_denominator = denominator_fraction\n    # 答案是假分数\n    result = (improper_numerator, improper_denominator)\n    # 返回答案\n    return result"]}
{"question": "货场有一批货物要运走，第一天运走总数的(3/8)，第二天运走总数的25%，还有270吨没有运走，这批货物有多少吨？", "target": 720.0, "answer": 720.0, "score": 1, "generation": ["def solution():\n    # 第一天运走总数的(3/8)\n    first_day_fraction = 3/8\n    # 第二天运走总数的25%\n    second_day_fraction = 0.25\n    # 剩余未运走的货物为270吨\n    remaining_tonnage = 270\n    # 总运走的比例 = 第一天运走的比例 + 第二天运走的比例\n    total_fraction_shipped = first_day_fraction + second_day_fraction\n    # 剩余的比例 = 1 - 总运走的比例\n    remaining_fraction = 1 - total_fraction_shipped\n    # 这批货物的总吨数 = 剩余未运走的吨数 / 剩余的比例\n    total_tonnage = remaining_tonnage / remaining_fraction\n    # 答案是这批货物的总吨数\n    result = total_tonnage\n    # 返回答案\n    return result"]}
{"question": "大西洋平均深度约为3.62千米，印度洋平均深度比大西洋深0.27千米，印度洋比北冰洋深2.59千米．北冰洋的平均深度约=多少千米？", "target": 1.3, "answer": 1.3000000000000003, "score": 1, "generation": ["def solution():\n    # 大西洋平均深度约为3.62千米\n    atlantic_depth = 3.62\n    # 印度洋平均深度比大西洋深0.27千米\n    indian_depth = atlantic_depth + 0.27\n    # 印度洋比北冰洋深2.59千米\n    arctic_depth = indian_depth - 2.59\n    # 答案是北冰洋的平均深度\n    result = arctic_depth\n    # 返回答案\n    return result"]}
{"question": "一瓶果汁有2升，如果把它分别倒入(1/4)升的玻璃杯中，可以倒几杯？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 果汁的总量为2升\n    total_juice = 2\n    # 每个玻璃杯的容量为(1/4)升\n    cup_capacity = 1/4\n    # 可以倒的杯数 = 果汁总量 / 每个玻璃杯的容量\n    num_cups = total_juice / cup_capacity\n    # 答案是可以倒的杯数\n    result = num_cups\n    # 返回答案\n    return result"]}
{"question": "小李翻过一座山，山路长6千米，上山时每小时行2千米，下山时沿原路返回，每小时行3千米，求小李上下山的平均速度．", "target": 2.4, "answer": 2.4, "score": 1, "generation": ["def solution():\n    # 山路长度为6千米\n    distance = 6\n    # 上山速度为每小时2千米\n    speed_up = 2\n    # 下山速度为每小时3千米\n    speed_down = 3\n    # 上山时间 = 距离 / 上山速度\n    time_up = distance / speed_up\n    # 下山时间 = 距离 / 下山速度\n    time_down = distance / speed_down\n    # 总距离 = 上山距离 + 下山距离\n    total_distance = distance + distance\n    # 总时间 = 上山时间 + 下山时间\n    total_time = time_up + time_down\n    # 平均速度 = 总距离 / 总时间\n    average_speed = total_distance / total_time\n    # 答案是平均速度\n    result = average_speed\n    # 返回答案\n    return result"]}
{"question": "小军要游200米，已游了(3/5)，还剩多少米没游？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 小军要游的总距离为200米\n    total_distance = 200\n    # 已游了(3/5)的距离\n    swam_fraction = 3/5\n    # 已游的距离 = 总距离 * 已游比例\n    swam_distance = total_distance * swam_fraction\n    # 剩余的距离 = 总距离 - 已游的距离\n    remaining_distance = total_distance - swam_distance\n    # 答案是剩余的距离\n    result = remaining_distance\n    # 返回答案\n    return result"]}
{"question": "贺兰一小六年级一班原来有学生54人，其中男生占全班的(5/9)，后来男生转走了几人，现在男生占全班的(13/25)，转走了几名男生？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 六年级一班原来有学生54人\n    original_total_students = 54\n    # 男生占全班的(5/9)\n    original_boys_fraction = 5/9\n    # 原来男生的人数 = 总人数 * 男生比例\n    original_boys = original_total_students * original_boys_fraction\n    # 后来男生转走了几人，现在男生占全班的(13/25)\n    new_boys_fraction = 13/25\n    # 设转走的男生人数为x\n    # 新的男生人数 = 原来男生人数 - x\n    # 新的总人数 = 原来总人数 - x\n    # 根据题意，新的男生人数 / 新的总人数 = 13/25\n    # 解方程：(original_boys - x) / (original_total_students - x) = 13/25\n    # 25*(original_boys - x) = 13*(original_total_students - x)\n    # 25*original_boys - 25x = 13*original_total_students - 13x\n    # 25*original_boys - 13*original_total_students = 25x - 13x\n    # 12x = 25*original_boys - 13*original_total_students\n    # x = (25*original_boys - 13*original_total_students) / 12\n    x = (25 * original_boys - 13 * original_total_students) / 12\n    # 答案是转走的男生人数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距380千米，一列动力火车从甲站出发行驶了全程的(5/19)，行驶了多少千米？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 甲乙两地的距离为380千米\n    total_distance = 380\n    # 动力火车行驶了全程的(5/19)\n    distance_fraction = 5/19\n    # 行驶的距离 = 总距离 * 行驶比例\n    distance_traveled = total_distance * distance_fraction\n    # 答案是动力火车行驶的距离\n    result = distance_traveled\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从总站开出，全车座位上有(5/6)坐了乘客，到达中点站时，有12人下车，20人上车，这时车内座位恰好坐满．这辆车有多少个座位？", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 全车座位上有(5/6)坐了乘客\n    initial_occupancy_fraction = 5/6\n    # 到达中点站时，有12人下车，20人上车\n    passengers_exit = 12\n    passengers_enter = 20\n    # 设总座位数为x\n    # 初始乘客数 = (5/6) * x\n    # 中点站后乘客数 = (5/6) * x - 12 + 20\n    # 根据题意，中点站后车内座位恰好坐满，即乘客数 = x\n    # 所以 (5/6) * x - 12 + 20 = x\n    # 解这个方程：\n    # (5/6) * x + 8 = x\n    # 8 = x - (5/6) * x\n    # 8 = (1/6) * x\n    # x = 8 * 6\n    total_seats = 8 * 6\n    # 答案是这辆车的座位数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "一种盐水重200克，盐的重量占盐水的20%，加了一些水后，盐的重量占盐水重量的12.5%．加了多少克水？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 盐水的初始重量为200克\n    initial_saltwater_weight = 200\n    # 盐的重量占盐水的20%\n    initial_salt_percentage = 0.2\n    # 加水后盐的重量占盐水重量的12.5%\n    final_salt_percentage = 0.125\n    # 盐的重量 = 初始盐水重量 * 盐的初始比例\n    salt_weight = initial_saltwater_weight * initial_salt_percentage\n    # 加水后的盐水总重量 = 盐的重量 / 加水后盐的比例\n    final_saltwater_weight = salt_weight / final_salt_percentage\n    # 加水的重量 = 加水后的盐水总重量 - 初始盐水重量\n    water_added = final_saltwater_weight - initial_saltwater_weight\n    # 答案是加水的重量\n    result = water_added\n    # 返回答案\n    return result"]}
{"question": "小红看一本书，已看的页数与剩下的页数的比是2：3，如果再看56页，正好看完全书的(3/4)．这本书一共有多少页？", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 已看的页数与剩下的页数的比是2：3\n    ratio_read_to_remaining = (2, 3)\n    # 再看56页后，正好看完全书的(3/4)\n    additional_pages = 56\n    final_fraction_read = 3/4\n    # 设已看的页数为2x，剩下的页数为3x\n    # 总页数 = 2x + 3x = 5x\n    # 再看56页后，已看的页数为2x + 56\n    # 根据题意，(2x + 56) / (5x) = 3/4\n    # 解这个方程：\n    # 4*(2x + 56) = 3*(5x)\n    # 8x + 224 = 15x\n    # 7x = 224\n    # x = 32\n    x = 224 / 7\n    # 总页数 = 5x\n    total_pages = 5 * x\n    # 答案是这本书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "服装厂做一件男上衣需用2.5米布料，一条男裤子需用1.8米布料，现有600米布料，可以做多少件男上衣？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 一件男上衣需要的布料为2.5米\n    cloth_per_shirt = 2.5\n    # 一条男裤子需要的布料为1.8米\n    cloth_per_pants = 1.8\n    # 现有布料为600米\n    total_cloth = 600\n    # 可以做多少件男上衣 = 总布料 / 每件男上衣需要的布料\n    num_shirts = total_cloth / cloth_per_shirt\n    # 因为不能做部分上衣，所以取整数部分\n    num_shirts = int(num_shirts)\n    # 答案是可以做的男上衣数量\n    result = num_shirts\n    # 返回答案\n    return result"]}
{"question": "2.8/0.8/0.5=．", "target": 7.0, "answer": 6.999999999999999, "score": 1, "generation": ["def solution():\n    # 计算2.8除以0.8\n    step1 = 2.8 / 0.8\n    # 将上一步的结果除以0.5\n    step2 = step1 / 0.5\n    # 答案是最终的计算结果\n    result = step2\n    # 返回答案\n    return result"]}
{"question": "看一本书，第一天看了全书的(2/7)，第二天比第一天少看5页，还剩62页没看，这本书共有多少页？", "target": 133.0, "answer": 133.0, "score": 1, "generation": ["def solution():\n    # 第一天看了全书的(2/7)\n    first_day_fraction = 2/7\n    # 第二天比第一天少看5页\n    second_day_pages_less = 5\n    # 还剩62页没看\n    remaining_pages = 62\n    # 设全书共有x页\n    # 第一天看的页数 = x * (2/7)\n    # 第二天看的页数 = 第一天看的页数 - 5 = x * (2/7) - 5\n    # 总页数 = 第一天看的页数 + 第二天看的页数 + 剩余页数\n    # x = x*(2/7) + (x*(2/7) - 5) + 62\n    # 解方程得x = (62 - 5) / (1 - 2*(2/7))\n    x = (remaining_pages - second_day_pages_less) / (1 - 2 * first_day_fraction)\n    # 答案是这本书的总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "工厂生产了1015筒毛球，每筒6个．一共生产了多少个羽毛球？", "target": 6090.0, "answer": 6090.0, "score": 1, "generation": ["def solution():\n    # 工厂生产的毛球筒数为1015筒\n    num_cans = 1015\n    # 每筒有6个羽毛球\n    balls_per_can = 6\n    # 总羽毛球数 = 筒数 * 每筒羽毛球数\n    total_balls = num_cans * balls_per_can\n    # 答案是总羽毛球数\n    result = total_balls\n    # 返回答案\n    return result"]}
{"question": "6（1）班有50人，某天该班出勤率为96%，这天缺席多少人．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为50人\n    total_students = 50\n    # 出勤率为96%\n    attendance_rate = 0.96\n    # 出勤人数 = 总人数 * 出勤率\n    present_students = total_students * attendance_rate\n    # 缺席人数 = 总人数 - 出勤人数\n    absent_students = total_students - present_students\n    # 答案是缺席人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "比40千克多(1/5)千克=多少千克？", "target": 40.2, "answer": 40.2, "score": 1, "generation": ["def solution():\n    # 初始重量为40千克\n    initial_weight = 40\n    # 增加的重量为(1/5)千克\n    additional_weight = 1/5\n    # 总重量 = 初始重量 + 增加的重量\n    total_weight = initial_weight + additional_weight\n    # 答案是总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "通过特快专递寄邮件每份需要22元．李阿姨寄邮件时付出200元，找回68元．她共寄了几份邮件？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 每份邮件的费用为22元\n    cost_per_mail = 22\n    # 李阿姨付出的金额为200元\n    amount_paid = 200\n    # 找回的金额为68元\n    change_received = 68\n    # 实际支付的金额 = 付出的金额 - 找回的金额\n    actual_cost = amount_paid - change_received\n    # 寄出的邮件份数 = 实际支付的金额 / 每份邮件的费用\n    num_mails = actual_cost / cost_per_mail\n    # 答案是寄出的邮件份数\n    result = num_mails\n    # 返回答案\n    return result"]}
{"question": "美术兴趣小组有36人，比音乐兴趣小组少20%．美术兴趣小组和音乐兴趣小组相差多少人？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 美术兴趣小组有36人\n    art_group = 36\n    # 美术兴趣小组比音乐兴趣小组少20%\n    percentage_difference = 0.2\n    # 音乐兴趣小组的人数 = 美术兴趣小组的人数 / (1 - 百分比差异)\n    music_group = art_group / (1 - percentage_difference)\n    # 两个兴趣小组相差的人数 = 音乐兴趣小组的人数 - 美术兴趣小组的人数\n    difference = music_group - art_group\n    # 答案是两个兴趣小组相差的人数\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "来电话时每次响铃时间为4秒，两次之间间隔2秒，这个电话响了8次，从响铃到结束共持续了几秒？", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 每次响铃时间为4秒\n    ring_duration = 4\n    # 两次响铃之间的间隔时间为2秒\n    interval_duration = 2\n    # 电话响了8次\n    num_rings = 8\n    # 因为第一次响铃没有前一次响铃的间隔，所以总响铃时间 = 响铃次数 * 每次响铃时间\n    total_ring_time = num_rings * ring_duration\n    # 间隔次数 = 响铃次数 - 1\n    num_intervals = num_rings - 1\n    # 总间隔时间 = 间隔次数 * 每次间隔时间\n    total_interval_time = num_intervals * interval_duration\n    # 从响铃到结束的总持续时间 = 总响铃时间 + 总间隔时间\n    total_duration = total_ring_time + total_interval_time\n    # 答案是总持续时间\n    result = total_duration\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树48棵，相当于苹果树的(3/4)，苹果树有多少？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 桃树的数量为48棵\n    peach_trees = 48\n    # 桃树相当于苹果树的(3/4)\n    ratio = 3/4\n    # 苹果树的数量 = 桃树的数量 / 比例\n    apple_trees = peach_trees / ratio\n    # 答案是苹果树的数量\n    result = apple_trees\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人从一楼开始比赛爬楼梯，甲爬楼梯的速度是乙的1.5倍．他们同时出发，当甲爬到16楼时，乙在多少楼．", "target": 11.0, "answer": 10.666666666666666, "score": 0, "generation": ["def solution():\n    # 甲爬到16楼\n    floor_a = 16\n    # 甲的速度是乙的1.5倍\n    speed_ratio = 1.5\n    # 因为两人同时出发，所以乙爬的楼层 = 甲爬的楼层 / 速度比\n    floor_b = floor_a / speed_ratio\n    # 答案是乙所在的楼层\n    result = floor_b\n    # 返回答案\n    return result"]}
{"question": "一个电影院共有812个座位，票价15元，这场的票都卖完了，这场电影的收入=多少元？", "target": 12180.0, "answer": 12180.0, "score": 1, "generation": ["def solution():\n    # 电影院共有812个座位\n    total_seats = 812\n    # 票价为15元\n    ticket_price = 15\n    # 因为票都卖完了，所以总收入 = 座位数 * 票价\n    total_income = total_seats * ticket_price\n    # 答案是这场电影的收入\n    result = total_income\n    # 返回答案\n    return result"]}
{"question": "一根绳子长24米，剪去全长的(1/6)，剩下的比全长短了多少米？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为24米\n    total_length = 24\n    # 剪去全长的(1/6)\n    cut_fraction = 1/6\n    # 剪去的长度 = 总长度 * 剪去的比例\n    cut_length = total_length * cut_fraction\n    # 剩下的长度 = 总长度 - 剪去的长度\n    remaining_length = total_length - cut_length\n    # 剩下的比全长短的长度 = 总长度 - 剩下的长度\n    difference = total_length - remaining_length\n    # 答案是剩下的比全长短的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "推销员每工作1小时可以挣6.5元，另外，每做成一次交易他可以得2.5元的奖金．某个星期他共收入212.5元，其中做成了7次交易，他这个星期工作了多少小时？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 推销员每工作1小时可以挣6.5元\n    hourly_wage = 6.5\n    # 每做成一次交易他可以得2.5元的奖金\n    bonus_per_transaction = 2.5\n    # 某个星期他共收入212.5元\n    total_income = 212.5\n    # 做成了7次交易\n    num_transactions = 7\n    # 总奖金 = 交易次数 * 每次交易的奖金\n    total_bonus = num_transactions * bonus_per_transaction\n    # 工资收入 = 总收入 - 总奖金\n    wage_income = total_income - total_bonus\n    # 工作小时数 = 工资收入 / 每小时工资\n    hours_worked = wage_income / hourly_wage\n    # 答案是工作小时数\n    result = hours_worked\n    # 返回答案\n    return result"]}
{"question": "果品公司运来苹果(3/4)吨，运来的梨是苹果的(5/6)，运来的桃比梨少(1/5)，运来的桃比梨少多少吨？", "target": 0.125, "answer": 0.125, "score": 1, "generation": ["def solution():\n    # 运来的苹果为(3/4)吨\n    apple_weight = 3/4\n    # 运来的梨是苹果的(5/6)\n    pear_weight = (5/6) * apple_weight\n    # 运来的桃比梨少(1/5)\n    peach_weight = pear_weight - (1/5) * pear_weight\n    # 运来的桃比梨少的重量 = 梨的重量 - 桃的重量\n    weight_difference = pear_weight - peach_weight\n    # 答案是运来的桃比梨少的重量\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "小兰看一本书，第一天看了全书的(1/6)，第二天看了全书的(1/5)，正好是66页．第一天看了多少页？", "target": 30.0, "answer": 55.0, "score": 0, "generation": ["def solution():\n    # 第二天看了全书的(1/5)，正好是66页\n    pages_second_day = 66\n    fraction_second_day = 1/5\n    # 全书的总页数 = 第二天看的页数 / 第二天看的比例\n    total_pages = pages_second_day / fraction_second_day\n    # 第一天看了全书的(1/6)\n    fraction_first_day = 1/6\n    # 第一天看的页数 = 总页数 * 第一天看的比例\n    pages_first_day = total_pages * fraction_first_day\n    # 答案是第一天看的页数\n    result = pages_first_day\n    # 返回答案\n    return result"]}
{"question": "幼儿园王阿姨买了345个小点心，给大班的小朋友每人发了3个，正好把点心发完．这个幼儿园大班有小朋友多少个？", "target": 115.0, "answer": 115.0, "score": 1, "generation": ["def solution():\n    # 王阿姨买了345个小点心\n    total_snacks = 345\n    # 每个大班小朋友发3个小点心\n    snacks_per_child = 3\n    # 大班小朋友的数量 = 总点心数 / 每个小朋友发的点心数\n    num_children = total_snacks / snacks_per_child\n    # 答案是大班小朋友的数量\n    result = num_children\n    # 返回答案\n    return result"]}
{"question": "求是小学组织少先队员去采集动物标本．男生采集了95件标本，占所采集标本总数的(5/8)．问：女生采集了多少件标本？", "target": 57.0, "answer": 57.0, "score": 1, "generation": ["def solution():\n    # 男生采集了95件标本\n    male_specimens = 95\n    # 男生采集的标本占总数的(5/8)\n    male_fraction = 5/8\n    # 总标本数 = 男生采集的标本数 / 男生采集的比例\n    total_specimens = male_specimens / male_fraction\n    # 女生采集的标本数 = 总标本数 - 男生采集的标本数\n    female_specimens = total_specimens - male_specimens\n    # 答案是女生采集的标本数\n    result = female_specimens\n    # 返回答案\n    return result"]}
{"question": "猎豹的速度是马的2.25倍．如果马每时跑64.4千米，猎豹每时比马多跑多少千米？", "target": 80.5, "answer": 80.5, "score": 1, "generation": ["def solution():\n    # 马的速度是每小时64.4千米\n    horse_speed = 64.4\n    # 猎豹的速度是马的2.25倍\n    cheetah_speed_multiplier = 2.25\n    # 猎豹的速度 = 马的速度 * 猎豹速度倍数\n    cheetah_speed = horse_speed * cheetah_speed_multiplier\n    # 猎豹比马多跑的速度 = 猎豹的速度 - 马的速度\n    speed_difference = cheetah_speed - horse_speed\n    # 答案是猎豹比马多跑的速度\n    result = speed_difference\n    # 返回答案\n    return result"]}
{"question": "某工程由甲单独做25天后，再由乙单独做60天即可完成．如果甲、乙两人合作，需40天完成，现在甲先单独做34天，然后再由乙来单独完成，还需要做多少天．", "target": 48.0, "answer": 47.99999999999999, "score": 1, "generation": ["def solution():\n    # 甲单独做25天，乙单独做60天可以完成整个工程\n    # 甲和乙合作40天可以完成整个工程\n    # 设甲的工作效率为x，乙的工作效率为y\n    # 根据题意，可以列出以下两个方程：\n    # 25x + 60y = 1\n    # 40x + 40y = 1\n    # 解这个方程组可以得到x和y的值\n    # 解第一个方程：25x + 60y = 1\n    # 解第二个方程：40x + 40y = 1\n    # 我们可以用第二个方程减去第一个方程的(40/25)倍来消去x\n    # 40x + 40y = 1\n    # (40/25)*25x + (40/25)*60y = (40/25)*1\n    # 40x + 96y = 1.6\n    # 现在减去第二个方程：\n    # (40x + 96y) - (40x + 40y) = 1.6 - 1\n    # 56y = 0.6\n    # y = 0.6 / 56\n    y = 0.6 / 56\n    # 代入第二个方程求x：\n    # 40x + 40*(0.6/56) = 1\n    # 40x = 1 - 40*(0.6/56)\n    # x = (1 - 40*(0.6/56)) / 40\n    x = (1 - 40*(0.6/56)) / 40\n    # 现在甲先单独做34天，完成的工作量为34x\n    work_done_by_a = 34 * x\n    # 剩余的工作量为1 - work_done_by_a\n    remaining_work = 1 - work_done_by_a\n    # 乙单独完成剩余工作需要的时间为remaining_work / y\n    days_needed_by_b = remaining_work / y\n    # 答案是乙还需要做的天数\n    result = days_needed_by_b\n    # 返回答案\n    return result"]}
{"question": "某个体服装商清仓甩卖，将一件衣服的原标价连续两次降15%，这时的标价为289元，已知这件衣服进价是原标价的70%，这件衣服进价多少元？", "target": 280.0, "answer": 280.0, "score": 1, "generation": ["def solution():\n    # 最终标价为289元\n    final_price = 289\n    # 每次降价15%，所以两次降价后的价格为原价的(1-0.15)^2\n    discount_rate = 0.15\n    remaining_rate_after_two_discounts = (1 - discount_rate) ** 2\n    # 原标价 = 最终标价 / 两次降价后的比例\n    original_price = final_price / remaining_rate_after_two_discounts\n    # 进价是原标价的70%\n    cost_price_rate = 0.7\n    # 进价 = 原标价 * 进价比例\n    cost_price = original_price * cost_price_rate\n    # 答案是这件衣服的进价\n    result = cost_price\n    # 返回答案\n    return result"]}
{"question": "小林阅读一本书，前3天他共看了156页，后9天他平均每天看32页，这些天中小林平均每天看书多少页？", "target": 37.0, "answer": 37.0, "score": 1, "generation": ["def solution():\n    # 前3天共看了156页\n    pages_first_3_days = 156\n    # 后9天平均每天看32页\n    avg_pages_last_9_days = 32\n    # 后9天共看的页数 = 平均每天看的页数 * 天数\n    total_pages_last_9_days = avg_pages_last_9_days * 9\n    # 总页数 = 前3天看的页数 + 后9天看的页数\n    total_pages = pages_first_3_days + total_pages_last_9_days\n    # 总天数 = 前3天 + 后9天\n    total_days = 3 + 9\n    # 平均每天看的页数 = 总页数 / 总天数\n    avg_pages_per_day = total_pages / total_days\n    # 答案是平均每天看的页数\n    result = avg_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "从动物园到火车站20千米，张师傅每天开车行驶5个来回，张师傅每天行驶多少千米？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 从动物园到火车站的距离为20千米\n    distance_one_way = 20\n    # 张师傅每天开车行驶5个来回\n    num_round_trips = 5\n    # 每个来回的距离 = 单程距离 * 2\n    distance_round_trip = distance_one_way * 2\n    # 每天行驶的总距离 = 来回次数 * 每个来回的距离\n    total_distance_daily = num_round_trips * distance_round_trip\n    # 答案是张师傅每天行驶的总距离\n    result = total_distance_daily\n    # 返回答案\n    return result"]}
{"question": "苹果的产量是梨的2倍，已知苹果和梨共有120吨，梨有多少吨？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 苹果和梨的总产量为120吨\n    total_production = 120\n    # 苹果的产量是梨的2倍\n    apple_to_pear_ratio = 2\n    # 设梨的产量为x吨，则苹果的产量为2x吨\n    # 总产量 = 苹果产量 + 梨产量 = 2x + x = 3x\n    # 所以梨的产量x = 总产量 / 3\n    pear_production = total_production / (apple_to_pear_ratio + 1)\n    # 答案是梨的产量\n    result = pear_production\n    # 返回答案\n    return result"]}
{"question": "李大爷家有黑兔172只，黑兔的只数比白兔多75只，李大爷家有白兔多少只？", "target": 97.0, "answer": 97.0, "score": 1, "generation": ["def solution():\n    # 李大爷家有黑兔172只\n    num_black_rabbits = 172\n    # 黑兔比白兔多75只\n    difference = 75\n    # 白兔的数量 = 黑兔的数量 - 黑兔比白兔多的数量\n    num_white_rabbits = num_black_rabbits - difference\n    # 答案是李大爷家有白兔的数量\n    result = num_white_rabbits\n    # 返回答案\n    return result"]}
{"question": "某工程队修一条长20千米的公路，已经修了20%，还剩多少千米没有修？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为20千米\n    total_length = 20\n    # 已经修了20%的公路\n    completed_percentage = 0.2\n    # 已经修的长度 = 总长度 * 完成比例\n    completed_length = total_length * completed_percentage\n    # 剩余未修的长度 = 总长度 - 已经修的长度\n    remaining_length = total_length - completed_length\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "某学校开展环保活动，有4个小组收集了768节电池．每个小组有8人，他们平均每人收集废电池多少节？", "target": 24.0, "answer": 24.0, "score": 1, "generation": ["def solution():\n    # 总共有4个小组\n    num_groups = 4\n    # 每个小组有8人\n    num_people_per_group = 8\n    # 总共收集了768节电池\n    total_batteries = 768\n    # 总人数 = 小组数量 * 每个小组的人数\n    total_people = num_groups * num_people_per_group\n    # 平均每人收集的电池数 = 总电池数 / 总人数\n    avg_batteries_per_person = total_batteries / total_people\n    # 答案是平均每人收集的电池数\n    result = avg_batteries_per_person\n    # 返回答案\n    return result"]}
{"question": "一件工作，甲先单独完成(2/3)用了(1/5)小时，如果全完成，要用多少小时．", "target": 0.3, "answer": 0.30000000000000004, "score": 1, "generation": ["def solution():\n    # 甲完成了工作的(2/3)\n    work_done = 2/3\n    # 完成这部分工作用了(1/5)小时\n    time_taken = 1/5\n    # 甲的工作效率 = 完成的工作量 / 所用时间\n    work_rate = work_done / time_taken\n    # 总工作量为1\n    total_work = 1\n    # 完成总工作所需时间 = 总工作量 / 工作效率\n    total_time = total_work / work_rate\n    # 答案是完成总工作所需时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "一批钢材第一次用去20%，第二次用去(1/2)吨，还剩下3吨，这批钢材有多少吨？", "target": 4.375, "answer": 4.375, "score": 1, "generation": ["def solution():\n    # 第一次用去20%\n    first_usage_percentage = 0.2\n    # 第二次用去(1/2)吨\n    second_usage = 0.5\n    # 还剩下3吨\n    remaining = 3\n    # 设这批钢材有x吨\n    # 第一次用去0.2x吨，第二次用去0.5吨，剩下x - 0.2x - 0.5 = 3\n    # 解方程：0.8x - 0.5 = 3\n    # 0.8x = 3.5\n    # x = 3.5 / 0.8\n    x = (3 + second_usage) / (1 - first_usage_percentage)\n    # 答案是这批钢材的总吨数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "大妙乡要修一条新公路，第一个周修了全长的(1/5)，第二个周修了600米，这时两个周刚好修了全长的60%．这条公路全长多少米？", "target": 1500.0, "answer": 1500.0000000000002, "score": 1, "generation": ["def solution():\n    # 第一个周修了全长的(1/5)\n    first_week_fraction = 1/5\n    # 第二个周修了600米\n    second_week_meters = 600\n    # 两个周共修了全长的60%\n    total_fraction = 0.6\n    # 设公路全长为x米\n    # 第一个周修的长度 = x * first_week_fraction\n    # 两个周共修的长度 = x * first_week_fraction + second_week_meters = x * total_fraction\n    # 解方程：x * first_week_fraction + second_week_meters = x * total_fraction\n    # 移项得：second_week_meters = x * (total_fraction - first_week_fraction)\n    # 所以 x = second_week_meters / (total_fraction - first_week_fraction)\n    total_length = second_week_meters / (total_fraction - first_week_fraction)\n    # 答案是公路的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "商店所有货物打0.8出售，爸爸买了一个剃须刀花了120元，这种剃须刀原来卖多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 爸爸购买剃须刀花费了120元\n    discounted_price = 120\n    # 商店所有货物打0.8出售\n    discount_rate = 0.8\n    # 原价 = 折扣价 / 折扣率\n    original_price = discounted_price / discount_rate\n    # 答案是剃须刀的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "小刚看一本故事书，第一天看了全书的(1/3)，第二天又看了8页，这时已看的页数与未看的页数的比是2：3，这本书有多少页？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 第一天看了全书的(1/3)\n    first_day_fraction = 1/3\n    # 第二天看了8页\n    second_day_pages = 8\n    # 已看的页数与未看的页数的比是2：3\n    ratio_seen_unseen = 2/3\n    # 设全书的总页数为x\n    # 第一天看的页数 = x * first_day_fraction\n    # 两天总共看的页数 = x * first_day_fraction + second_day_pages\n    # 未看的页数 = x - (x * first_day_fraction + second_day_pages)\n    # 根据比例关系：(x * first_day_fraction + second_day_pages) / (x - (x * first_day_fraction + second_day_pages)) = 2/3\n    # 解这个方程可以得到x的值\n    # 解方程步骤：\n    # 3*(x * first_day_fraction + second_day_pages) = 2*(x - (x * first_day_fraction + second_day_pages))\n    # 3*(x/3 + 8) = 2*(x - (x/3 + 8))\n    # x + 24 = 2*(2x/3 - 8)\n    # x + 24 = 4x/3 - 16\n    # x - 4x/3 = -16 -24\n    # -x/3 = -40\n    # x = 120\n    total_pages = 120\n    # 答案是全书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "燃烧的蜡烛．桌子上原来有12根点燃的蜡烛，先被风吹灭了3根，不久又一阵风吹灭了2根，最后桌子上还剩几根蜡烛？", "target": 5.0, "answer": 7.0, "score": 0, "generation": ["def solution():\n    # 桌子上原来有12根点燃的蜡烛\n    initial_candles = 12\n    # 第一次被风吹灭了3根\n    first_blown_out = 3\n    # 第二次被风吹灭了2根\n    second_blown_out = 2\n    # 剩下的蜡烛数量 = 初始蜡烛数量 - 第一次吹灭的蜡烛 - 第二次吹灭的蜡烛\n    remaining_candles = initial_candles - first_blown_out - second_blown_out\n    # 答案是最后桌子上剩下的蜡烛数量\n    result = remaining_candles\n    # 返回答案\n    return result"]}
{"question": "36个学生回答两个问题时，答对第一题的有23人，答对第二题的有25人，两题都答对的有14人，两题都没答对的有多少人．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 总学生数为36人\n    total_students = 36\n    # 答对第一题的有23人\n    correct_first_question = 23\n    # 答对第二题的有25人\n    correct_second_question = 25\n    # 两题都答对的有14人\n    correct_both_questions = 14\n    # 只答对第一题的人数 = 答对第一题的人数 - 两题都答对的人数\n    only_first_question = correct_first_question - correct_both_questions\n    # 只答对第二题的人数 = 答对第二题的人数 - 两题都答对的人数\n    only_second_question = correct_second_question - correct_both_questions\n    # 至少答对一题的人数 = 只答对第一题的人数 + 只答对第二题的人数 + 两题都答对的人数\n    at_least_one_question = only_first_question + only_second_question + correct_both_questions\n    # 两题都没答对的人数 = 总学生数 - 至少答对一题的人数\n    neither_question = total_students - at_least_one_question\n    # 答案是两题都没答对的人数\n    result = neither_question\n    # 返回答案\n    return result"]}
{"question": "食堂运来600千克大米，已经吃了4天，每天吃50千克．剩下的5天吃完，平均每天吃多少千克？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 食堂运来的大米总量为600千克\n    total_rice = 600\n    # 已经吃了4天\n    days_eaten = 4\n    # 每天吃50千克\n    daily_consumption = 50\n    # 已经吃的大米数量 = 天数 * 每天吃的数量\n    rice_eaten = days_eaten * daily_consumption\n    # 剩余的大米数量 = 总量 - 已经吃的数量\n    remaining_rice = total_rice - rice_eaten\n    # 剩下的5天吃完\n    remaining_days = 5\n    # 平均每天吃的大米数量 = 剩余的大米数量 / 剩余的天数\n    average_daily_consumption = remaining_rice / remaining_days\n    # 答案是平均每天吃的大米数量\n    result = average_daily_consumption\n    # 返回答案\n    return result"]}
{"question": "5/2.7与1.3的和，商=．", "target": 1.25, "answer": 1.4245014245014243, "score": 0, "generation": ["def solution():\n    # 第一个数是5/2.7\n    first_number = 5 / 2.7\n    # 第二个数是1.3\n    second_number = 1.3\n    # 两个数的和\n    sum_numbers = first_number + second_number\n    # 商 = 第一个数 / 第二个数\n    quotient = first_number / second_number\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "师傅计划生产40个零件，实际比计划多生产25%，实际生产多少个？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 计划生产的零件数量为40个\n    planned_production = 40\n    # 实际比计划多生产25%\n    production_increase = 0.25\n    # 实际生产的零件数量 = 计划生产的数量 * (1 + 生产增加比例)\n    actual_production = planned_production * (1 + production_increase)\n    # 答案是实际生产的零件数量\n    result = actual_production\n    # 返回答案\n    return result"]}
{"question": "一件皮毛大衣的单价是954元，一件T恤衫的单价是9元，皮毛大衣的单价是T恤衫的多少倍？", "target": 106.0, "answer": 106.0, "score": 1, "generation": ["def solution():\n    # 皮毛大衣的单价是954元\n    price_fur_coat = 954\n    # T恤衫的单价是9元\n    price_tshirt = 9\n    # 皮毛大衣的单价是T恤衫的多少倍 = 皮毛大衣的单价 / T恤衫的单价\n    multiple = price_fur_coat / price_tshirt\n    # 答案是皮毛大衣的单价是T恤衫的多少倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "用1.5*1.6的积减去0.6后去除0.36，商=？", "target": 0.2, "answer": 0.19999999999999996, "score": 1, "generation": ["def solution():\n    # 计算1.5 * 1.6的积\n    product = 1.5 * 1.6\n    # 减去0.6\n    difference = product - 0.6\n    # 用0.36除以差\n    quotient = 0.36 / difference\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一根长32米的绳子，剪去8米后，剩下的做短绳．每根短绳长4米，剩下的绳子可以做几根短绳？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为32米\n    total_length = 32\n    # 剪去的长度为8米\n    cut_length = 8\n    # 剩下的绳子长度 = 总长度 - 剪去的长度\n    remaining_length = total_length - cut_length\n    # 每根短绳的长度为4米\n    short_rope_length = 4\n    # 可以做的短绳数量 = 剩下的绳子长度 / 每根短绳的长度\n    num_short_ropes = remaining_length / short_rope_length\n    # 答案是剩下的绳子可以做的短绳数量\n    result = num_short_ropes\n    # 返回答案\n    return result"]}
{"question": "一个数的3倍是180，这个数=．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 一个数的3倍是180\n    three_times_number = 180\n    # 这个数 = 180 / 3\n    number = three_times_number / 3\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "麦当劳叔叔准备送出玩具猫手镯58个、玩具小车67个给学习好的同学，平均在5天内送完，每天送出多少个玩具？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 玩具猫手镯的数量为58个\n    num_cat_bracelets = 58\n    # 玩具小车的数量为67个\n    num_toy_cars = 67\n    # 送出的天数为5天\n    num_days = 5\n    # 总玩具数量 = 玩具猫手镯数量 + 玩具小车数量\n    total_toys = num_cat_bracelets + num_toy_cars\n    # 每天送出的玩具数量 = 总玩具数量 / 送出的天数\n    toys_per_day = total_toys / num_days\n    # 答案是每天送出的玩具数量\n    result = toys_per_day\n    # 返回答案\n    return result"]}
{"question": "王老师买了2000元的国家建设债券，定期3年，年利率是7.11%，到期时他获得的本息一共多少元．", "target": 2426.6, "answer": 2426.6, "score": 1, "generation": ["def solution():\n    # 王老师购买债券的金额为2000元\n    principal = 2000\n    # 债券的定期为3年\n    years = 3\n    # 年利率是7.11%\n    annual_interest_rate = 0.0711\n    # 计算每年的利息\n    annual_interest = principal * annual_interest_rate\n    # 计算总利息 = 每年的利息 * 年数\n    total_interest = annual_interest * years\n    # 计算本息总和 = 本金 + 总利息\n    total_amount = principal + total_interest\n    # 答案是到期时获得的本息总和\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "某个旅游景点，游客每6人乘坐一辆游览车，一共有408辆游览车，可以同时供多少人参观？", "target": 2448.0, "answer": 2448.0, "score": 1, "generation": ["def solution():\n    # 每辆游览车可以乘坐6人\n    people_per_vehicle = 6\n    # 一共有408辆游览车\n    total_vehicles = 408\n    # 可以同时供多少人参观 = 每辆游览车的人数 * 游览车的总数\n    total_people = people_per_vehicle * total_vehicles\n    # 答案是可以同时供多少人参观\n    result = total_people\n    # 返回答案\n    return result"]}
{"question": "一列火车从长沙开往广州，每小时行70千米，这列货车开出1小时后，一列客车从广州出发开往长沙，每小时行60千米，客车经4.5小时后，与货车相遇．长沙到广州的铁路长多少千米？", "target": 655.0, "answer": 655.0, "score": 1, "generation": ["def solution():\n    # 火车的速度为每小时70千米\n    train_speed = 70\n    # 客车的速度为每小时60千米\n    bus_speed = 60\n    # 火车提前1小时出发\n    train_head_start = 1\n    # 客车行驶时间为4.5小时\n    bus_travel_time = 4.5\n    # 火车在客车出发前已经行驶的距离 = 火车速度 * 提前时间\n    train_distance_before_bus = train_speed * train_head_start\n    # 火车在客车行驶期间行驶的距离 = 火车速度 * 客车行驶时间\n    train_distance_during_bus = train_speed * bus_travel_time\n    # 客车行驶的距离 = 客车速度 * 客车行驶时间\n    bus_distance = bus_speed * bus_travel_time\n    # 总铁路长度 = 火车提前行驶的距离 + 火车在客车行驶期间行驶的距离 + 客车行驶的距离\n    total_railway_length = train_distance_before_bus + train_distance_during_bus + bus_distance\n    # 答案是长沙到广州的铁路长度\n    result = total_railway_length\n    # 返回答案\n    return result"]}
{"question": "某汽车制造厂11月制造汽车5400台，比计划多生产600台，实际比计划增产了百分之几？", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 11月实际制造汽车5400台\n    actual_production = 5400\n    # 比计划多生产600台\n    over_production = 600\n    # 计划生产数量 = 实际生产数量 - 多生产的数量\n    planned_production = actual_production - over_production\n    # 实际比计划增产的百分比 = (多生产的数量 / 计划生产数量) * 100\n    percentage_increase = (over_production / planned_production) * 100\n    # 答案是实际比计划增产的百分比\n    result = percentage_increase\n    # 返回答案\n    return result"]}
{"question": "王师傅加工一批零件，第一天加工了(1/5)，第二天又加工了30个，这时已加工的与未加工的个数比是2：3，这批零件一共多少个？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 第一天加工了(1/5)的零件\n    first_day_fraction = 1/5\n    # 第二天加工了30个零件\n    second_day_work = 30\n    # 已加工的与未加工的个数比是2：3\n    ratio_worked_to_unworked = 2/3\n    # 设总零件数为x\n    # 第一天加工的零件数 = x * first_day_fraction\n    # 两天总共加工的零件数 = x * first_day_fraction + second_day_work\n    # 未加工的零件数 = x - (x * first_day_fraction + second_day_work)\n    # 根据比例关系：(x * first_day_fraction + second_day_work) / (x - (x * first_day_fraction + second_day_work)) = 2/3\n    # 解这个方程可以得到x的值\n    # 方程可以简化为：3*(x/5 + 30) = 2*(x - x/5 - 30)\n    # 展开后：3x/5 + 90 = 8x/5 - 60\n    # 移项：90 + 60 = 8x/5 - 3x/5\n    # 150 = 5x/5\n    # 150 = x\n    total_parts = 150\n    # 答案是这批零件的总数\n    result = total_parts\n    # 返回答案\n    return result"]}
{"question": "已知6（1）班男、女生人数比为5：3，男生比女生多8人，男生有多少人．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 男、女生人数比为5：3\n    male_ratio = 5\n    female_ratio = 3\n    # 男生比女生多8人\n    difference = 8\n    # 设每份人数为x\n    # 男生人数 = 5x\n    # 女生人数 = 3x\n    # 根据题意，5x - 3x = 8\n    x = difference / (male_ratio - female_ratio)\n    # 男生人数 = 5x\n    male_count = male_ratio * x\n    # 答案是男生人数\n    result = male_count\n    # 返回答案\n    return result"]}
{"question": "两地间的路程是280千米．甲乙两辆汽车同时从两地开出，相向而行，3.5小时相遇．甲车每小时行47.5千米，乙车每小时行多少千米？", "target": 32.5, "answer": 32.5, "score": 1, "generation": ["def solution():\n    # 两地间的路程是280千米\n    distance = 280\n    # 两车相遇的时间是3.5小时\n    time_to_meet = 3.5\n    # 甲车的速度是每小时47.5千米\n    speed_a = 47.5\n    # 因为两车相向而行，两车的相对速度 = 路程 / 相遇时间\n    relative_speed = distance / time_to_meet\n    # 乙车的速度 = 相对速度 - 甲车的速度\n    speed_b = relative_speed - speed_a\n    # 答案是乙车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "一段绳子长176米，第一次剪了46米，第二次剪了44米，这时绳子比原来短了多少米．", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 绳子的原长为176米\n    original_length = 176\n    # 第一次剪了46米\n    first_cut = 46\n    # 第二次剪了44米\n    second_cut = 44\n    # 总共剪去的长度 = 第一次剪去的长度 + 第二次剪去的长度\n    total_cut = first_cut + second_cut\n    # 绳子比原来短的长度 = 总共剪去的长度\n    shortened_length = total_cut\n    # 答案是绳子比原来短的长度\n    result = shortened_length\n    # 返回答案\n    return result"]}
{"question": "客、货两车分别从甲、乙两地同时出发，相向而行，4.5小时后相遇．客车每小时行56千米，货车每小时行60千米．甲、乙两地相距多少千米？", "target": 522.0, "answer": 522.0, "score": 1, "generation": ["def solution():\n    # 客车每小时行56千米\n    speed_bus = 56\n    # 货车每小时行60千米\n    speed_truck = 60\n    # 两车相向而行，相遇时间为4.5小时\n    time_to_meet = 4.5\n    # 两车的相对速度 = 客车速度 + 货车速度\n    relative_speed = speed_bus + speed_truck\n    # 甲、乙两地的距离 = 相对速度 * 相遇时间\n    distance = relative_speed * time_to_meet\n    # 答案是甲、乙两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "梨的筐数是苹果的(3/4)，苹果的筐数是橘子的(4/5)，梨有150筐，橘子多少筐？", "target": 250.0, "answer": 250.0, "score": 1, "generation": ["def solution():\n    # 梨的筐数是150筐\n    pear_baskets = 150\n    # 梨的筐数是苹果的(3/4)\n    apple_baskets = pear_baskets / (3/4)\n    # 苹果的筐数是橘子的(4/5)\n    orange_baskets = apple_baskets / (4/5)\n    # 答案是橘子的筐数\n    result = orange_baskets\n    # 返回答案\n    return result"]}
{"question": "一个盛水的正方体容器，棱长20厘米，现放入10个鸡蛋（浸没），水面升高了1厘米，求一个鸡蛋的体积=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 正方体容器的棱长为20厘米\n    side_length = 20\n    # 水面升高了1厘米\n    water_level_increase = 1\n    # 放入的鸡蛋数量为10个\n    num_eggs = 10\n    # 水面升高的体积 = 底面积 * 水面升高的高度\n    base_area = side_length * side_length\n    total_volume_increase = base_area * water_level_increase\n    # 一个鸡蛋的体积 = 水面升高的总体积 / 鸡蛋数量\n    volume_per_egg = total_volume_increase / num_eggs\n    # 答案是一个鸡蛋的体积\n    result = volume_per_egg\n    # 返回答案\n    return result"]}
{"question": "水果批发市场运来一批菠萝，第一周卖出(17/20)吨，第二周卖出的比第一周少(1/5)吨，两周一共卖出菠萝多少吨？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 第一周卖出的菠萝数量为(17/20)吨\n    first_week_sales = 17/20\n    # 第二周卖出的比第一周少(1/5)吨\n    second_week_sales = first_week_sales - (1/5)\n    # 两周一共卖出的菠萝数量 = 第一周卖出的数量 + 第二周卖出的数量\n    total_sales = first_week_sales + second_week_sales\n    # 答案是两周一共卖出的菠萝数量\n    result = total_sales\n    # 返回答案\n    return result"]}
{"question": "六年级共有学生108名，其中女同学68名，女同学占全年级人数的多少（用分数表示）．", "target": 0.6296296296296297, "answer": 0.6296296296296297, "score": 1, "generation": ["def solution():\n    # 六年级共有学生108名\n    total_students = 108\n    # 女同学有68名\n    female_students = 68\n    # 女同学占全年级人数的比例 = 女同学人数 / 总人数\n    female_ratio = female_students / total_students\n    # 答案是女同学占全年级人数的比例\n    result = female_ratio\n    # 返回答案\n    return result"]}
{"question": "6（1）班有学生60人，男生人数是全班的(7/12)，又转来几名女生后，这时男生人数是全班的(5/9)．又转来几名女生？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为60人\n    total_students = 60\n    # 男生人数是全班的(7/12)\n    male_fraction = 7/12\n    # 男生人数 = 总人数 * 男生比例\n    male_students = total_students * male_fraction\n    # 转来女生后，男生人数是全班的(5/9)\n    new_male_fraction = 5/9\n    # 因为男生人数不变，新的总人数 = 男生人数 / 新的男生比例\n    new_total_students = male_students / new_male_fraction\n    # 转来的女生人数 = 新的总人数 - 原来的总人数\n    new_female_students = new_total_students - total_students\n    # 答案是转来的女生人数\n    result = new_female_students\n    # 返回答案\n    return result"]}
{"question": "34毫米比90毫米少多少毫米．", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 第一个长度是34毫米\n    length1 = 34\n    # 第二个长度是90毫米\n    length2 = 90\n    # 计算34毫米比90毫米少多少毫米 = 90毫米 - 34毫米\n    difference = length2 - length1\n    # 答案是34毫米比90毫米少的毫米数\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "慢车身长125米，车速每秒22米，快车身长140米，车速每秒27米，慢车在前面行驶，快车在后面追上完全超过需要多少秒．", "target": 53.0, "answer": 53.0, "score": 1, "generation": ["def solution():\n    # 慢车的车身长度为125米\n    slow_train_length = 125\n    # 慢车的速度为每秒22米\n    slow_train_speed = 22\n    # 快车的车身长度为140米\n    fast_train_length = 140\n    # 快车的速度为每秒27米\n    fast_train_speed = 27\n    # 因为快车要完全超过慢车，所以需要超过的距离 = 慢车车身长度 + 快车车身长度\n    distance_to_overtake = slow_train_length + fast_train_length\n    # 两车的相对速度 = 快车速度 - 慢车速度\n    relative_speed = fast_train_speed - slow_train_speed\n    # 完全超过所需时间 = 需要超过的距离 / 相对速度\n    time_to_overtake = distance_to_overtake / relative_speed\n    # 答案是快车完全超过慢车所需的时间\n    result = time_to_overtake\n    # 返回答案\n    return result"]}
{"question": "用400吨小麦磨面粉，出粉率85%．可以磨面粉多少吨？", "target": 340.0, "answer": 340.0, "score": 1, "generation": ["def solution():\n    # 小麦的总重量为400吨\n    total_wheat = 400\n    # 出粉率为85%\n    flour_rate = 0.85\n    # 可以磨出的面粉重量 = 小麦总重量 * 出粉率\n    flour_weight = total_wheat * flour_rate\n    # 答案是可以磨出的面粉重量\n    result = flour_weight\n    # 返回答案\n    return result"]}
{"question": "修路队修一段公路，第一天修了全长的25%，第二天修了全长的20%．第一天修了50米，还剩多少米没有修？", "target": 110.0, "answer": 110.0, "score": 1, "generation": ["def solution():\n    # 第一天修了全长的25%\n    first_day_percentage = 0.25\n    # 第一天修了50米\n    first_day_length = 50\n    # 公路的总长度 = 第一天修的长度 / 第一天修的比例\n    total_length = first_day_length / first_day_percentage\n    # 第二天修了全长的20%\n    second_day_percentage = 0.20\n    # 第二天修的长度 = 总长度 * 第二天修的比例\n    second_day_length = total_length * second_day_percentage\n    # 已修的总长度 = 第一天修的长度 + 第二天修的长度\n    total_repaired_length = first_day_length + second_day_length\n    # 剩余未修的长度 = 总长度 - 已修的总长度\n    remaining_length = total_length - total_repaired_length\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "圆珠笔和铅笔的单价比为4：3，学校买了15支圆珠笔和16支铅笔一共用去了54元，那么圆珠笔的单价=多少元．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 圆珠笔和铅笔的单价比为4：3\n    pen_ratio = 4\n    pencil_ratio = 3\n    # 学校买了15支圆珠笔和16支铅笔\n    num_pens = 15\n    num_pencils = 16\n    # 总花费为54元\n    total_cost = 54\n    # 设圆珠笔的单价为4x元，铅笔的单价为3x元\n    # 总花费 = 圆珠笔数量 * 圆珠笔单价 + 铅笔数量 * 铅笔单价\n    # 54 = 15 * 4x + 16 * 3x\n    # 54 = 60x + 48x\n    # 54 = 108x\n    # x = 54 / 108 = 0.5\n    x = total_cost / (num_pens * pen_ratio + num_pencils * pencil_ratio)\n    # 圆珠笔的单价 = 4x\n    pen_price = pen_ratio * x\n    # 答案是圆珠笔的单价\n    result = pen_price\n    # 返回答案\n    return result"]}
{"question": "3个同学跳绳，小明跳了240下，小强跳的是小明跳的(5/8)，小亮跳的是小强跳的(2/3)．小亮跳了多少下？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 小明跳了240下\n    xiaoming_jumps = 240\n    # 小强跳的是小明跳的(5/8)\n    xiaoqiang_jumps = (5/8) * xiaoming_jumps\n    # 小亮跳的是小强跳的(2/3)\n    xiaoliang_jumps = (2/3) * xiaoqiang_jumps\n    # 答案是小亮跳的次数\n    result = xiaoliang_jumps\n    # 返回答案\n    return result"]}
{"question": "李华买一顶草帽用1.8元，买一把茶壶用2.5元，又买了一个热水瓶，3样东西正好用了9元．买热水瓶用多少元？", "target": 4.7, "answer": 4.7, "score": 1, "generation": ["def solution():\n    # 草帽的价格是1.8元\n    hat_price = 1.8\n    # 茶壶的价格是2.5元\n    teapot_price = 2.5\n    # 三样东西的总价格是9元\n    total_price = 9\n    # 热水瓶的价格 = 总价格 - 草帽的价格 - 茶壶的价格\n    thermos_price = total_price - hat_price - teapot_price\n    # 答案是热水瓶的价格\n    result = thermos_price\n    # 返回答案\n    return result"]}
{"question": "花果林场有桃园(3/8)公顷，占果园的总面积的(1/4)．果园的总面积有多少公顷？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 桃园的面积是(3/8)公顷\n    peach_orchard_area = 3/8\n    # 桃园面积占果园总面积的(1/4)\n    peach_fraction_of_total = 1/4\n    # 果园的总面积 = 桃园的面积 / 桃园面积占总面积的比例\n    total_orchard_area = peach_orchard_area / peach_fraction_of_total\n    # 答案是果园的总面积\n    result = total_orchard_area\n    # 返回答案\n    return result"]}
{"question": "两个因数都是6，积=．", "target": 36.0, "answer": 36.0, "score": 1, "generation": ["def solution():\n    # 第一个因数是6\n    factor1 = 6\n    # 第二个因数是6\n    factor2 = 6\n    # 积 = 第一个因数 * 第二个因数\n    product = factor1 * factor2\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "有3个小朋友，每次选2个人排成一排拍照片，一共有多少种拍法．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 有3个小朋友\n    num_children = 3\n    # 每次选2个人排成一排拍照片\n    num_selected = 2\n    # 排列数公式：P(n, k) = n! / (n - k)!\n    # 计算排列数\n    permutation = factorial(num_children) / factorial(num_children - num_selected)\n    # 答案是排列数\n    result = permutation\n    # 返回答案\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"]}
{"question": "一个西瓜，妈妈吃了它的(1/8)，丁丁吃了它的(2/8)，他们一共吃了这个西瓜的几分之几？（　　）", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # 妈妈吃了西瓜的(1/8)\n    mom_fraction = 1/8\n    # 丁丁吃了西瓜的(2/8)\n    dingding_fraction = 2/8\n    # 他们一共吃了西瓜的比例 = 妈妈吃的比例 + 丁丁吃的比例\n    total_fraction = mom_fraction + dingding_fraction\n    # 答案是总共吃了西瓜的比例\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "重阳节市体委组织登山比赛．在长达845米的山路中．每隔65米设一个服务站（起点和终点不设）．共设多少个服务站？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 山路的总长度为845米\n    total_length = 845\n    # 每隔65米设一个服务站\n    interval = 65\n    # 服务站的数量 = 总长度 / 间隔 - 1（因为起点和终点不设）\n    num_stations = (total_length / interval) - 1\n    # 答案是服务站的数量\n    result = num_stations\n    # 返回答案\n    return result"]}
{"question": "水果店运来一批水果，第一天卖出全部的(2/8)，第二天卖出全部的(3/8)，两天一共卖出全部水果的几分之几？", "target": 0.625, "answer": 0.625, "score": 1, "generation": ["def solution():\n    # 第一天卖出全部的(2/8)\n    first_day_sold = 2/8\n    # 第二天卖出全部的(3/8)\n    second_day_sold = 3/8\n    # 两天一共卖出的比例 = 第一天卖出的比例 + 第二天卖出的比例\n    total_sold = first_day_sold + second_day_sold\n    # 答案是两天一共卖出的比例\n    result = total_sold\n    # 返回答案\n    return result"]}
{"question": "每千克苹果3.25元，爸爸买了14千克苹果，付出了50元，应找回多少钱？", "target": 4.5, "answer": 4.5, "score": 1, "generation": ["def solution():\n    # 每千克苹果的价格为3.25元\n    price_per_kg = 3.25\n    # 爸爸买了14千克苹果\n    weight = 14\n    # 爸爸付出的金额为50元\n    amount_paid = 50\n    # 苹果的总价格 = 每千克价格 * 重量\n    total_price = price_per_kg * weight\n    # 应找回的金额 = 付出的金额 - 苹果的总价格\n    change = amount_paid - total_price\n    # 答案是应找回的金额\n    result = change\n    # 返回答案\n    return result"]}
{"question": "学校体育训练队3天喝了90瓶矿泉水，照这样计算，还有180瓶矿泉水，还能喝几天？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 3天喝了90瓶矿泉水\n    days = 3\n    bottles_consumed = 90\n    # 计算每天的消耗量\n    daily_consumption = bottles_consumed / days\n    # 还有180瓶矿泉水\n    remaining_bottles = 180\n    # 还能喝的天数 = 剩余瓶数 / 每天的消耗量\n    remaining_days = remaining_bottles / daily_consumption\n    # 答案是还能喝的天数\n    result = remaining_days\n    # 返回答案\n    return result"]}
{"question": "小明骑自行车到姥姥家，他的自行车的轮子的直径是1米，若姥姥家离小明家628米．则到达姥姥家时小明的自行车至少要转多少圈．（假设小明的自行车走直线）", "target": 199.8986, "answer": 199.89860852342056, "score": 1, "generation": ["def solution():\n    # 自行车轮子的直径是1米\n    diameter = 1\n    # 姥姥家离小明家628米\n    distance = 628\n    # 计算轮子的周长 = π * 直径\n    circumference = 3.141592653589793 * diameter\n    # 计算需要转的圈数 = 距离 / 周长\n    num_rotations = distance / circumference\n    # 答案是自行车需要转的圈数\n    result = num_rotations\n    # 返回答案\n    return result"]}
{"question": "一件羽绒服打0.7出售，现在每件280元，现价比原价便宜多少元．", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 羽绒服的现价是280元\n    current_price = 280\n    # 羽绒服打0.7出售，即现价是原价的70%\n    discount_rate = 0.7\n    # 原价 = 现价 / 折扣率\n    original_price = current_price / discount_rate\n    # 现价比原价便宜的价格 = 原价 - 现价\n    price_difference = original_price - current_price\n    # 答案是现价比原价便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "林场去年种植了1000棵树苗，死亡率是2%，林场种植的这批树苗的成活率=．", "target": 98.0, "answer": 0.98, "score": 0, "generation": ["def solution():\n    # 去年种植的树苗数量为1000棵\n    total_seedlings = 1000\n    # 死亡率是2%\n    death_rate = 0.02\n    # 成活的树苗数量 = 总数量 * (1 - 死亡率)\n    survived_seedlings = total_seedlings * (1 - death_rate)\n    # 成活率 = 成活的树苗数量 / 总数量\n    survival_rate = survived_seedlings / total_seedlings\n    # 答案是成活率\n    result = survival_rate\n    # 返回答案\n    return result"]}
{"question": "6（1）班有40人，有(3/4)的同学订了《小学生数学报》，有(4/5)的同学订了《小学生语文学习》，两种都订的至少有多少人？", "target": 22.0, "answer": 22.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为40人\n    total_students = 40\n    # 订《小学生数学报》的比例为(3/4)\n    math_newspaper_ratio = 3/4\n    # 订《小学生语文学习》的比例为(4/5)\n    chinese_newspaper_ratio = 4/5\n    # 订《小学生数学报》的人数 = 总人数 * 比例\n    math_newspaper_students = total_students * math_newspaper_ratio\n    # 订《小学生语文学习》的人数 = 总人数 * 比例\n    chinese_newspaper_students = total_students * chinese_newspaper_ratio\n    # 两种都订的最少人数 = 订《小学生数学报》的人数 + 订《小学生语文学习》的人数 - 总人数\n    both_newspapers_min = math_newspaper_students + chinese_newspaper_students - total_students\n    # 答案是两种都订的最少人数\n    result = both_newspapers_min\n    # 返回答案\n    return result"]}
{"question": "有一堆螺丝和螺母，若一个螺丝配2个螺母，则多10个螺母；若1个螺丝配3个螺母，则少6个螺母．共有多少个螺丝？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 设螺丝的数量为x\n    # 第一种情况：一个螺丝配2个螺母，多10个螺母\n    # 螺母数量 = 2x + 10\n    # 第二种情况：一个螺丝配3个螺母，少6个螺母\n    # 螺母数量 = 3x - 6\n    # 因为螺母数量相同，所以可以建立方程：2x + 10 = 3x - 6\n    # 解方程得：x = 16\n    screws = 16\n    # 答案是螺丝的数量\n    result = screws\n    # 返回答案\n    return result"]}
{"question": "一个数的40%比它的(2/9)多64，求这个数．", "target": 360.0, "answer": 359.99999999999994, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    # 40% of x is 0.4x\n    # (2/9) of x is (2/9)x\n    # 根据题意，0.4x - (2/9)x = 64\n    # 解这个方程\n    # 首先计算0.4 - (2/9)\n    difference = 0.4 - (2/9)\n    # 然后解方程 difference * x = 64\n    x = 64 / difference\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "有15只甲A足球队，进行双循环比赛（每两支队赛两场），共要举行多少场比赛？", "target": 210.0, "answer": 210.0, "score": 1, "generation": ["def solution():\n    # 甲A足球队的数量为15只\n    num_teams = 15\n    # 每两支队赛两场\n    matches_per_pair = 2\n    # 双循环比赛的总场数 = 组合数 * 每两支队比赛的场数\n    # 组合数 = 15 * 14 / 2\n    combination = num_teams * (num_teams - 1) / 2\n    total_matches = combination * matches_per_pair\n    # 答案是总比赛场数\n    result = total_matches\n    # 返回答案\n    return result"]}
{"question": "假期时间，王叔叔要去青岛旅游．王叔叔家到青岛825千米，他坐火车3小时行了495千米．王叔叔还需几小时到达青岛？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 王叔叔家到青岛的总距离为825千米\n    total_distance = 825\n    # 火车3小时行驶了495千米\n    distance_traveled = 495\n    # 剩余距离 = 总距离 - 已行驶距离\n    remaining_distance = total_distance - distance_traveled\n    # 火车的速度 = 已行驶距离 / 行驶时间\n    speed = distance_traveled / 3\n    # 剩余时间 = 剩余距离 / 速度\n    remaining_time = remaining_distance / speed\n    # 答案是王叔叔还需的时间\n    result = remaining_time\n    # 返回答案\n    return result"]}
{"question": "环保小队要栽种500棵树苗，5天后还有180棵没栽，环保小队平均每天栽种多少棵树苗？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 环保小队要栽种的总树苗数为500棵\n    total_seedlings = 500\n    # 5天后还有180棵没栽\n    remaining_seedlings = 180\n    # 已经栽种的树苗数 = 总树苗数 - 剩余的树苗数\n    planted_seedlings = total_seedlings - remaining_seedlings\n    # 栽种天数为5天\n    planting_days = 5\n    # 平均每天栽种的树苗数 = 已经栽种的树苗数 / 栽种天数\n    average_daily_planting = planted_seedlings / planting_days\n    # 答案是平均每天栽种的树苗数\n    result = average_daily_planting\n    # 返回答案\n    return result"]}
{"question": "花园里有75盆菊花，月季花比菊花的12倍多15盆，花园里有多少盆月季花？", "target": 915.0, "answer": 915.0, "score": 1, "generation": ["def solution():\n    # 花园里有75盆菊花\n    num_chrysanthemum = 75\n    # 月季花比菊花的12倍多15盆\n    multiplier = 12\n    additional = 15\n    # 月季花的数量 = 菊花的数量 * 12 + 15\n    num_rose = num_chrysanthemum * multiplier + additional\n    # 答案是月季花的数量\n    result = num_rose\n    # 返回答案\n    return result"]}
{"question": "两个加数的和比第一个加数大4.75，比第二个加数大9.65，这两个加数的和=．", "target": 14.4, "answer": 14.4, "score": 1, "generation": ["def solution():\n    # 第一个加数比和少4.75\n    first_addend_less = 4.75\n    # 第二个加数比和少9.65\n    second_addend_less = 9.65\n    # 因为和 = 第一个加数 + 第二个加数\n    # 第一个加数 = 和 - 4.75\n    # 第二个加数 = 和 - 9.65\n    # 所以和 = (和 - 4.75) + (和 - 9.65)\n    # 解方程得：和 = 4.75 + 9.65\n    sum_of_addends = first_addend_less + second_addend_less\n    # 答案是这两个加数的和\n    result = sum_of_addends\n    # 返回答案\n    return result"]}
{"question": "李老师看一本书，第一天看了全书的(1/5)，第二天看了全书的(1/4)，还剩下88页没有看，这本书共有多少页？", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 第一天看了全书的(1/5)\n    first_day_fraction = 1/5\n    # 第二天看了全书的(1/4)\n    second_day_fraction = 1/4\n    # 还剩下88页没有看\n    remaining_pages = 88\n    # 总阅读比例 = 第一天比例 + 第二天比例\n    total_read_fraction = first_day_fraction + second_day_fraction\n    # 剩余比例 = 1 - 总阅读比例\n    remaining_fraction = 1 - total_read_fraction\n    # 因为剩余比例对应88页，所以总页数 = 剩余页数 / 剩余比例\n    total_pages = remaining_pages / remaining_fraction\n    # 答案是这本书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "镇海雅乐学校的运动会入场时，全班正好排成相等的6行．小林排在第二行，从前数，她是第5个，从后数她是第3个，这个班共有多少人．", "target": 42.0, "answer": 42.0, "score": 1, "generation": ["def solution():\n    # 全班排成6行\n    num_rows = 6\n    # 小林排在第二行\n    row_position = 2\n    # 从前数，她是第5个\n    front_position = 5\n    # 从后数，她是第3个\n    back_position = 3\n    # 每行的人数 = 从前数的位置 + 从后数的位置 - 1\n    people_per_row = front_position + back_position - 1\n    # 全班的总人数 = 行数 * 每行的人数\n    total_people = num_rows * people_per_row\n    # 答案是全班的总人数\n    result = total_people\n    # 返回答案\n    return result"]}
{"question": "李华读一本故事书，第一天读了全书的(1/5)，第二天读了全书的(2/5)，两天一共读了全书的多少．", "target": 0.6, "answer": 0.6000000000000001, "score": 1, "generation": ["def solution():\n    # 第一天读了全书的(1/5)\n    first_day_fraction = 1/5\n    # 第二天读了全书的(2/5)\n    second_day_fraction = 2/5\n    # 两天一共读的比例 = 第一天读的比例 + 第二天读的比例\n    total_fraction = first_day_fraction + second_day_fraction\n    # 答案是两天一共读的比例\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "六年级有138名学生订杂志，其中有(5/6)的学生订《科学画报》，有(2/3)的学生订《智力大王》．两种读物都订的有多少名学生？", "target": 69.0, "answer": 69.0, "score": 1, "generation": ["def solution():\n    # 六年级有138名学生订杂志\n    total_students = 138\n    # 订《科学画报》的学生比例为(5/6)\n    science_painting_ratio = 5/6\n    # 订《智力大王》的学生比例为(2/3)\n    intelligence_king_ratio = 2/3\n    # 订《科学画报》的学生人数 = 总人数 * 订《科学画报》的比例\n    science_painting_students = total_students * science_painting_ratio\n    # 订《智力大王》的学生人数 = 总人数 * 订《智力大王》的比例\n    intelligence_king_students = total_students * intelligence_king_ratio\n    # 两种读物都订的学生人数 = 订《科学画报》的学生人数 + 订《智力大王》的学生人数 - 总人数\n    both_students = science_painting_students + intelligence_king_students - total_students\n    # 答案是两种读物都订的学生人数\n    result = both_students\n    # 返回答案\n    return result"]}
{"question": "一个数的(4/5)是80，这个数的(3/4)=．", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 一个数的(4/5)是80\n    four_fifths_of_number = 80\n    # 这个数 = 80 / (4/5)\n    number = four_fifths_of_number / (4/5)\n    # 这个数的(3/4) = 这个数 * (3/4)\n    three_fourths_of_number = number * (3/4)\n    # 答案是这个数的(3/4)\n    result = three_fourths_of_number\n    # 返回答案\n    return result"]}
{"question": "商店原有面粉300吨，又运来240吨，如果这些面粉9天卖完，平均每天卖面粉多少吨？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 商店原有面粉300吨\n    initial_flour = 300\n    # 又运来240吨\n    additional_flour = 240\n    # 总面粉 = 原有面粉 + 运来的面粉\n    total_flour = initial_flour + additional_flour\n    # 这些面粉9天卖完\n    days_to_sell = 9\n    # 平均每天卖的面粉 = 总面粉 / 卖完的天数\n    average_daily_sale = total_flour / days_to_sell\n    # 答案是平均每天卖的面粉\n    result = average_daily_sale\n    # 返回答案\n    return result"]}
{"question": "某校初3英语口试达到优秀标准的有60人占总人数的30%，在扇形统计图中，表示良好等级的占50%，良好等级的有多少人．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 英语口试达到优秀标准的有60人，占总人数的30%\n    excellent_count = 60\n    excellent_percentage = 30\n    # 总人数 = 优秀人数 / 优秀比例\n    total_count = excellent_count / (excellent_percentage / 100)\n    # 扇形统计图中，表示良好等级的占50%\n    good_percentage = 50\n    # 良好等级的人数 = 总人数 * 良好比例\n    good_count = total_count * (good_percentage / 100)\n    # 答案是良好等级的人数\n    result = good_count\n    # 返回答案\n    return result"]}
{"question": "一种电视机，原来售价1200元，现在的售价是1080元．降价百分之几？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 电视机原来的售价是1200元\n    original_price = 1200\n    # 电视机现在的售价是1080元\n    current_price = 1080\n    # 降价金额 = 原价 - 现价\n    price_difference = original_price - current_price\n    # 降价百分比 = (降价金额 / 原价) * 100\n    percentage_decrease = (price_difference / original_price) * 100\n    # 答案是降价百分比\n    result = percentage_decrease\n    # 返回答案\n    return result"]}
{"question": "一种洗衣机现在每台售价3000元，比原来降低了750元，现在每台的售价是原价的百分之几？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 现在每台洗衣机的售价为3000元\n    current_price = 3000\n    # 比原来降低了750元\n    price_reduction = 750\n    # 原价 = 现价 + 降低的价格\n    original_price = current_price + price_reduction\n    # 现在每台的售价是原价的百分之几 = (现价 / 原价) * 100\n    percentage = (current_price / original_price) * 100\n    # 答案是现在每台的售价是原价的百分之几\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "神机妙算：650000/125/2/5/8=．", "target": 65.0, "answer": 65.0, "score": 1, "generation": ["def solution():\n    # 初始数值为650000\n    initial_value = 650000\n    # 第一次除以125\n    step1 = initial_value / 125\n    # 第二次除以2\n    step2 = step1 / 2\n    # 第三次除以5\n    step3 = step2 / 5\n    # 第四次除以8\n    step4 = step3 / 8\n    # 答案是最终的计算结果\n    result = step4\n    # 返回答案\n    return result"]}
{"question": "小小超市新进25瓶苹果酱，草莓酱比苹果酱的2倍多5瓶．草莓酱有多少瓶？", "target": 55.0, "answer": 55.0, "score": 1, "generation": ["def solution():\n    # 苹果酱的数量为25瓶\n    apple_jars = 25\n    # 草莓酱比苹果酱的2倍多5瓶\n    strawberry_jars = 2 * apple_jars + 5\n    # 答案是草莓酱的数量\n    result = strawberry_jars\n    # 返回答案\n    return result"]}
{"question": "有3件上衣、2条裤子、1条裙子，要配成一套衣服有多少种不同的配法．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 上衣的数量是3件\n    num_shirts = 3\n    # 裤子的数量是2条\n    num_pants = 2\n    # 裙子的数量是1条\n    num_skirts = 1\n    # 一套衣服可以由上衣和裤子组成，或者上衣和裙子组成\n    # 上衣和裤子的配法 = 上衣数量 * 裤子数量\n    shirt_pants_combinations = num_shirts * num_pants\n    # 上衣和裙子的配法 = 上衣数量 * 裙子数量\n    shirt_skirts_combinations = num_shirts * num_skirts\n    # 总配法 = 上衣和裤子的配法 + 上衣和裙子的配法\n    total_combinations = shirt_pants_combinations + shirt_skirts_combinations\n    # 答案是总配法\n    result = total_combinations\n    # 返回答案\n    return result"]}
{"question": "一本童话书有48页，每页25行，每行20个字，这本故事书共多少个字？", "target": 24000.0, "answer": 24000.0, "score": 1, "generation": ["def solution():\n    # 童话书的总页数为48页\n    total_pages = 48\n    # 每页有25行\n    lines_per_page = 25\n    # 每行有20个字\n    words_per_line = 20\n    # 每页的字数 = 每页的行数 * 每行的字数\n    words_per_page = lines_per_page * words_per_line\n    # 童话书的总字数 = 总页数 * 每页的字数\n    total_words = total_pages * words_per_page\n    # 答案是童话书的总字数\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "食品商店运来鸡蛋和鸭蛋共14筐准备节日供应，其中鸭蛋占总筐数的(3/7)，因供应需要，又运来几筐鸭蛋，这时鸭蛋占总筐数的50%．后来又运来多少筐鸭蛋？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 初始总筐数为14筐\n    initial_total_baskets = 14\n    # 鸭蛋占总筐数的(3/7)\n    duck_egg_fraction = 3/7\n    # 初始鸭蛋筐数 = 总筐数 * 鸭蛋比例\n    initial_duck_egg_baskets = initial_total_baskets * duck_egg_fraction\n    # 设后来又运来x筐鸭蛋\n    # 新的鸭蛋筐数 = 初始鸭蛋筐数 + x\n    # 新的总筐数 = 初始总筐数 + x\n    # 根据题意，新的鸭蛋筐数占总筐数的50%\n    # 所以 (initial_duck_egg_baskets + x) / (initial_total_baskets + x) = 0.5\n    # 解这个方程得到x\n    x = (0.5 * initial_total_baskets - initial_duck_egg_baskets) / (1 - 0.5)\n    # 答案是后来又运来的鸭蛋筐数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "祝飞办了一张手抄报．“趣味数学”栏目大约占了手抄报的(1/8)，“学海拾贝”栏目大约占了手抄报的(1/4)，“古今中外”栏目比“趣味数学”和“学海拾贝”两个栏目的版面少占手抄报的(2/32)，“古今中外”栏目占了手抄报的几分之几？", "target": 0.3125, "answer": 0.3125, "score": 1, "generation": ["def solution():\n    # “趣味数学”栏目占手抄报的(1/8)\n    fun_math_fraction = 1/8\n    # “学海拾贝”栏目占手抄报的(1/4)\n    knowledge_fraction = 1/4\n    # “古今中外”栏目比“趣味数学”和“学海拾贝”两个栏目的版面少占手抄报的(2/32)\n    difference_fraction = 2/32\n    # “趣味数学”和“学海拾贝”两个栏目的版面总和\n    total_fraction = fun_math_fraction + knowledge_fraction\n    # “古今中外”栏目占手抄报的比例 = 总和 - 差\n    history_fraction = total_fraction - difference_fraction\n    # 答案是“古今中外”栏目占手抄报的比例\n    result = history_fraction\n    # 返回答案\n    return result"]}
{"question": "修路队原计划25天修一条路，每天修480米，结果比原计划提前1天完成任务，实际每天修多少米？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 原计划25天修一条路\n    planned_days = 25\n    # 原计划每天修480米\n    planned_daily_length = 480\n    # 实际比原计划提前1天完成任务\n    days_saved = 1\n    # 实际工作天数 = 原计划天数 - 提前的天数\n    actual_days = planned_days - days_saved\n    # 总路长 = 原计划天数 * 原计划每天修的长度\n    total_length = planned_days * planned_daily_length\n    # 实际每天修的长度 = 总路长 / 实际工作天数\n    actual_daily_length = total_length / actual_days\n    # 答案是实际每天修的长度\n    result = actual_daily_length\n    # 返回答案\n    return result"]}
{"question": "图书室有故事书315本，比科技书少129本，两种书共有多少本？", "target": 759.0, "answer": 759.0, "score": 1, "generation": ["def solution():\n    # 故事书的数量为315本\n    num_story_books = 315\n    # 科技书比故事书多129本\n    num_science_books = num_story_books + 129\n    # 两种书的总数量 = 故事书的数量 + 科技书的数量\n    total_books = num_story_books + num_science_books\n    # 答案是两种书的总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一根绳子，截去20%以后，再接上6m，结果比原来的绳子长1.5m，这根绳子原来长多少米？", "target": 22.5, "answer": 22.5, "score": 1, "generation": ["def solution():\n    # 设绳子原来的长度为x米\n    # 截去20%以后，绳子的长度为x * (1 - 0.2) = 0.8x\n    # 再接上6m，绳子的长度为0.8x + 6\n    # 结果比原来的绳子长1.5m，所以0.8x + 6 = x + 1.5\n    # 解这个方程可以得到x的值\n    # 0.8x + 6 = x + 1.5\n    # 6 - 1.5 = x - 0.8x\n    # 4.5 = 0.2x\n    # x = 4.5 / 0.2\n    x = 4.5 / 0.2\n    # 答案是绳子的原长\n    result = x\n    # 返回答案\n    return result"]}
{"question": "妈妈在超市买1袋大米和3千克白糖一共用去42元．已知这袋大米的价钱是27元，每千克白糖多少元？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 大米的价格是27元\n    rice_price = 27\n    # 白糖的数量是3千克\n    sugar_quantity = 3\n    # 总花费是42元\n    total_cost = 42\n    # 白糖的总价格 = 总花费 - 大米的价格\n    sugar_total_price = total_cost - rice_price\n    # 每千克白糖的价格 = 白糖的总价格 / 白糖的数量\n    sugar_price_per_kg = sugar_total_price / sugar_quantity\n    # 答案是每千克白糖的价格\n    result = sugar_price_per_kg\n    # 返回答案\n    return result"]}
{"question": "汽车从武平到龙岩，去时用了3小时，返回用了2小时，往返平均速度=．", "target": 0.4, "answer": "", "score": 0, "generation": ["def solution():\n    # 假设武平到龙岩的距离为D千米\n    # 去时用了3小时\n    time_going = 3\n    # 返回用了2小时\n    time_returning = 2\n    # 往返总距离 = 2D\n    total_distance = 2 * D\n    # 往返总时间 = 去时时间 + 返回时间\n    total_time = time_going + time_returning\n    # 平均速度 = 总距离 / 总时间\n    average_speed = total_distance / total_time\n    # 答案是往返平均速度\n    result = average_speed\n    # 返回答案\n    return result"]}
{"question": "清明前，四年级（1）班的同学决定自己做小白花去祭扫烈士墓，他们分成6个小组，每小组9人，共做了864朵小白花，平均每位同学做了多少朵小白花？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 分成6个小组\n    num_groups = 6\n    # 每小组9人\n    num_students_per_group = 9\n    # 共做了864朵小白花\n    total_flowers = 864\n    # 总人数 = 小组数 * 每小组人数\n    total_students = num_groups * num_students_per_group\n    # 平均每位同学做的花朵数 = 总花朵数 / 总人数\n    flowers_per_student = total_flowers / total_students\n    # 答案是平均每位同学做的花朵数\n    result = flowers_per_student\n    # 返回答案\n    return result"]}
{"question": "把576瓶可乐平均装在24个盒子中，每盒售价是48元，平均每瓶售价多少元？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 可乐的总瓶数为576瓶\n    total_bottles = 576\n    # 盒子的数量为24个\n    num_boxes = 24\n    # 每盒的售价是48元\n    price_per_box = 48\n    # 每盒中的可乐瓶数 = 总瓶数 / 盒子数量\n    bottles_per_box = total_bottles / num_boxes\n    # 平均每瓶的售价 = 每盒的售价 / 每盒中的可乐瓶数\n    price_per_bottle = price_per_box / bottles_per_box\n    # 答案是平均每瓶的售价\n    result = price_per_bottle\n    # 返回答案\n    return result"]}
{"question": "甲数比乙数的85%多0.8．甲乙两数的和是56.3，乙数=？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 甲乙两数的和是56.3\n    sum_of_numbers = 56.3\n    # 甲数比乙数的85%多0.8\n    # 设乙数为x，则甲数为0.85x + 0.8\n    # 根据题意，x + (0.85x + 0.8) = 56.3\n    # 解方程：1.85x + 0.8 = 56.3\n    # 1.85x = 56.3 - 0.8\n    # 1.85x = 55.5\n    # x = 55.5 / 1.85\n    x = (sum_of_numbers - 0.8) / 1.85\n    # 答案是乙数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一辆汽车4小时行280千米，照这样的速度，5小时行驶多少千米．", "target": 350.0, "answer": 350.0, "score": 1, "generation": ["def solution():\n    # 汽车4小时行驶280千米\n    distance_4h = 280\n    time_4h = 4\n    # 计算汽车的速度 = 距离 / 时间\n    speed = distance_4h / time_4h\n    # 计算5小时行驶的距离 = 速度 * 时间\n    distance_5h = speed * 5\n    # 答案是5小时行驶的距离\n    result = distance_5h\n    # 返回答案\n    return result"]}
{"question": "一批货物，第一次运走它的(1/3)，第二次运走它的(4/9)，这时还剩36吨，这批货物原来有多少吨？", "target": 162.0, "answer": 161.99999999999991, "score": 1, "generation": ["def solution():\n    # 第一次运走货物的(1/3)\n    first_transport_fraction = 1/3\n    # 第二次运走货物的(4/9)\n    second_transport_fraction = 4/9\n    # 剩余货物为36吨\n    remaining_goods = 36\n    # 总运走比例 = 第一次运走比例 + 第二次运走比例\n    total_transport_fraction = first_transport_fraction + second_transport_fraction\n    # 剩余比例 = 1 - 总运走比例\n    remaining_fraction = 1 - total_transport_fraction\n    # 因为剩余比例对应36吨，所以原来货物总量 = 剩余货物 / 剩余比例\n    original_goods = remaining_goods / remaining_fraction\n    # 答案是这批货物原来的总量\n    result = original_goods\n    # 返回答案\n    return result"]}
{"question": "125与43的和被239与197的差除，商=？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 第一个数是125\n    num1 = 125\n    # 第二个数是43\n    num2 = 43\n    # 第三个数是239\n    num3 = 239\n    # 第四个数是197\n    num4 = 197\n    # 125与43的和\n    sum_num1_num2 = num1 + num2\n    # 239与197的差\n    diff_num3_num4 = num3 - num4\n    # 商 = 和 / 差\n    quotient = sum_num1_num2 / diff_num3_num4\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一辆客车从A地开往B地，行了全程的80%，这时距B地52千米．A、B两地相距多少千米？", "target": 260.0, "answer": 260.00000000000006, "score": 1, "generation": ["def solution():\n    # 客车已经行驶了全程的80%\n    distance_traveled_percentage = 0.8\n    # 剩余距离为52千米\n    remaining_distance = 52\n    # 剩余距离占总距离的20%\n    remaining_percentage = 1 - distance_traveled_percentage\n    # 总距离 = 剩余距离 / 剩余距离占总距离的百分比\n    total_distance = remaining_distance / remaining_percentage\n    # 答案是A、B两地相距的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "公共汽车上原有一些人，又上来25人，然后再下去了8人，这时还剩34人．公共汽车上原来有多少人？", "target": 17.0, "answer": 17.0, "score": 1, "generation": ["def solution():\n    # 公共汽车上原有一些人，设为x\n    # 又上来25人\n    people_boarding = 25\n    # 然后下去了8人\n    people_leaving = 8\n    # 这时还剩34人\n    remaining_people = 34\n    # 根据题意，x + 25 - 8 = 34\n    # 解这个方程得到x = 34 + 8 - 25\n    original_people = remaining_people + people_leaving - people_boarding\n    # 答案是公共汽车上原来的人数\n    result = original_people\n    # 返回答案\n    return result"]}
{"question": "猴子和大象的年龄加起来一共22岁，再过6年，猴子和大象的年龄加起来共多少岁．", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 猴子和大象的年龄加起来一共22岁\n    current_total_age = 22\n    # 再过6年\n    years_later = 6\n    # 因为猴子和大象都会增加6岁，所以总共增加的年龄 = 2 * 6\n    total_age_increase = 2 * years_later\n    # 6年后的总年龄 = 当前总年龄 + 总共增加的年龄\n    future_total_age = current_total_age + total_age_increase\n    # 答案是6年后的总年龄\n    result = future_total_age\n    # 返回答案\n    return result"]}
{"question": "一条路长200米，在路的一旁从头至尾每隔5米植一棵树，一共要植多少棵？", "target": 41.0, "answer": 41.0, "score": 1, "generation": ["def solution():\n    # 路的总长度为200米\n    total_length = 200\n    # 每隔5米植一棵树\n    interval = 5\n    # 因为从头至尾每隔5米植一棵树，所以树的数量 = 总长度 / 间隔 + 1\n    num_trees = (total_length / interval) + 1\n    # 答案是一共要植的树的数量\n    result = num_trees\n    # 返回答案\n    return result"]}
{"question": "一种服装降价20%后售价为84元，原来的售价=多少元？", "target": 105.0, "answer": 105.0, "score": 1, "generation": ["def solution():\n    # 降价后的售价为84元\n    discounted_price = 84\n    # 降价比例为20%\n    discount_rate = 0.2\n    # 原价 = 降价后的售价 / (1 - 降价比例)\n    original_price = discounted_price / (1 - discount_rate)\n    # 答案是原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "有-根木头，要锯成13段．每锯开一处需要5分（钟），全部锯完一共要多少分？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 木头要锯成13段\n    num_segments = 13\n    # 每锯开一处需要5分钟\n    time_per_cut = 5\n    # 要锯成13段需要锯的次数 = 13 - 1\n    num_cuts = num_segments - 1\n    # 全部锯完需要的时间 = 锯的次数 * 每锯开一处的时间\n    total_time = num_cuts * time_per_cut\n    # 答案是全部锯完需要的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "从540中连续减去多少次6，结果得0．", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 初始数字为540\n    initial_number = 540\n    # 每次减去的数字为6\n    subtract_number = 6\n    # 需要减去的次数 = 初始数字 / 每次减去的数字\n    times_to_subtract = initial_number / subtract_number\n    # 答案是减去的次数\n    result = times_to_subtract\n    # 返回答案\n    return result"]}
{"question": "刘叔叔带700元钱买化肥，买了16袋化肥，剩60元，每袋化肥的价钱=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 刘叔叔带的钱为700元\n    total_money = 700\n    # 买了16袋化肥\n    num_fertilizers = 16\n    # 剩余的钱为60元\n    remaining_money = 60\n    # 花费的钱 = 总钱数 - 剩余的钱\n    money_spent = total_money - remaining_money\n    # 每袋化肥的价格 = 花费的钱 / 化肥的袋数\n    price_per_fertilizer = money_spent / num_fertilizers\n    # 答案是每袋化肥的价格\n    result = price_per_fertilizer\n    # 返回答案\n    return result"]}
{"question": "光明小学五年级有180名学生，六年级学生人数是五年级的(5/6)，又是全校人数的(2/11)，光明小学全校有多少人？", "target": 825.0, "answer": 825.0, "score": 1, "generation": ["def solution():\n    # 五年级的学生人数为180人\n    num_fifth_grade = 180\n    # 六年级学生人数是五年级的(5/6)\n    num_sixth_grade = (5/6) * num_fifth_grade\n    # 六年级学生人数又是全校人数的(2/11)\n    fraction_of_total = 2/11\n    # 全校人数 = 六年级学生人数 / (2/11)\n    total_students = num_sixth_grade / fraction_of_total\n    # 答案是光明小学全校的人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一个球拍的价格是43.56元，足球的价格是球拍的1.5倍多2元，一个足球多少元？", "target": 67.34, "answer": 67.34, "score": 1, "generation": ["def solution():\n    # 球拍的价格是43.56元\n    racket_price = 43.56\n    # 足球的价格是球拍的1.5倍多2元\n    football_price_multiplier = 1.5\n    additional_cost = 2\n    # 足球的价格 = 球拍价格 * 1.5 + 2\n    football_price = racket_price * football_price_multiplier + additional_cost\n    # 答案是足球的价格\n    result = football_price\n    # 返回答案\n    return result"]}
{"question": "王师傅9月份的工资是3200元，按照个人所得税法规定，个人的月收入超过3000元的部分，应按照5%的税率征收个人所得税．王师傅这个月应缴纳个人所得税多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 王师傅9月份的工资是3200元\n    salary = 3200\n    # 个人所得税起征点是3000元\n    tax_threshold = 3000\n    # 超过起征点的部分需要缴纳5%的个人所得税\n    tax_rate = 0.05\n    # 应纳税所得额 = 工资 - 起征点\n    taxable_income = salary - tax_threshold\n    # 应缴纳的个人所得税 = 应纳税所得额 * 税率\n    income_tax = taxable_income * tax_rate\n    # 答案是王师傅这个月应缴纳的个人所得税\n    result = income_tax\n    # 返回答案\n    return result"]}
{"question": "甲、乙两队一起检修一条公路，共用7天检修完．甲队检修了840米，乙队检修了1050米，甲队比乙队平均每天少检修多少米？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 甲队检修了840米\n    team_a_total = 840\n    # 乙队检修了1050米\n    team_b_total = 1050\n    # 共用7天检修完\n    total_days = 7\n    # 甲队平均每天检修的米数 = 甲队总检修米数 / 检修天数\n    team_a_daily = team_a_total / total_days\n    # 乙队平均每天检修的米数 = 乙队总检修米数 / 检修天数\n    team_b_daily = team_b_total / total_days\n    # 甲队比乙队平均每天少检修的米数 = 乙队平均每天检修米数 - 甲队平均每天检修米数\n    daily_difference = team_b_daily - team_a_daily\n    # 答案是甲队比乙队平均每天少检修的米数\n    result = daily_difference\n    # 返回答案\n    return result"]}
{"question": "计算：32/(16/25)*5=．", "target": 250.0, "answer": 250.0, "score": 1, "generation": ["def solution():\n    # 计算32/(16/25)*5\n    # 首先计算括号内的16/25\n    division_inside_parentheses = 16 / 25\n    # 然后计算32除以括号内的结果\n    division_result = 32 / division_inside_parentheses\n    # 最后将结果乘以5\n    final_result = division_result * 5\n    # 答案是最终的计算结果\n    result = final_result\n    # 返回答案\n    return result"]}
{"question": "春松果园有梨树460棵，苹果树比梨树多25%，果园里有苹果树多少棵？", "target": 575.0, "answer": 575.0, "score": 1, "generation": ["def solution():\n    # 梨树的数量为460棵\n    num_pear_trees = 460\n    # 苹果树比梨树多25%\n    apple_tree_increase = 0.25\n    # 苹果树的数量 = 梨树的数量 * (1 + 增加比例)\n    num_apple_trees = num_pear_trees * (1 + apple_tree_increase)\n    # 答案是苹果树的数量\n    result = num_apple_trees\n    # 返回答案\n    return result"]}
{"question": "学校李老师带8750元去购买体育用品，其中买篮球用去(2/5)，买排球用去(3/7)，其余的买足球．买足球用了多少元钱？", "target": 1500.0, "answer": 1500.0, "score": 1, "generation": ["def solution():\n    # 李老师带的总金额为8750元\n    total_money = 8750\n    # 买篮球用去(2/5)\n    basketball_fraction = 2/5\n    # 买排球用去(3/7)\n    volleyball_fraction = 3/7\n    # 买篮球用的金额 = 总金额 * 篮球比例\n    basketball_cost = total_money * basketball_fraction\n    # 买排球用的金额 = 总金额 * 排球比例\n    volleyball_cost = total_money * volleyball_fraction\n    # 买足球用的金额 = 总金额 - 篮球金额 - 排球金额\n    football_cost = total_money - basketball_cost - volleyball_cost\n    # 答案是买足球用的金额\n    result = football_cost\n    # 返回答案\n    return result"]}
{"question": "一个街心花园占地(5/8)公顷，其中草坪占(2/5)，花圃占地(1/8)公顷，其余的是人行道．人行道的面积=多少公顷？", "target": 0.25, "answer": 0.25, "score": 1, "generation": ["def solution():\n    # 街心花园的总面积为(5/8)公顷\n    total_area = 5/8\n    # 草坪占总面积的(2/5)\n    lawn_fraction = 2/5\n    # 花圃占地(1/8)公顷\n    flower_area = 1/8\n    # 草坪的面积 = 总面积 * 草坪的比例\n    lawn_area = total_area * lawn_fraction\n    # 人行道的面积 = 总面积 - 草坪的面积 - 花圃的面积\n    sidewalk_area = total_area - lawn_area - flower_area\n    # 答案是人行道的面积\n    result = sidewalk_area\n    # 返回答案\n    return result"]}
{"question": "一辆公共汽车出发时，车上有12个乘客，到了第一站，下去了2个乘客，上来了6个乘客；到了第二站，下去了3个乘客，上来了4个乘客，这时车上共有多少个乘客？", "target": 17.0, "answer": 17.0, "score": 1, "generation": ["def solution():\n    # 初始乘客数量为12人\n    initial_passengers = 12\n    # 第一站下车2人\n    first_station_exit = 2\n    # 第一站上车6人\n    first_station_enter = 6\n    # 第一站后的乘客数量 = 初始乘客数量 - 下车人数 + 上车人数\n    after_first_station = initial_passengers - first_station_exit + first_station_enter\n    # 第二站下车3人\n    second_station_exit = 3\n    # 第二站上车4人\n    second_station_enter = 4\n    # 第二站后的乘客数量 = 第一站后的乘客数量 - 下车人数 + 上车人数\n    after_second_station = after_first_station - second_station_exit + second_station_enter\n    # 答案是第二站后的乘客数量\n    result = after_second_station\n    # 返回答案\n    return result"]}
{"question": "张叔叔在书店买了两本书．一本28.5元，另一本14.4元．他付出50元，应找回多少元？", "target": 7.1, "answer": 7.100000000000001, "score": 1, "generation": ["def solution():\n    # 第一本书的价格是28.5元\n    price_book1 = 28.5\n    # 第二本书的价格是14.4元\n    price_book2 = 14.4\n    # 张叔叔付出的金额是50元\n    amount_paid = 50\n    # 两本书的总价格 = 第一本书的价格 + 第二本书的价格\n    total_price = price_book1 + price_book2\n    # 应找回的金额 = 付出的金额 - 总价格\n    change = amount_paid - total_price\n    # 答案是应找回的金额\n    result = change\n    # 返回答案\n    return result"]}
{"question": "一批煤用去25%，还剩48吨，这批煤共有多少吨？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 用去的煤的比例为25%\n    used_percentage = 0.25\n    # 剩余的煤为48吨\n    remaining_coal = 48\n    # 因为用去了25%，所以剩余的煤占总量的75%\n    remaining_percentage = 1 - used_percentage\n    # 这批煤的总量 = 剩余的煤 / 剩余的比例\n    total_coal = remaining_coal / remaining_percentage\n    # 答案是这批煤的总量\n    result = total_coal\n    # 返回答案\n    return result"]}
{"question": "有一列火车以每小时140千米的速度离开洛杉矶直奔纽约，同时，另一辆火车以每小时160千米的速度从纽约开往洛杉矶．如果有一只鸟以每小时30千米的速度和两列火车同时启动，从洛杉矶出发，碰到另一列火车后返回，往返在两列火车之间，直到两列火车相遇为止．已知洛杉矶到纽约的铁路长4500千米，请问：这只小鸟飞行了多少千米？", "target": 450.0, "answer": 450.0, "score": 1, "generation": ["def solution():\n    # 洛杉矶到纽约的铁路长度为4500千米\n    distance = 4500\n    # 第一辆火车的速度为每小时140千米\n    speed_train1 = 140\n    # 第二辆火车的速度为每小时160千米\n    speed_train2 = 160\n    # 小鸟的速度为每小时30千米\n    speed_bird = 30\n    # 两辆火车相向而行，相对速度为两辆火车速度之和\n    relative_speed_trains = speed_train1 + speed_train2\n    # 两辆火车相遇的时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed_trains\n    # 小鸟在两辆火车相遇前一直在飞行，所以小鸟飞行的距离 = 小鸟的速度 * 两辆火车相遇的时间\n    distance_bird = speed_bird * time_to_meet\n    # 答案是小鸟飞行的距离\n    result = distance_bird\n    # 返回答案\n    return result"]}
{"question": "学校在小红和小明两家之间的一段公路边．放学后，两人同时向各自家里走去．小明每小时走(18/5)千米，小红每小时走3千米，(5/12)小时后两人同时到家．两家相距多少千米？", "target": 2.75, "answer": 2.75, "score": 1, "generation": ["def solution():\n    # 小明的速度是每小时走(18/5)千米\n    speed_ming = 18/5\n    # 小红的速度是每小时走3千米\n    speed_hong = 3\n    # 两人同时到家的时间是(5/12)小时\n    time_to_home = 5/12\n    # 小明走的距离 = 小明的速度 * 时间\n    distance_ming = speed_ming * time_to_home\n    # 小红走的距离 = 小红的速度 * 时间\n    distance_hong = speed_hong * time_to_home\n    # 两家之间的距离 = 小明走的距离 + 小红走的距离\n    total_distance = distance_ming + distance_hong\n    # 答案是两家之间的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某市500名外语教师，懂英语或德语，其中懂英语的有375人，既懂英语又懂德语的有100人，那么懂德语的教师有多少人．", "target": 225.0, "answer": 225.0, "score": 1, "generation": ["def solution():\n    # 外语教师总数为500人\n    total_teachers = 500\n    # 懂英语的教师有375人\n    english_teachers = 375\n    # 既懂英语又懂德语的教师有100人\n    both_languages_teachers = 100\n    # 懂德语的教师人数 = 总教师人数 - 懂英语的教师人数 + 既懂英语又懂德语的教师人数\n    german_teachers = total_teachers - english_teachers + both_languages_teachers\n    # 答案是懂德语的教师人数\n    result = german_teachers\n    # 返回答案\n    return result"]}
{"question": "一个数除以23商15余21，这个数=．", "target": 366.0, "answer": 366.0, "score": 1, "generation": ["def solution():\n    # 商为15\n    quotient = 15\n    # 余数为21\n    remainder = 21\n    # 除数为23\n    divisor = 23\n    # 根据除法公式：被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "在一块长18米，宽12米的长方形果园里种果树，平均每棵占地2平方米，这块果园能种果树多少棵？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 长方形果园的长为18米\n    length = 18\n    # 长方形果园的宽为12米\n    width = 12\n    # 每棵果树占地2平方米\n    area_per_tree = 2\n    # 果园的总面积 = 长 * 宽\n    total_area = length * width\n    # 能种的果树数量 = 总面积 / 每棵果树占地面积\n    num_trees = total_area / area_per_tree\n    # 答案是能种的果树数量\n    result = num_trees\n    # 返回答案\n    return result"]}
{"question": "在道路的一侧植树，每隔5米植一棵，从起点到终点共植10棵，这条路有多少米．", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 每隔5米植一棵树\n    distance_between_trees = 5\n    # 从起点到终点共植10棵树\n    total_trees = 10\n    # 因为植树间隔是5米，所以总距离 = (树的数量 - 1) * 间隔距离\n    total_distance = (total_trees - 1) * distance_between_trees\n    # 答案是这条路的长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "现在每件衣服的成本比过去降低了20%，是把多少看作单位“1”，现在每件衣服的成本是过去的多少%．", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 把过去的成本看作单位“1”\n    past_cost = 1\n    # 现在每件衣服的成本比过去降低了20%\n    cost_reduction = 0.2\n    # 现在每件衣服的成本 = 过去的成本 * (1 - 成本降低比例)\n    current_cost = past_cost * (1 - cost_reduction)\n    # 现在每件衣服的成本是过去的多少%\n    percentage_of_past = current_cost * 100\n    # 答案是现在每件衣服的成本是过去的多少%\n    result = percentage_of_past\n    # 返回答案\n    return result"]}
{"question": "同学们参加植树活动．男生植了40棵，女生植了50棵．男生比女生少植百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 男生植了40棵\n    trees_planted_by_boys = 40\n    # 女生植了50棵\n    trees_planted_by_girls = 50\n    # 男生比女生少植的树数 = 女生植的树数 - 男生植的树数\n    difference = trees_planted_by_girls - trees_planted_by_boys\n    # 男生比女生少植的百分比 = (少植的树数 / 女生植的树数) * 100\n    percentage_difference = (difference / trees_planted_by_girls) * 100\n    # 答案是男生比女生少植的百分比\n    result = percentage_difference\n    # 返回答案\n    return result"]}
{"question": "甲数的25%是1.25，乙数是60的20%，乙数是甲数的百分之几？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 甲数的25%是1.25\n    percentage_a = 25\n    value_a_percentage = 1.25\n    # 计算甲数 = 1.25 / (25%)\n    number_a = value_a_percentage / (percentage_a / 100)\n    # 乙数是60的20%\n    percentage_b = 20\n    number_b = 60 * (percentage_b / 100)\n    # 乙数是甲数的百分之几 = (乙数 / 甲数) * 100\n    result_percentage = (number_b / number_a) * 100\n    # 答案是乙数是甲数的百分之几\n    result = result_percentage\n    # 返回答案\n    return result"]}
{"question": "新建一条高速公路，已建成240千米，剩下的比已建成的2倍还多8千米，这条新建的高速公路全长多少千米？", "target": 728.0, "answer": 728.0, "score": 1, "generation": ["def solution():\n    # 已建成的高速公路长度为240千米\n    built_length = 240\n    # 剩下的比已建成的2倍还多8千米\n    remaining_length = 2 * built_length + 8\n    # 高速公路的全长 = 已建成的长度 + 剩下的长度\n    total_length = built_length + remaining_length\n    # 答案是高速公路的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "一堆煤平均每天烧10吨可以烧18天，如果平均每天烧12吨，可以烧多少天？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 平均每天烧10吨可以烧18天\n    daily_burn_rate1 = 10\n    days1 = 18\n    # 计算总煤量 = 每天烧的量 * 天数\n    total_coal = daily_burn_rate1 * days1\n    # 如果平均每天烧12吨\n    daily_burn_rate2 = 12\n    # 可以烧的天数 = 总煤量 / 新的每天烧的量\n    days2 = total_coal / daily_burn_rate2\n    # 答案是可以烧的天数\n    result = days2\n    # 返回答案\n    return result"]}
{"question": "去年某校参加数学奥林匹克竞赛的学生中，女生占总数的(1/4)，今年全校参赛的学生增加了20%，女生占总数的(1/3)，与去年相比，今年参赛的女生人数增加了多少%．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 去年女生占总数的1/4\n    last_year_girls_ratio = 1/4\n    # 今年全校参赛学生增加了20%\n    total_students_increase = 0.2\n    # 今年女生占总数的1/3\n    this_year_girls_ratio = 1/3\n    # 假设去年总参赛人数为100人（方便计算百分比）\n    last_year_total = 100\n    # 去年女生人数 = 总人数 * 女生比例\n    last_year_girls = last_year_total * last_year_girls_ratio\n    # 今年总参赛人数 = 去年总人数 * (1 + 增加比例)\n    this_year_total = last_year_total * (1 + total_students_increase)\n    # 今年女生人数 = 今年总人数 * 今年女生比例\n    this_year_girls = this_year_total * this_year_girls_ratio\n    # 女生人数增加的数量 = 今年女生人数 - 去年女生人数\n    girls_increase = this_year_girls - last_year_girls\n    # 女生人数增加的百分比 = (增加的数量 / 去年女生人数) * 100\n    girls_increase_percent = (girls_increase / last_year_girls) * 100\n    # 答案是女生人数增加的百分比\n    result = girls_increase_percent\n    # 返回答案\n    return result"]}
{"question": "特快列车1小时大约行160千米，12小时大约行多少千米．", "target": 1920.0, "answer": 1920.0, "score": 1, "generation": ["def solution():\n    # 特快列车的速度为每小时160千米\n    speed = 160\n    # 行驶时间为12小时\n    time = 12\n    # 行驶距离 = 速度 * 时间\n    distance = speed * time\n    # 答案是行驶距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "洛阳市民在隋唐城遗址公园举行民间艺术展，其中展出剪纸作品128件，比书法作品的(9/11)少16件，这次共展出书法作品多少件？", "target": 176.0, "answer": 176.0, "score": 1, "generation": ["def solution():\n    # 展出的剪纸作品数量为128件\n    num_paper_cut = 128\n    # 剪纸作品比书法作品的(9/11)少16件\n    fraction = 9/11\n    difference = 16\n    # 设书法作品数量为x，根据题意有：128 = (9/11)x - 16\n    # 解这个方程：(9/11)x = 128 + 16\n    total = num_paper_cut + difference\n    # x = total / (9/11)\n    num_calligraphy = total / fraction\n    # 答案是书法作品的数量\n    result = num_calligraphy\n    # 返回答案\n    return result"]}
{"question": "计算：0.5-(1/3)+(1/4)=．", "target": 0.4166666666666667, "answer": 0.4166666666666667, "score": 1, "generation": ["def solution():\n    # 第一个数是0.5\n    num1 = 0.5\n    # 第二个数是(1/3)\n    num2 = 1/3\n    # 第三个数是(1/4)\n    num3 = 1/4\n    # 计算0.5 - (1/3) + (1/4)\n    result = num1 - num2 + num3\n    # 返回答案\n    return result"]}
{"question": "一个书架有上、下两层，共放着128本图书．上、下两层图书本数的比是5：3，上层比下层多多少本图书？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 书架共有128本图书\n    total_books = 128\n    # 上、下两层图书本数的比是5：3\n    ratio_upper = 5\n    ratio_lower = 3\n    # 总比例 = 上层比例 + 下层比例\n    total_ratio = ratio_upper + ratio_lower\n    # 上层图书数量 = 总图书数量 * (上层比例 / 总比例)\n    upper_books = total_books * (ratio_upper / total_ratio)\n    # 下层图书数量 = 总图书数量 * (下层比例 / 总比例)\n    lower_books = total_books * (ratio_lower / total_ratio)\n    # 上层比下层多的图书数量 = 上层图书数量 - 下层图书数量\n    difference = upper_books - lower_books\n    # 答案是上层比下层多的图书数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距1500米，小红与小明从两地同时相向而行，10分钟后相遇．小红每分钟走70米，小明每分钟走多少米？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 甲乙两地相距1500米\n    distance = 1500\n    # 小红与小明相遇的时间为10分钟\n    time_to_meet = 10\n    # 小红每分钟走70米\n    speed_hong = 70\n    # 因为两人相向而行，两人的相对速度 = 距离 / 相遇时间\n    relative_speed = distance / time_to_meet\n    # 小明的速度 = 相对速度 - 小红的速度\n    speed_ming = relative_speed - speed_hong\n    # 答案是小明每分钟走的速度\n    result = speed_ming\n    # 返回答案\n    return result"]}
{"question": "一本280页的故事书，小红第一天看了20%，第二天看了30%，还剩多少页没看？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为280页\n    total_pages = 280\n    # 第一天看了20%\n    read_fraction_first_day = 0.2\n    # 第二天看了30%\n    read_fraction_second_day = 0.3\n    # 第一天看了的页数 = 总页数 * 第一天看的比例\n    pages_read_first_day = total_pages * read_fraction_first_day\n    # 第二天看了的页数 = 总页数 * 第二天看的比例\n    pages_read_second_day = total_pages * read_fraction_second_day\n    # 剩余未看的页数 = 总页数 - 第一天看的页数 - 第二天看的页数\n    remaining_pages = total_pages - pages_read_first_day - pages_read_second_day\n    # 答案是剩余未看的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "(6/5)吨化肥平均分成3份，每份应该=多少吨．", "target": 0.4, "answer": 0.39999999999999997, "score": 1, "generation": ["def solution():\n    # 化肥的总重量为(6/5)吨\n    total_fertilizer = 6/5\n    # 化肥需要平均分成3份\n    num_parts = 3\n    # 每份的重量 = 总重量 / 份数\n    weight_per_part = total_fertilizer / num_parts\n    # 答案是每份的重量\n    result = weight_per_part\n    # 返回答案\n    return result"]}
{"question": "甲乙两辆汽车同时从车站向相反方向开出，8小时后，甲车与乙车相距920千米，已知甲车每小时行55千米，乙车每小时行多少千米？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 两车相距920千米\n    distance = 920\n    # 行驶时间为8小时\n    time = 8\n    # 甲车的速度是每小时55千米\n    speed_a = 55\n    # 因为两车向相反方向行驶，所以相对速度 = 甲车速度 + 乙车速度\n    # 相对速度 = 距离 / 时间\n    relative_speed = distance / time\n    # 乙车的速度 = 相对速度 - 甲车速度\n    speed_b = relative_speed - speed_a\n    # 答案是乙车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "学校六年级栽432棵树，其中48棵是杨树，其余是柳树，栽的柳树是杨树的几倍？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 六年级栽的总树数为432棵\n    total_trees = 432\n    # 杨树的数量为48棵\n    poplar_trees = 48\n    # 柳树的数量 = 总树数 - 杨树的数量\n    willow_trees = total_trees - poplar_trees\n    # 柳树是杨树的几倍 = 柳树的数量 / 杨树的数量\n    multiple = willow_trees / poplar_trees\n    # 答案是柳树是杨树的几倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "平行四边形面积是72平方米，高6米，它的底边长=．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 平行四边形的面积是72平方米\n    area = 72\n    # 平行四边形的高是6米\n    height = 6\n    # 平行四边形的面积 = 底边长 * 高\n    # 所以底边长 = 面积 / 高\n    base_length = area / height\n    # 答案是平行四边形的底边长\n    result = base_length\n    # 返回答案\n    return result"]}
{"question": "一个加数是3.89，和是5.21，另一个加数=？", "target": 1.32, "answer": 1.3199999999999998, "score": 1, "generation": ["def solution():\n    # 一个加数是3.89\n    addend1 = 3.89\n    # 和是5.21\n    total = 5.21\n    # 另一个加数 = 和 - 已知加数\n    addend2 = total - addend1\n    # 答案是另一个加数\n    result = addend2\n    # 返回答案\n    return result"]}
{"question": "小华有的钱可以买6个蓝球、16个足球，或买9个蓝球．现在小华把这些钱全部买了足球，送给贫困山区小朋友．小华共买了足球多少个．", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 小华有的钱可以买6个蓝球、16个足球，或买9个蓝球\n    # 设蓝球的价格为x，足球的价格为y\n    # 根据题意，可以列出以下两个方程：\n    # 6x + 16y = total_money\n    # 9x = total_money\n    # 从第二个方程可以得出 total_money = 9x\n    # 将 total_money = 9x 代入第一个方程：\n    # 6x + 16y = 9x\n    # 16y = 3x\n    # y = (3/16)x\n    # 现在小华把这些钱全部买了足球，所以足球的数量 = total_money / y\n    # total_money = 9x\n    # y = (3/16)x\n    # 足球的数量 = 9x / (3/16)x = 9 / (3/16) = 9 * (16/3) = 48\n    # 所以小华共买了48个足球\n    result = 48\n    # 返回答案\n    return result"]}
{"question": "甲、乙两桶水同样重，如果从乙桶中倒25千克水到甲桶中，则甲桶的水的千克数是乙桶的6倍，甲桶原来有多少千克水．", "target": 35.0, "answer": 35.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两桶水同样重，设原来每桶水重x千克\n    x = 1  # 初始假设值，实际计算中会被消去\n    # 从乙桶倒25千克到甲桶\n    transfer_amount = 25\n    # 倒水后甲桶的水量 = x + 25\n    bucket_a_after = x + transfer_amount\n    # 倒水后乙桶的水量 = x - 25\n    bucket_b_after = x - transfer_amount\n    # 根据题意，倒水后甲桶的水量是乙桶的6倍\n    # 所以 x + 25 = 6 * (x - 25)\n    # 解这个方程：\n    # x + 25 = 6x - 150\n    # 25 + 150 = 6x - x\n    # 175 = 5x\n    # x = 35\n    # 所以甲桶原来有35千克水\n    original_amount = 35\n    # 答案是甲桶原来的水量\n    result = original_amount\n    # 返回答案\n    return result"]}
{"question": "王村今年生产棉花250吨，今年比去年多生产50吨，今年比去年增产百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 今年生产棉花250吨\n    current_year_production = 250\n    # 今年比去年多生产50吨\n    production_increase = 50\n    # 去年生产棉花的数量 = 今年生产数量 - 今年比去年多生产的数量\n    last_year_production = current_year_production - production_increase\n    # 今年比去年增产的百分比 = (今年比去年多生产的数量 / 去年生产数量) * 100\n    percentage_increase = (production_increase / last_year_production) * 100\n    # 答案是今年比去年增产的百分比\n    result = percentage_increase\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3人行路，甲每分钟走60米，乙每分钟走50米，丙每分钟走40米．甲从A地，乙和丙从B地同时出发相向而行，甲和乙相遇后，过了15分钟又与丙相遇，求A、B两地间的距离．", "target": 16500.0, "answer": 16500.0, "score": 1, "generation": ["def solution():\n    # 甲的速度是每分钟60米\n    speed_a = 60\n    # 乙的速度是每分钟50米\n    speed_b = 50\n    # 丙的速度是每分钟40米\n    speed_c = 40\n    # 甲和乙相遇后，过了15分钟又与丙相遇\n    time_after_meeting = 15\n    # 甲和乙相遇时，甲和乙走过的距离之和等于A、B两地的距离\n    # 设甲和乙相遇的时间为t分钟\n    # 甲和乙相遇时，甲走过的距离 = speed_a * t\n    # 乙走过的距离 = speed_b * t\n    # 所以A、B两地的距离 = speed_a * t + speed_b * t = (speed_a + speed_b) * t\n    # 甲和乙相遇后，甲和丙之间的距离 = (speed_a + speed_c) * time_after_meeting\n    # 因为甲和乙相遇时，甲和丙之间的距离等于A、B两地的距离减去甲和丙走过的距离\n    # 甲和丙走过的距离 = speed_a * t + speed_c * t = (speed_a + speed_c) * t\n    # 所以 (speed_a + speed_c) * time_after_meeting = (speed_a + speed_b) * t - (speed_a + speed_c) * t\n    # 化简得 (speed_a + speed_c) * time_after_meeting = (speed_b - speed_c) * t\n    # 所以 t = (speed_a + speed_c) * time_after_meeting / (speed_b - speed_c)\n    t = (speed_a + speed_c) * time_after_meeting / (speed_b - speed_c)\n    # A、B两地的距离 = (speed_a + speed_b) * t\n    distance = (speed_a + speed_b) * t\n    # 答案是A、B两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "多少米的(2/5)是16米．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 已知某长度的(2/5)是16米\n    partial_length = 16\n    partial_fraction = 2/5\n    # 总长度 = 部分长度 / 部分比例\n    total_length = partial_length / partial_fraction\n    # 答案是总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "有两捆粗细相同的铁丝，其中一捆铁丝长8米，重400千克，另一捆铁丝重200千克，这捆铁丝长多少米？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 第一捆铁丝的长度为8米\n    length_first = 8\n    # 第一捆铁丝的重量为400千克\n    weight_first = 400\n    # 第二捆铁丝的重量为200千克\n    weight_second = 200\n    # 因为两捆铁丝粗细相同，所以单位长度的重量相同\n    # 单位长度的重量 = 第一捆铁丝的重量 / 第一捆铁丝的长度\n    weight_per_length = weight_first / length_first\n    # 第二捆铁丝的长度 = 第二捆铁丝的重量 / 单位长度的重量\n    length_second = weight_second / weight_per_length\n    # 答案是第二捆铁丝的长度\n    result = length_second\n    # 返回答案\n    return result"]}
{"question": "“全球通”手机月租费30元，通话费0.3元/分．如果某人每月的手机费不会超过60元，那么他每月最多可以打电话多少分钟．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 全球通手机月租费为30元\n    monthly_fee = 30\n    # 通话费为0.3元/分钟\n    call_rate = 0.3\n    # 每月手机费不会超过60元\n    max_monthly_cost = 60\n    # 可用于通话的费用 = 最大月费 - 月租费\n    available_call_cost = max_monthly_cost - monthly_fee\n    # 最多可以打电话的分钟数 = 可用于通话的费用 / 每分钟通话费\n    max_call_minutes = available_call_cost / call_rate\n    # 答案是最多可以打电话的分钟数\n    result = max_call_minutes\n    # 返回答案\n    return result"]}
{"question": "小王6月份稿费收入5000元，按规定超过1500元的部分要缴纳20%的个人所得税，小王税后的收入=多少元？", "target": 4300.0, "answer": 4300.0, "score": 1, "generation": ["def solution():\n    # 小王6月份的稿费收入为5000元\n    total_income = 5000\n    # 免税的部分为1500元\n    tax_free_amount = 1500\n    # 需要缴税的部分 = 总收入 - 免税部分\n    taxable_amount = total_income - tax_free_amount\n    # 个人所得税税率为20%\n    tax_rate = 0.2\n    # 个人所得税 = 需要缴税的部分 * 税率\n    tax = taxable_amount * tax_rate\n    # 税后收入 = 总收入 - 个人所得税\n    after_tax_income = total_income - tax\n    # 答案是税后收入\n    result = after_tax_income\n    # 返回答案\n    return result"]}
{"question": "某工厂准备买一套20万元的设备，实际节约了15%，节约了多少元？", "target": 30000.0, "answer": 30000.0, "score": 1, "generation": ["def solution():\n    # 设备原价为20万元\n    original_price = 200000\n    # 实际节约了15%\n    savings_percentage = 0.15\n    # 节约的金额 = 原价 * 节约比例\n    savings_amount = original_price * savings_percentage\n    # 答案是节约的金额\n    result = savings_amount\n    # 返回答案\n    return result"]}
{"question": "王叔叔的3轮车上装了26袋同样的大米，连车共重1000千克．中途卸下6袋大米，这时连车重820千克．每袋大米重多少千克？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 初始总重量（包括车和大米）为1000千克\n    initial_total_weight = 1000\n    # 卸下6袋大米后的总重量为820千克\n    weight_after_unloading = 820\n    # 卸下的大米袋数为6袋\n    bags_unloaded = 6\n    # 卸下的大米总重量 = 初始总重量 - 卸下后的总重量\n    total_weight_unloaded = initial_total_weight - weight_after_unloading\n    # 每袋大米的重量 = 卸下的大米总重量 / 卸下的大米袋数\n    weight_per_bag = total_weight_unloaded / bags_unloaded\n    # 答案是每袋大米的重量\n    result = weight_per_bag\n    # 返回答案\n    return result"]}
{"question": "果园里桃树的棵树是梨树的2倍，苹果树比桃树多了111棵．苹果树有147棵，3种树共有多少棵．", "target": 201.0, "answer": 201.0, "score": 1, "generation": ["def solution():\n    # 苹果树有147棵\n    apple_trees = 147\n    # 苹果树比桃树多了111棵\n    peach_trees = apple_trees - 111\n    # 桃树的棵树是梨树的2倍\n    pear_trees = peach_trees / 2\n    # 三种树的总数 = 苹果树 + 桃树 + 梨树\n    total_trees = apple_trees + peach_trees + pear_trees\n    # 答案是三种树的总数\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "乐乐要打一篇320字的文章，乐乐的打字速度是每分钟45个，打了5分钟后，这篇文章还剩多少字没打？", "target": 95.0, "answer": 95.0, "score": 1, "generation": ["def solution():\n    # 文章的总字数为320字\n    total_words = 320\n    # 乐乐的打字速度是每分钟45个字\n    typing_speed = 45\n    # 乐乐打了5分钟\n    typing_time = 5\n    # 乐乐已经打的字数 = 打字速度 * 打字时间\n    words_typed = typing_speed * typing_time\n    # 剩余未打的字数 = 总字数 - 已经打的字数\n    remaining_words = total_words - words_typed\n    # 答案是剩余未打的字数\n    result = remaining_words\n    # 返回答案\n    return result"]}
{"question": "一个数加上它的(9/20)等于58，这个数=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    # 根据题意，x + (9/20)*x = 58\n    # 合并同类项，(1 + 9/20)*x = 58\n    # 计算系数，(29/20)*x = 58\n    # 解方程，x = 58 / (29/20)\n    x = 58 / (29/20)\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "班长把全班50个学生的学习与巩固收集后摞成了一个长26cm，宽18cm，高25cm的长方体，计算每本的体积=多少立方厘米．", "target": 234.0, "answer": 234.0, "score": 1, "generation": ["def solution():\n    # 全班有50个学生\n    num_students = 50\n    # 长方体摞成的长为26cm\n    length = 26\n    # 长方体摞成的宽为18cm\n    width = 18\n    # 长方体摞成的高为25cm\n    height = 25\n    # 长方体的总体积 = 长 * 宽 * 高\n    total_volume = length * width * height\n    # 每本的体积 = 总体积 / 学生数量\n    volume_per_book = total_volume / num_students\n    # 答案是每本的体积\n    result = volume_per_book\n    # 返回答案\n    return result"]}
{"question": "一年级有学生125人，比二年级少20人．两个年级一共有多少人？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 一年级的学生人数为125人\n    first_grade_students = 125\n    # 一年级比二年级少20人\n    difference = 20\n    # 二年级的学生人数 = 一年级人数 + 20\n    second_grade_students = first_grade_students + difference\n    # 两个年级的总人数 = 一年级人数 + 二年级人数\n    total_students = first_grade_students + second_grade_students\n    # 答案是两个年级的总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "大西洋平均深度为3.62千米，印度洋平均深度比它深0.27千米，太平洋平均深度比印度洋深0.13千米，太平洋平均深度是（多少）千米．", "target": 4.02, "answer": 4.0200000000000005, "score": 1, "generation": ["def solution():\n    # 大西洋平均深度为3.62千米\n    atlantic_depth = 3.62\n    # 印度洋平均深度比大西洋深0.27千米\n    indian_depth = atlantic_depth + 0.27\n    # 太平洋平均深度比印度洋深0.13千米\n    pacific_depth = indian_depth + 0.13\n    # 答案是太平洋平均深度\n    result = pacific_depth\n    # 返回答案\n    return result"]}
{"question": "0.12与80的积除以一个数，商是0.5，求这个数．", "target": 19.2, "answer": 19.2, "score": 1, "generation": ["def solution():\n    # 0.12与80的积\n    product = 0.12 * 80\n    # 商是0.5\n    quotient = 0.5\n    # 要求的数 = 积 / 商\n    number = product / quotient\n    # 答案是要求的数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "一根绳子，用去(1/3)后又接上16米，这时比原来长(1/5)．这根绳子原来=多少米长．", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 设绳子原来的长度为x米\n    # 用去(1/3)后剩下的长度 = x - (1/3)*x = (2/3)*x\n    # 接上16米后的长度 = (2/3)*x + 16\n    # 根据题意，接上16米后的长度比原来长(1/5)，即 (2/3)*x + 16 = x + (1/5)*x\n    # 解这个方程：\n    # (2/3)*x + 16 = (6/5)*x\n    # 16 = (6/5)*x - (2/3)*x\n    # 16 = (18/15)*x - (10/15)*x\n    # 16 = (8/15)*x\n    # x = 16 * (15/8)\n    # x = 30\n    original_length = 30\n    # 答案是绳子原来的长度\n    result = original_length\n    # 返回答案\n    return result"]}
{"question": "某小学一、二年级共有学生150人，正好是全校人数的(1/6)．全校女生占总人数的40%，全校男生有多少人？", "target": 540.0, "answer": 540.0, "score": 1, "generation": ["def solution():\n    # 一、二年级共有学生150人\n    students_first_second_grade = 150\n    # 一、二年级人数是全校人数的(1/6)\n    fraction_of_total = 1/6\n    # 全校总人数 = 一、二年级人数 / 所占比例\n    total_students = students_first_second_grade / fraction_of_total\n    # 全校女生占总人数的40%\n    female_percentage = 0.4\n    # 全校男生占总人数的比例 = 1 - 女生比例\n    male_percentage = 1 - female_percentage\n    # 全校男生人数 = 总人数 * 男生比例\n    male_students = total_students * male_percentage\n    # 答案是全校男生人数\n    result = male_students\n    # 返回答案\n    return result"]}
{"question": "晶晶和玲玲的家分别在在体育场的东面和西面．星期天上午她们相约去锻炼．两人同时出发，晶晶每分走80米，玲玲每分走75米，经过4分两人在体育场门口会面了．她们两家之间相距多少米？", "target": 620.0, "answer": 620.0, "score": 1, "generation": ["def solution():\n    # 晶晶的速度是每分钟80米\n    speed_jing = 80\n    # 玲玲的速度是每分钟75米\n    speed_ling = 75\n    # 两人行走的时间是4分钟\n    time = 4\n    # 晶晶行走的距离 = 速度 * 时间\n    distance_jing = speed_jing * time\n    # 玲玲行走的距离 = 速度 * 时间\n    distance_ling = speed_ling * time\n    # 两家之间的距离 = 晶晶行走的距离 + 玲玲行走的距离\n    total_distance = distance_jing + distance_ling\n    # 答案是两家之间的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "张老师编写的《童话故事》在出版社出版后，得到稿费1800元．按照个人所得税计算办法，稿费扣除800元后按14%缴税．张老师实得稿费多少元？", "target": 1660.0, "answer": 1660.0, "score": 1, "generation": ["def solution():\n    # 张老师得到的稿费为1800元\n    total_income = 1800\n    # 个人所得税计算办法中，稿费扣除800元\n    tax_deduction = 800\n    # 扣除后的金额按14%缴税\n    tax_rate = 0.14\n    # 应纳税所得额 = 总稿费 - 扣除额\n    taxable_income = total_income - tax_deduction\n    # 应缴税款 = 应纳税所得额 * 税率\n    tax_payable = taxable_income * tax_rate\n    # 实得稿费 = 总稿费 - 应缴税款\n    net_income = total_income - tax_payable\n    # 答案是张老师实得稿费\n    result = net_income\n    # 返回答案\n    return result"]}
{"question": "一艘轮船从重庆开往上海有960位客人，到武汉港有179人下船，又有213人上船，这时轮船上还有多少客人？", "target": 994.0, "answer": 994.0, "score": 1, "generation": ["def solution():\n    # 轮船从重庆开往上海时的初始客人数量为960位\n    initial_passengers = 960\n    # 到武汉港下船的客人数量为179人\n    passengers_disembarked = 179\n    # 到武汉港上船的客人数量为213人\n    passengers_embarked = 213\n    # 下船后的客人数量 = 初始客人数量 - 下船客人数量\n    passengers_after_disembark = initial_passengers - passengers_disembarked\n    # 上船后的客人数量 = 下船后的客人数量 + 上船客人数量\n    passengers_after_embark = passengers_after_disembark + passengers_embarked\n    # 答案是轮船上的最终客人数量\n    result = passengers_after_embark\n    # 返回答案\n    return result"]}
{"question": "学校买来126米塑料绳，每18米做10根跳绳，照这样计算，能做多少根跳绳？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 学校买来塑料绳的总长度为126米\n    total_length = 126\n    # 每18米可以做10根跳绳\n    length_per_batch = 18\n    ropes_per_batch = 10\n    # 可以做的跳绳批次数 = 总长度 / 每批次的长度\n    num_batches = total_length / length_per_batch\n    # 可以做的跳绳总数 = 批次数 * 每批次的跳绳数\n    total_ropes = num_batches * ropes_per_batch\n    # 答案是跳绳的总数\n    result = total_ropes\n    # 返回答案\n    return result"]}
{"question": "一个圆柱的侧面积是12.56平方米，底面半径是2分米，它的高=多少分米？", "target": 99.94930426171028, "answer": 9994.930426171028, "score": 0, "generation": ["def solution():\n    # 圆柱的侧面积是12.56平方米\n    lateral_area = 12.56\n    # 底面半径是2分米\n    radius = 2\n    # 将侧面积转换为平方分米，因为1平方米 = 10000平方分米\n    lateral_area_sq_dm = lateral_area * 10000\n    # 圆柱的侧面积公式为：侧面积 = 2 * π * r * h\n    # 所以高h = 侧面积 / (2 * π * r)\n    import math\n    height = lateral_area_sq_dm / (2 * math.pi * radius)\n    # 答案是圆柱的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "广源畜牧公司饲养的奶牛是奶羊的7倍．奶牛和奶羊一共有48只，广源公司养了多少只奶羊？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 奶牛和奶羊的总数为48只\n    total_animals = 48\n    # 奶牛的数量是奶羊的7倍\n    cow_to_sheep_ratio = 7\n    # 设奶羊的数量为x，则奶牛的数量为7x\n    # 总数量 = x + 7x = 8x\n    # 所以x = 总数量 / 8\n    num_sheep = total_animals / (cow_to_sheep_ratio + 1)\n    # 答案是奶羊的数量\n    result = num_sheep\n    # 返回答案\n    return result"]}
{"question": "学校规定每个学生至少参加语文兴趣小组和数学兴趣小组中的一个，204班有45人，参加语文兴趣小组的有30人，参加数学兴趣小组的有22人，语文和数学兴趣小组都参加的有多少人．", "target": 7.0, "answer": 7.0, "score": 1, "generation": ["def solution():\n    # 204班有45人\n    total_students = 45\n    # 参加语文兴趣小组的有30人\n    chinese_group = 30\n    # 参加数学兴趣小组的有22人\n    math_group = 22\n    # 根据集合论，参加至少一个兴趣小组的人数 = 参加语文的人数 + 参加数学的人数 - 同时参加两个的人数\n    # 因为每个学生至少参加一个兴趣小组，所以总人数 = 参加语文的人数 + 参加数学的人数 - 同时参加两个的人数\n    # 所以同时参加两个的人数 = 参加语文的人数 + 参加数学的人数 - 总人数\n    both_groups = chinese_group + math_group - total_students\n    # 答案是同时参加两个兴趣小组的人数\n    result = both_groups\n    # 返回答案\n    return result"]}
{"question": "比37的25倍多16的数=？", "target": 941.0, "answer": 941.0, "score": 1, "generation": ["def solution():\n    # 给定的数是37\n    number = 37\n    # 37的25倍\n    twenty_five_times = number * 25\n    # 比37的25倍多16的数 = 37的25倍 + 16\n    result_number = twenty_five_times + 16\n    # 答案是比37的25倍多16的数\n    result = result_number\n    # 返回答案\n    return result"]}
{"question": "益民小学植树180棵．其中(1/5)是五年级种的，(1/4)是四年级种的，四年级比五年级多植了多少棵树？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 益民小学植树的总数为180棵\n    total_trees = 180\n    # 五年级种的树占总数的(1/5)\n    fifth_grade_fraction = 1/5\n    # 四年级种的树占总数的(1/4)\n    fourth_grade_fraction = 1/4\n    # 五年级种的树的数量 = 总数 * 五年级的比例\n    fifth_grade_trees = total_trees * fifth_grade_fraction\n    # 四年级种的树的数量 = 总数 * 四年级的比例\n    fourth_grade_trees = total_trees * fourth_grade_fraction\n    # 四年级比五年级多植的树的数量 = 四年级的数量 - 五年级的数量\n    difference = fourth_grade_trees - fifth_grade_trees\n    # 答案是四年级比五年级多植的树的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "4、五年级要栽220棵树．四年级有3个班，每班栽28棵，剩下的分给五年级4个班栽，平均每班栽多少棵？", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 五年级要栽220棵树\n    total_trees = 220\n    # 四年级有3个班\n    num_fourth_classes = 3\n    # 每班栽28棵\n    trees_per_fourth_class = 28\n    # 四年级栽的总树数 = 班级数 * 每班栽的树数\n    total_fourth_trees = num_fourth_classes * trees_per_fourth_class\n    # 五年级要栽的树数 = 总树数 - 四年级栽的树数\n    fifth_trees = total_trees - total_fourth_trees\n    # 五年级有4个班\n    num_fifth_classes = 4\n    # 平均每班栽的树数 = 五年级要栽的树数 / 五年级的班级数\n    trees_per_fifth_class = fifth_trees / num_fifth_classes\n    # 答案是五年级平均每班栽的树数\n    result = trees_per_fifth_class\n    # 返回答案\n    return result"]}
{"question": "商店进了360套童装，第一周卖了95套，第二周卖了108套，现在比原来少了多少套？", "target": 203.0, "answer": 203.0, "score": 1, "generation": ["def solution():\n    # 商店进的童装总数为360套\n    total_clothes = 360\n    # 第一周卖了95套\n    sold_first_week = 95\n    # 第二周卖了108套\n    sold_second_week = 108\n    # 总共卖出的童装数量 = 第一周卖出的 + 第二周卖出的\n    total_sold = sold_first_week + sold_second_week\n    # 现在比原来少的数量 = 总共卖出的数量\n    difference = total_sold\n    # 答案是现在比原来少的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一个数的(3/4)是(12/21)，这个数=？", "target": 0.7619047619047619, "answer": 0.7619047619047619, "score": 1, "generation": ["def solution():\n    # 一个数的(3/4)是(12/21)\n    fraction = 3/4\n    value = 12/21\n    # 这个数 = value / fraction\n    number = value / fraction\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "9.1/7的商加上3.8*5的积，和=？", "target": 20.3, "answer": 20.3, "score": 1, "generation": ["def solution():\n    # 9.1除以7的商\n    quotient = 9.1 / 7\n    # 3.8乘以5的积\n    product = 3.8 * 5\n    # 商加上积的和\n    total = quotient + product\n    # 答案是商加上积的和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "多少除以3得10余2．", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 商为10\n    quotient = 10\n    # 余数为2\n    remainder = 2\n    # 除数为3\n    divisor = 3\n    # 被除数 = 商 * 除数 + 余数\n    dividend = quotient * divisor + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "某工地上午运走水泥25%，下午比上午多运走10.5吨，这批水泥还剩下24.5吨，那么这批水泥共有多少吨？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 上午运走水泥25%\n    morning_percentage = 0.25\n    # 下午比上午多运走10.5吨\n    afternoon_extra = 10.5\n    # 还剩下24.5吨\n    remaining = 24.5\n    # 设这批水泥共有x吨\n    # 上午运走：0.25x\n    # 下午运走：0.25x + 10.5\n    # 总运走：0.25x + (0.25x + 10.5) = 0.5x + 10.5\n    # 剩余：x - (0.5x + 10.5) = 0.5x - 10.5 = 24.5\n    # 解方程：0.5x - 10.5 = 24.5\n    # 0.5x = 35\n    # x = 70\n    total_cement = (remaining + afternoon_extra) / (1 - morning_percentage * 2)\n    # 答案是这批水泥的总吨数\n    result = total_cement\n    # 返回答案\n    return result"]}
{"question": "小王重36.5千克，小李重41.4千克，一个相扑运动员的体重是125.8千克，这个运动员的体重比小王，小李两人的体重和还要重多少千克？", "target": 47.9, "answer": 47.89999999999999, "score": 1, "generation": ["def solution():\n    # 小王的体重是36.5千克\n    weight_wang = 36.5\n    # 小李的体重是41.4千克\n    weight_li = 41.4\n    # 相扑运动员的体重是125.8千克\n    weight_sumo = 125.8\n    # 小王和小李的体重和 = 小王的体重 + 小李的体重\n    total_weight_wang_li = weight_wang + weight_li\n    # 运动员比小王和小李的体重和还要重的重量 = 运动员的体重 - 小王和小李的体重和\n    weight_difference = weight_sumo - total_weight_wang_li\n    # 答案是运动员比小王和小李的体重和还要重的重量\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "在学校运动会开幕式上进行大型团体操表演，开始有15行，每行12人，变阵后每行有9行，这时每行有多少人？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 开始有15行，每行12人\n    initial_rows = 15\n    initial_people_per_row = 12\n    # 变阵后有9行\n    final_rows = 9\n    # 总人数 = 初始行数 * 初始每行人数\n    total_people = initial_rows * initial_people_per_row\n    # 变阵后每行人数 = 总人数 / 变阵后行数\n    final_people_per_row = total_people / final_rows\n    # 答案是变阵后每行的人数\n    result = final_people_per_row\n    # 返回答案\n    return result"]}
{"question": "在铁路的旁边，每隔60米安装电杆一根，一位旅客在行进中的火车内，5分钟经过电杆75根．求此火车每分钟的速度=？", "target": 888.0, "answer": 888.0, "score": 1, "generation": ["def solution():\n    # 电杆之间的间隔为60米\n    distance_between_poles = 60\n    # 5分钟内经过的电杆数量为75根\n    poles_passed = 75\n    # 时间间隔为5分钟\n    time_interval = 5\n    # 经过的总距离 = (电杆数量 - 1) * 电杆间隔\n    total_distance = (poles_passed - 1) * distance_between_poles\n    # 火车的速度 = 总距离 / 时间间隔\n    speed = total_distance / time_interval\n    # 答案是火车的速度\n    result = speed\n    # 返回答案\n    return result"]}
{"question": "甲、乙两列火车分别从相距822千米的两地同时相向而行，甲每小时行65千米，乙每小时行72千米，几小时后两车相遇？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 两地的距离为822千米\n    distance = 822\n    # 甲车的速度是每小时65千米\n    speed_a = 65\n    # 乙车的速度是每小时72千米\n    speed_b = 72\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "为了学生的卫生安全，学校给每个学生配一个水杯，每只水杯3元，正好超市打0.9，学校想买180只水杯，请你算一下一共需要多少钱？", "target": 486.0, "answer": 486.00000000000006, "score": 1, "generation": ["def solution():\n    # 每只水杯的原价为3元\n    original_price_per_cup = 3\n    # 超市打0.9折\n    discount = 0.9\n    # 学校想买180只水杯\n    num_cups = 180\n    # 每只水杯的折后价格 = 原价 * 折扣\n    discounted_price_per_cup = original_price_per_cup * discount\n    # 总费用 = 水杯数量 * 折后价格\n    total_cost = num_cups * discounted_price_per_cup\n    # 答案是总费用\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "甲、乙两队去修路，甲队完成总工程的(4/15)，乙队比甲队多完成这项工程的(2/15)，两队一共完成了总工程的几分之几？", "target": 0.6666666666666666, "answer": 0.6666666666666667, "score": 1, "generation": ["def solution():\n    # 甲队完成总工程的(4/15)\n    team_a_completion = 4/15\n    # 乙队比甲队多完成这项工程的(2/15)\n    team_b_additional = 2/15\n    # 乙队完成的总工程 = 甲队完成的 + 乙队比甲队多完成的\n    team_b_completion = team_a_completion + team_b_additional\n    # 两队一共完成的总工程 = 甲队完成的 + 乙队完成的\n    total_completion = team_a_completion + team_b_completion\n    # 答案是两队一共完成的总工程\n    result = total_completion\n    # 返回答案\n    return result"]}
{"question": "5（1）班学生去老区参观，共用去10小时，其中路上用去的时间占(1/5)，吃午餐与休息时间共占(3/8)，剩下是浏览的时间，浏览的时间占几分之几？", "target": 0.425, "answer": 0.425, "score": 1, "generation": ["def solution():\n    # 总时间为10小时\n    total_time = 10\n    # 路上用去的时间占(1/5)\n    travel_time_fraction = 1/5\n    # 吃午餐与休息时间共占(3/8)\n    lunch_break_fraction = 3/8\n    # 路上用去的时间 = 总时间 * 路上用去的时间比例\n    travel_time = total_time * travel_time_fraction\n    # 吃午餐与休息时间 = 总时间 * 吃午餐与休息时间比例\n    lunch_break_time = total_time * lunch_break_fraction\n    # 浏览的时间 = 总时间 - 路上用去的时间 - 吃午餐与休息时间\n    browsing_time = total_time - travel_time - lunch_break_time\n    # 浏览的时间比例 = 浏览的时间 / 总时间\n    browsing_fraction = browsing_time / total_time\n    # 答案是浏览的时间比例\n    result = browsing_fraction\n    # 返回答案\n    return result"]}
{"question": "一电影院11月份的收入是20万元，缴税后剩余19万元．请问税率=？", "target": 5.0, "answer": 0.05, "score": 0, "generation": ["def solution():\n    # 11月份的收入是20万元\n    income = 20\n    # 缴税后剩余19万元\n    after_tax = 19\n    # 缴税金额 = 收入 - 税后剩余\n    tax_amount = income - after_tax\n    # 税率 = 缴税金额 / 收入\n    tax_rate = tax_amount / income\n    # 答案是税率\n    result = tax_rate\n    # 返回答案\n    return result"]}
{"question": "两个加数的和是420，其中一个加数是162，另一个加数=？", "target": 258.0, "answer": 258.0, "score": 1, "generation": ["def solution():\n    # 两个加数的和是420\n    total_sum = 420\n    # 其中一个加数是162\n    first_addend = 162\n    # 另一个加数 = 总和 - 第一个加数\n    second_addend = total_sum - first_addend\n    # 答案是另一个加数\n    result = second_addend\n    # 返回答案\n    return result"]}
{"question": "多少千米是630千米的(4/9)．", "target": 280.0, "answer": 280.0, "score": 1, "generation": ["def solution():\n    # 总距离为630千米\n    total_distance = 630\n    # 需要计算的比例是(4/9)\n    fraction = 4/9\n    # 计算距离 = 总距离 * 比例\n    calculated_distance = total_distance * fraction\n    # 答案是计算得到的距离\n    result = calculated_distance\n    # 返回答案\n    return result"]}
{"question": "王师傅8分钟做1个零件，平均每分钟做多少个零件？", "target": 0.125, "answer": 0.125, "score": 1, "generation": ["def solution():\n    # 王师傅8分钟做1个零件\n    time_per_part = 8\n    # 平均每分钟做的零件数 = 1 / 每个零件所需的时间\n    parts_per_minute = 1 / time_per_part\n    # 答案是平均每分钟做的零件数\n    result = parts_per_minute\n    # 返回答案\n    return result"]}
{"question": "食堂买来面粉200千克，吃了5天，每天吃35千克，还剩多少千克？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 食堂买来面粉的总重量为200千克\n    total_flour = 200\n    # 吃了5天\n    days_eaten = 5\n    # 每天吃35千克\n    daily_consumption = 35\n    # 总共吃掉的重量 = 天数 * 每天吃的重量\n    total_consumed = days_eaten * daily_consumption\n    # 剩余的重量 = 总重量 - 总共吃掉的重量\n    remaining_flour = total_flour - total_consumed\n    # 答案是剩余的重量\n    result = remaining_flour\n    # 返回答案\n    return result"]}
{"question": "学校合唱组人数是美术组的(7/8)，书法组人数是合唱组的(3/4)，已知美术组有32人，书法组有多少人？", "target": 21.0, "answer": 21.0, "score": 1, "generation": ["def solution():\n    # 美术组的人数为32人\n    art_group = 32\n    # 合唱组人数是美术组的(7/8)\n    choir_group = (7/8) * art_group\n    # 书法组人数是合唱组的(3/4)\n    calligraphy_group = (3/4) * choir_group\n    # 答案是书法组的人数\n    result = calligraphy_group\n    # 返回答案\n    return result"]}
{"question": "一种书如果每本按50元出售，可盈利25%；若想盈利40%，那么每本应按多少元出售．", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 每本书的售价为50元\n    selling_price = 50\n    # 盈利25%\n    profit_percentage = 0.25\n    # 成本价 = 售价 / (1 + 盈利百分比)\n    cost_price = selling_price / (1 + profit_percentage)\n    # 新的盈利百分比为40%\n    new_profit_percentage = 0.4\n    # 新的售价 = 成本价 * (1 + 新的盈利百分比)\n    new_selling_price = cost_price * (1 + new_profit_percentage)\n    # 答案是新的售价\n    result = new_selling_price\n    # 返回答案\n    return result"]}
{"question": "元旦节，刘老师为本班学生购买演出用的服装，买5件女生装和8件男生装的钱同样多．每件男生装39元，每件女生装多少元？", "target": 62.4, "answer": 62.4, "score": 1, "generation": ["def solution():\n    # 女生装的数量是5件\n    num_girls_outfits = 5\n    # 男生装的数量是8件\n    num_boys_outfits = 8\n    # 每件男生装的价格是39元\n    price_boys_outfit = 39\n    # 因为买5件女生装和8件男生装的钱同样多，所以女生装的总价格 = 男生装的总价格\n    total_price_boys = num_boys_outfits * price_boys_outfit\n    total_price_girls = total_price_boys\n    # 每件女生装的价格 = 女生装的总价格 / 女生装的数量\n    price_girls_outfit = total_price_girls / num_girls_outfits\n    # 答案是每件女生装的价格\n    result = price_girls_outfit\n    # 返回答案\n    return result"]}
{"question": "小杰每分钟打135个字，他打一篇文章用了28分钟，还有650个字没有打完，这篇文章有多少个字？", "target": 4430.0, "answer": 4430.0, "score": 1, "generation": ["def solution():\n    # 小杰每分钟打135个字\n    typing_speed = 135\n    # 他打一篇文章用了28分钟\n    time_spent = 28\n    # 还有650个字没有打完\n    remaining_words = 650\n    # 已经打完的字数 = 打字速度 * 时间\n    words_typed = typing_speed * time_spent\n    # 文章的总字数 = 已经打完的字数 + 未打完的字数\n    total_words = words_typed + remaining_words\n    # 答案是文章的总字数\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "找规律：1、3、4、7、11、多少．", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 给定的数列是1、3、4、7、11\n    sequence = [1, 3, 4, 7, 11]\n    # 观察数列规律：从第三项开始，每一项等于前两项之和\n    # 1 + 3 = 4\n    # 3 + 4 = 7\n    # 4 + 7 = 11\n    # 所以下一项是7 + 11 = 18\n    next_number = sequence[-1] + sequence[-2]\n    # 答案是数列的下一项\n    result = next_number\n    # 返回答案\n    return result"]}
{"question": "筑路队铺一条公路，第一周铺了全长的(1/8)，第二周铺了900米，还剩4700米没有铺．这条公路全长多少米？", "target": 6400.0, "answer": 6400.0, "score": 1, "generation": ["def solution():\n    # 第一周铺了全长的(1/8)\n    first_week_fraction = 1/8\n    # 第二周铺了900米\n    second_week_meters = 900\n    # 还剩4700米没有铺\n    remaining_meters = 4700\n    # 设公路全长为x米\n    # 根据题意：x = (1/8)x + 900 + 4700\n    # 解方程：x - (1/8)x = 5600\n    # (7/8)x = 5600\n    # x = 5600 * (8/7)\n    total_length = (second_week_meters + remaining_meters) / (1 - first_week_fraction)\n    # 答案是公路的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "两个工程队合作完成一项工程，甲队每天完成全工程的(3/5)，乙队每天完成全工程的(1/4)．两队合作一天，还剩全工程的几分之几没有完成？", "target": 0.15, "answer": 0.15000000000000002, "score": 1, "generation": ["def solution():\n    # 甲队每天完成全工程的(3/5)\n    team_a_daily = 3/5\n    # 乙队每天完成全工程的(1/4)\n    team_b_daily = 1/4\n    # 两队合作一天完成的工作量 = 甲队的工作量 + 乙队的工作量\n    total_daily_work = team_a_daily + team_b_daily\n    # 剩余的工作量 = 1 - 两队合作一天完成的工作量； 1表示全工程\n    remaining_work = 1 - total_daily_work\n    # 答案是剩余的工作量\n    result = remaining_work\n    # 返回答案\n    return result"]}
{"question": "某校六年级学生人数为150人，占全校学生总数的20%，五年级学生人数占全校学生总数的10%，五年级有学生多少人？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 六年级学生人数为150人\n    sixth_grade_students = 150\n    # 六年级占全校学生总数的20%\n    sixth_grade_percentage = 0.2\n    # 全校学生总数 = 六年级学生人数 / 六年级所占比例\n    total_students = sixth_grade_students / sixth_grade_percentage\n    # 五年级学生人数占全校学生总数的10%\n    fifth_grade_percentage = 0.1\n    # 五年级学生人数 = 全校学生总数 * 五年级所占比例\n    fifth_grade_students = total_students * fifth_grade_percentage\n    # 答案是五年级学生人数\n    result = fifth_grade_students\n    # 返回答案\n    return result"]}
{"question": "在一次义卖活动中，王刚卖柠檬水和热巧克力共400杯，得款546元．如果柠檬水1元/杯，热巧克力2元/杯，那么王刚在这次义卖活动中卖出了多少杯柠檬水．", "target": 254.0, "answer": 254.0, "score": 1, "generation": ["def solution():\n    # 王刚卖柠檬水和热巧克力共400杯\n    total_cups = 400\n    # 得款546元\n    total_revenue = 546\n    # 柠檬水1元/杯\n    price_lemonade = 1\n    # 热巧克力2元/杯\n    price_hot_chocolate = 2\n    # 设柠檬水卖出x杯，热巧克力卖出(400 - x)杯\n    # 总收入 = 柠檬水收入 + 热巧克力收入\n    # 546 = 1*x + 2*(400 - x)\n    # 解方程得 x = 254\n    lemonade_cups = (price_hot_chocolate * total_cups - total_revenue) / (price_hot_chocolate - price_lemonade)\n    # 答案是卖出的柠檬水杯数\n    result = lemonade_cups\n    # 返回答案\n    return result"]}
{"question": "有一桶油，第一次取出30%，第二次取出的比第一次多(1/5)千克，桶里还剩3.8千克，这桶油重多少千克？", "target": 10.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一次取出30%\n    first_extraction_percent = 0.3\n    # 第二次取出的比第一次多(1/5)千克\n    second_extraction_extra = 1/5\n    # 桶里还剩3.8千克\n    remaining_weight = 3.8\n    # 设这桶油重x千克\n    # 第一次取出的油 = x * 30%\n    first_extraction = first_extraction_percent * x\n    # 第二次取出的油 = 第一次取出的油 + (1/5)千克\n    second_extraction = first_extraction + second_extraction_extra\n    # 总取出的油 = 第一次取出的油 + 第二次取出的油\n    total_extraction = first_extraction + second_extraction\n    # 桶里剩余的油 = 总油量 - 总取出的油\n    remaining_weight = x - total_extraction\n    # 根据题目，桶里还剩3.8千克\n    # 所以 x - total_extraction = 3.8\n    # 解这个方程\n    x = (remaining_weight + second_extraction_extra) / (1 - 2 * first_extraction_percent)\n    # 答案是这桶油的总重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "水果店运来水果36箱，每箱重15千克．卖出285千克后，还剩多少千克？", "target": 255.0, "answer": 255.0, "score": 1, "generation": ["def solution():\n    # 水果店运来水果的总箱数为36箱\n    total_boxes = 36\n    # 每箱水果的重量为15千克\n    weight_per_box = 15\n    # 卖出的水果重量为285千克\n    sold_weight = 285\n    # 水果的总重量 = 总箱数 * 每箱的重量\n    total_weight = total_boxes * weight_per_box\n    # 剩余的水果重量 = 总重量 - 卖出的重量\n    remaining_weight = total_weight - sold_weight\n    # 答案是剩余的水果重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "老人院的李玉老人过生日，义工邀请院里的老人和职工一共48人为老人庆生，义工要给每人准备一瓶矿泉水和一个苹果．已知矿泉水每瓶2元，苹果每个2.5元，义工至少要带多少钱才够用于采购？", "target": 220.5, "answer": 216.0, "score": 0, "generation": ["def solution():\n    # 老人和职工的总人数为48人\n    total_people = 48\n    # 矿泉水的价格为每瓶2元\n    price_water = 2\n    # 苹果的价格为每个2.5元\n    price_apple = 2.5\n    # 每人需要一瓶矿泉水和一个苹果\n    # 矿泉水的总费用 = 总人数 * 每瓶矿泉水的价格\n    total_cost_water = total_people * price_water\n    # 苹果的总费用 = 总人数 * 每个苹果的价格\n    total_cost_apple = total_people * price_apple\n    # 总费用 = 矿泉水的总费用 + 苹果的总费用\n    total_cost = total_cost_water + total_cost_apple\n    # 答案是义工至少需要带的钱数\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "学校组织献爱心活动．五年级捐款312元，六年级比五年级多捐(1/8)，六年级捐款多少元？", "target": 351.0, "answer": 351.0, "score": 1, "generation": ["def solution():\n    # 五年级捐款312元\n    fifth_grade_donation = 312\n    # 六年级比五年级多捐(1/8)\n    donation_increase = 1/8\n    # 六年级捐款 = 五年级捐款 + 五年级捐款 * 增加比例\n    sixth_grade_donation = fifth_grade_donation + fifth_grade_donation * donation_increase\n    # 答案是六年级捐款的金额\n    result = sixth_grade_donation\n    # 返回答案\n    return result"]}
{"question": "(5/8)的(4/3)倍+(1/6)，和=？", "target": 1.0, "answer": 0.9999999999999999, "score": 1, "generation": ["def solution():\n    # 第一个分数是(5/8)\n    fraction1 = 5/8\n    # 第二个分数是(4/3)\n    fraction2 = 4/3\n    # 第三个分数是(1/6)\n    fraction3 = 1/6\n    # 计算(5/8)的(4/3)倍\n    product = fraction1 * fraction2\n    # 计算和 = (5/8)的(4/3)倍 + (1/6)\n    total = product + fraction3\n    # 答案是和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "甲、乙两数的最大公因数是25，最小公倍数是150，若甲是75，乙=．", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 甲数是75\n    num_a = 75\n    # 最大公因数是25\n    gcd = 25\n    # 最小公倍数是150\n    lcm = 150\n    # 根据公式：两数之积 = 最大公因数 * 最小公倍数\n    product = gcd * lcm\n    # 乙数 = 两数之积 / 甲数\n    num_b = product / num_a\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "某商店按定价出售，每个可获利50元．如果按定价的50%出售10件，则与按定价每个减价30元出售12件所获利润一样多．这种商品每件定价多少元．", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 每个商品按定价出售可获利50元\n    profit_per_item = 50\n    # 第一种销售方式：按定价的50%出售10件\n    num_items_first = 10\n    discount_first = 0.5\n    # 第二种销售方式：按定价每个减价30元出售12件\n    num_items_second = 12\n    discount_second = 30\n    # 设每件商品的定价为x元\n    # 第一种销售方式的利润 = 10 * (0.5x - (x - 50))\n    # 第二种销售方式的利润 = 12 * (x - 30 - (x - 50))\n    # 因为两种销售方式的利润相同，所以可以建立方程：\n    # 10 * (0.5x - (x - 50)) = 12 * (x - 30 - (x - 50))\n    # 解这个方程可以得到x的值\n    # 简化方程：\n    # 10 * (0.5x - x + 50) = 12 * (x - 30 - x + 50)\n    # 10 * (-0.5x + 50) = 12 * (20)\n    # -5x + 500 = 240\n    # -5x = -260\n    # x = 52\n    # 答案是每件商品的定价\n    result = 52\n    # 返回答案\n    return result"]}
{"question": "一块三角形的广告牌，底长2.4m，高是1.2m，它的面积=多少m^2．", "target": 1.44, "answer": 1.44, "score": 1, "generation": ["def solution():\n    # 广告牌的底长为2.4米\n    base = 2.4\n    # 广告牌的高为1.2米\n    height = 1.2\n    # 三角形的面积 = (底长 * 高) / 2\n    area = (base * height) / 2\n    # 答案是广告牌的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "一件衣服降价20%后是120元，原价=多少元？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 降价后的价格为120元\n    discounted_price = 120\n    # 降价比例为20%\n    discount_rate = 0.2\n    # 原价 = 降价后的价格 / (1 - 降价比例)\n    original_price = discounted_price / (1 - discount_rate)\n    # 答案是原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "小明和小刚家相距1240米．一天，两人约定在两家之间的路上会合．小明每分钟走75米，比小刚的速度慢(1/16)．两人同时从家出发，多长时间后能相遇？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 小明和小刚家相距1240米\n    distance = 1240\n    # 小明的速度是每分钟75米\n    speed_ming = 75\n    # 小明的速度比小刚慢(1/16)\n    speed_difference_fraction = 1/16\n    # 小刚的速度 = 小明的速度 / (1 - 速度差比例)\n    speed_gang = speed_ming / (1 - speed_difference_fraction)\n    # 因为两人相向而行，相对速度 = 小明的速度 + 小刚的速度\n    relative_speed = speed_ming + speed_gang\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两人相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "一根绳子长(4/5)米，剪去全长的(3/4)，还剩下全长的多少．", "target": 0.25, "answer": 0.2, "score": 0, "generation": ["def solution():\n    # 绳子的总长度为(4/5)米\n    total_length = 4/5\n    # 剪去的比例为(3/4)\n    cut_fraction = 3/4\n    # 剩余的比例 = 1 - 剪去的比例\n    remaining_fraction = 1 - cut_fraction\n    # 剩余的长度 = 总长度 * 剩余的比例\n    remaining_length = total_length * remaining_fraction\n    # 答案是剩余的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "某电视机厂计划5月份生产5000台电视机，实际上半月完成计划的60%，下半月完成计划的(7/10)，这个月超产完成多少台电视机？", "target": 1500.0, "answer": 1500.0, "score": 1, "generation": ["def solution():\n    # 计划生产5000台电视机\n    planned_production = 5000\n    # 上半月完成计划的60%\n    first_half_completion = 0.6\n    # 下半月完成计划的(7/10)\n    second_half_completion = 7/10\n    # 上半月实际生产 = 计划生产 * 上半月完成比例\n    first_half_production = planned_production * first_half_completion\n    # 下半月实际生产 = 计划生产 * 下半月完成比例\n    second_half_production = planned_production * second_half_completion\n    # 总实际生产 = 上半月实际生产 + 下半月实际生产\n    total_actual_production = first_half_production + second_half_production\n    # 超产数量 = 总实际生产 - 计划生产\n    over_production = total_actual_production - planned_production\n    # 答案是超产数量\n    result = over_production\n    # 返回答案\n    return result"]}
{"question": "某牧民养羊450只，其中(3/5)是山羊．现在又买回10只山羊，现在山羊占几分之几？", "target": 0.6086956521739131, "answer": 0.6086956521739131, "score": 1, "generation": ["def solution():\n    # 牧民养羊的总数为450只\n    total_sheep = 450\n    # 山羊的比例是(3/5)\n    goat_fraction = 3/5\n    # 初始山羊的数量 = 总数 * 山羊比例\n    initial_goats = total_sheep * goat_fraction\n    # 又买回10只山羊\n    additional_goats = 10\n    # 现在山羊的总数 = 初始山羊数量 + 新增山羊数量\n    current_goats = initial_goats + additional_goats\n    # 现在羊的总数 = 初始总数 + 新增山羊数量\n    current_total_sheep = total_sheep + additional_goats\n    # 现在山羊的比例 = 现在山羊数量 / 现在羊的总数\n    current_goat_fraction = current_goats / current_total_sheep\n    # 答案是现在山羊的比例\n    result = current_goat_fraction\n    # 返回答案\n    return result"]}
{"question": "李经理一个月的工资是3600元，按规定，减去2000元后的部分按5%的税率缴纳个人所得税，他每月应缴纳的个人所得税=多少元？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 李经理一个月的工资是3600元\n    monthly_salary = 3600\n    # 个人所得税起征点是2000元\n    tax_threshold = 2000\n    # 需要缴税的部分 = 工资 - 起征点\n    taxable_income = monthly_salary - tax_threshold\n    # 税率为5%\n    tax_rate = 0.05\n    # 应缴纳的个人所得税 = 需要缴税的部分 * 税率\n    income_tax = taxable_income * tax_rate\n    # 答案是应缴纳的个人所得税\n    result = income_tax\n    # 返回答案\n    return result"]}
{"question": "一辆货车和一辆客车从相距545千米的甲乙两地相对而行．客车先行驶2小时后货车才出发，再过3小时两车相遇．已知货车每小时行65千米，客车每小时行多少千米？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 甲乙两地的距离为545千米\n    distance = 545\n    # 货车每小时行驶65千米\n    truck_speed = 65\n    # 客车先行驶2小时\n    bus_initial_hours = 2\n    # 货车出发后，两车再行驶3小时相遇\n    meeting_hours = 3\n    # 货车行驶的总距离 = 货车速度 * 相遇时间\n    truck_distance = truck_speed * meeting_hours\n    # 客车行驶的总时间 = 先行驶时间 + 相遇时间\n    bus_total_hours = bus_initial_hours + meeting_hours\n    # 客车行驶的总距离 = 总距离 - 货车行驶的距离\n    bus_distance = distance - truck_distance\n    # 客车的速度 = 客车行驶的总距离 / 客车行驶的总时间\n    bus_speed = bus_distance / bus_total_hours\n    # 答案是客车的速度\n    result = bus_speed\n    # 返回答案\n    return result"]}
{"question": "商店里有25套儿童服装，原价每套87元．实际每套只卖63元．这样卖完这些儿童服装，一共比原来少卖了多少元？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 商店里有25套儿童服装\n    num_suits = 25\n    # 原价每套87元\n    original_price = 87\n    # 实际每套只卖63元\n    actual_price = 63\n    # 原价总销售额 = 数量 * 原价\n    total_original = num_suits * original_price\n    # 实际总销售额 = 数量 * 实际价格\n    total_actual = num_suits * actual_price\n    # 比原来少卖的金额 = 原价总销售额 - 实际总销售额\n    difference = total_original - total_actual\n    # 答案是比原来少卖的金额\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "某化肥厂今年生产化肥1500吨，比去年多生产300吨，今年增产百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 今年生产化肥1500吨\n    production_this_year = 1500\n    # 比去年多生产300吨\n    production_increase = 300\n    # 去年生产化肥 = 今年生产化肥 - 比去年多生产的量\n    production_last_year = production_this_year - production_increase\n    # 增产百分比 = (比去年多生产的量 / 去年生产化肥) * 100%\n    increase_percentage = (production_increase / production_last_year) * 100\n    # 答案是增产百分比\n    result = increase_percentage\n    # 返回答案\n    return result"]}
{"question": "有12个△，△的个数是○的2倍，○有多少个．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 有12个△\n    num_triangles = 12\n    # △的个数是○的2倍\n    ratio = 2\n    # ○的数量 = △的数量 / 2\n    num_circles = num_triangles / ratio\n    # 答案是○的数量\n    result = num_circles\n    # 返回答案\n    return result"]}
{"question": "24比多少多(1/3)．", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 已知24比某个数多(1/3)\n    known_number = 24\n    # 多的比例是(1/3)\n    excess_fraction = 1/3\n    # 设要求的数为x，根据题意：24 = x + (1/3)*x\n    # 合并同类项：24 = (4/3)*x\n    # 解方程：x = 24 / (4/3) = 24 * (3/4)\n    x = known_number * (3/4)\n    # 答案是要求的数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "水果店原有橘子的重量比苹果多100千克．橘子卖出(1/3)后，苹果的重量比橘子多25千克．水果店有橘子多少千克？", "target": 375.0, "answer": 375.0, "score": 1, "generation": ["def solution():\n    # 设橘子的重量为x千克\n    # 苹果的重量为x - 100千克\n    # 橘子卖出(1/3)后，橘子的重量变为x * (2/3)\n    # 根据题意，苹果的重量比橘子多25千克\n    # 所以有方程：x - 100 = x * (2/3) + 25\n    # 解这个方程：\n    # x - 100 = (2/3)x + 25\n    # x - (2/3)x = 25 + 100\n    # (1/3)x = 125\n    # x = 125 * 3\n    x = 125 * 3\n    # 答案是橘子的重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一个正方体木块，它的棱长是5分米，已知每立方分米重0.4千克，这个木块重多少千克？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 正方体的棱长为5分米\n    side_length = 5\n    # 每立方分米的重量为0.4千克\n    weight_per_cubic_decimeter = 0.4\n    # 正方体的体积 = 棱长的立方\n    volume = side_length ** 3\n    # 木块的总重量 = 体积 * 每立方分米的重量\n    total_weight = volume * weight_per_cubic_decimeter\n    # 答案是木块的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "5、六年级同学参加植树活动，六年级植树150棵，五年级植树的棵数是六年级的(4/5)，五年级同学植树多少棵？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 六年级植树150棵\n    sixth_grade_trees = 150\n    # 五年级植树的棵数是六年级的(4/5)\n    fifth_grade_fraction = 4/5\n    # 五年级植树的数量 = 六年级植树数量 * 五年级的比例\n    fifth_grade_trees = sixth_grade_trees * fifth_grade_fraction\n    # 答案是五年级植树的数量\n    result = fifth_grade_trees\n    # 返回答案\n    return result"]}
{"question": "一块地用拖拉机来耕，45分钟耕了(11/6)公顷，相当于这块地总面积的(11/21)，这块地有多少公顷？", "target": 3.5, "answer": 3.4999999999999996, "score": 1, "generation": ["def solution():\n    # 45分钟耕了(11/6)公顷\n    area_plowed = 11/6\n    # 这部分面积相当于总面积的(11/21)\n    fraction_of_total = 11/21\n    # 总面积 = 已耕面积 / 所占比例\n    total_area = area_plowed / fraction_of_total\n    # 答案是这块地的总面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "一个修路队，第一天修了全长的(2/15)，第二天修了第一天的(1/2)，这时还有1800米就到这条路的中点处，求这条路有多长？", "target": 6000.0, "answer": 6000.0, "score": 1, "generation": ["def solution():\n    # 第一天修了全长的(2/15)\n    first_day_fraction = 2/15\n    # 第二天修了第一天的(1/2)\n    second_day_fraction = 1/2\n    # 第二天修了全长的比例 = 第一天修的比例 * 第二天修的比例\n    second_day_total_fraction = first_day_fraction * second_day_fraction\n    # 两天总共修了全长的比例 = 第一天修的比例 + 第二天修的比例\n    total_fraction = first_day_fraction + second_day_total_fraction\n    # 剩余到中点的距离为1800米\n    remaining_distance = 1800\n    # 中点处的比例是1/2\n    midpoint_fraction = 1/2\n    # 剩余到中点的比例 = 中点比例 - 已修比例\n    remaining_fraction = midpoint_fraction - total_fraction\n    # 路的总长度 = 剩余距离 / 剩余比例\n    total_length = remaining_distance / remaining_fraction\n    # 答案是路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "学校买了8盒羽毛球，每盒有4袋，每袋有12个羽毛球民．一共买了多少个羽毛球？", "target": 384.0, "answer": 384.0, "score": 1, "generation": ["def solution():\n    # 学校买了8盒羽毛球\n    num_boxes = 8\n    # 每盒有4袋\n    num_bags_per_box = 4\n    # 每袋有12个羽毛球\n    num_badmintons_per_bag = 12\n    # 总羽毛球数量 = 盒数 * 每盒的袋数 * 每袋的羽毛球数量\n    total_badmintons = num_boxes * num_bags_per_box * num_badmintons_per_bag\n    # 答案是总羽毛球数量\n    result = total_badmintons\n    # 返回答案\n    return result"]}
{"question": "100克浓度为15%的盐水中，放进8克盐，若要使其浓度变成20%，还要再加多少克水．", "target": 7.0, "answer": 7.0, "score": 1, "generation": ["def solution():\n    # 初始盐水的质量为100克\n    initial_solution_mass = 100\n    # 初始盐水的浓度为15%\n    initial_concentration = 0.15\n    # 初始盐的质量 = 初始盐水的质量 * 初始浓度\n    initial_salt_mass = initial_solution_mass * initial_concentration\n    # 加入8克盐\n    added_salt_mass = 8\n    # 新的盐的质量 = 初始盐的质量 + 加入的盐的质量\n    new_salt_mass = initial_salt_mass + added_salt_mass\n    # 目标浓度为20%\n    target_concentration = 0.20\n    # 设需要加水的质量为x克\n    # 根据浓度公式：浓度 = 盐的质量 / (溶液总质量 + 加入的水的质量)\n    # 解方程：new_salt_mass / (initial_solution_mass + added_salt_mass + x) = target_concentration\n    # 解得x = (new_salt_mass / target_concentration) - (initial_solution_mass + added_salt_mass)\n    x = (new_salt_mass / target_concentration) - (initial_solution_mass + added_salt_mass)\n    # 答案是还需要加水的质量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "制伞厂要生产5000把雨伞，已经生产了12天，还剩2120把没完成，平均每天生产多少把雨伞？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 总雨伞数量为5000把\n    total_umbrellas = 5000\n    # 剩余未完成的雨伞数量为2120把\n    remaining_umbrellas = 2120\n    # 已经生产的天数为12天\n    days_produced = 12\n    # 已经生产的雨伞数量 = 总数量 - 剩余数量\n    produced_umbrellas = total_umbrellas - remaining_umbrellas\n    # 平均每天生产的雨伞数量 = 已经生产的数量 / 生产天数\n    average_daily_production = produced_umbrellas / days_produced\n    # 答案是平均每天生产的雨伞数量\n    result = average_daily_production\n    # 返回答案\n    return result"]}
{"question": "4（3）班的图书角共放有图书210本，第一天借出了总数的(1/7)，第二天借出了总数的(2/21)．两天一共借出了多少本图书？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 图书角共有图书210本\n    total_books = 210\n    # 第一天借出了总数的(1/7)\n    borrowed_fraction_day1 = 1/7\n    # 第二天借出了总数的(2/21)\n    borrowed_fraction_day2 = 2/21\n    # 第一天借出的图书数量 = 总数 * 第一天借出的比例\n    borrowed_day1 = total_books * borrowed_fraction_day1\n    # 第二天借出的图书数量 = 总数 * 第二天借出的比例\n    borrowed_day2 = total_books * borrowed_fraction_day2\n    # 两天一共借出的图书数量 = 第一天借出的数量 + 第二天借出的数量\n    total_borrowed = borrowed_day1 + borrowed_day2\n    # 答案是两天一共借出的图书数量\n    result = total_borrowed\n    # 返回答案\n    return result"]}
{"question": "某电视机厂上半年生产电视机40万台，下半年生产比上半年多(1/8)，下半年生产电视机多少台？", "target": 450000.0, "answer": 45.0, "score": 0, "generation": ["def solution():\n    # 上半年生产电视机40万台\n    first_half_production = 40\n    # 下半年生产比上半年多(1/8)\n    increase_fraction = 1/8\n    # 下半年生产电视机的数量 = 上半年生产数量 * (1 + 增加比例)\n    second_half_production = first_half_production * (1 + increase_fraction)\n    # 答案是下半年生产电视机的数量\n    result = second_half_production\n    # 返回答案\n    return result"]}
{"question": "某校已招收一年级新生315人，其中女生占20%，计划再招一批女生，使女生占全体新生的30%，计划再招女生多少人？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 已招收一年级新生315人\n    total_new_students = 315\n    # 女生占20%\n    initial_girl_percentage = 0.2\n    # 计算初始女生人数 = 总人数 * 女生比例\n    initial_girls = total_new_students * initial_girl_percentage\n    # 计划使女生占全体新生的30%\n    target_girl_percentage = 0.3\n    # 设计划再招女生x人，则新的总人数 = 315 + x\n    # 新的女生人数 = 初始女生人数 + x\n    # 根据题意：(初始女生人数 + x) / (315 + x) = 30%\n    # 解这个方程：\n    # 0.3 * (315 + x) = initial_girls + x\n    # 94.5 + 0.3x = 63 + x\n    # 94.5 - 63 = x - 0.3x\n    # 31.5 = 0.7x\n    # x = 31.5 / 0.7\n    x = 31.5 / 0.7\n    # 答案是计划再招女生的人数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "学校运来白色粉笔225箱，彩色粉笔36箱，如果每箱粉笔都装45盒，运来的白色粉笔和彩色粉笔一共有多少盒？", "target": 11745.0, "answer": 11745.0, "score": 1, "generation": ["def solution():\n    # 白色粉笔的箱数为225箱\n    white_boxes = 225\n    # 彩色粉笔的箱数为36箱\n    colored_boxes = 36\n    # 每箱粉笔装45盒\n    boxes_per_case = 45\n    # 白色粉笔的总盒数 = 白色粉笔的箱数 * 每箱的盒数\n    total_white_boxes = white_boxes * boxes_per_case\n    # 彩色粉笔的总盒数 = 彩色粉笔的箱数 * 每箱的盒数\n    total_colored_boxes = colored_boxes * boxes_per_case\n    # 白色粉笔和彩色粉笔的总盒数 = 白色粉笔的总盒数 + 彩色粉笔的总盒数\n    total_boxes = total_white_boxes + total_colored_boxes\n    # 答案是白色粉笔和彩色粉笔的总盒数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "妈妈今年35岁，小明今年8岁，5年以后，妈妈比小明大多少岁．", "target": 27.0, "answer": 27.0, "score": 1, "generation": ["def solution():\n    # 妈妈今年35岁\n    mom_age = 35\n    # 小明今年8岁\n    xiaoming_age = 8\n    # 5年以后\n    years_later = 5\n    # 妈妈5年后的年龄 = 当前年龄 + 5\n    mom_age_later = mom_age + years_later\n    # 小明5年后的年龄 = 当前年龄 + 5\n    xiaoming_age_later = xiaoming_age + years_later\n    # 妈妈比小明大的年龄 = 妈妈5年后的年龄 - 小明5年后的年龄\n    age_difference = mom_age_later - xiaoming_age_later\n    # 答案是妈妈比小明大的年龄\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "一个卷烟厂上个月香烟销售额为2600万元．如果按销售额的5%缴纳消费税，上月应缴纳消费税款多少万元．", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 上个月香烟销售额为2600万元\n    sales = 2600\n    # 消费税率为5%\n    tax_rate = 0.05\n    # 应缴纳消费税款 = 销售额 * 消费税率\n    tax_amount = sales * tax_rate\n    # 答案是应缴纳的消费税款\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "果园里有9棵苹果树，7棵梨树．每棵苹果树大约摘160千克苹果，这个果园大约摘多少千克苹果？", "target": 1440.0, "answer": 1440.0, "score": 1, "generation": ["def solution():\n    # 苹果树的数量为9棵\n    num_apple_trees = 9\n    # 每棵苹果树大约摘160千克苹果\n    apples_per_tree = 160\n    # 果园大约摘的苹果总重量 = 苹果树的数量 * 每棵苹果树的产量\n    total_apples = num_apple_trees * apples_per_tree\n    # 答案是果园大约摘的苹果总重量\n    result = total_apples\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地到乙地，行了全程的(4/5)，在剩下的路程中，70%是上坡路，其余是下坡路．已知下坡路长3千米，甲、乙两地相距多远？", "target": 50.0, "answer": 50.000000000000014, "score": 1, "generation": ["def solution():\n    # 汽车已经行驶了全程的(4/5)\n    traveled_fraction = 4/5\n    # 剩余路程的比例 = 1 - 已经行驶的比例\n    remaining_fraction = 1 - traveled_fraction\n    # 在剩余路程中，上坡路占70%，下坡路占30%\n    uphill_percentage = 0.7\n    downhill_percentage = 0.3\n    # 已知下坡路长3千米\n    downhill_distance = 3\n    # 剩余路程 = 下坡路长 / 下坡路在剩余路程中的比例\n    remaining_distance = downhill_distance / downhill_percentage\n    # 全程距离 = 剩余路程 / 剩余路程的比例\n    total_distance = remaining_distance / remaining_fraction\n    # 答案是甲、乙两地的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "一批零件，已生产(2/3)再生产80个就超额完成(1/5)，这批零件有多少个？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 已生产(2/3)的零件\n    produced_fraction = 2/3\n    # 再生产80个就超额完成(1/5)\n    additional_production = 80\n    excess_fraction = 1/5\n    # 设这批零件的总数为x\n    # 根据题意，已生产(2/3)x + 80 = x + (1/5)x\n    # 解这个方程\n    # (2/3)x + 80 = (6/5)x\n    # 80 = (6/5)x - (2/3)x\n    # 80 = (18/15)x - (10/15)x\n    # 80 = (8/15)x\n    # x = 80 * (15/8)\n    x = 80 * (15/8)\n    # 答案是这批零件的总数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "把一个棱长为5分米的正方体钢材锻造成一个宽2.5分米，高2分米的长方体钢块，能锻造多长？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 正方体的棱长为5分米\n    cube_side = 5\n    # 正方体的体积 = 棱长的立方\n    cube_volume = cube_side ** 3\n    # 长方体的宽为2.5分米\n    rectangle_width = 2.5\n    # 长方体的高为2分米\n    rectangle_height = 2\n    # 长方体的体积 = 正方体的体积\n    rectangle_volume = cube_volume\n    # 长方体的长度 = 体积 / (宽 * 高)\n    rectangle_length = rectangle_volume / (rectangle_width * rectangle_height)\n    # 答案是长方体的长度\n    result = rectangle_length\n    # 返回答案\n    return result"]}
{"question": "妈妈用20%的钱买了一件180元的衣服，妈妈原来有多少元．", "target": 900.0, "answer": 900.0, "score": 1, "generation": ["def solution():\n    # 妈妈用20%的钱买了一件180元的衣服\n    percentage_spent = 0.2\n    cost_of_clothes = 180\n    # 因为20%的钱等于180元，所以妈妈原来的钱 = 180 / 20%\n    original_money = cost_of_clothes / percentage_spent\n    # 答案是妈妈原来的钱\n    result = original_money\n    # 返回答案\n    return result"]}
{"question": "某班有学生48人，女生占全班的37.5%，后来又转来女生若干人，这时人数恰好是占全班人数的40%，问转来几名女生？", "target": 2.0, "answer": 2.000000000000005, "score": 1, "generation": ["def solution():\n    # 班级原有学生48人\n    original_students = 48\n    # 女生占全班的37.5%\n    original_girls_percentage = 37.5 / 100\n    # 原有女生人数 = 总人数 * 女生比例\n    original_girls = original_students * original_girls_percentage\n    # 设转来x名女生\n    # 转来后女生人数 = 原有女生人数 + x\n    # 转来后总人数 = 原有总人数 + x\n    # 根据题意，转来后女生人数占全班人数的40%\n    # 即 (original_girls + x) / (original_students + x) = 40%\n    # 解这个方程：\n    # original_girls + x = 0.4 * (original_students + x)\n    # original_girls + x = 0.4 * original_students + 0.4x\n    # x - 0.4x = 0.4 * original_students - original_girls\n    # 0.6x = 0.4 * original_students - original_girls\n    # x = (0.4 * original_students - original_girls) / 0.6\n    x = (0.4 * original_students - original_girls) / 0.6\n    # 答案是转来的女生人数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一个合数的质因数是2和3，这个合数=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 合数的质因数是2和3\n    prime_factor1 = 2\n    prime_factor2 = 3\n    # 合数 = 质因数1 * 质因数2\n    composite_number = prime_factor1 * prime_factor2\n    # 答案是合数\n    result = composite_number\n    # 返回答案\n    return result"]}
{"question": "一个数除以23，商是18，余数是20，这个数=．", "target": 434.0, "answer": 434.0, "score": 1, "generation": ["def solution():\n    # 商是18\n    quotient = 18\n    # 除数是23\n    divisor = 23\n    # 余数是20\n    remainder = 20\n    # 根据除法公式：被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "李阿姨准备购买一套住房，如果分期付款要多付10%，如果用现金付款可以优惠5%，李阿姨计算了一下，两种付款方式的差价是15000元．这套住房原价=多少元？", "target": 100000.0, "answer": 99999.99999999991, "score": 1, "generation": ["def solution():\n    # 分期付款要多付10%\n    installment_increase = 0.10\n    # 现金付款可以优惠5%\n    cash_discount = 0.05\n    # 两种付款方式的差价是15000元\n    price_difference = 15000\n    # 分期付款的价格 = 原价 * (1 + 分期付款多付比例)\n    installment_price = 1 + installment_increase\n    # 现金付款的价格 = 原价 * (1 - 现金付款优惠比例)\n    cash_price = 1 - cash_discount\n    # 两种付款方式的差价 = 分期付款价格 - 现金付款价格\n    # 即 price_difference = (installment_price - cash_price) * original_price\n    # 所以原价 = 差价 / (分期付款价格 - 现金付款价格)\n    original_price = price_difference / (installment_price - cash_price)\n    # 答案是这套住房的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "阳光小学去年有小学生1800人，今年比去年减少了8%，今年有小学生多少人？", "target": 1656.0, "answer": 1656.0, "score": 1, "generation": ["def solution():\n    # 去年有小学生1800人\n    students_last_year = 1800\n    # 今年比去年减少了8%\n    decrease_percentage = 0.08\n    # 今年减少的学生人数 = 去年学生人数 * 减少比例\n    decrease_students = students_last_year * decrease_percentage\n    # 今年的学生人数 = 去年学生人数 - 今年减少的学生人数\n    students_this_year = students_last_year - decrease_students\n    # 答案是今年的学生人数\n    result = students_this_year\n    # 返回答案\n    return result"]}
{"question": "配置一种盐水，盐和水的质量比是1﹕15，盐占盐水质量的多少．", "target": 0.0625, "answer": 0.0625, "score": 1, "generation": ["def solution():\n    # 盐和水的质量比是1:15\n    salt_ratio = 1\n    water_ratio = 15\n    # 盐水的总质量 = 盐的质量 + 水的质量\n    total_ratio = salt_ratio + water_ratio\n    # 盐占盐水质量的比例 = 盐的质量 / 盐水的总质量\n    salt_fraction = salt_ratio / total_ratio\n    # 答案是盐占盐水质量的比例\n    result = salt_fraction\n    # 返回答案\n    return result"]}
{"question": "一个圆柱体，底面周长是94.2厘米，高是25厘米，它的侧面积=多少平方厘米．", "target": 2355.0, "answer": 2355.0, "score": 1, "generation": ["def solution():\n    # 圆柱体的底面周长是94.2厘米\n    circumference = 94.2\n    # 圆柱体的高是25厘米\n    height = 25\n    # 圆柱体的侧面积 = 底面周长 * 高\n    lateral_area = circumference * height\n    # 答案是圆柱体的侧面积\n    result = lateral_area\n    # 返回答案\n    return result"]}
{"question": "一个数的75%是30，这个数的20%=．", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 一个数的75%是30\n    percentage_part = 75\n    value_part = 30\n    # 计算这个数的100%是多少\n    full_value = value_part / (percentage_part / 100)\n    # 计算这个数的20%是多少\n    percentage_target = 20\n    target_value = full_value * (percentage_target / 100)\n    # 答案是这个数的20%\n    result = target_value\n    # 返回答案\n    return result"]}
{"question": "电视机厂今年生产电视机36000台，比去年多生产(1/4)，去年生产多少台？", "target": 28800.0, "answer": 28800.0, "score": 1, "generation": ["def solution():\n    # 今年生产电视机36000台\n    production_this_year = 36000\n    # 今年比去年多生产(1/4)\n    increase_fraction = 1/4\n    # 去年的生产量 = 今年的生产量 / (1 + 增加比例)\n    production_last_year = production_this_year / (1 + increase_fraction)\n    # 答案是去年的生产量\n    result = production_last_year\n    # 返回答案\n    return result"]}
{"question": "一种服装原价96元，现在降价(3/8)，现在的售价=多少元？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 服装的原价为96元\n    original_price = 96\n    # 降价的比例为(3/8)\n    discount_fraction = 3/8\n    # 降价的金额 = 原价 * 降价比例\n    discount_amount = original_price * discount_fraction\n    # 现在的售价 = 原价 - 降价的金额\n    current_price = original_price - discount_amount\n    # 答案是现在的售价\n    result = current_price\n    # 返回答案\n    return result"]}
{"question": "印刷车间要装订1314套书，已经订了14天，还剩362套没完成，平均每天订多少套？", "target": 68.0, "answer": 68.0, "score": 1, "generation": ["def solution():\n    # 总共有1314套书需要装订\n    total_books = 1314\n    # 已经装订了14天\n    days_worked = 14\n    # 还剩362套没完成\n    remaining_books = 362\n    # 已经装订的套数 = 总套数 - 剩余套数\n    books_completed = total_books - remaining_books\n    # 平均每天装订的套数 = 已经装订的套数 / 已经工作的天数\n    average_books_per_day = books_completed / days_worked\n    # 答案是平均每天装订的套数\n    result = average_books_per_day\n    # 返回答案\n    return result"]}
{"question": "某商店2月份的营业额是8000元，按规定营业额的5%纳税，应纳税多少元．", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 2月份的营业额是8000元\n    revenue = 8000\n    # 纳税比例为5%\n    tax_rate = 0.05\n    # 应纳税金额 = 营业额 * 纳税比例\n    tax_amount = revenue * tax_rate\n    # 答案是应纳税金额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "育英中学3个年级共18个班，全校师生1100人，教师92人，平均每班多少人？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 全校师生总人数为1100人\n    total_people = 1100\n    # 教师人数为92人\n    num_teachers = 92\n    # 学生人数 = 全校师生总人数 - 教师人数\n    num_students = total_people - num_teachers\n    # 全校共有18个班\n    num_classes = 18\n    # 平均每班人数 = 学生人数 / 班级数量\n    avg_students_per_class = num_students / num_classes\n    # 答案是平均每班人数\n    result = avg_students_per_class\n    # 返回答案\n    return result"]}
{"question": "南京地铁一期工程分高架线和地下线两部分，其中高架线长约6.5千米，地下线是高架线的1.6倍，第一期工程全线长多少千米？", "target": 16.9, "answer": 16.9, "score": 1, "generation": ["def solution():\n    # 高架线的长度约为6.5千米\n    elevated_line = 6.5\n    # 地下线是高架线的1.6倍\n    underground_line = 1.6 * elevated_line\n    # 第一期工程全线长度 = 高架线长度 + 地下线长度\n    total_length = elevated_line + underground_line\n    # 答案是第一期工程全线长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "师徒加工一批零件，徒弟已经加工了总数的20%，师傅加工了总数的(1/3)．这时师傅比徒弟多加工80个，这批零件一共有多少个？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 徒弟加工了总数的20%\n    apprentice_fraction = 0.2\n    # 师傅加工了总数的(1/3)\n    master_fraction = 1/3\n    # 师傅比徒弟多加工80个\n    difference = 80\n    # 设总数为x，则师傅加工的零件数 - 徒弟加工的零件数 = 80\n    # (1/3)x - 0.2x = 80\n    # 解这个方程\n    # (1/3 - 0.2)x = 80\n    # (1/3 - 1/5)x = 80\n    # (5/15 - 3/15)x = 80\n    # (2/15)x = 80\n    # x = 80 * (15/2)\n    x = difference * (15 / 2)\n    # 答案是这批零件的总数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "停车场有面包车32辆，小轿车的辆数比面包车的4倍少19辆．小轿车有多少辆？", "target": 109.0, "answer": 109.0, "score": 1, "generation": ["def solution():\n    # 停车场有面包车32辆\n    num_minivans = 32\n    # 小轿车的辆数比面包车的4倍少19辆\n    num_cars = 4 * num_minivans - 19\n    # 答案是小轿车的数量\n    result = num_cars\n    # 返回答案\n    return result"]}
{"question": "某饭店十月份的营业额为250000元，税率是5%，营业税应缴多少元．", "target": 12500.0, "answer": 12500.0, "score": 1, "generation": ["def solution():\n    # 十月份的营业额为250000元\n    revenue = 250000\n    # 税率是5%\n    tax_rate = 0.05\n    # 营业税 = 营业额 * 税率\n    tax_payable = revenue * tax_rate\n    # 答案是营业税应缴的金额\n    result = tax_payable\n    # 返回答案\n    return result"]}
{"question": "一座桥长2400米，一列火车以每秒20米的速度通过这座桥，火车车身长200米，则火车从上桥到车尾巴离开桥需要多少秒．", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 桥的长度为2400米\n    bridge_length = 2400\n    # 火车的车身长度为200米\n    train_length = 200\n    # 火车的速度为每秒20米\n    train_speed = 20\n    # 火车从上桥到车尾巴离开桥需要行驶的总距离 = 桥的长度 + 火车的车身长度\n    total_distance = bridge_length + train_length\n    # 所需时间 = 总距离 / 火车的速度\n    time_needed = total_distance / train_speed\n    # 答案是所需时间\n    result = time_needed\n    # 返回答案\n    return result"]}
{"question": "一个装订小组要装订1820本书，4.5小时装订了315本．照这样计算，剩下的书还需要多少小时才能装订完？", "target": 21.5, "answer": 21.5, "score": 1, "generation": ["def solution():\n    # 总共有1820本书需要装订\n    total_books = 1820\n    # 4.5小时装订了315本\n    books_bound = 315\n    hours_spent = 4.5\n    # 计算装订速度 = 装订的书本数 / 花费的时间\n    binding_speed = books_bound / hours_spent\n    # 剩余的书本数 = 总书本数 - 已装订的书本数\n    remaining_books = total_books - books_bound\n    # 剩余的时间 = 剩余的书本数 / 装订速度\n    remaining_hours = remaining_books / binding_speed\n    # 答案是剩余的时间\n    result = remaining_hours\n    # 返回答案\n    return result"]}
{"question": "一个数的2.1倍是7.77，这个数=．", "target": 3.7, "answer": 3.6999999999999997, "score": 1, "generation": ["def solution():\n    # 一个数的2.1倍是7.77\n    multiple = 2.1\n    result_number = 7.77\n    # 这个数 = 结果数 / 倍数\n    number = result_number / multiple\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "501班有学生42人，其中男生有25人，女生人数是全班的几分之几？", "target": 0.40476190476190477, "answer": 0.40476190476190477, "score": 1, "generation": ["def solution():\n    # 501班的总学生人数为42人\n    total_students = 42\n    # 男生人数为25人\n    num_boys = 25\n    # 女生人数 = 总人数 - 男生人数\n    num_girls = total_students - num_boys\n    # 女生人数占全班的比例 = 女生人数 / 总人数\n    girls_fraction = num_girls / total_students\n    # 答案是女生人数占全班的比例\n    result = girls_fraction\n    # 返回答案\n    return result"]}
{"question": "一台彩电现在的售价是1480元，比原来降低了120元，现在的售价是原价的百分之几？", "target": 92.5, "answer": 92.5, "score": 1, "generation": ["def solution():\n    # 现在的售价是1480元\n    current_price = 1480\n    # 比原来降低了120元\n    price_reduction = 120\n    # 原价 = 现在的售价 + 降低的价格\n    original_price = current_price + price_reduction\n    # 现在的售价是原价的百分之几 = (现在的售价 / 原价) * 100\n    percentage = (current_price / original_price) * 100\n    # 答案是现在的售价是原价的百分之几\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "一本故事书有240页，比一本科技书少25%，这本科技书=多少页．", "target": 320.0, "answer": 320.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为240页\n    storybook_pages = 240\n    # 故事书比科技书少25%，即故事书页数是科技书的75%\n    percentage_less = 0.25\n    # 科技书的页数 = 故事书页数 / (1 - 百分比少)\n    techbook_pages = storybook_pages / (1 - percentage_less)\n    # 答案是科技书的页数\n    result = techbook_pages\n    # 返回答案\n    return result"]}
{"question": "李大爷把一根6米长的竹竿垂直插入鱼塘中，竹竿的入泥部分是1.5米，露出水面的部分是1.24米，这个鱼塘水深多少米？", "target": 3.26, "answer": 3.26, "score": 1, "generation": ["def solution():\n    # 竹竿的总长度为6米\n    total_length = 6\n    # 竹竿的入泥部分是1.5米\n    mud_part = 1.5\n    # 竹竿露出水面的部分是1.24米\n    above_water_part = 1.24\n    # 水深 = 总长度 - 入泥部分 - 露出水面部分\n    water_depth = total_length - mud_part - above_water_part\n    # 答案是鱼塘的水深\n    result = water_depth\n    # 返回答案\n    return result"]}
{"question": "山羊有60只，绵羊比山羊多80%，绵羊有多少只．", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 山羊的数量为60只\n    num_goats = 60\n    # 绵羊比山羊多80%\n    sheep_increase_percentage = 0.8\n    # 绵羊的数量 = 山羊的数量 * (1 + 绵羊比山羊多的百分比)\n    num_sheep = num_goats * (1 + sheep_increase_percentage)\n    # 答案是绵羊的数量\n    result = num_sheep\n    # 返回答案\n    return result"]}
{"question": "一列火车从泰山到青岛以平均每小时85千米的速度行驶，需5.6小时到达．提速后，只需3.4小时就能到达．提速后的速度=？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 火车从泰山到青岛的平均速度为每小时85千米\n    original_speed = 85\n    # 原始行驶时间为5.6小时\n    original_time = 5.6\n    # 提速后的行驶时间为3.4小时\n    new_time = 3.4\n    # 计算泰山到青岛的距离 = 原始速度 * 原始时间\n    distance = original_speed * original_time\n    # 提速后的速度 = 距离 / 提速后的时间\n    new_speed = distance / new_time\n    # 答案是提速后的速度\n    result = new_speed\n    # 返回答案\n    return result"]}
{"question": "某商场元旦大酬宾，标价40元童装，按标价的(4/5)出售，售价=多少元？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 童装的标价为40元\n    marked_price = 40\n    # 出售价格为标价的(4/5)\n    selling_fraction = 4/5\n    # 售价 = 标价 * 出售比例\n    selling_price = marked_price * selling_fraction\n    # 答案是售价\n    result = selling_price\n    # 返回答案\n    return result"]}
{"question": "有一摞纸，共有120张．第一次用了它的(3/5)，第二次用了它的(1/6)，两次一共用了多少张纸？", "target": 92.0, "answer": 92.0, "score": 1, "generation": ["def solution():\n    # 总共有120张纸\n    total_papers = 120\n    # 第一次用了(3/5)的纸\n    first_use_fraction = 3/5\n    # 第二次用了(1/6)的纸\n    second_use_fraction = 1/6\n    # 第一次用了的纸数 = 总纸数 * 第一次用的比例\n    first_use_papers = total_papers * first_use_fraction\n    # 第二次用了的纸数 = 总纸数 * 第二次用的比例\n    second_use_papers = total_papers * second_use_fraction\n    # 两次一共用了的纸数 = 第一次用的纸数 + 第二次用的纸数\n    total_used_papers = first_use_papers + second_use_papers\n    # 答案是两次一共用了的纸数\n    result = total_used_papers\n    # 返回答案\n    return result"]}
{"question": "37与23的和，乘3.6与2.8的差，积=？", "target": 48.0, "answer": 48.000000000000014, "score": 1, "generation": ["def solution():\n    # 第一个数是37\n    num1 = 37\n    # 第二个数是23\n    num2 = 23\n    # 第三个数是3.6\n    num3 = 3.6\n    # 第四个数是2.8\n    num4 = 2.8\n    # 37与23的和\n    sum_num1_num2 = num1 + num2\n    # 3.6与2.8的差\n    diff_num3_num4 = num3 - num4\n    # 积 = 和 * 差\n    product = sum_num1_num2 * diff_num3_num4\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "用边长0.6米的方砖铺54平方米的地面，需要多少块这样的方砖？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 方砖的边长为0.6米\n    brick_side = 0.6\n    # 地面的面积为54平方米\n    floor_area = 54\n    # 每块方砖的面积 = 边长 * 边长\n    brick_area = brick_side * brick_side\n    # 需要的方砖数量 = 地面面积 / 每块方砖的面积\n    num_bricks = floor_area / brick_area\n    # 答案是需要的方砖数量\n    result = num_bricks\n    # 返回答案\n    return result"]}
{"question": "王康同学买4本日记本用了48元，他还想买8本送给他的好朋友们，需要准备多少钱？", "target": 96.0, "answer": 96.0, "score": 1, "generation": ["def solution():\n    # 王康同学买了4本日记本用了48元\n    num_books_bought = 4\n    total_cost_bought = 48\n    # 他还想买8本送给他的好朋友们\n    num_books_to_buy = 8\n    # 每本日记本的价格 = 总花费 / 购买数量\n    price_per_book = total_cost_bought / num_books_bought\n    # 购买8本日记本的总花费 = 每本价格 * 购买数量\n    total_cost_to_buy = price_per_book * num_books_to_buy\n    # 答案是购买8本日记本的总花费\n    result = total_cost_to_buy\n    # 返回答案\n    return result"]}
{"question": "甲数是14.6，乙数比甲数的3倍少8.2，乙数比甲数多多少？", "target": 21.0, "answer": 20.999999999999993, "score": 1, "generation": ["def solution():\n    # 甲数是14.6\n    num_a = 14.6\n    # 乙数比甲数的3倍少8.2\n    num_b = 3 * num_a - 8.2\n    # 乙数比甲数多的数值 = 乙数 - 甲数\n    difference = num_b - num_a\n    # 答案是乙数比甲数多的数值\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "我们学校美术小组有24人，摄影小组人数是美术小组的(1/2)，航模小组的人数是摄影小组的(5/6)，航模小组有多少人？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 美术小组的人数为24人\n    art_group = 24\n    # 摄影小组人数是美术小组的(1/2)\n    photography_group = (1/2) * art_group\n    # 航模小组的人数是摄影小组的(5/6)\n    model_group = (5/6) * photography_group\n    # 答案是航模小组的人数\n    result = model_group\n    # 返回答案\n    return result"]}
{"question": "某小学三年级有学生145人，四年级有学生155人，学校要为这两个年级的学生每人发4个桃子．一共要发多少个桃子？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 三年级的学生人数为145人\n    num_third_grade = 145\n    # 四年级的学生人数为155人\n    num_fourth_grade = 155\n    # 每个学生发4个桃子\n    peaches_per_student = 4\n    # 总学生人数 = 三年级人数 + 四年级人数\n    total_students = num_third_grade + num_fourth_grade\n    # 因为每个学生发4个桃子，所以总桃子数 = 总学生人数 * 每个学生发的桃子数\n    total_peaches = total_students * peaches_per_student\n    # 答案是总桃子数\n    result = total_peaches\n    # 返回答案\n    return result"]}
{"question": "一个图书馆有24个同样的书架，每个书架有4层，每层放240本书．这些书架一共能放多少本书？", "target": 23040.0, "answer": 23040.0, "score": 1, "generation": ["def solution():\n    # 图书馆有24个书架\n    num_shelves = 24\n    # 每个书架有4层\n    layers_per_shelf = 4\n    # 每层放240本书\n    books_per_layer = 240\n    # 每个书架能放的书 = 每层放的书 * 层数\n    books_per_shelf = books_per_layer * layers_per_shelf\n    # 所有书架能放的书 = 每个书架能放的书 * 书架数量\n    total_books = books_per_shelf * num_shelves\n    # 答案是所有书架能放的书\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "学校田径队有男队员35人，女队员21人．如果把它们平均分成4个小组进行训练，每个小组有多少队员？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 男队员的人数为35人\n    num_male = 35\n    # 女队员的人数为21人\n    num_female = 21\n    # 总队员人数 = 男队员人数 + 女队员人数\n    total_members = num_male + num_female\n    # 分成4个小组\n    num_groups = 4\n    # 每个小组的队员人数 = 总队员人数 / 小组数量\n    members_per_group = total_members / num_groups\n    # 答案是每个小组的队员人数\n    result = members_per_group\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车从相距450千米的两地相向开出，4.5小时相遇．已知甲车每小时行54千米，乙车每小时行多少千米？", "target": 46.0, "answer": 46.0, "score": 1, "generation": ["def solution():\n    # 两地的距离为450千米\n    distance = 450\n    # 两车相遇的时间为4.5小时\n    time_to_meet = 4.5\n    # 甲车的速度是每小时54千米\n    speed_a = 54\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = distance / time_to_meet\n    # 乙车的速度 = 相对速度 - 甲车的速度\n    speed_b = relative_speed - speed_a\n    # 答案是乙车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "甲乙两地相距406公里，一辆汽车从甲地开往乙地，4小时行驶了180公里．照这样的速度再行驶多少小时这辆汽车就可以到达乙地？", "target": 5.022222222222222, "answer": 5.022222222222222, "score": 1, "generation": ["def solution():\n    # 甲乙两地相距406公里\n    total_distance = 406\n    # 汽车4小时行驶了180公里\n    distance_in_4_hours = 180\n    # 汽车的速度 = 行驶距离 / 行驶时间\n    speed = distance_in_4_hours / 4\n    # 剩余距离 = 总距离 - 已行驶距离\n    remaining_distance = total_distance - distance_in_4_hours\n    # 剩余时间 = 剩余距离 / 汽车速度\n    remaining_time = remaining_distance / speed\n    # 答案是剩余时间\n    result = remaining_time\n    # 返回答案\n    return result"]}
{"question": "6（2）班图书角有故事书36本，漫画书比故事书多(1/3)，漫画书有多少本．", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 故事书的数量为36本\n    num_story_books = 36\n    # 漫画书比故事书多(1/3)\n    comic_books_increase = 1/3\n    # 漫画书的数量 = 故事书的数量 * (1 + 增加比例)\n    num_comic_books = num_story_books * (1 + comic_books_increase)\n    # 答案是漫画书的数量\n    result = num_comic_books\n    # 返回答案\n    return result"]}
{"question": "农资公司要运250吨化肥到农村，其中60%用船运，其余的用卡车运．用船运的比用卡车运的多多少吨？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 农资公司要运250吨化肥到农村\n    total_fertilizer = 250\n    # 60%用船运\n    ship_percentage = 0.6\n    # 其余的用卡车运\n    truck_percentage = 1 - ship_percentage\n    # 船运的化肥数量 = 总化肥数量 * 船运比例\n    ship_amount = total_fertilizer * ship_percentage\n    # 卡车运的化肥数量 = 总化肥数量 * 卡车运比例\n    truck_amount = total_fertilizer * truck_percentage\n    # 船运比卡车运多的化肥数量 = 船运数量 - 卡车运数量\n    difference = ship_amount - truck_amount\n    # 答案是船运比卡车运多的化肥数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "红旗小学今年招收新生240人，比原计划多招收(1/5)，原计划招生多少人？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 今年招收新生240人\n    actual_enrollment = 240\n    # 比原计划多招收(1/5)\n    excess_fraction = 1/5\n    # 设原计划招生人数为x，则实际招生人数 = x + (1/5)*x = (6/5)*x\n    # 所以 x = 实际招生人数 / (6/5)\n    planned_enrollment = actual_enrollment / (1 + excess_fraction)\n    # 答案是原计划招生人数\n    result = planned_enrollment\n    # 返回答案\n    return result"]}
{"question": "从9500/19的商里面减去36*12的积，差=？", "target": 68.0, "answer": 68.0, "score": 1, "generation": ["def solution():\n    # 计算9500除以19的商\n    quotient = 9500 / 19\n    # 计算36乘以12的积\n    product = 36 * 12\n    # 计算差 = 商 - 积\n    difference = quotient - product\n    # 答案是差\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "胜利小学有学生1200人，某一天的出勤率是99.5%．这天有多少人没有到校读书？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 胜利小学有学生1200人\n    total_students = 1200\n    # 某一天的出勤率是99.5%\n    attendance_rate = 99.5 / 100\n    # 出勤的学生人数 = 总学生人数 * 出勤率\n    attended_students = total_students * attendance_rate\n    # 没有到校读书的学生人数 = 总学生人数 - 出勤的学生人数\n    absent_students = total_students - attended_students\n    # 答案是没有到校读书的学生人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "一本书售价36元，利润是成本的20%，成本=多少元？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 书的售价为36元\n    selling_price = 36\n    # 利润是成本的20%\n    profit_percentage = 0.2\n    # 设成本为x元，则利润为0.2x元\n    # 售价 = 成本 + 利润 = x + 0.2x = 1.2x\n    # 所以成本x = 售价 / 1.2\n    cost_price = selling_price / (1 + profit_percentage)\n    # 答案是成本\n    result = cost_price\n    # 返回答案\n    return result"]}
{"question": "商店共运来470个玩具熊，已经卖出348个，每个23元，剩下的每个卖17元，一共可以收入多少元？", "target": 10078.0, "answer": 10078.0, "score": 1, "generation": ["def solution():\n    # 商店运来玩具熊的总数为470个\n    total_teddy_bears = 470\n    # 已经卖出的玩具熊数量为348个\n    sold_teddy_bears = 348\n    # 每个已卖出的玩具熊价格为23元\n    price_per_sold = 23\n    # 剩下的玩具熊数量 = 总数 - 已卖出的数量\n    remaining_teddy_bears = total_teddy_bears - sold_teddy_bears\n    # 每个剩下的玩具熊价格为17元\n    price_per_remaining = 17\n    # 已卖出玩具熊的总收入 = 已卖出的数量 * 每个的价格\n    income_sold = sold_teddy_bears * price_per_sold\n    # 剩下玩具熊的总收入 = 剩下的数量 * 每个的价格\n    income_remaining = remaining_teddy_bears * price_per_remaining\n    # 总收入 = 已卖出玩具熊的收入 + 剩下玩具熊的收入\n    total_income = income_sold + income_remaining\n    # 答案是总收入\n    result = total_income\n    # 返回答案\n    return result"]}
{"question": "挖一条长400米的水渠，已经挖了全长的(3/5)，还剩多少米没挖？", "target": 160.0, "answer": 160.0, "score": 1, "generation": ["def solution():\n    # 水渠的总长度为400米\n    total_length = 400\n    # 已经挖了全长的(3/5)\n    dug_fraction = 3/5\n    # 已经挖的长度 = 总长度 * 已经挖的比例\n    dug_length = total_length * dug_fraction\n    # 剩余未挖的长度 = 总长度 - 已经挖的长度\n    remaining_length = total_length - dug_length\n    # 答案是剩余未挖的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "放假乘火车去奶奶家要用16小时．现在火车提速了，14小时就能到．现在乘火车去奶奶家的时间比原来节省了百分之几？", "target": 12.5, "answer": 12.5, "score": 1, "generation": ["def solution():\n    # 原来的乘火车时间为16小时\n    original_time = 16\n    # 现在的乘火车时间为14小时\n    new_time = 14\n    # 节省的时间 = 原来的时间 - 现在的时间\n    time_saved = original_time - new_time\n    # 节省的百分比 = (节省的时间 / 原来的时间) * 100\n    percentage_saved = (time_saved / original_time) * 100\n    # 答案是节省的百分比\n    result = percentage_saved\n    # 返回答案\n    return result"]}
{"question": "小明的爸爸发表了一篇文章，获得稿酬1200元．按规定，稿酬收入超过800元的部分按14%的税率缴纳个人所得税．小明的爸爸应缴纳个人所得税多少元？", "target": 56.0, "answer": 56.00000000000001, "score": 1, "generation": ["def solution():\n    # 稿酬总收入为1200元\n    total_income = 1200\n    # 免税部分为800元\n    tax_free_income = 800\n    # 应纳税所得额 = 总收入 - 免税部分\n    taxable_income = total_income - tax_free_income\n    # 税率为14%\n    tax_rate = 0.14\n    # 应缴纳的个人所得税 = 应纳税所得额 * 税率\n    income_tax = taxable_income * tax_rate\n    # 答案是应缴纳的个人所得税\n    result = income_tax\n    # 返回答案\n    return result"]}
{"question": "学学看到太上老君正在用一根绳子拴宝葫芦，第一次用去全长的一半还多2米，第二次用去余下的一半少10米，第3次用去15米，最后还剩9米，那么这根绳子原来有多少米．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 第三次用去15米，最后还剩9米\n    third_use = 15\n    remaining_after_third = 9\n    # 第二次用去后剩下的长度 = 第三次用去的长度 + 最后剩下的长度\n    remaining_after_second = third_use + remaining_after_third\n    # 第二次用去余下的一半少10米\n    second_use = (remaining_after_second - 10) * 2\n    # 第一次用去全长的一半还多2米\n    first_use = (second_use + 2) * 2\n    # 这根绳子原来的长度 = 第一次用去前的长度\n    original_length = first_use\n    # 答案是这根绳子原来的长度\n    result = original_length\n    # 返回答案\n    return result"]}
{"question": "学校买回25箱墨水，每箱36瓶，每瓶4.8元．一共需要多少钱？", "target": 4320.0, "answer": 4320.0, "score": 1, "generation": ["def solution():\n    # 学校买回25箱墨水\n    num_boxes = 25\n    # 每箱有36瓶\n    bottles_per_box = 36\n    # 每瓶的价格是4.8元\n    price_per_bottle = 4.8\n    # 总瓶数 = 箱数 * 每箱的瓶数\n    total_bottles = num_boxes * bottles_per_box\n    # 总费用 = 总瓶数 * 每瓶的价格\n    total_cost = total_bottles * price_per_bottle\n    # 答案是一共需要的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "小军读一本故事书，第一天共读42页，第二天共读了43页，还余下全书的83%没有读，这本故事书共有多少页？", "target": 500.0, "answer": 499.9999999999999, "score": 1, "generation": ["def solution():\n    # 第一天读的页数为42页\n    pages_day1 = 42\n    # 第二天读的页数为43页\n    pages_day2 = 43\n    # 剩余未读的百分比为83%\n    remaining_percentage = 0.83\n    # 已读的页数 = 第一天读的页数 + 第二天读的页数\n    pages_read = pages_day1 + pages_day2\n    # 已读的百分比 = 1 - 剩余未读的百分比\n    read_percentage = 1 - remaining_percentage\n    # 总页数 = 已读的页数 / 已读的百分比\n    total_pages = pages_read / read_percentage\n    # 答案是这本故事书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "胜利小学为贫困地区捐款3750.8元，比红旗小学少52.2元，两所学校共捐款多少元？", "target": 7553.8, "answer": 7553.8, "score": 1, "generation": ["def solution():\n    # 胜利小学捐款3750.8元\n    victory_school_donation = 3750.8\n    # 红旗小学比胜利小学多捐52.2元\n    red_flag_school_donation = victory_school_donation + 52.2\n    # 两所学校共捐款 = 胜利小学捐款 + 红旗小学捐款\n    total_donation = victory_school_donation + red_flag_school_donation\n    # 答案是两所学校共捐款的金额\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "甲数比乙数的(4/5)还少20，已知甲数是40，乙数=？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 甲数是40\n    num_a = 40\n    # 甲数比乙数的(4/5)还少20\n    fraction = 4/5\n    difference = 20\n    # 设乙数为x，根据题意有：num_a = (fraction * x) - difference\n    # 解这个方程得到：x = (num_a + difference) / fraction\n    num_b = (num_a + difference) / fraction\n    # 答案是乙数\n    result = num_b\n    # 返回答案\n    return result"]}
{"question": "某化肥厂去年生产化肥6000吨，今年比去年增产20%，今年增产多少吨？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 去年生产化肥6000吨\n    last_year_production = 6000\n    # 今年比去年增产20%\n    production_increase_percentage = 0.2\n    # 今年增产的吨数 = 去年生产量 * 增产比例\n    increase_in_production = last_year_production * production_increase_percentage\n    # 答案是今年增产的吨数\n    result = increase_in_production\n    # 返回答案\n    return result"]}
{"question": "同学们参加爬山比赛，女同学分成了4组，每组有15人．参赛的男同学有76名，一共有多少名同学参加爬山比赛？", "target": 136.0, "answer": 136.0, "score": 1, "generation": ["def solution():\n    # 女同学分成了4组\n    num_groups = 4\n    # 每组有15人\n    num_per_group = 15\n    # 参赛的男同学有76名\n    num_male_students = 76\n    # 女同学的总人数 = 组数 * 每组人数\n    num_female_students = num_groups * num_per_group\n    # 总参赛人数 = 女同学人数 + 男同学人数\n    total_students = num_female_students + num_male_students\n    # 答案是总参赛人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一根绳子长20米，剪去多少米后，剩下的占全长的40%．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为20米\n    total_length = 20\n    # 剩下的占全长的40%\n    remaining_percentage = 0.4\n    # 剩下的长度 = 总长度 * 剩下的比例\n    remaining_length = total_length * remaining_percentage\n    # 剪去的长度 = 总长度 - 剩下的长度\n    cut_length = total_length - remaining_length\n    # 答案是剪去的长度\n    result = cut_length\n    # 返回答案\n    return result"]}
{"question": "一台洗衣机的原价是1250元，实际售价为1200元，实际售价比原价降低了百分之几？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 洗衣机的原价是1250元\n    original_price = 1250\n    # 实际售价为1200元\n    actual_price = 1200\n    # 价格降低的金额 = 原价 - 实际售价\n    price_difference = original_price - actual_price\n    # 价格降低的百分比 = (价格降低的金额 / 原价) * 100\n    percentage_decrease = (price_difference / original_price) * 100\n    # 答案是价格降低的百分比\n    result = percentage_decrease\n    # 返回答案\n    return result"]}
{"question": "把一根25米长的水管锯成5段，每锯一次用8分钟，一共需要多少分钟．", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 水管的总长度为25米\n    total_length = 25\n    # 需要锯成5段\n    num_segments = 5\n    # 每锯一次用8分钟\n    time_per_cut = 8\n    # 锯的次数 = 段数 - 1\n    num_cuts = num_segments - 1\n    # 总时间 = 锯的次数 * 每次锯的时间\n    total_time = num_cuts * time_per_cut\n    # 答案是一共需要的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "一个数是8，另一个数是840，积=？", "target": 6720.0, "answer": 6720.0, "score": 1, "generation": ["def solution():\n    # 第一个数是8\n    num1 = 8\n    # 第二个数是840\n    num2 = 840\n    # 积 = 第一个数 * 第二个数\n    product = num1 * num2\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "淘气生日时，妈妈送给他一个圆锥形的陀螺，陀螺的底面直径是6厘米，高5厘米，如果妈妈要把它装在一个长方体盒子中，这个盒子的容积至少=多少立方厘米．", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 陀螺的底面直径是6厘米\n    diameter = 6\n    # 陀螺的高是5厘米\n    height = 5\n    # 因为陀螺是圆锥形，要装在一个长方体盒子中，盒子的长和宽至少等于陀螺的直径\n    box_length = diameter\n    box_width = diameter\n    # 盒子的高至少等于陀螺的高\n    box_height = height\n    # 盒子的容积 = 长 * 宽 * 高\n    box_volume = box_length * box_width * box_height\n    # 答案是盒子的容积\n    result = box_volume\n    # 返回答案\n    return result"]}
{"question": "多少-278=192．", "target": 470.0, "answer": 470.0, "score": 1, "generation": ["def solution():\n    # 设未知数为x\n    x = 192 + 278\n    # 答案是x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "一辆客车从甲地到乙地，计划要8小时，实际时间比计划少用(1/16)，实际用了多少小时？", "target": 7.5, "answer": 7.5, "score": 1, "generation": ["def solution():\n    # 计划用时为8小时\n    planned_time = 8\n    # 实际时间比计划少用(1/16)\n    time_saved_fraction = 1/16\n    # 实际用时 = 计划用时 - 计划用时 * 节省的时间比例\n    actual_time = planned_time - planned_time * time_saved_fraction\n    # 答案是实际用时\n    result = actual_time\n    # 返回答案\n    return result"]}
{"question": "一件原价90元的商品打0.9出售，便宜了多少元．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 商品的原价为90元\n    original_price = 90\n    # 商品的折扣为0.9\n    discount = 0.9\n    # 商品的折扣价格 = 原价 * 折扣\n    discounted_price = original_price * discount\n    # 便宜的价格 = 原价 - 折扣价格\n    price_difference = original_price - discounted_price\n    # 答案是便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "要挖一条全长120米的水渠，前8天平均每天挖10.5米，剩下的每天挖12米，还需几天挖完？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 水渠的全长为120米\n    total_length = 120\n    # 前8天平均每天挖10.5米\n    days_initial = 8\n    daily_dig_initial = 10.5\n    # 前8天挖的总长度 = 天数 * 每天挖的长度\n    length_dug_initial = days_initial * daily_dig_initial\n    # 剩余的长度 = 总长度 - 前8天挖的长度\n    remaining_length = total_length - length_dug_initial\n    # 剩下的每天挖12米\n    daily_dig_remaining = 12\n    # 还需的天数 = 剩余长度 / 每天挖的长度\n    days_remaining = remaining_length / daily_dig_remaining\n    # 答案是还需的天数\n    result = days_remaining\n    # 返回答案\n    return result"]}
{"question": "一个因数是60，另一个因数是88，他们的积=．", "target": 5280.0, "answer": 5280.0, "score": 1, "generation": ["def solution():\n    # 第一个因数是60\n    factor1 = 60\n    # 第二个因数是88\n    factor2 = 88\n    # 两个因数的积 = 第一个因数 * 第二个因数\n    product = factor1 * factor2\n    # 答案是两个因数的积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "一项工程25人15天可以完成，如果每人的工作效率不变，工作人员减少5人，需要多少天可以完成？", "target": 18.75, "answer": 18.75, "score": 1, "generation": ["def solution():\n    # 初始工作人员数量为25人\n    initial_workers = 25\n    # 初始完成工程所需天数为15天\n    initial_days = 15\n    # 工作人员减少5人\n    reduced_workers = 5\n    # 新的工作人员数量 = 初始工作人员数量 - 减少的工作人员数量\n    new_workers = initial_workers - reduced_workers\n    # 总工作量 = 初始工作人员数量 * 初始完成天数\n    total_work = initial_workers * initial_days\n    # 新的完成天数 = 总工作量 / 新的工作人员数量\n    new_days = total_work / new_workers\n    # 答案是新的完成天数\n    result = new_days\n    # 返回答案\n    return result"]}
{"question": "商场运来一批衣服，一共460件，进价每件75元，零售价每件96元，如果这一批衣服全部卖完，这家商场可以赚多少元钱？", "target": 9660.0, "answer": 9660.0, "score": 1, "generation": ["def solution():\n    # 商场运来的衣服总数为460件\n    total_clothes = 460\n    # 每件衣服的进价为75元\n    cost_price_per_cloth = 75\n    # 每件衣服的零售价为96元\n    selling_price_per_cloth = 96\n    # 总进价 = 衣服总数 * 每件衣服的进价\n    total_cost_price = total_clothes * cost_price_per_cloth\n    # 总零售价 = 衣服总数 * 每件衣服的零售价\n    total_selling_price = total_clothes * selling_price_per_cloth\n    # 总利润 = 总零售价 - 总进价\n    total_profit = total_selling_price - total_cost_price\n    # 答案是总利润\n    result = total_profit\n    # 返回答案\n    return result"]}
{"question": "甲、乙两站相距246千米，A、B两辆汽车分别从甲站、乙站同时相向开出1.5小时后相遇．A汽车的速度是89千米/小时，B汽车的速度=．", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两站相距246千米\n    distance = 246\n    # 两车相向行驶1.5小时后相遇\n    time = 1.5\n    # A汽车的速度是89千米/小时\n    speed_a = 89\n    # 两车的相对速度 = 距离 / 时间\n    relative_speed = distance / time\n    # B汽车的速度 = 相对速度 - A汽车的速度\n    speed_b = relative_speed - speed_a\n    # 答案是B汽车的速度\n    result = speed_b\n    # 返回答案\n    return result"]}
{"question": "同学们要折120只纸鹤，每人折5只，每个小组有12人，需要几个小组才能完成？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 需要折的纸鹤总数为120只\n    total_paper_cranes = 120\n    # 每人折5只纸鹤\n    cranes_per_person = 5\n    # 每个小组有12人\n    people_per_group = 12\n    # 需要的总人数 = 总纸鹤数 / 每人折的纸鹤数\n    total_people_needed = total_paper_cranes / cranes_per_person\n    # 需要的小组数 = 总人数 / 每个小组的人数\n    num_groups_needed = total_people_needed / people_per_group\n    # 答案是需要的小组数\n    result = num_groups_needed\n    # 返回答案\n    return result"]}
{"question": "某工人要加工一批零件，已加工了这批零件的(3/5)，还剩下120个没加工，这批零件共几个？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 已加工了这批零件的(3/5)\n    processed_fraction = 3/5\n    # 还剩下120个没加工\n    remaining_parts = 120\n    # 因为已加工了(3/5)，所以剩下的部分是(2/5)\n    remaining_fraction = 1 - processed_fraction\n    # 这批零件的总数 = 剩下的数量 / 剩下的比例\n    total_parts = remaining_parts / remaining_fraction\n    # 答案是这批零件的总数\n    result = total_parts\n    # 返回答案\n    return result"]}
{"question": "映山红剧院分4个区，每个区有20排座位，每排有25个座位．剧院里一共能坐多少人？", "target": 2000.0, "answer": 2000.0, "score": 1, "generation": ["def solution():\n    # 剧院分为4个区\n    num_zones = 4\n    # 每个区有20排座位\n    rows_per_zone = 20\n    # 每排有25个座位\n    seats_per_row = 25\n    # 每个区的座位数 = 排数 * 每排座位数\n    seats_per_zone = rows_per_zone * seats_per_row\n    # 剧院的总座位数 = 区数 * 每个区的座位数\n    total_seats = num_zones * seats_per_zone\n    # 答案是剧院里一共能坐的人数\n    result = total_seats\n    # 返回答案\n    return result"]}
{"question": "王老师以每股10元的价格购进某种股票5000股，过了一段时间后以每股12元卖出，按规定买卖股票都要按买卖金额的0.55%缴纳手续费，王老师这次买卖股票实际赚多少元．", "target": 9395.0, "answer": 9395.0, "score": 1, "generation": ["def solution():\n    # 购进股票的数量为5000股\n    num_shares = 5000\n    # 购进价格为每股10元\n    purchase_price_per_share = 10\n    # 卖出价格为每股12元\n    selling_price_per_share = 12\n    # 买卖股票的手续费比例为0.55%\n    transaction_fee_rate = 0.0055\n    # 购进总金额 = 购进数量 * 购进价格\n    total_purchase_amount = num_shares * purchase_price_per_share\n    # 卖出总金额 = 卖出数量 * 卖出价格\n    total_selling_amount = num_shares * selling_price_per_share\n    # 购进手续费 = 购进总金额 * 手续费比例\n    purchase_fee = total_purchase_amount * transaction_fee_rate\n    # 卖出手续费 = 卖出总金额 * 手续费比例\n    selling_fee = total_selling_amount * transaction_fee_rate\n    # 实际赚取的金额 = (卖出总金额 - 购进总金额) - (购进手续费 + 卖出手续费)\n    actual_profit = (total_selling_amount - total_purchase_amount) - (purchase_fee + selling_fee)\n    # 答案是实际赚取的金额\n    result = actual_profit\n    # 返回答案\n    return result"]}
{"question": "红石村小学分成6个小组去浇树，每组有4人，一共浇树360棵，平均每人浇树多少棵？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 红石村小学分成6个小组\n    num_groups = 6\n    # 每组有4人\n    num_people_per_group = 4\n    # 一共浇树360棵\n    total_trees = 360\n    # 总人数 = 小组数量 * 每组人数\n    total_people = num_groups * num_people_per_group\n    # 平均每人浇树数量 = 总树数 / 总人数\n    trees_per_person = total_trees / total_people\n    # 答案是平均每人浇树数量\n    result = trees_per_person\n    # 返回答案\n    return result"]}
{"question": "小明到商店去买了一个9元钱的文具盒，给营业员阿姨13元钱，应找回多少钱？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 文具盒的价格为9元\n    price_of_stationery_box = 9\n    # 小明给营业员阿姨13元\n    amount_given = 13\n    # 应找回的钱 = 给的钱 - 文具盒的价格\n    change = amount_given - price_of_stationery_box\n    # 答案是应找回的钱\n    result = change\n    # 返回答案\n    return result"]}
{"question": "小华骑车每分钟行290米，他从家到学校共用16分钟，小华家离学校多少米？", "target": 4640.0, "answer": 4640.0, "score": 1, "generation": ["def solution():\n    # 小华骑车的速度是每分钟290米\n    speed = 290\n    # 从家到学校共用16分钟\n    time = 16\n    # 距离 = 速度 * 时间\n    distance = speed * time\n    # 答案是小华家离学校的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "生产一批件，原计划18天完成，实际每天生产600个，这样时间缩短了6天．原计划每天生产多少个零件？", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 原计划完成时间为18天\n    planned_days = 18\n    # 实际每天生产600个零件\n    actual_daily_production = 600\n    # 实际完成时间比原计划缩短了6天\n    days_saved = 6\n    # 实际完成时间 = 原计划完成时间 - 缩短的天数\n    actual_days = planned_days - days_saved\n    # 总生产量 = 实际每天生产量 * 实际完成时间\n    total_production = actual_daily_production * actual_days\n    # 原计划每天生产量 = 总生产量 / 原计划完成时间\n    planned_daily_production = total_production / planned_days\n    # 答案是原计划每天生产量\n    result = planned_daily_production\n    # 返回答案\n    return result"]}
{"question": "一个养鸡专业户，今年养鸡1250只，比去年增加了(1/4)．去年养鸡多少只？多少．", "target": 1000.0, "answer": 1000.0, "score": 1, "generation": ["def solution():\n    # 今年养鸡的数量为1250只\n    current_year_chickens = 1250\n    # 今年比去年增加了(1/4)\n    increase_fraction = 1/4\n    # 设去年养鸡的数量为x，则今年养鸡的数量 = x + x * (1/4) = x * (1 + 1/4) = x * (5/4)\n    # 所以去年养鸡的数量 = 今年养鸡的数量 / (5/4)\n    last_year_chickens = current_year_chickens / (1 + increase_fraction)\n    # 答案是去年养鸡的数量\n    result = last_year_chickens\n    # 返回答案\n    return result"]}
{"question": "6+8+10+12+14+16+18+20+22+24=．", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 这是一个连续的偶数序列，从6开始，每次增加2，直到24\n    # 可以使用等差数列求和公式来计算总和\n    # 等差数列求和公式：总和 = (首项 + 末项) * 项数 / 2\n    first_term = 6\n    last_term = 24\n    common_difference = 2\n    # 计算项数 = (末项 - 首项) / 公差 + 1\n    number_of_terms = (last_term - first_term) / common_difference + 1\n    # 计算总和\n    total_sum = (first_term + last_term) * number_of_terms / 2\n    # 答案是总和\n    result = total_sum\n    # 返回答案\n    return result"]}
{"question": "爷爷去医院看病．医生处方：每日3次，每次2片，一瓶药有90片，可以吃多少天？", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 每日服药次数为3次\n    times_per_day = 3\n    # 每次服药的片数为2片\n    pills_per_time = 2\n    # 一瓶药的总片数为90片\n    total_pills = 90\n    # 每日服药的片数 = 每日服药次数 * 每次服药的片数\n    pills_per_day = times_per_day * pills_per_time\n    # 可以吃的天数 = 总片数 / 每日服药的片数\n    days_of_medication = total_pills / pills_per_day\n    # 答案是可以吃的天数\n    result = days_of_medication\n    # 返回答案\n    return result"]}
{"question": "电动车厂前年生产80万辆电动车，去年比前年增产25%．去年生产了多少辆？", "target": 1000000.0, "answer": 1000000.0, "score": 1, "generation": ["def solution():\n    # 前年生产的电动车数量为80万辆\n    previous_year_production = 800000\n    # 去年比前年增产25%\n    production_increase = 0.25\n    # 去年生产的电动车数量 = 前年生产数量 * (1 + 增产比例)\n    last_year_production = previous_year_production * (1 + production_increase)\n    # 答案是去年生产的电动车数量\n    result = last_year_production\n    # 返回答案\n    return result"]}
{"question": "某班今天的出勤率为92.5%，请病假2人，事假1人，今天出勤多少人．", "target": 37.0, "answer": 37.00000000000002, "score": 1, "generation": ["def solution():\n    # 请病假的人数为2人\n    sick_leave = 2\n    # 请事假的人数为1人\n    personal_leave = 1\n    # 总请假人数 = 病假人数 + 事假人数\n    total_leave = sick_leave + personal_leave\n    # 出勤率为92.5%\n    attendance_rate = 0.925\n    # 因为出勤率 = 出勤人数 / 总人数，所以总人数 = 请假人数 / (1 - 出勤率)\n    total_students = total_leave / (1 - attendance_rate)\n    # 出勤人数 = 总人数 * 出勤率\n    attendance = total_students * attendance_rate\n    # 答案是今天出勤的人数\n    result = attendance\n    # 返回答案\n    return result"]}
{"question": "王大妈卖鸡蛋，上午卖了12千克，下午卖了18千克，下午比上午多卖了55.2元．平均每千克鸡蛋卖多少元？", "target": 9.2, "answer": 9.200000000000001, "score": 1, "generation": ["def solution():\n    # 上午卖的鸡蛋重量为12千克\n    morning_weight = 12\n    # 下午卖的鸡蛋重量为18千克\n    afternoon_weight = 18\n    # 下午比上午多卖了55.2元\n    price_difference = 55.2\n    # 下午比上午多卖的重量 = 下午重量 - 上午重量\n    weight_difference = afternoon_weight - morning_weight\n    # 平均每千克鸡蛋的价格 = 价格差 / 重量差\n    price_per_kg = price_difference / weight_difference\n    # 答案是平均每千克鸡蛋的价格\n    result = price_per_kg\n    # 返回答案\n    return result"]}
{"question": "树上一共有8只小鸟，第一次飞走了1只，第二次又飞走了2只，一共飞走了多少只．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 树上一共有8只小鸟\n    total_birds = 8\n    # 第一次飞走了1只\n    birds_flown_away_first = 1\n    # 第二次飞走了2只\n    birds_flown_away_second = 2\n    # 一共飞走的鸟数 = 第一次飞走的 + 第二次飞走的\n    total_birds_flown_away = birds_flown_away_first + birds_flown_away_second\n    # 答案是一共飞走的鸟数\n    result = total_birds_flown_away\n    # 返回答案\n    return result"]}
{"question": "修一段路，已经修好了75千米，没修的比修好的2倍多15千米，这段路多少千米？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 已经修好的路程为75千米\n    repaired_distance = 75\n    # 没修的路程比修好的2倍多15千米\n    unrepaired_distance = 2 * repaired_distance + 15\n    # 这段路的总长度 = 已经修好的路程 + 没修的路程\n    total_distance = repaired_distance + unrepaired_distance\n    # 答案是这段路的总长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "某修路队修一条公路，原计划每天修300米，实际每天比原计划多修12%，实际每天修多少米？", "target": 336.0, "answer": 336.00000000000006, "score": 1, "generation": ["def solution():\n    # 原计划每天修300米\n    planned_daily_repair = 300\n    # 实际每天比原计划多修12%\n    efficiency_increase = 0.12\n    # 实际每天修的路 = 原计划每天修的路 * (1 + 效率提高)\n    actual_daily_repair = planned_daily_repair * (1 + efficiency_increase)\n    # 答案是实际每天修的路\n    result = actual_daily_repair\n    # 返回答案\n    return result"]}
{"question": "有5个同学投沙包，老师如果发给每人2个沙包就差1个，老师共有多少个沙包？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 有5个同学投沙包\n    num_students = 5\n    # 老师发给每人2个沙包\n    sandbags_per_student = 2\n    # 老师发给每人2个沙包就差1个\n    shortage = 1\n    # 老师需要的沙包总数 = 学生数量 * 每人沙包数 - 短缺数\n    total_sandbags_needed = num_students * sandbags_per_student - shortage\n    # 老师共有的沙包数 = 需要的沙包总数\n    result = total_sandbags_needed\n    # 返回答案\n    return result"]}
{"question": "妈妈带100元钱去超市，买了一袋14.8元的奶粉，还买了15.2元的猪肉，最后还剩多少元钱？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 妈妈带的钱为100元\n    total_money = 100\n    # 奶粉的价格为14.8元\n    milk_powder_price = 14.8\n    # 猪肉的价格为15.2元\n    pork_price = 15.2\n    # 总花费 = 奶粉价格 + 猪肉价格\n    total_spent = milk_powder_price + pork_price\n    # 剩余的钱 = 总钱数 - 总花费\n    remaining_money = total_money - total_spent\n    # 答案是剩余的钱\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "我国的淡水鱼类大约有700种，比海洋鱼类少65%．我国的海洋鱼类大约有多少种？", "target": 2000.0, "answer": 2000.0000000000002, "score": 1, "generation": ["def solution():\n    # 淡水鱼类的数量为700种\n    freshwater_fish = 700\n    # 淡水鱼类比海洋鱼类少65%\n    percentage_decrease = 0.65\n    # 设海洋鱼类的数量为x，则淡水鱼类的数量 = x * (1 - 0.65)\n    # 所以 x = 淡水鱼类的数量 / (1 - 0.65)\n    marine_fish = freshwater_fish / (1 - percentage_decrease)\n    # 答案是海洋鱼类的数量\n    result = marine_fish\n    # 返回答案\n    return result"]}
{"question": "学校购进面包76箱，购进的牛奶是面包的9倍，学校购进的面包和牛奶一共有多少箱？", "target": 760.0, "answer": 760.0, "score": 1, "generation": ["def solution():\n    # 学校购进面包76箱\n    bread_boxes = 76\n    # 购进的牛奶是面包的9倍\n    milk_boxes = 9 * bread_boxes\n    # 学校购进的面包和牛奶的总箱数 = 面包箱数 + 牛奶箱数\n    total_boxes = bread_boxes + milk_boxes\n    # 答案是面包和牛奶的总箱数\n    result = total_boxes\n    # 返回答案\n    return result"]}
{"question": "小李从家到学校，每分钟走50米，7分钟走了一半路程，剩下的一半路程要5分钟走完，平均每分钟要走多少米．", "target": 70.0, "answer": 58.333333333333336, "score": 0, "generation": ["def solution():\n    # 小李每分钟走50米\n    speed_first_half = 50\n    # 走了一半路程用了7分钟\n    time_first_half = 7\n    # 走完剩下的一半路程要5分钟\n    time_second_half = 5\n    # 第一半路程的距离 = 速度 * 时间\n    distance_first_half = speed_first_half * time_first_half\n    # 因为两半路程相等，所以总距离 = 第一半路程的距离 * 2\n    total_distance = distance_first_half * 2\n    # 第二半路程的速度 = 距离 / 时间\n    speed_second_half = distance_first_half / time_second_half\n    # 平均速度 = 总距离 / 总时间\n    average_speed = total_distance / (time_first_half + time_second_half)\n    # 答案是平均每分钟走的米数\n    result = average_speed\n    # 返回答案\n    return result"]}
{"question": "菜场上有342千克大白菜，比胡萝卜多16千克，大白菜和胡萝卜一共有多少千克？", "target": 668.0, "answer": 668.0, "score": 1, "generation": ["def solution():\n    # 大白菜的重量为342千克\n    cabbage_weight = 342\n    # 大白菜比胡萝卜多16千克\n    weight_difference = 16\n    # 胡萝卜的重量 = 大白菜的重量 - 重量差\n    carrot_weight = cabbage_weight - weight_difference\n    # 大白菜和胡萝卜的总重量 = 大白菜的重量 + 胡萝卜的重量\n    total_weight = cabbage_weight + carrot_weight\n    # 答案是大白菜和胡萝卜的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "李芳用彩纸制作了一条花边，一共排列了100朵花．每朵花的宽是4.5厘米，每两朵花之间的距离是1.2厘米．请算出这条花边一共长多少厘米？", "target": 568.8, "answer": 568.8, "score": 1, "generation": ["def solution():\n    # 花的总数为100朵\n    num_flowers = 100\n    # 每朵花的宽度为4.5厘米\n    width_per_flower = 4.5\n    # 每两朵花之间的距离为1.2厘米\n    distance_between_flowers = 1.2\n    # 花边的总长度 = 花的总宽度 + 花之间的总距离\n    # 花的总宽度 = 花的数量 * 每朵花的宽度\n    total_flower_width = num_flowers * width_per_flower\n    # 花之间的总距离 = (花的数量 - 1) * 每两朵花之间的距离\n    total_distance_between = (num_flowers - 1) * distance_between_flowers\n    # 花边的总长度 = 花的总宽度 + 花之间的总距离\n    total_length = total_flower_width + total_distance_between\n    # 答案是花边的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "永红小学六年级学生参加课外活动生物组的有35人，参加微机组的人数是生物组的(4/5)，又是美术组的(7/8)．美术组有多少人？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 生物组的人数为35人\n    biology_group = 35\n    # 微机组的人数是生物组的(4/5)\n    computer_group = (4/5) * biology_group\n    # 微机组的人数是美术组的(7/8)\n    # 设美术组的人数为x，则 computer_group = (7/8) * x\n    # 解方程得 x = computer_group / (7/8)\n    art_group = computer_group / (7/8)\n    # 答案是美术组的人数\n    result = art_group\n    # 返回答案\n    return result"]}
{"question": "水果批发部要运进一批水果，第一次运进总量的22%，第二次运进1.5吨，两次共运进这批水果的62%，这批水果一共有多少吨．", "target": 3.75, "answer": 3.75, "score": 1, "generation": ["def solution():\n    # 第一次运进总量的22%\n    first_percentage = 0.22\n    # 第二次运进1.5吨\n    second_quantity = 1.5\n    # 两次共运进这批水果的62%\n    total_percentage = 0.62\n    # 设这批水果的总量为x吨\n    # 根据题意，第一次运进0.22x吨，第二次运进1.5吨，总共运进0.62x吨\n    # 所以有方程：0.22x + 1.5 = 0.62x\n    # 解这个方程，可以得到x = 1.5 / (0.62 - 0.22)\n    x = second_quantity / (total_percentage - first_percentage)\n    # 答案是这批水果的总量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "某图书馆的童话书占图书总数的25%，科技书占图书总数的15%，童话书和科技书共有230本．这个图书馆共有图书多少本？", "target": 575.0, "answer": 575.0, "score": 1, "generation": ["def solution():\n    # 童话书占图书总数的25%\n    fairy_tale_percentage = 0.25\n    # 科技书占图书总数的15%\n    science_book_percentage = 0.15\n    # 童话书和科技书共有230本\n    total_fairy_and_science = 230\n    # 童话书和科技书占总数的比例 = 童话书比例 + 科技书比例\n    total_percentage = fairy_tale_percentage + science_book_percentage\n    # 图书馆共有图书数量 = 童话书和科技书的总数 / 它们占总数的比例\n    total_books = total_fairy_and_science / total_percentage\n    # 答案是图书馆共有图书数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一辆旅游车3小时行驶了150千米，照这样的速度这辆旅游车行驶了13小时到达目的地，这辆旅游车行驶了多少千米？", "target": 650.0, "answer": 650.0, "score": 1, "generation": ["def solution():\n    # 旅游车3小时行驶了150千米\n    distance_3_hours = 150\n    time_3_hours = 3\n    # 计算旅游车的速度 = 距离 / 时间\n    speed = distance_3_hours / time_3_hours\n    # 旅游车行驶了13小时到达目的地\n    time_total = 13\n    # 总行驶距离 = 速度 * 总时间\n    total_distance = speed * time_total\n    # 答案是旅游车行驶的总距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "李明有存款130元，王芳有存款70元，王芳想赶上李明，李明每月存10元，王芳每次存15元，多少个月后，王芳才能赶上李明．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 李明的初始存款为130元\n    li_ming_initial = 130\n    # 王芳的初始存款为70元\n    wang_fang_initial = 70\n    # 李明每月存款10元\n    li_ming_monthly = 10\n    # 王芳每月存款15元\n    wang_fang_monthly = 15\n    # 存款差距 = 李明的初始存款 - 王芳的初始存款\n    initial_difference = li_ming_initial - wang_fang_initial\n    # 每月存款差距 = 王芳每月存款 - 李明每月存款\n    monthly_difference = wang_fang_monthly - li_ming_monthly\n    # 需要的月数 = 存款差距 / 每月存款差距\n    months_needed = initial_difference / monthly_difference\n    # 答案是需要的月数\n    result = months_needed\n    # 返回答案\n    return result"]}
{"question": "花生仁的出油率为38%，要榨380千克花生油大约需要多少千克花生仁？", "target": 1000.0, "answer": 1000.0, "score": 1, "generation": ["def solution():\n    # 花生仁的出油率为38%\n    oil_extraction_rate = 0.38\n    # 需要榨380千克花生油\n    desired_oil = 380\n    # 需要的花生仁数量 = 需要的花生油 / 出油率\n    required_peanuts = desired_oil / oil_extraction_rate\n    # 答案是需要的花生仁数量\n    result = required_peanuts\n    # 返回答案\n    return result"]}
{"question": "甲乙丙3人共同加工一批零件，甲加工了总数的40%，乙加工了总数的(3/8)还多26个，丙加工了剩下的64个．这批零件一共有多少个？", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 设这批零件一共有x个\n    # 甲加工了总数的40%，即0.4x\n    # 乙加工了总数的(3/8)还多26个，即(3/8)x + 26\n    # 丙加工了剩下的64个\n    # 所以总零件数x = 甲加工的 + 乙加工的 + 丙加工的\n    # x = 0.4x + (3/8)x + 26 + 64\n    # 将方程两边都乘以8以消除分母\n    # 8x = 3.2x + 3x + 208 + 512\n    # 8x = 6.2x + 720\n    # 8x - 6.2x = 720\n    # 1.8x = 720\n    # x = 720 / 1.8\n    x = 720 / 1.8\n    # 答案是这批零件的总数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "商店运来800只塑料盒，上午买出(1/4)，下午卖出(2/5)．一天共卖出多少只？", "target": 520.0, "answer": 520.0, "score": 1, "generation": ["def solution():\n    # 商店运来塑料盒的总数为800只\n    total_boxes = 800\n    # 上午卖出(1/4)\n    sold_fraction_morning = 1/4\n    # 下午卖出(2/5)\n    sold_fraction_afternoon = 2/5\n    # 上午卖出的数量 = 总数 * 上午卖出比例\n    sold_morning = total_boxes * sold_fraction_morning\n    # 下午卖出的数量 = 总数 * 下午卖出比例\n    sold_afternoon = total_boxes * sold_fraction_afternoon\n    # 一天共卖出的数量 = 上午卖出的数量 + 下午卖出的数量\n    total_sold = sold_morning + sold_afternoon\n    # 答案是一天共卖出的数量\n    result = total_sold\n    # 返回答案\n    return result"]}
{"question": "一头大象4天吃320千克食物，一只熊猫每天吃40千克食物．大象每天吃的食物是熊猫的多少倍？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 大象4天吃320千克食物\n    elephant_food_4days = 320\n    # 大象每天吃的食物 = 总食物 / 天数\n    elephant_food_per_day = elephant_food_4days / 4\n    # 熊猫每天吃40千克食物\n    panda_food_per_day = 40\n    # 大象每天吃的食物是熊猫的多少倍 = 大象每天吃的食物 / 熊猫每天吃的食物\n    multiple = elephant_food_per_day / panda_food_per_day\n    # 答案是大象每天吃的食物是熊猫的多少倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "一列火车长75米，每秒行驶24米，30秒通过一条隧道，这条隧道长多少米？", "target": 645.0, "answer": 645.0, "score": 1, "generation": ["def solution():\n    # 火车的长度为75米\n    train_length = 75\n    # 火车的速度为每秒24米\n    train_speed = 24\n    # 通过隧道的时间为30秒\n    time_to_pass = 30\n    # 火车通过隧道的总距离 = 火车速度 * 通过时间\n    total_distance = train_speed * time_to_pass\n    # 隧道长度 = 总距离 - 火车长度\n    tunnel_length = total_distance - train_length\n    # 答案是隧道的长度\n    result = tunnel_length\n    # 返回答案\n    return result"]}
{"question": "小圆的面积相当于大圆的面积(2/3)，这两个圆的面积和是100平方厘米，大圆的面积=多少平方厘米．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 两个圆的面积和是100平方厘米\n    total_area = 100\n    # 小圆的面积相当于大圆的面积(2/3)\n    small_to_large_ratio = 2/3\n    # 设大圆的面积为x，则小圆的面积为(2/3)x\n    # 根据题意，x + (2/3)x = 100\n    # 合并同类项，(5/3)x = 100\n    # 解方程，x = 100 * (3/5)\n    large_area = total_area * (3/5)\n    # 答案是大圆的面积\n    result = large_area\n    # 返回答案\n    return result"]}
{"question": "修一条长4500米的路，已经修了24天，平均每天修185米．还剩下多少米？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 路的总长度为4500米\n    total_length = 4500\n    # 已经修了24天\n    days_worked = 24\n    # 平均每天修185米\n    daily_progress = 185\n    # 已经修的长度 = 工作天数 * 每天修的长度\n    length_completed = days_worked * daily_progress\n    # 剩余的长度 = 总长度 - 已经修的长度\n    remaining_length = total_length - length_completed\n    # 答案是剩余的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "服装厂加工一批服装，前3天加工了180套，照这样计算，再用15天就能完成任务，这批服装共有多少套？", "target": 1080.0, "answer": 1080.0, "score": 1, "generation": ["def solution():\n    # 前3天加工了180套\n    days_worked = 3\n    suits_made = 180\n    # 计算每天加工的服装数量\n    daily_rate = suits_made / days_worked\n    # 再用15天完成任务\n    additional_days = 15\n    # 计算15天内能加工的服装数量\n    additional_suits = additional_days * daily_rate\n    # 总服装数量 = 前3天加工的 + 15天内加工的\n    total_suits = suits_made + additional_suits\n    # 答案是这批服装的总数量\n    result = total_suits\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从A城开往B城，上午行驶3小时，每小时行驶75千米，中午休息了1小时，下午用同样的速度又行驶了4小时到达B城，A、B两城相距多远？", "target": 525.0, "answer": 525.0, "score": 1, "generation": ["def solution():\n    # 上午行驶3小时\n    morning_hours = 3\n    # 每小时行驶75千米\n    speed = 75\n    # 中午休息1小时\n    rest_hours = 1\n    # 下午行驶4小时\n    afternoon_hours = 4\n    # 上午行驶的距离 = 上午行驶时间 * 速度\n    morning_distance = morning_hours * speed\n    # 下午行驶的距离 = 下午行驶时间 * 速度\n    afternoon_distance = afternoon_hours * speed\n    # 总距离 = 上午行驶距离 + 下午行驶距离\n    total_distance = morning_distance + afternoon_distance\n    # 答案是A、B两城之间的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "商店以每双13元购进一批凉鞋，售价为14.8元，卖到剩下5双时，除去购进这批凉鞋的全部开销外还获利88元，这批凉鞋共有多少双．", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 每双凉鞋的购进价格为13元\n    purchase_price_per_pair = 13\n    # 每双凉鞋的售价为14.8元\n    selling_price_per_pair = 14.8\n    # 剩余未卖出的凉鞋数量为5双\n    remaining_pairs = 5\n    # 除去购进这批凉鞋的全部开销外还获利88元\n    total_profit = 88\n    # 设这批凉鞋共有x双\n    # 卖出的凉鞋数量 = x - 5\n    # 总收入 = 卖出的凉鞋数量 * 售价\n    # 总支出 = x * 购进价格\n    # 利润 = 总收入 - 总支出\n    # 根据题意，利润为88元\n    # 所以 (x - 5) * 14.8 - x * 13 = 88\n    # 解这个方程\n    # 14.8x - 74 - 13x = 88\n    # 1.8x = 162\n    # x = 90\n    # 所以这批凉鞋共有90双\n    result = 90\n    # 返回答案\n    return result"]}
{"question": "一辆汽车运一堆货物，运走了总数的35%，这时剩下的比运走的还多18吨．原来这堆货物有多少吨？", "target": 60.0, "answer": 59.99999999999999, "score": 1, "generation": ["def solution():\n    # 运走了总数的35%\n    percentage_shipped = 0.35\n    # 剩下的比运走的还多18吨\n    difference = 18\n    # 剩下的比例为1 - 运走的比例\n    percentage_remaining = 1 - percentage_shipped\n    # 剩下的比运走的多18吨，所以剩下的 - 运走的 = 18\n    # 即 (percentage_remaining - percentage_shipped) * total = difference\n    # 所以 total = difference / (percentage_remaining - percentage_shipped)\n    total = difference / (percentage_remaining - percentage_shipped)\n    # 答案是原来这堆货物的总吨数\n    result = total\n    # 返回答案\n    return result"]}
{"question": "体育馆有960个皮球，6个装一盒，8盒装一箱，这些皮球能装多少箱？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 体育馆有960个皮球\n    total_balls = 960\n    # 6个装一盒\n    balls_per_box = 6\n    # 8盒装一箱\n    boxes_per_container = 8\n    # 总盒数 = 总皮球数 / 每盒的皮球数\n    total_boxes = total_balls / balls_per_box\n    # 总箱数 = 总盒数 / 每箱的盒数\n    total_containers = total_boxes / boxes_per_container\n    # 答案是这些皮球能装的箱数\n    result = total_containers\n    # 返回答案\n    return result"]}
{"question": "爸爸将2500元存入银行，整存整取两年，年利率为4%，2年后利息共有多少元？若利息税为20%，那么税后利息和本金一共多元？", "target": 2660.0, "answer": 2660.0, "score": 1, "generation": ["def solution():\n    # 存款金额为2500元\n    deposit = 2500\n    # 存款期限为2年\n    years = 2\n    # 年利率为4%\n    annual_interest_rate = 0.04\n    # 计算利息 = 存款金额 * 年利率 * 存款期限\n    interest = deposit * annual_interest_rate * years\n    # 利息税为20%\n    tax_rate = 0.2\n    # 计算税后利息 = 利息 * (1 - 利息税)\n    after_tax_interest = interest * (1 - tax_rate)\n    # 计算税后利息和本金总和 = 存款金额 + 税后利息\n    total_amount = deposit + after_tax_interest\n    # 答案是税后利息和本金总和\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "新建小学修建教学楼用去90万元，比计划节约了30万元，节约了百分之几？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 实际修建教学楼用去90万元\n    actual_cost = 90\n    # 比计划节约了30万元\n    savings = 30\n    # 计划修建教学楼的费用 = 实际费用 + 节约的费用\n    planned_cost = actual_cost + savings\n    # 节约的百分比 = (节约的费用 / 计划费用) * 100\n    savings_percentage = (savings / planned_cost) * 100\n    # 答案是节约的百分比\n    result = savings_percentage\n    # 返回答案\n    return result"]}
{"question": "张阿姨家住在郊区，周末她从家公共汽车去华美电器城买电冰箱．去时公交车的速度是60千米/小时，用了2小时．回来时用了3小时．她返回时公交车的速度=？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 去时公交车的速度是60千米/小时\n    speed_going = 60\n    # 去时用了2小时\n    time_going = 2\n    # 计算距离 = 速度 * 时间\n    distance = speed_going * time_going\n    # 回来时用了3小时\n    time_returning = 3\n    # 返回时的速度 = 距离 / 时间\n    speed_returning = distance / time_returning\n    # 答案是返回时公交车的速度\n    result = speed_returning\n    # 返回答案\n    return result"]}
{"question": "夏日超市一天卖了57箱杏仁露和43箱矿泉水，每箱杏仁露和矿泉水都是24瓶．夏日超市一共卖了杏仁露和矿泉水多少瓶？", "target": 2400.0, "answer": 2400.0, "score": 1, "generation": ["def solution():\n    # 杏仁露的销售数量为57箱\n    almond_milk_boxes = 57\n    # 矿泉水的销售数量为43箱\n    water_boxes = 43\n    # 每箱杏仁露和矿泉水都是24瓶\n    bottles_per_box = 24\n    # 杏仁露的总瓶数 = 杏仁露的箱数 * 每箱的瓶数\n    total_almond_milk_bottles = almond_milk_boxes * bottles_per_box\n    # 矿泉水的总瓶数 = 矿泉水的箱数 * 每箱的瓶数\n    total_water_bottles = water_boxes * bottles_per_box\n    # 总瓶数 = 杏仁露的总瓶数 + 矿泉水的总瓶数\n    total_bottles = total_almond_milk_bottles + total_water_bottles\n    # 答案是总瓶数\n    result = total_bottles\n    # 返回答案\n    return result"]}
{"question": "男生有24人，比女生少4%．女生有多少人？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 男生人数为24人\n    num_boys = 24\n    # 男生比女生少4%\n    percentage_less = 0.04\n    # 设女生人数为x，则男生人数 = x * (1 - 0.04)\n    # 所以 x = 男生人数 / (1 - 0.04)\n    num_girls = num_boys / (1 - percentage_less)\n    # 答案是女生人数\n    result = num_girls\n    # 返回答案\n    return result"]}
{"question": "某工地需要沙50吨，用一辆载重0.5吨的汽车运了5次，余下的改用一辆重2.5吨的汽车来运，还要运多少次？", "target": 19.0, "answer": 19.0, "score": 1, "generation": ["def solution():\n    # 工地需要的沙总量为50吨\n    total_sand = 50\n    # 第一辆汽车的载重为0.5吨\n    first_truck_capacity = 0.5\n    # 第一辆汽车运了5次\n    first_truck_trips = 5\n    # 第一辆汽车运输的总量 = 载重 * 运输次数\n    first_truck_total = first_truck_capacity * first_truck_trips\n    # 剩余需要运输的沙量 = 总沙量 - 第一辆汽车运输的总量\n    remaining_sand = total_sand - first_truck_total\n    # 第二辆汽车的载重为2.5吨\n    second_truck_capacity = 2.5\n    # 第二辆汽车需要的运输次数 = 剩余沙量 / 第二辆汽车的载重\n    second_truck_trips = remaining_sand / second_truck_capacity\n    # 答案是第二辆汽车需要的运输次数\n    result = second_truck_trips\n    # 返回答案\n    return result"]}
{"question": "(7/8)*2.4=．", "target": 2.1, "answer": 2.1, "score": 1, "generation": ["def solution():\n    # 第一个数是7/8\n    first_number = 7/8\n    # 第二个数是2.4\n    second_number = 2.4\n    # 两个数相乘的结果\n    result = first_number * second_number\n    # 返回答案\n    return result"]}
{"question": "一堆糖果共200块，其中奶糖占这堆糖果的40%，再加入多少块奶糖后，奶糖占现有糖果60%．", "target": 100.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 初始糖果总数为200块\n    total_candies_initial = 200\n    # 奶糖占初始糖果的40%\n    milk_candies_initial = total_candies_initial * 0.4\n    # 设需要加入x块奶糖\n    x = Symbol('x')\n    # 加入x块奶糖后，奶糖总数 = 初始奶糖数 + x\n    milk_candies_final = milk_candies_initial + x\n    # 加入x块奶糖后，糖果总数 = 初始总数 + x\n    total_candies_final = total_candies_initial + x\n    # 奶糖占现有糖果的60%\n    equation = Eq(milk_candies_final / total_candies_final, 0.6)\n    # 解方程求x\n    solution = solve(equation, x)\n    # 答案是需要加入的奶糖数量\n    result = solution[0]\n    # 返回答案\n    return result"]}
{"question": "小林家的果园里种了5行桃树，每行159棵，又种了586棵苹果，桃树比苹果多多少棵？", "target": 209.0, "answer": 209.0, "score": 1, "generation": ["def solution():\n    # 桃树的行数为5行\n    num_peach_rows = 5\n    # 每行桃树的数量为159棵\n    num_peach_per_row = 159\n    # 苹果树的数量为586棵\n    num_apple_trees = 586\n    # 桃树的总数量 = 行数 * 每行的数量\n    total_peach_trees = num_peach_rows * num_peach_per_row\n    # 桃树比苹果树多的数量 = 桃树总数量 - 苹果树数量\n    difference = total_peach_trees - num_apple_trees\n    # 答案是桃树比苹果树多的数量\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "商场运来6箱毛巾，每箱8条，一共卖了480元，平均每条毛巾卖了多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 商场运来6箱毛巾\n    num_boxes = 6\n    # 每箱有8条毛巾\n    num_towels_per_box = 8\n    # 一共卖了480元\n    total_revenue = 480\n    # 总毛巾数量 = 箱数 * 每箱毛巾数量\n    total_towels = num_boxes * num_towels_per_box\n    # 平均每条毛巾的价格 = 总收入 / 总毛巾数量\n    average_price_per_towel = total_revenue / total_towels\n    # 答案是平均每条毛巾的价格\n    result = average_price_per_towel\n    # 返回答案\n    return result"]}
{"question": "一列客车从东城开往西城，行了全程的(5/8)，正好是365千米，东西两成之间的铁路长多少千米？", "target": 584.0, "answer": 584.0, "score": 1, "generation": ["def solution():\n    # 客车行驶了全程的(5/8)\n    fraction_traveled = 5/8\n    # 行驶的距离是365千米\n    distance_traveled = 365\n    # 全程的距离 = 行驶的距离 / 行驶的比例\n    total_distance = distance_traveled / fraction_traveled\n    # 答案是东西两城之间的铁路长度\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "养禽厂养的鸭是鸡的(2/3)，同时又是鹅的(4/5)，养的鸡有2400只，养的鹅有多少只？", "target": 2000.0, "answer": 2000.0, "score": 1, "generation": ["def solution():\n    # 鸡的数量为2400只\n    num_chickens = 2400\n    # 鸭的数量是鸡的(2/3)\n    num_ducks = (2/3) * num_chickens\n    # 鸭的数量又是鹅的(4/5)\n    num_geese = num_ducks / (4/5)\n    # 答案是鹅的数量\n    result = num_geese\n    # 返回答案\n    return result"]}
{"question": "计算：666*778+333*444=．", "target": 666000.0, "answer": 666000.0, "score": 1, "generation": ["def solution():\n    # 计算666*778\n    part1 = 666 * 778\n    # 计算333*444\n    part2 = 333 * 444\n    # 将两个部分相加\n    total = part1 + part2\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "3个好朋友约好一起去少年宫玩．他们各自从家去到少年宫，小明用了(3/4)小时，小青比小明少用(1/5)小时，小王比小青多花了(1/10)小时．小王从家去到少年宫用了多少时间？", "target": 0.65, "answer": 0.65, "score": 1, "generation": ["def solution():\n    # 小明用了(3/4)小时\n    xiaoming_time = 3/4\n    # 小青比小明少用(1/5)小时\n    xiaoqing_time = xiaoming_time - (1/5)\n    # 小王比小青多花了(1/10)小时\n    xiaowang_time = xiaoqing_time + (1/10)\n    # 答案是小王从家去到少年宫用的时间\n    result = xiaowang_time\n    # 返回答案\n    return result"]}
{"question": "合唱队里有男生21人，比女生少(1/4)，合唱队共有多少人．", "target": 49.0, "answer": 49.0, "score": 1, "generation": ["def solution():\n    # 合唱队里有男生21人\n    num_boys = 21\n    # 男生比女生少(1/4)，即男生人数 = 女生人数 * (1 - 1/4)\n    # 所以女生人数 = 男生人数 / (1 - 1/4)\n    num_girls = num_boys / (1 - 1/4)\n    # 合唱队的总人数 = 男生人数 + 女生人数\n    total_people = num_boys + num_girls\n    # 答案是合唱队的总人数\n    result = total_people\n    # 返回答案\n    return result"]}
{"question": "做5节底面直径是2分米，长8分米的圆柱形通风管，至少需要多少铁皮？", "target": 251.3274, "answer": 251.32741228718345, "score": 1, "generation": ["def solution():\n    # 圆柱形通风管的节数为5\n    num_pipes = 5\n    # 圆柱形通风管的底面直径为2分米\n    diameter = 2\n    # 圆柱形通风管的长度为8分米\n    length = 8\n    # 圆柱形通风管的半径 = 直径 / 2\n    radius = diameter / 2\n    # 圆柱形通风管的侧面积 = 2 * π * 半径 * 长度\n    side_area = 2 * 3.141592653589793 * radius * length\n    # 因为通风管没有上下底，所以每节通风管需要的铁皮面积 = 侧面积\n    area_per_pipe = side_area\n    # 总铁皮面积 = 节数 * 每节需要的铁皮面积\n    total_area = num_pipes * area_per_pipe\n    # 答案是至少需要的铁皮面积\n    result = total_area\n    # 返回答案\n    return result"]}
{"question": "从567中连续减去7，要得到结果是0，需减多少次．", "target": 81.0, "answer": 81.0, "score": 1, "generation": ["def solution():\n    # 初始数字为567\n    initial_number = 567\n    # 每次减去的数字为7\n    subtract_number = 7\n    # 需要减去的次数 = 初始数字 / 每次减去的数字\n    num_subtractions = initial_number / subtract_number\n    # 答案是减去的次数\n    result = num_subtractions\n    # 返回答案\n    return result"]}
{"question": "体育老师用720元钱买了18个足球，还买了数量同样多的篮球花了1080元．每个篮球比每个足球贵多少元？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 体育老师买了18个足球\n    num_footballs = 18\n    # 足球的总花费是720元\n    total_cost_footballs = 720\n    # 篮球的数量与足球相同\n    num_basketballs = num_footballs\n    # 篮球的总花费是1080元\n    total_cost_basketballs = 1080\n    # 每个足球的价格 = 足球的总花费 / 足球的数量\n    price_football = total_cost_footballs / num_footballs\n    # 每个篮球的价格 = 篮球的总花费 / 篮球的数量\n    price_basketball = total_cost_basketballs / num_basketballs\n    # 每个篮球比每个足球贵的价格 = 篮球的价格 - 足球的价格\n    price_difference = price_basketball - price_football\n    # 答案是每个篮球比每个足球贵的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "小花妈妈打算将20000元定期存入银行3年，如果按年利率3.69%计算，到期时小花妈妈实际的本息共有多少元？（另记利息税10%）", "target": 21992.6, "answer": 21992.6, "score": 1, "generation": ["def solution():\n    # 初始存款金额为20000元\n    initial_deposit = 20000\n    # 存款期限为3年\n    years = 3\n    # 年利率为3.69%\n    annual_interest_rate = 0.0369\n    # 利息税为10%\n    interest_tax_rate = 0.1\n    # 计算每年的利息\n    annual_interest = initial_deposit * annual_interest_rate\n    # 计算每年的税后利息\n    annual_interest_after_tax = annual_interest * (1 - interest_tax_rate)\n    # 计算3年的总利息\n    total_interest = annual_interest_after_tax * years\n    # 计算到期时的本息总额\n    total_amount = initial_deposit + total_interest\n    # 答案是到期时的本息总额\n    result = total_amount\n    # 返回答案\n    return result"]}
{"question": "4个小朋友通电话，每2人通一次话，一共通多少次话．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 小朋友的数量是4\n    num_children = 4\n    # 每2人通一次话，所以组合数为C(4,2)\n    # 组合数公式为C(n,k) = n! / (k! * (n-k)!)\n    # 这里n=4, k=2\n    combinations = (num_children * (num_children - 1)) / 2\n    # 答案是一共通话的次数\n    result = combinations\n    # 返回答案\n    return result"]}
{"question": "合唱小组的同学排队，若每排站24人，可以站8排，如果每排站6人，能站多少排？", "target": 32.0, "answer": 32.0, "score": 1, "generation": ["def solution():\n    # 每排站24人，可以站8排\n    people_per_row_initial = 24\n    num_rows_initial = 8\n    # 总人数 = 每排人数 * 排数\n    total_people = people_per_row_initial * num_rows_initial\n    # 如果每排站6人\n    people_per_row_new = 6\n    # 新的排数 = 总人数 / 新的每排人数\n    num_rows_new = total_people / people_per_row_new\n    # 答案是新的排数\n    result = num_rows_new\n    # 返回答案\n    return result"]}
{"question": "希望小学6（1）班男生人数的(2/3)等于全班人数的(4/13)，该班有女生28人，男生有多少人．", "target": 24.0, "answer": 24.0, "score": 1, "generation": ["def solution():\n    # 女生人数为28人\n    num_girls = 28\n    # 男生人数的(2/3)等于全班人数的(4/13)\n    # 设男生人数为x，全班人数为x + 28\n    # 根据题意：(2/3)x = (4/13)(x + 28)\n    # 解这个方程：\n    # (2/3)x = (4/13)x + (4/13)*28\n    # (2/3)x - (4/13)x = (4/13)*28\n    # (26/39)x - (12/39)x = 112/13\n    # (14/39)x = 112/13\n    # x = (112/13) * (39/14)\n    # x = 8 * 3\n    # x = 24\n    # 所以男生人数为24人\n    num_boys = 24\n    # 答案是男生人数\n    result = num_boys\n    # 返回答案\n    return result"]}
{"question": "小东计划到周口店参观猿人遗址．如果他坐汽车以40千米/小时的速度行驶，那么比骑车去早到3小时，如果他以8千米/小时的速度步行去，那么比骑车晚到5小时，小东的出发点到周口店有多少千米？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 设骑车速度为v km/h，骑车时间为t小时\n    # 距离 = v * t\n    # 坐汽车速度为40 km/h，比骑车早到3小时\n    # 距离 = 40 * (t - 3)\n    # 步行速度为8 km/h，比骑车晚到5小时\n    # 距离 = 8 * (t + 5)\n    # 因为距离相同，所以有：\n    # v * t = 40 * (t - 3)\n    # v * t = 8 * (t + 5)\n    # 解这个方程组：\n    # 40(t - 3) = 8(t + 5)\n    # 40t - 120 = 8t + 40\n    # 32t = 160\n    # t = 5\n    # 代入v * t = 8 * (t + 5)\n    # v * 5 = 8 * 10\n    # v = 16\n    # 距离 = v * t = 16 * 5 = 80 km\n    # 答案是出发点到周口店的距离\n    result = 80\n    # 返回答案\n    return result"]}
{"question": "图书馆科技书占该馆藏书的25%，如果该馆有科技书1.2万册，那么该馆藏书多少万册？", "target": 4.8, "answer": 4.8, "score": 1, "generation": ["def solution():\n    # 科技书占该馆藏书的25%\n    tech_books_percentage = 0.25\n    # 科技书的数量为1.2万册\n    tech_books_count = 1.2\n    # 该馆藏书总数 = 科技书数量 / 科技书所占比例\n    total_books = tech_books_count / tech_books_percentage\n    # 答案是该馆藏书总数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一位老红军伯伯准备用自己多年的积蓄9900元资助一批失学儿童返校园，他先拿出540元，资助了3名失学儿童．照这样计算，剩下的钱还可以资助多少名失学儿童？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 老红军伯伯的总积蓄为9900元\n    total_savings = 9900\n    # 先拿出540元资助了3名失学儿童\n    initial_amount = 540\n    initial_children = 3\n    # 计算每名失学儿童需要的资助金额 = 初始资助金额 / 初始资助儿童数量\n    cost_per_child = initial_amount / initial_children\n    # 剩下的钱 = 总积蓄 - 初始资助金额\n    remaining_amount = total_savings - initial_amount\n    # 剩下的钱可以资助的儿童数量 = 剩下的钱 / 每名儿童需要的资助金额\n    remaining_children = remaining_amount / cost_per_child\n    # 答案是剩下的钱可以资助的儿童数量\n    result = remaining_children\n    # 返回答案\n    return result"]}
{"question": "食堂运进一批大米，吃掉(4/5)吨，比剩下的多(1/4)吨．这批大米原有多少吨？", "target": 1.35, "answer": 1.35, "score": 1, "generation": ["def solution():\n    # 吃掉的大米为(4/5)吨\n    eaten_rice = 4/5\n    # 比剩下的多(1/4)吨\n    difference = 1/4\n    # 剩下的大米 = 吃掉的大米 - 比剩下的多的部分\n    remaining_rice = eaten_rice - difference\n    # 原有的大米 = 吃掉的大米 + 剩下的大米\n    original_rice = eaten_rice + remaining_rice\n    # 答案是原有的大米\n    result = original_rice\n    # 返回答案\n    return result"]}
{"question": "王飞同学2006年元旦把积攒的800元零花钱存入银行，存整存整取一年．准备到期后把利息捐赠给“希望工程”，支援贫困地区的失学儿童．如果年利率按3.5%计算，到期时他可以捐赠给“希望工程”多少元．", "target": 28.0, "answer": 28.000000000000004, "score": 1, "generation": ["def solution():\n    # 存款金额为800元\n    deposit_amount = 800\n    # 年利率为3.5%\n    annual_interest_rate = 0.035\n    # 存款期限为1年\n    deposit_period = 1\n    # 利息 = 存款金额 * 年利率 * 存款期限\n    interest = deposit_amount * annual_interest_rate * deposit_period\n    # 到期时可以捐赠给“希望工程”的金额就是利息\n    donation_amount = interest\n    # 答案是捐赠金额\n    result = donation_amount\n    # 返回答案\n    return result"]}
{"question": "一堆沙子，第一天运走总数的(1/5)，第二天运走总数的(1/4)还多4.5吨，剩下12吨第3天全部运完，这堆沙子一共有多少吨？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 设这堆沙子一共有x吨\n    # 第一天运走总数的(1/5)，即x/5吨\n    # 第二天运走总数的(1/4)还多4.5吨，即x/4 + 4.5吨\n    # 第三天运走剩下的12吨\n    # 根据题意，三天运走的总量等于x吨\n    # 所以有方程：x/5 + (x/4 + 4.5) + 12 = x\n    # 解这个方程：\n    # 合并同类项：x/5 + x/4 + 16.5 = x\n    # 通分：4x/20 + 5x/20 + 16.5 = x\n    # 合并：9x/20 + 16.5 = x\n    # 移项：16.5 = x - 9x/20\n    # 计算：16.5 = 11x/20\n    # 解得：x = 16.5 * 20 / 11\n    x = 16.5 * 20 / 11\n    # 答案是这堆沙子的总吨数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "甲，乙两列火车同时从A、B两地相向而行，甲车平均每小时行驶120千米，乙车平均每小时行驶110千米，3小时相遇．A、B两地相距多少千米？", "target": 690.0, "answer": 690.0, "score": 1, "generation": ["def solution():\n    # 甲车的平均速度为每小时120千米\n    speed_a = 120\n    # 乙车的平均速度为每小时110千米\n    speed_b = 110\n    # 两车相遇的时间为3小时\n    time_to_meet = 3\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # A、B两地的距离 = 相对速度 * 相遇时间\n    distance = relative_speed * time_to_meet\n    # 答案是A、B两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "王老师乘车从绍兴去杭州参加教学活动，客车已行了33千米，还剩全程的(3/4)没有行．绍兴到杭州全程多少千米？", "target": 132.0, "answer": 132.0, "score": 1, "generation": ["def solution():\n    # 客车已经行驶了33千米\n    distance_traveled = 33\n    # 还剩下全程的(3/4)没有行驶\n    remaining_fraction = 3/4\n    # 已经行驶的比例 = 1 - 剩余比例\n    traveled_fraction = 1 - remaining_fraction\n    # 全程距离 = 已经行驶的距离 / 已经行驶的比例\n    total_distance = distance_traveled / traveled_fraction\n    # 答案是绍兴到杭州的全程距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "修路队每天修路105米，已经修了25天，还剩215米没有修．这条路长多少米？", "target": 2840.0, "answer": 2840.0, "score": 1, "generation": ["def solution():\n    # 每天修路的长度为105米\n    daily_repair_length = 105\n    # 已经修了25天\n    days_repaired = 25\n    # 还剩215米没有修\n    remaining_length = 215\n    # 已经修好的长度 = 每天修路的长度 * 已经修的天数\n    repaired_length = daily_repair_length * days_repaired\n    # 路的总长度 = 已经修好的长度 + 剩余的长度\n    total_length = repaired_length + remaining_length\n    # 答案是路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "被除数是288，商和余数分别是2、4，求除数．", "target": 142.0, "answer": 142.0, "score": 1, "generation": ["def solution():\n    # 被除数是288\n    dividend = 288\n    # 商是2\n    quotient = 2\n    # 余数是4\n    remainder = 4\n    # 根据除法公式：被除数 = 除数 * 商 + 余数\n    # 所以除数 = (被除数 - 余数) / 商\n    divisor = (dividend - remainder) / quotient\n    # 答案是除数\n    result = divisor\n    # 返回答案\n    return result"]}
{"question": "学校建综合楼，实际投资220万元，节约了30万元，节约了百分之几？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 实际投资220万元\n    actual_investment = 220\n    # 节约了30万元\n    savings = 30\n    # 原计划投资 = 实际投资 + 节约金额\n    planned_investment = actual_investment + savings\n    # 节约的百分比 = (节约金额 / 原计划投资) * 100\n    savings_percentage = (savings / planned_investment) * 100\n    # 答案是节约的百分比\n    result = savings_percentage\n    # 返回答案\n    return result"]}
{"question": "(1/5)的(5/2)倍-(1/12)/(2/3)的商，差=？", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # (1/5)的(5/2)倍\n    part1 = (1/5) * (5/2)\n    # (1/12)/(2/3)的商\n    part2 = (1/12) / (2/3)\n    # 差 = part1 - part2\n    difference = part1 - part2\n    # 答案是差\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "某县城到省城的公路长180千米．一辆汽车走高速公路的速度是90千米/小时，走普通公路的速度是60千米/小时．从县城到省城走高速公路比普通公路节省多少时间？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 县城到省城的公路长180千米\n    distance = 180\n    # 高速公路的速度是90千米/小时\n    speed_highway = 90\n    # 普通公路的速度是60千米/小时\n    speed_normal = 60\n    # 走高速公路的时间 = 距离 / 高速公路速度\n    time_highway = distance / speed_highway\n    # 走普通公路的时间 = 距离 / 普通公路速度\n    time_normal = distance / speed_normal\n    # 节省的时间 = 普通公路时间 - 高速公路时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result"]}
{"question": "小红看一本小说，第一天看了总页数的25%少17页，第二天看的比总页数的(1/8)还多16页，还剩下61页没看，这本小说一共有多少页？", "target": 96.0, "answer": 96.0, "score": 1, "generation": ["def solution():\n    # 设小说总页数为x页\n    # 第一天看了的页数 = 0.25x - 17\n    # 第二天看了的页数 = (1/8)x + 16\n    # 还剩下61页没看\n    # 根据题意，总页数 = 第一天看的 + 第二天看的 + 剩下的\n    # x = (0.25x - 17) + ((1/8)x + 16) + 61\n    # 解这个方程：\n    # x = 0.25x - 17 + (1/8)x + 16 + 61\n    # x = (0.25x + (1/8)x) + (-17 + 16 + 61)\n    # x = (0.25x + 0.125x) + 60\n    # x = 0.375x + 60\n    # x - 0.375x = 60\n    # 0.625x = 60\n    # x = 60 / 0.625\n    x = 60 / 0.625\n    # 答案是小说总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "学校食堂运进豆角120千克，茄子是豆角的(3/4)，运进的茄子=多少千克？", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 豆角的重量为120千克\n    weight_green_beans = 120\n    # 茄子的重量是豆角的(3/4)\n    weight_eggplant = (3/4) * weight_green_beans\n    # 答案是茄子的重量\n    result = weight_eggplant\n    # 返回答案\n    return result"]}
{"question": "650+11与30的积，再除以35，商=？", "target": 28.0, "answer": 28.0, "score": 1, "generation": ["def solution():\n    # 第一个数是650\n    num1 = 650\n    # 第二个数是11与30的积\n    num2 = 11 * 30\n    # 总和 = 第一个数 + 第二个数\n    total = num1 + num2\n    # 除数35\n    divisor = 35\n    # 商 = 总和 / 除数\n    quotient = total / divisor\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一支钢笔4.5元，一支圆珠笔3.5元，小明买一支钢笔和一支圆珠笔，付给售货员阿姨10元钱，应找回多少元钱？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 钢笔的价格是4.5元\n    pen_price = 4.5\n    # 圆珠笔的价格是3.5元\n    ballpen_price = 3.5\n    # 小明付给售货员10元钱\n    payment = 10\n    # 总花费 = 钢笔价格 + 圆珠笔价格\n    total_cost = pen_price + ballpen_price\n    # 应找回的钱 = 付款 - 总花费\n    change = payment - total_cost\n    # 答案是应找回的钱\n    result = change\n    # 返回答案\n    return result"]}
{"question": "把(8/9)米长的绳子平均剪成4段，每段长多少米．", "target": 0.2222222222222222, "answer": 0.2222222222222222, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为(8/9)米\n    total_length = 8/9\n    # 剪成的段数为4段\n    num_segments = 4\n    # 每段的长度 = 总长度 / 段数\n    length_per_segment = total_length / num_segments\n    # 答案是每段的长度\n    result = length_per_segment\n    # 返回答案\n    return result"]}
{"question": "一种生理盐水重250克，含盐率是10%，现在使含盐率提高到25%，应加入多少克盐．", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 生理盐水的总重量为250克\n    total_weight = 250\n    # 初始含盐率为10%\n    initial_salt_percentage = 0.10\n    # 目标含盐率为25%\n    target_salt_percentage = 0.25\n    # 初始盐的重量 = 总重量 * 初始含盐率\n    initial_salt_weight = total_weight * initial_salt_percentage\n    # 设需要加入的盐的重量为x克\n    # 加入盐后总重量 = 250 + x\n    # 加入盐后总盐重量 = initial_salt_weight + x\n    # 目标含盐率 = (initial_salt_weight + x) / (250 + x) = 0.25\n    # 解方程：(initial_salt_weight + x) = 0.25 * (250 + x)\n    # 25 + x = 62.5 + 0.25x\n    # x - 0.25x = 62.5 - 25\n    # 0.75x = 37.5\n    # x = 37.5 / 0.75\n    x = (0.25 * total_weight - initial_salt_weight) / (1 - target_salt_percentage)\n    # 答案是应加入的盐的重量\n    result = x\n    # 返回答案\n    return result"]}
{"question": "丁丁的外婆有一个4合院正在出租，院子里的大房每月租金为2310元，小房每月租金为1925元，且大房比小房多7平方米．丁丁想知道外婆的出租房每平方米的租金，你能帮他算一算？试一试．（说明：假设每平方米的租金一定．）", "target": 55.0, "answer": 55.0, "score": 1, "generation": ["def solution():\n    # 大房每月租金为2310元\n    rent_large = 2310\n    # 小房每月租金为1925元\n    rent_small = 1925\n    # 大房比小房多7平方米\n    area_difference = 7\n    # 因为每平方米的租金一定，所以租金差 = 大房租金 - 小房租金\n    rent_difference = rent_large - rent_small\n    # 每平方米的租金 = 租金差 / 面积差\n    rent_per_sqm = rent_difference / area_difference\n    # 答案是每平方米的租金\n    result = rent_per_sqm\n    # 返回答案\n    return result"]}
{"question": "5星小学的同学去参观博物馆，六年级去了354人，比五年级去的人数的3倍少了63人，五年级去了多少人？", "target": 139.0, "answer": 139.0, "score": 1, "generation": ["def solution():\n    # 六年级去了354人\n    num_sixth_grade = 354\n    # 六年级比五年级去的人数的3倍少了63人\n    difference = 63\n    # 设五年级去了x人，根据题意有：3x - 63 = 354\n    # 解这个方程：3x = 354 + 63\n    x = (num_sixth_grade + difference) / 3\n    # 答案是五年级去了的人数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "小明读一本书，已知他已读的页数比全书的20%多2页，没读的页数比全书的75%多10页，这本书共有多少页？", "target": 240.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 设全书共有x页\n    x = symbols('x')\n    # 已读的页数比全书的20%多2页\n    read_pages = 0.2 * x + 2\n    # 没读的页数比全书的75%多10页\n    unread_pages = 0.75 * x + 10\n    # 因为已读和没读的页数之和等于全书页数\n    equation = Eq(read_pages + unread_pages, x)\n    # 解方程得到x的值\n    total_pages = solve(equation, x)[0]\n    # 答案是这本书共有多少页\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一块花布，用去(5/8)，还剩(1/8)米．这块花布有多少米？", "target": 0.3333333333333333, "answer": 0.3333333333333333, "score": 1, "generation": ["def solution():\n    # 用去的花布比例为(5/8)\n    used_fraction = 5/8\n    # 剩余的花布长度为(1/8)米\n    remaining_length = 1/8\n    # 因为用去的比例是(5/8)，所以剩余的比例是1 - (5/8) = (3/8)\n    remaining_fraction = 1 - used_fraction\n    # 总长度 = 剩余长度 / 剩余比例\n    total_length = remaining_length / remaining_fraction\n    # 答案是这块花布的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "一根铁箍长11.49分米，正好做成一个木桶的一道箍．已知铁箍接头处是0.5分米．这个木桶的外直径=多少分米？", "target": 3.4982, "answer": 3.49822564915986, "score": 1, "generation": ["def solution():\n    # 铁箍的总长度为11.49分米\n    total_length = 11.49\n    # 铁箍接头处的长度为0.5分米\n    joint_length = 0.5\n    # 木桶的周长 = 铁箍总长度 - 接头处长度\n    circumference = total_length - joint_length\n    # 木桶的外直径 = 周长 / π\n    diameter = circumference / 3.141592653589793\n    # 答案是木桶的外直径\n    result = diameter\n    # 返回答案\n    return result"]}
{"question": "小春在计算减法时，把减数72写成27，得到的差是176，正确的差应该=．", "target": 131.0, "answer": 131.0, "score": 1, "generation": ["def solution():\n    # 小春把减数72写成27\n    incorrect_subtrahend = 27\n    # 得到的差是176\n    incorrect_difference = 176\n    # 被减数 = 减数 + 差\n    minuend = incorrect_subtrahend + incorrect_difference\n    # 正确的减数是72\n    correct_subtrahend = 72\n    # 正确的差 = 被减数 - 正确的减数\n    correct_difference = minuend - correct_subtrahend\n    # 答案是正确的差\n    result = correct_difference\n    # 返回答案\n    return result"]}
{"question": "每12支水彩笔要装一盒，每40盒要装一箱，现在要装5箱，需要多少支水彩笔？", "target": 2400.0, "answer": 2400.0, "score": 1, "generation": ["def solution():\n    # 每盒装12支水彩笔\n    pens_per_box = 12\n    # 每箱装40盒\n    boxes_per_case = 40\n    # 需要装5箱\n    num_cases = 5\n    # 总盒数 = 每箱的盒数 * 箱数\n    total_boxes = boxes_per_case * num_cases\n    # 总水彩笔数 = 每盒的水彩笔数 * 总盒数\n    total_pens = pens_per_box * total_boxes\n    # 答案是总水彩笔数\n    result = total_pens\n    # 返回答案\n    return result"]}
{"question": "五年级学生在校园里栽树，一共栽了80棵，成活了75棵．成活的棵树占栽树总棵数的几分之几？", "target": 0.9375, "answer": 0.9375, "score": 1, "generation": ["def solution():\n    # 栽树的总棵数为80棵\n    total_trees = 80\n    # 成活的棵数为75棵\n    survived_trees = 75\n    # 成活的棵树占栽树总棵数的比例 = 成活的棵数 / 总棵数\n    survival_rate = survived_trees / total_trees\n    # 答案是成活的棵树占栽树总棵数的比例\n    result = survival_rate\n    # 返回答案\n    return result"]}
{"question": "A、B两地相距864千米，甲乙两辆汽车分别从两地相对开出，6.4小时两辆汽车在途中相遇，已知乙车每小时行87.5千米，甲车每小时行多少千米？", "target": 47.5, "answer": 47.5, "score": 1, "generation": ["def solution():\n    # A、B两地相距864千米\n    distance = 864\n    # 两车相遇的时间为6.4小时\n    time_to_meet = 6.4\n    # 乙车的速度为每小时87.5千米\n    speed_b = 87.5\n    # 因为两车相向而行，两车的相对速度 = 甲车速度 + 乙车速度\n    # 相对速度 = 距离 / 相遇时间\n    relative_speed = distance / time_to_meet\n    # 甲车的速度 = 相对速度 - 乙车速度\n    speed_a = relative_speed - speed_b\n    # 答案是甲车的速度\n    result = speed_a\n    # 返回答案\n    return result"]}
{"question": "某件商品按每个5元的利润卖出4个钱数，与按每个20元的利润卖出3个的钱数一样多，这种商品每个成本=多少元？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 第一种销售方式：每个利润5元，卖出4个\n    profit_per_unit_1 = 5\n    quantity_1 = 4\n    # 第二种销售方式：每个利润20元，卖出3个\n    profit_per_unit_2 = 20\n    quantity_2 = 3\n    # 两种销售方式的收入相等\n    # 设商品每个成本为x元\n    # 第一种销售方式的收入 = (x + profit_per_unit_1) * quantity_1\n    # 第二种销售方式的收入 = (x + profit_per_unit_2) * quantity_2\n    # 因为两种收入相等，所以可以建立方程：\n    # (x + 5) * 4 = (x + 20) * 3\n    # 解这个方程：\n    # 4x + 20 = 3x + 60\n    # 4x - 3x = 60 - 20\n    # x = 40\n    cost_per_unit = 40\n    # 答案是这种商品每个的成本\n    result = cost_per_unit\n    # 返回答案\n    return result"]}
{"question": "小文今年11岁，爷爷的年龄比他的5倍多8岁，爷爷明年多少岁？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 小文今年11岁\n    xiaowen_age = 11\n    # 爷爷的年龄比小文的5倍多8岁\n    grandpa_age = 5 * xiaowen_age + 8\n    # 爷爷明年的年龄 = 爷爷今年的年龄 + 1\n    grandpa_age_next_year = grandpa_age + 1\n    # 答案是爷爷明年的年龄\n    result = grandpa_age_next_year\n    # 返回答案\n    return result"]}
{"question": "跳绳比赛中，刘红跳了160下，是李明跳的下数的(4/5)，张华跳的下数是李明的(3/4)，张华跳了多少下？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 刘红跳了160下\n    liu_hong_jumps = 160\n    # 刘红跳的下数是李明的(4/5)\n    li_ming_fraction = 4/5\n    # 李明跳的下数 = 刘红跳的下数 / (4/5)\n    li_ming_jumps = liu_hong_jumps / li_ming_fraction\n    # 张华跳的下数是李明的(3/4)\n    zhang_hua_fraction = 3/4\n    # 张华跳的下数 = 李明跳的下数 * (3/4)\n    zhang_hua_jumps = li_ming_jumps * zhang_hua_fraction\n    # 答案是张华跳的下数\n    result = zhang_hua_jumps\n    # 返回答案\n    return result"]}
{"question": "一头大象重3.4吨，一头鲸鱼的重量是大象的5.8倍，鲸鱼比大象重多少吨？", "target": 16.32, "answer": 16.32, "score": 1, "generation": ["def solution():\n    # 大象的重量为3.4吨\n    elephant_weight = 3.4\n    # 鲸鱼的重量是大象的5.8倍\n    whale_weight = 5.8 * elephant_weight\n    # 鲸鱼比大象重的重量 = 鲸鱼的重量 - 大象的重量\n    weight_difference = whale_weight - elephant_weight\n    # 答案是鲸鱼比大象重的重量\n    result = weight_difference\n    # 返回答案\n    return result"]}
{"question": "学校买来故事书、科技书各9包．故事书每包25本，科技书每包18本．一共买来书多少本？", "target": 387.0, "answer": 387.0, "score": 1, "generation": ["def solution():\n    # 故事书和科技书的包数各为9包\n    num_packs = 9\n    # 故事书每包25本\n    story_books_per_pack = 25\n    # 科技书每包18本\n    tech_books_per_pack = 18\n    # 故事书的总数 = 包数 * 每包的本数\n    total_story_books = num_packs * story_books_per_pack\n    # 科技书的总数 = 包数 * 每包的本数\n    total_tech_books = num_packs * tech_books_per_pack\n    # 总书数 = 故事书总数 + 科技书总数\n    total_books = total_story_books + total_tech_books\n    # 答案是总书数\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "一个县去年计划造林1000公顷，实际超过计划的(1/10)，实际造林多少公顷？", "target": 1100.0, "answer": 1100.0, "score": 1, "generation": ["def solution():\n    # 去年计划造林1000公顷\n    planned_afforestation = 1000\n    # 实际超过计划的(1/10)\n    excess_fraction = 1/10\n    # 超过计划的造林面积 = 计划造林面积 * 超过比例\n    excess_afforestation = planned_afforestation * excess_fraction\n    # 实际造林面积 = 计划造林面积 + 超过计划的造林面积\n    actual_afforestation = planned_afforestation + excess_afforestation\n    # 答案是实际造林面积\n    result = actual_afforestation\n    # 返回答案\n    return result"]}
{"question": "(4/5)吨煤，用去(13/20)，还剩下这堆煤的几分之几？多少．", "target": 0.35, "answer": "", "score": 0, "generation": ["def solution():\n    # 煤的总量为(4/5)吨\n    total_coal = 4/5\n    # 用去的比例为(13/20)\n    used_fraction = 13/20\n    # 剩余的比例 = 1 - 用去的比例\n    remaining_fraction = 1 - used_fraction\n    # 剩余的煤量 = 总量 * 剩余比例\n    remaining_coal = total_coal * remaining_fraction\n    # 答案是剩余煤的比例和剩余煤的量\n    result = (remaining_fraction, remaining_coal)\n    # 返回答案\n    return result"]}
{"question": "把一根钢管锯成一样长的小段，锯了5次，每段占全长的多少．", "target": 0.16666666666666666, "answer": 0.16666666666666666, "score": 1, "generation": ["def solution():\n    # 锯了5次\n    num_cuts = 5\n    # 锯了5次意味着钢管被分成了6段\n    num_segments = num_cuts + 1\n    # 每段占全长的比例 = 1 / 段数\n    segment_fraction = 1 / num_segments\n    # 答案是每段占全长的比例\n    result = segment_fraction\n    # 返回答案\n    return result"]}
{"question": "学校书法组有25人，器乐组的人数是书法组的3倍．器乐组有多少人？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 书法组的人数为25人\n    calligraphy_group = 25\n    # 器乐组的人数是书法组的3倍\n    music_group = 3 * calligraphy_group\n    # 答案是器乐组的人数\n    result = music_group\n    # 返回答案\n    return result"]}
{"question": "一本书共有440页．小华已经读了8天，一共读了240页．剩下的如果要5天读完，每天至少要读多少页？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为440页\n    total_pages = 440\n    # 已经读了240页\n    pages_read = 240\n    # 剩余页数 = 总页数 - 已读页数\n    remaining_pages = total_pages - pages_read\n    # 剩余的天数为5天\n    remaining_days = 5\n    # 每天至少需要读的页数 = 剩余页数 / 剩余天数\n    daily_pages = remaining_pages / remaining_days\n    # 答案是每天至少需要读的页数\n    result = daily_pages\n    # 返回答案\n    return result"]}
{"question": "姐姐今年15岁，我今年12岁．5年后，姐姐比我大多少岁．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 姐姐今年的年龄是15岁\n    sister_age_now = 15\n    # 我今年的年龄是12岁\n    my_age_now = 12\n    # 5年后\n    years_later = 5\n    # 5年后姐姐的年龄 = 姐姐现在的年龄 + 5\n    sister_age_later = sister_age_now + years_later\n    # 5年后我的年龄 = 我现在的年龄 + 5\n    my_age_later = my_age_now + years_later\n    # 姐姐比我大的岁数 = 姐姐的年龄 - 我的年龄\n    age_difference = sister_age_later - my_age_later\n    # 答案是姐姐比我大的岁数\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "有一条宽4米的人行道，占地面积480平方米，为了方便，道路的宽度要增加到12米，长不变，扩宽后这条人行道的面积=？", "target": 1440.0, "answer": 1440.0, "score": 1, "generation": ["def solution():\n    # 原人行道的宽度为4米\n    original_width = 4\n    # 原人行道的面积为480平方米\n    original_area = 480\n    # 计算原人行道的长度 = 面积 / 宽度\n    original_length = original_area / original_width\n    # 扩宽后的人行道宽度为12米\n    new_width = 12\n    # 扩宽后的人行道面积 = 长度 * 新宽度\n    new_area = original_length * new_width\n    # 答案是扩宽后的人行道面积\n    result = new_area\n    # 返回答案\n    return result"]}
{"question": "东华小学中年级有学生220名，高年级比中年级多(1/4)，而比低年级少(1/6)，低年级有学生多少人？", "target": 330.0, "answer": 330.0, "score": 1, "generation": ["def solution():\n    # 中年级有学生220名\n    middle_grade_students = 220\n    # 高年级比中年级多(1/4)\n    high_grade_students = middle_grade_students * (1 + 1/4)\n    # 高年级比低年级少(1/6)\n    # 设低年级学生人数为x，则高年级学生人数 = x * (1 - 1/6)\n    # 所以 x = high_grade_students / (1 - 1/6)\n    low_grade_students = high_grade_students / (1 - 1/6)\n    # 答案是低年级学生人数\n    result = low_grade_students\n    # 返回答案\n    return result"]}
{"question": "加工1920个零件，王师傅单独完成要12天，李师傅单独完成要16天，李师傅每天比王师傅少加工多少个零件？", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 总零件数为1920个\n    total_parts = 1920\n    # 王师傅单独完成需要12天\n    days_wang = 12\n    # 李师傅单独完成需要16天\n    days_li = 16\n    # 王师傅每天加工的零件数 = 总零件数 / 王师傅完成的天数\n    daily_parts_wang = total_parts / days_wang\n    # 李师傅每天加工的零件数 = 总零件数 / 李师傅完成的天数\n    daily_parts_li = total_parts / days_li\n    # 李师傅每天比王师傅少加工的零件数 = 王师傅每天加工的零件数 - 李师傅每天加工的零件数\n    difference = daily_parts_wang - daily_parts_li\n    # 答案是李师傅每天比王师傅少加工的零件数\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "秦庄去年玉米每公顷产量达到8吨，进行改良后，今年每公顷达到9.6吨，比去年增产百分之几？", "target": 20.0, "answer": 19.999999999999996, "score": 1, "generation": ["def solution():\n    # 去年玉米每公顷产量为8吨\n    last_year_yield = 8\n    # 今年玉米每公顷产量为9.6吨\n    this_year_yield = 9.6\n    # 产量增加的量 = 今年产量 - 去年产量\n    yield_increase = this_year_yield - last_year_yield\n    # 增产百分比 = (产量增加的量 / 去年产量) * 100\n    percentage_increase = (yield_increase / last_year_yield) * 100\n    # 答案是增产百分比\n    result = percentage_increase\n    # 返回答案\n    return result"]}
{"question": "小红今年12岁，爸爸的年龄比小红年龄的3倍大2岁，爸爸今年多少岁？", "target": 38.0, "answer": 38.0, "score": 1, "generation": ["def solution():\n    # 小红的年龄是12岁\n    hong_age = 12\n    # 爸爸的年龄比小红年龄的3倍大2岁\n    dad_age = 3 * hong_age + 2\n    # 答案是爸爸的年龄\n    result = dad_age\n    # 返回答案\n    return result"]}
{"question": "学校组织4、五年级学生看望烈士家属，四年级去了80人，五年级去的人数是四年级的5倍，他们一共去了多少人？", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 四年级去的人数为80人\n    num_fourth_grade = 80\n    # 五年级去的人数是四年级的5倍\n    num_fifth_grade = 5 * num_fourth_grade\n    # 总人数 = 四年级人数 + 五年级人数\n    total_students = num_fourth_grade + num_fifth_grade\n    # 答案是总人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "A城到B城的公路长150千米．一辆汽车走高速路的速度是75千米/时，走普通公路的速度是50千米/时．从A城去B城走高速路比普通公路节省多少时间？", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # A城到B城的公路长150千米\n    distance = 150\n    # 高速路的速度是75千米/时\n    speed_highway = 75\n    # 普通公路的速度是50千米/时\n    speed_normal = 50\n    # 走高速路的时间 = 距离 / 高速路速度\n    time_highway = distance / speed_highway\n    # 走普通公路的时间 = 距离 / 普通公路速度\n    time_normal = distance / speed_normal\n    # 节省的时间 = 普通公路时间 - 高速路时间\n    time_saved = time_normal - time_highway\n    # 答案是节省的时间\n    result = time_saved\n    # 返回答案\n    return result"]}
{"question": "码头上有165吨货物，现用6辆载重为5.5吨的卡车运，需要运多少次才能运完？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 码头上的货物总重量为165吨\n    total_weight = 165\n    # 卡车的数量为6辆\n    num_trucks = 6\n    # 每辆卡车的载重为5.5吨\n    truck_capacity = 5.5\n    # 每次运输的总载重 = 卡车数量 * 每辆卡车的载重\n    total_capacity_per_trip = num_trucks * truck_capacity\n    # 需要运输的次数 = 总重量 / 每次运输的总载重\n    num_trips = total_weight / total_capacity_per_trip\n    # 因为运输次数必须是整数，所以需要向上取整\n    import math\n    num_trips_rounded = math.ceil(num_trips)\n    # 答案是需要的运输次数\n    result = num_trips_rounded\n    # 返回答案\n    return result"]}
{"question": "运动会上315个同学参加体操表演．他们平均分成5队，每队平均分成7组．每组有多少个同学？", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 参加体操表演的同学总数为315个\n    total_students = 315\n    # 平均分成5队\n    num_teams = 5\n    # 每队平均分成7组\n    num_groups_per_team = 7\n    # 每队的同学数 = 总同学数 / 队数\n    students_per_team = total_students / num_teams\n    # 每组的同学数 = 每队的同学数 / 每队的组数\n    students_per_group = students_per_team / num_groups_per_team\n    # 答案是每组的同学数\n    result = students_per_group\n    # 返回答案\n    return result"]}
{"question": "张阳读一本科普书，第一周读了这本书的(1/3)，第二周读了160页，剩下这本书的(2/5)没有读，这本科普书共有多少页？", "target": 600.0, "answer": 599.9999999999999, "score": 1, "generation": ["def solution():\n    # 第一周读了这本书的(1/3)\n    first_week_fraction = 1/3\n    # 第二周读了160页\n    second_week_pages = 160\n    # 剩下这本书的(2/5)没有读\n    remaining_fraction = 2/5\n    # 设这本科普书共有x页\n    # 第一周读的页数 = x * first_week_fraction\n    # 第二周读的页数 = 160\n    # 剩下的页数 = x * remaining_fraction\n    # 根据题意，总页数 = 第一周读的页数 + 第二周读的页数 + 剩下的页数\n    # 即 x = x * first_week_fraction + 160 + x * remaining_fraction\n    # 解这个方程：\n    # x - x * first_week_fraction - x * remaining_fraction = 160\n    # x * (1 - first_week_fraction - remaining_fraction) = 160\n    # x = 160 / (1 - first_week_fraction - remaining_fraction)\n    x = 160 / (1 - first_week_fraction - remaining_fraction)\n    # 答案是这本科普书的总页数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "某工地需要运黄土44.5吨，用一辆载重2.5吨的汽车运了10次，余下改用一辆载重1.5吨的汽车运，还要运多少次？", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 工地需要运黄土的总重量为44.5吨\n    total_weight = 44.5\n    # 第一辆汽车的载重为2.5吨\n    first_truck_capacity = 2.5\n    # 第一辆汽车运了10次\n    first_truck_trips = 10\n    # 第一辆汽车运输的总重量 = 载重 * 运输次数\n    first_truck_total = first_truck_capacity * first_truck_trips\n    # 剩余需要运输的重量 = 总重量 - 第一辆汽车运输的总重量\n    remaining_weight = total_weight - first_truck_total\n    # 第二辆汽车的载重为1.5吨\n    second_truck_capacity = 1.5\n    # 第二辆汽车需要的运输次数 = 剩余重量 / 第二辆汽车的载重\n    second_truck_trips = remaining_weight / second_truck_capacity\n    # 答案是第二辆汽车需要的运输次数\n    result = second_truck_trips\n    # 返回答案\n    return result"]}
{"question": "用49-38的差乘以8/64的商，积=？", "target": 1.375, "answer": 1.375, "score": 1, "generation": ["def solution():\n    # 计算49-38的差\n    difference = 49 - 38\n    # 计算8/64的商\n    quotient = 8 / 64\n    # 计算积 = 差 * 商\n    product = difference * quotient\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "甲、乙两个工程队共同修一条7.15米长的公路，甲队每天修0.65米，乙队每天比甲队多修0.13米，多少天能修完这条公路？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为7.15米\n    total_length = 7.15\n    # 甲队每天修0.65米\n    daily_repair_a = 0.65\n    # 乙队每天比甲队多修0.13米\n    daily_repair_b = daily_repair_a + 0.13\n    # 两队每天共同修的长度 = 甲队每天修的长度 + 乙队每天修的长度\n    combined_daily_repair = daily_repair_a + daily_repair_b\n    # 修完公路所需的天数 = 总长度 / 两队每天共同修的长度\n    days_to_complete = total_length / combined_daily_repair\n    # 答案是修完公路所需的天数\n    result = days_to_complete\n    # 返回答案\n    return result"]}
{"question": "一艘货轮从上海到广州航程是1800千米．平均每天行300千米．几天可以到达？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 上海到广州的航程是1800千米\n    distance = 1800\n    # 货轮平均每天行驶300千米\n    daily_speed = 300\n    # 到达所需天数 = 航程 / 每天行驶的距离\n    days_needed = distance / daily_speed\n    # 答案是到达所需的天数\n    result = days_needed\n    # 返回答案\n    return result"]}
{"question": "甲、乙、丙3人共加工1000个零件．甲、乙两人完成数量的比是7：5，丙比甲少完成64个零件，乙完成了多少个零件．", "target": 280.0, "answer": 280.0, "score": 1, "generation": ["def solution():\n    # 甲、乙、丙3人共加工1000个零件\n    total_parts = 1000\n    # 甲、乙两人完成数量的比是7：5\n    ratio_a_to_b = 7 / 5\n    # 丙比甲少完成64个零件\n    c_less_than_a = 64\n    # 设甲完成的零件数为7x，乙完成的零件数为5x\n    # 则丙完成的零件数为7x - 64\n    # 根据总零件数，有方程：7x + 5x + (7x - 64) = 1000\n    # 合并同类项：19x - 64 = 1000\n    # 解方程：19x = 1064 => x = 1064 / 19\n    x = 1064 / 19\n    # 乙完成的零件数为5x\n    parts_b = 5 * x\n    # 答案是乙完成的零件数\n    result = parts_b\n    # 返回答案\n    return result"]}
{"question": "李老师有415本练习本，发给二年级同学196本，一年级同学208本．李老师还剩多少本？", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 李老师有415本练习本\n    total_notebooks = 415\n    # 发给二年级同学196本\n    notebooks_second_grade = 196\n    # 发给一年级同学208本\n    notebooks_first_grade = 208\n    # 发给同学的总数 = 二年级 + 一年级\n    total_distributed = notebooks_second_grade + notebooks_first_grade\n    # 剩余的练习本 = 总数 - 发给同学的总数\n    remaining_notebooks = total_notebooks - total_distributed\n    # 答案是剩余的练习本\n    result = remaining_notebooks\n    # 返回答案\n    return result"]}
{"question": "爸爸身高1.74米，妈妈身高1.5米，小明踩在一块石头上与妈妈一样高，妈妈踩在这块石头上与爸爸一样高．小明身高=多少米．", "target": 1.26, "answer": 1.26, "score": 1, "generation": ["def solution():\n    # 爸爸身高1.74米\n    father_height = 1.74\n    # 妈妈身高1.5米\n    mother_height = 1.5\n    # 妈妈踩在石头上与爸爸一样高，所以石头的高度 = 爸爸身高 - 妈妈身高\n    stone_height = father_height - mother_height\n    # 小明踩在石头上与妈妈一样高，所以小明的身高 = 妈妈身高 - 石头高度\n    ming_height = mother_height - stone_height\n    # 答案是小明的身高\n    result = ming_height\n    # 返回答案\n    return result"]}
{"question": "一个除法算式，除数是5，商是48，余数是4，那么被除数=．", "target": 244.0, "answer": 244.0, "score": 1, "generation": ["def solution():\n    # 除数是5\n    divisor = 5\n    # 商是48\n    quotient = 48\n    # 余数是4\n    remainder = 4\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "修一条路，已修和未修的千米数比是3：5．如果再修12千米，则已修和未修的千米数9：1，这条路共长多少千米？", "target": 22.857142857142858, "answer": 22.857142857142858, "score": 1, "generation": ["def solution():\n    # 已修和未修的千米数比是3：5\n    ratio_repaired_unrepaired = (3, 5)\n    # 如果再修12千米，已修和未修的千米数比是9：1\n    ratio_after_repair = (9, 1)\n    # 设初始已修千米数为3x，未修千米数为5x\n    # 再修12千米后，已修千米数为3x + 12，未修千米数为5x - 12\n    # 根据新的比例关系：(3x + 12) / (5x - 12) = 9 / 1\n    # 解方程：3x + 12 = 9*(5x - 12)\n    # 3x + 12 = 45x - 108\n    # 12 + 108 = 45x - 3x\n    # 120 = 42x\n    # x = 120 / 42 = 20 / 7\n    x = 20 / 7\n    # 总路长 = 已修千米数 + 未修千米数 = 3x + 5x = 8x\n    total_length = 8 * x\n    # 答案是这条路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "工厂一共做了48个玩具熊，送给幼儿园15个，剩下的平均分给一年级3个班，每班可分得几个？", "target": 11.0, "answer": 11.0, "score": 1, "generation": ["def solution():\n    # 工厂一共做了48个玩具熊\n    total_teddy_bears = 48\n    # 送给幼儿园15个\n    given_to_kindergarten = 15\n    # 剩下的玩具熊数量 = 总数 - 送给幼儿园的数量\n    remaining_teddy_bears = total_teddy_bears - given_to_kindergarten\n    # 剩下的玩具熊平均分给3个班\n    num_classes = 3\n    # 每个班可分得的玩具熊数量 = 剩下的玩具熊数量 / 班级数量\n    teddy_bears_per_class = remaining_teddy_bears / num_classes\n    # 答案是每个班可分得的玩具熊数量\n    result = teddy_bears_per_class\n    # 返回答案\n    return result"]}
{"question": "少先队员共采集标本120只，其中62.5%是植物标本，其余是昆虫标本，昆虫标本有多少只？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 少先队员共采集标本120只\n    total_specimens = 120\n    # 植物标本的比例是62.5%\n    plant_percentage = 62.5 / 100\n    # 植物标本的数量 = 总数 * 植物标本的比例\n    plant_specimens = total_specimens * plant_percentage\n    # 昆虫标本的数量 = 总数 - 植物标本的数量\n    insect_specimens = total_specimens - plant_specimens\n    # 答案是昆虫标本的数量\n    result = insect_specimens\n    # 返回答案\n    return result"]}
{"question": "商场1-6月份共卖出彩色电视机264台，平均每个月卖出多少台？", "target": 44.0, "answer": 44.0, "score": 1, "generation": ["def solution():\n    # 1-6月份共卖出彩色电视机264台\n    total_televisions = 264\n    # 1-6月份共6个月\n    num_months = 6\n    # 平均每个月卖出的电视机数量 = 总数量 / 月份数\n    average_per_month = total_televisions / num_months\n    # 答案是平均每个月卖出的电视机数量\n    result = average_per_month\n    # 返回答案\n    return result"]}
{"question": "(2/3)-(3/5)的差乘(5/7)，积=？", "target": 0.047619047619047616, "answer": 0.04761904761904761, "score": 1, "generation": ["def solution():\n    # 第一个分数是(2/3)\n    fraction1 = 2/3\n    # 第二个分数是(3/5)\n    fraction2 = 3/5\n    # 第三个分数是(5/7)\n    fraction3 = 5/7\n    # 计算前两个分数的差\n    difference = fraction1 - fraction2\n    # 计算差与第三个分数的积\n    product = difference * fraction3\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "一艘大船运了6次货，一艘小船运了9次货，大船每次运30吨，小船每次运12吨，大船和小船一共运了多少吨货？", "target": 288.0, "answer": 288.0, "score": 1, "generation": ["def solution():\n    # 大船运货次数为6次\n    big_ship_trips = 6\n    # 小船运货次数为9次\n    small_ship_trips = 9\n    # 大船每次运货30吨\n    big_ship_capacity = 30\n    # 小船每次运货12吨\n    small_ship_capacity = 12\n    # 大船总运货量 = 运货次数 * 每次运货量\n    big_ship_total = big_ship_trips * big_ship_capacity\n    # 小船总运货量 = 运货次数 * 每次运货量\n    small_ship_total = small_ship_trips * small_ship_capacity\n    # 大船和小船一共运货量 = 大船总运货量 + 小船总运货量\n    total_cargo = big_ship_total + small_ship_total\n    # 答案是大船和小船一共运货量\n    result = total_cargo\n    # 返回答案\n    return result"]}
{"question": "杭州到黄山相距240千米．一列火车的速度是120千米/时，一辆汽车的速度是80千米/时．如果火车和汽车同时从杭州出发，那么火车比汽车到达黄山的时间早多少小时．", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 杭州到黄山的距离为240千米\n    distance = 240\n    # 火车的速度是120千米/时\n    train_speed = 120\n    # 汽车的速度是80千米/时\n    car_speed = 80\n    # 火车到达黄山的时间 = 距离 / 火车速度\n    train_time = distance / train_speed\n    # 汽车到达黄山的时间 = 距离 / 汽车速度\n    car_time = distance / car_speed\n    # 火车比汽车早到的时间 = 汽车时间 - 火车时间\n    time_difference = car_time - train_time\n    # 答案是火车比汽车早到的时间\n    result = time_difference\n    # 返回答案\n    return result"]}
{"question": "阳光小学三年级有学生248人，比四年级学生少63人，四年级有多少人？", "target": 311.0, "answer": 311.0, "score": 1, "generation": ["def solution():\n    # 三年级的学生人数为248人\n    num_third_grade = 248\n    # 三年级比四年级少63人\n    difference = 63\n    # 四年级的学生人数 = 三年级的人数 + 63人\n    num_fourth_grade = num_third_grade + difference\n    # 答案是四年级的学生人数\n    result = num_fourth_grade\n    # 返回答案\n    return result"]}
{"question": "滑冰场上午有72人，中午有44人离去，又有85人到来．现在有多少人滑冰？", "target": 113.0, "answer": 113.0, "score": 1, "generation": ["def solution():\n    # 上午滑冰场有72人\n    morning_people = 72\n    # 中午有44人离去\n    people_left = 44\n    # 又有85人到来\n    people_arrived = 85\n    # 现在滑冰场的人数 = 上午人数 - 离去人数 + 到来人数\n    current_people = morning_people - people_left + people_arrived\n    # 答案是现在滑冰场的人数\n    result = current_people\n    # 返回答案\n    return result"]}
{"question": "小红在跳绳比赛中，前3次每次平均跳96下，第4次跳了104下，她平均每次跳多少下？", "target": 98.0, "answer": 98.0, "score": 1, "generation": ["def solution():\n    # 前3次跳绳的平均次数为96下\n    average_first_three = 96\n    # 第4次跳了104下\n    fourth_jump = 104\n    # 前3次跳绳的总次数 = 平均次数 * 3\n    total_first_three = average_first_three * 3\n    # 4次跳绳的总次数 = 前3次总次数 + 第4次次数\n    total_jumps = total_first_three + fourth_jump\n    # 平均每次跳绳次数 = 总次数 / 4\n    average_jumps = total_jumps / 4\n    # 答案是平均每次跳绳次数\n    result = average_jumps\n    # 返回答案\n    return result"]}
{"question": "某汽车厂去年产汽车20000辆，其中小型车占(1/8)，其余为大型车，今年计划大型车产量未变，增产小型车若干辆使小型车产量占总产量的(1/5)，求今年增产多少辆小型车（列式解答）", "target": 1875.0, "answer": 1875.0, "score": 1, "generation": ["def solution():\n    # 去年汽车总产量为20000辆\n    total_cars_last_year = 20000\n    # 小型车占(1/8)\n    small_car_fraction_last_year = 1/8\n    # 去年小型车数量 = 总产量 * 小型车比例\n    small_cars_last_year = total_cars_last_year * small_car_fraction_last_year\n    # 去年大型车数量 = 总产量 - 小型车数量\n    large_cars_last_year = total_cars_last_year - small_cars_last_year\n    # 今年大型车产量未变\n    large_cars_this_year = large_cars_last_year\n    # 今年小型车产量占总产量的(1/5)\n    small_car_fraction_this_year = 1/5\n    # 设今年小型车产量为x，则总产量为x + large_cars_this_year\n    # 根据比例关系：x / (x + large_cars_this_year) = small_car_fraction_this_year\n    # 解方程得：x = (small_car_fraction_this_year * large_cars_this_year) / (1 - small_car_fraction_this_year)\n    small_cars_this_year = (small_car_fraction_this_year * large_cars_this_year) / (1 - small_car_fraction_this_year)\n    # 今年增产的小型车数量 = 今年小型车产量 - 去年小型车产量\n    increase_in_small_cars = small_cars_this_year - small_cars_last_year\n    # 答案是今年增产的小型车数量\n    result = increase_in_small_cars\n    # 返回答案\n    return result"]}
{"question": "原来做一条裙子用布(7/10)米，现在只要(3/5)米．原来做900条裙子所用的布，现在可以做多少条？", "target": 1050.0, "answer": 1050.0, "score": 1, "generation": ["def solution():\n    # 原来做一条裙子用布(7/10)米\n    original_cloth_per_dress = 7/10\n    # 现在做一条裙子用布(3/5)米\n    new_cloth_per_dress = 3/5\n    # 原来做900条裙子所用的布\n    original_num_dresses = 900\n    # 总布料 = 原来做一条裙子用布 * 原来做的裙子数量\n    total_cloth = original_cloth_per_dress * original_num_dresses\n    # 现在可以做的裙子数量 = 总布料 / 现在做一条裙子用布\n    new_num_dresses = total_cloth / new_cloth_per_dress\n    # 答案是现在可以做的裙子数量\n    result = new_num_dresses\n    # 返回答案\n    return result"]}
{"question": "甲数的80%与乙数的30%相等，已知甲数的倒数是3+(1/5)，乙数=．", "target": 0.8333333333333334, "answer": 0.8333333333333334, "score": 1, "generation": ["def solution():\n    # 甲数的倒数是3+(1/5)\n    reciprocal_a = 3 + (1/5)\n    # 甲数 = 1 / 甲数的倒数\n    a = 1 / reciprocal_a\n    # 甲数的80%与乙数的30%相等\n    percentage_a = 0.8\n    percentage_b = 0.3\n    # 甲数的80% = 甲数 * 80%\n    eighty_percent_a = a * percentage_a\n    # 乙数的30% = 甲数的80%\n    thirty_percent_b = eighty_percent_a\n    # 乙数 = 乙数的30% / 30%\n    b = thirty_percent_b / percentage_b\n    # 答案是乙数\n    result = b\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从宝应去扬州，已经行了42千米，占全程的(2/5)，两地相距多少千米？", "target": 105.0, "answer": 105.0, "score": 1, "generation": ["def solution():\n    # 已经行驶的距离为42千米\n    distance_traveled = 42\n    # 已经行驶的距离占全程的(2/5)\n    fraction_traveled = 2/5\n    # 全程距离 = 已经行驶的距离 / 已经行驶的比例\n    total_distance = distance_traveled / fraction_traveled\n    # 答案是两地相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "超市原有西瓜348千克，上午卖出153千克，下午又运来213千克，这时超市有西瓜多少千克？", "target": 408.0, "answer": 408.0, "score": 1, "generation": ["def solution():\n    # 超市原有西瓜348千克\n    initial_watermelons = 348\n    # 上午卖出153千克\n    sold_morning = 153\n    # 下午又运来213千克\n    delivered_afternoon = 213\n    # 上午卖出后的西瓜数量 = 原有数量 - 上午卖出的数量\n    after_morning = initial_watermelons - sold_morning\n    # 下午运来后的西瓜数量 = 上午卖出后的数量 + 下午运来的数量\n    after_afternoon = after_morning + delivered_afternoon\n    # 答案是下午运来后的西瓜数量\n    result = after_afternoon\n    # 返回答案\n    return result"]}
{"question": "某织布厂第一车间有工人250人，相当于第二车间人数的(5/6)，两车间人数的总数占职工总数的11%．全厂职工有多少人？", "target": 5000.0, "answer": 5000.0, "score": 1, "generation": ["def solution():\n    # 第一车间有工人250人\n    workers_first_workshop = 250\n    # 第一车间人数相当于第二车间的(5/6)\n    ratio_second_workshop = 5/6\n    # 第二车间人数 = 第一车间人数 / 比例\n    workers_second_workshop = workers_first_workshop / ratio_second_workshop\n    # 两车间总人数 = 第一车间人数 + 第二车间人数\n    total_workers_two_workshops = workers_first_workshop + workers_second_workshop\n    # 两车间人数占职工总数的11%\n    percentage_total_workers = 0.11\n    # 全厂职工总数 = 两车间总人数 / 比例\n    total_workers = total_workers_two_workshops / percentage_total_workers\n    # 答案是全厂职工总数\n    result = total_workers\n    # 返回答案\n    return result"]}
{"question": "小明看一本150页的故事书，前3天看了整本书的(3/5)．平均每天看多少页？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为150页\n    total_pages = 150\n    # 前3天看了整本书的(3/5)\n    read_fraction = 3/5\n    # 前3天看了的页数 = 总页数 * 看的比例\n    pages_read = total_pages * read_fraction\n    # 平均每天看的页数 = 前3天看了的页数 / 3天\n    average_pages_per_day = pages_read / 3\n    # 答案是平均每天看的页数\n    result = average_pages_per_day\n    # 返回答案\n    return result"]}
{"question": "学校图书室科技书的本数是故事书的(2/3)，故事书的本数占图书总数的(3/5)，图书室共有图书4500，科技书有多少本？", "target": 1800.0, "answer": 1800.0, "score": 1, "generation": ["def solution():\n    # 图书室共有图书4500本\n    total_books = 4500\n    # 故事书的本数占图书总数的(3/5)\n    storybook_fraction = 3/5\n    # 故事书的本数 = 图书总数 * 故事书所占比例\n    num_storybooks = total_books * storybook_fraction\n    # 科技书的本数是故事书的(2/3)\n    scitechbook_fraction = 2/3\n    # 科技书的本数 = 故事书的本数 * 科技书所占比例\n    num_scitechbooks = num_storybooks * scitechbook_fraction\n    # 答案是科技书的本数\n    result = num_scitechbooks\n    # 返回答案\n    return result"]}
{"question": "喜羊羊和灰太狼在体育场进行20000米赛跑，灰太狼的速度是喜羊羊的6倍，当它们从起点一起出发后，喜羊羊不停地跑，灰太狼跑到某处后开始睡觉，等它醒来时喜羊羊已经领先它10000米，灰太狼奋起直追，当喜羊羊到达终点时，灰太狼仍然落后200米，那么灰太狼睡觉期间喜羊羊跑了多少米？", "target": 16700.0, "answer": 16700.0, "score": 1, "generation": ["def solution():\n    # 赛跑总距离为20000米\n    total_distance = 20000\n    # 灰太狼的速度是喜羊羊的6倍\n    wolf_speed_ratio = 6\n    # 喜羊羊到达终点时，灰太狼落后200米\n    wolf_behind_at_end = 200\n    # 灰太狼睡觉醒来时，喜羊羊领先10000米\n    sheep_lead_when_wolf_wakes = 10000\n\n    # 设喜羊羊的速度为v，灰太狼的速度为6v\n    # 喜羊羊跑完全程的时间 = 总距离 / 喜羊羊的速度 = 20000 / v\n    # 灰太狼在这段时间内跑的距离 = 灰太狼的速度 * 时间 = 6v * (20000 / v) = 120000\n    # 但灰太狼实际跑的距离 = 总距离 - 落后距离 = 20000 - 200 = 19800\n    # 所以灰太狼睡觉的时间 = (120000 - 19800) / (6v) = 100200 / (6v) = 16700 / v\n    # 喜羊羊在灰太狼睡觉期间跑的距离 = 喜羊羊的速度 * 睡觉时间 = v * (16700 / v) = 16700\n\n    # 答案是灰太狼睡觉期间喜羊羊跑的距离\n    result = 16700\n    # 返回答案\n    return result"]}
{"question": "学校组织同学们去看电影，三年级有260人，分别乘坐5辆车，平均每辆车坐多少人？", "target": 52.0, "answer": 52.0, "score": 1, "generation": ["def solution():\n    # 三年级的人数为260人\n    num_students = 260\n    # 车辆数量为5辆\n    num_vehicles = 5\n    # 平均每辆车坐的人数 = 总人数 / 车辆数量\n    avg_students_per_vehicle = num_students / num_vehicles\n    # 答案是平均每辆车坐的人数\n    result = avg_students_per_vehicle\n    # 返回答案\n    return result"]}
{"question": "一根铁丝用去10.5米，是剩下铁丝的5倍，剩下多少米？", "target": 2.1, "answer": 2.1, "score": 1, "generation": ["def solution():\n    # 用去的铁丝长度为10.5米\n    used_length = 10.5\n    # 用去的铁丝是剩下铁丝的5倍\n    multiple = 5\n    # 剩下的铁丝长度 = 用去的铁丝长度 / 倍数\n    remaining_length = used_length / multiple\n    # 答案是剩下的铁丝长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "一头猪重208千克，一头牛的重量是它的3倍，一头牛和一头猪一共重多少千克？", "target": 832.0, "answer": 832.0, "score": 1, "generation": ["def solution():\n    # 猪的重量为208千克\n    pig_weight = 208\n    # 牛的重量是猪的3倍\n    cow_weight = 3 * pig_weight\n    # 牛和猪的总重量 = 牛的重量 + 猪的重量\n    total_weight = cow_weight + pig_weight\n    # 答案是牛和猪的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "甜美水果店上午卖苹果12箱，每箱重20千克．如果平均每千克苹果售价2元，这些苹果卖多少元？", "target": 480.0, "answer": 480.0, "score": 1, "generation": ["def solution():\n    # 上午卖出的苹果箱数为12箱\n    num_boxes = 12\n    # 每箱苹果的重量为20千克\n    weight_per_box = 20\n    # 每千克苹果的售价为2元\n    price_per_kg = 2\n    # 总重量 = 箱数 * 每箱的重量\n    total_weight = num_boxes * weight_per_box\n    # 总售价 = 总重量 * 每千克的售价\n    total_price = total_weight * price_per_kg\n    # 答案是这些苹果的总售价\n    result = total_price\n    # 返回答案\n    return result"]}
{"question": "桃林沟果园里有苹果树100棵，梨树的棵树比苹果树少(1/4)，梨树有多少棵？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 苹果树的数量为100棵\n    num_apple_trees = 100\n    # 梨树比苹果树少(1/4)\n    pear_tree_decrease = 1/4\n    # 梨树的数量 = 苹果树的数量 * (1 - 减少比例)\n    num_pear_trees = num_apple_trees * (1 - pear_tree_decrease)\n    # 答案是梨树的数量\n    result = num_pear_trees\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人同时骑自行车从A城到B城，甲每小时行15千米，乙每小时行12千米，甲由于途中有事耽误了4小时，结果甲和乙同时到达B城．求A、B两城间的距离．", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 甲的速度是每小时15千米\n    speed_a = 15\n    # 乙的速度是每小时12千米\n    speed_b = 12\n    # 甲耽误了4小时\n    delay_a = 4\n    # 设A、B两城间的距离为D千米\n    # 甲的总时间 = D / speed_a + delay_a\n    # 乙的总时间 = D / speed_b\n    # 因为甲和乙同时到达B城，所以甲的总时间 = 乙的总时间\n    # D / speed_a + delay_a = D / speed_b\n    # 解这个方程求D\n    # D / 15 + 4 = D / 12\n    # 两边乘以60（15和12的最小公倍数）消去分母\n    # 4D + 240 = 5D\n    # 移项得：D = 240\n    D = 240\n    # 答案是A、B两城间的距离\n    result = D\n    # 返回答案\n    return result"]}
{"question": "李明家5月共支出2000元，其中购物支出占20%，伙食费支出占40%．两项支出共多少元？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 李明家5月总支出为2000元\n    total_expenses = 2000\n    # 购物支出占总支出的20%\n    shopping_percentage = 0.2\n    # 伙食费支出占总支出的40%\n    food_percentage = 0.4\n    # 购物支出 = 总支出 * 购物支出比例\n    shopping_expenses = total_expenses * shopping_percentage\n    # 伙食费支出 = 总支出 * 伙食费支出比例\n    food_expenses = total_expenses * food_percentage\n    # 两项支出总和 = 购物支出 + 伙食费支出\n    total_two_expenses = shopping_expenses + food_expenses\n    # 答案是两项支出的总和\n    result = total_two_expenses\n    # 返回答案\n    return result"]}
{"question": "饲养场有公鸡245只，母鸡的只数比公鸡的3倍多45只，饲养场一共有多少只母鸡？", "target": 780.0, "answer": 780.0, "score": 1, "generation": ["def solution():\n    # 公鸡的数量为245只\n    num_roosters = 245\n    # 母鸡的数量比公鸡的3倍多45只\n    num_hens = 3 * num_roosters + 45\n    # 答案是母鸡的数量\n    result = num_hens\n    # 返回答案\n    return result"]}
{"question": "某商店6月份的营业额是50万元，按5%缴纳营业税，这个商店要缴纳营业税多少万元．", "target": 2.5, "answer": 2.5, "score": 1, "generation": ["def solution():\n    # 6月份的营业额是50万元\n    revenue = 50\n    # 营业税率为5%\n    tax_rate = 0.05\n    # 需要缴纳的营业税 = 营业额 * 营业税率\n    tax_amount = revenue * tax_rate\n    # 答案是缴纳的营业税金额\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "一堆煤，第一周用去这堆煤的40%，每二周用去这堆煤的(1/3)，刚好用去4吨．这堆煤原有多少吨？", "target": 5.454545454545454, "answer": 5.454545454545454, "score": 1, "generation": ["def solution():\n    # 第一周用去这堆煤的40%\n    first_week_usage = 0.4\n    # 第二周用去这堆煤的(1/3)\n    second_week_usage = 1/3\n    # 两周用去的煤的总比例 = 第一周的比例 + 第二周的比例\n    total_usage_ratio = first_week_usage + second_week_usage\n    # 两周用去的煤的总量为4吨\n    total_usage_amount = 4\n    # 这堆煤原有的总量 = 用去的总量 / 用去的比例\n    original_amount = total_usage_amount / total_usage_ratio\n    # 答案是这堆煤原有的总量\n    result = original_amount\n    # 返回答案\n    return result"]}
{"question": "学校计划用一些钱购买单价1050元得电子琴，正好可以买7台，实际买录音机用去了3150元，剩下的钱还够买几台？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 电子琴的单价为1050元\n    price_electronic_organ = 1050\n    # 计划购买7台电子琴\n    planned_quantity = 7\n    # 计划总预算 = 电子琴单价 * 计划购买数量\n    total_budget = price_electronic_organ * planned_quantity\n    # 实际购买录音机用去了3150元\n    spent_on_recorder = 3150\n    # 剩余的钱 = 总预算 - 实际花费\n    remaining_money = total_budget - spent_on_recorder\n    # 剩下的钱可以购买的电子琴数量 = 剩余的钱 / 电子琴单价\n    remaining_quantity = remaining_money / price_electronic_organ\n    # 答案是剩下的钱可以购买的电子琴数量\n    result = remaining_quantity\n    # 返回答案\n    return result"]}
{"question": "一个数的(5/7)是114，这个数=？", "target": 159.6, "answer": 159.6, "score": 1, "generation": ["def solution():\n    # 一个数的(5/7)是114\n    part_of_number = 114\n    fraction = 5/7\n    # 这个数 = 部分数 / 分数\n    number = part_of_number / fraction\n    # 答案是这个数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "黄河全长5464千米，长江全长6300千米，长江比黄河长多少千米？", "target": 836.0, "answer": 836.0, "score": 1, "generation": ["def solution():\n    # 黄河的全长为5464千米\n    yellow_river_length = 5464\n    # 长江的全长为6300千米\n    yangtze_river_length = 6300\n    # 长江比黄河长的长度 = 长江的长度 - 黄河的长度\n    length_difference = yangtze_river_length - yellow_river_length\n    # 答案是长江比黄河长的长度\n    result = length_difference\n    # 返回答案\n    return result"]}
{"question": "3、四年级学生向灾区捐款，三年级捐了769.3元，比四年级少48.9元，两个年级共捐了多少钱？", "target": 1587.5, "answer": 1587.5, "score": 1, "generation": ["def solution():\n    # 三年级捐款769.3元\n    third_grade_donation = 769.3\n    # 三年级比四年级少捐48.9元\n    donation_difference = 48.9\n    # 四年级捐款 = 三年级捐款 + 捐款差额\n    fourth_grade_donation = third_grade_donation + donation_difference\n    # 两个年级共捐款 = 三年级捐款 + 四年级捐款\n    total_donation = third_grade_donation + fourth_grade_donation\n    # 答案是两个年级共捐款\n    result = total_donation\n    # 返回答案\n    return result"]}
{"question": "王老师给营业员200元买了16个排球，找回8元，每个排球几元？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 王老师给营业员200元\n    money_given = 200\n    # 找回了8元\n    money_returned = 8\n    # 实际花费 = 给的钱 - 找回的钱\n    actual_cost = money_given - money_returned\n    # 买了16个排球\n    num_volleyballs = 16\n    # 每个排球的价格 = 实际花费 / 排球的数量\n    price_per_volleyball = actual_cost / num_volleyballs\n    # 答案是每个排球的价格\n    result = price_per_volleyball\n    # 返回答案\n    return result"]}
{"question": "为支援汶川抗震救灾，滨海市和平小学五年级一班41人共捐款943元，三年级一班38人共捐款722元，五年级平均每人比三年级多捐多少元？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 五年级一班41人共捐款943元\n    fifth_grade_students = 41\n    fifth_grade_donation = 943\n    # 三年级一班38人共捐款722元\n    third_grade_students = 38\n    third_grade_donation = 722\n    # 五年级平均每人捐款 = 总捐款 / 人数\n    fifth_grade_avg = fifth_grade_donation / fifth_grade_students\n    # 三年级平均每人捐款 = 总捐款 / 人数\n    third_grade_avg = third_grade_donation / third_grade_students\n    # 五年级平均每人比三年级多捐的金额 = 五年级平均每人捐款 - 三年级平均每人捐款\n    donation_difference = fifth_grade_avg - third_grade_avg\n    # 答案是五年级平均每人比三年级多捐的金额\n    result = donation_difference\n    # 返回答案\n    return result"]}
{"question": "我国供水不足的城市个数占全国总城市的(2/3)，其中又有(1/4)的城市严重缺水，全国严重缺水的城市个数占总城市个数的几分之几？", "target": 0.16666666666666666, "answer": 0.16666666666666666, "score": 1, "generation": ["def solution():\n    # 供水不足的城市占总城市的(2/3)\n    insufficient_water_cities_fraction = 2/3\n    # 严重缺水的城市占供水不足城市的(1/4)\n    severe_water_shortage_fraction = 1/4\n    # 严重缺水的城市占总城市的比例 = 供水不足城市的比例 * 严重缺水的比例\n    total_severe_water_shortage_fraction = insufficient_water_cities_fraction * severe_water_shortage_fraction\n    # 答案是严重缺水的城市占总城市的比例\n    result = total_severe_water_shortage_fraction\n    # 返回答案\n    return result"]}
{"question": "从5050中连续减去5，最多能减多少次．", "target": 1010.0, "answer": 1010.0, "score": 1, "generation": ["def solution():\n    # 初始数字为5050\n    initial_number = 5050\n    # 每次减去的数字为5\n    subtract_number = 5\n    # 最多能减的次数 = 初始数字 / 每次减去的数字\n    max_times = initial_number // subtract_number\n    # 答案是最多能减的次数\n    result = max_times\n    # 返回答案\n    return result"]}
{"question": "某商店今天卖出15台电视机，7台洗衣机．卖出的电视机是洗衣机的多少．", "target": 2.142857142857143, "answer": 2.142857142857143, "score": 1, "generation": ["def solution():\n    # 今天卖出的电视机数量为15台\n    num_televisions = 15\n    # 今天卖出的洗衣机数量为7台\n    num_washing_machines = 7\n    # 卖出的电视机是洗衣机的多少 = 电视机数量 / 洗衣机数量\n    ratio = num_televisions / num_washing_machines\n    # 答案是卖出的电视机是洗衣机的多少\n    result = ratio\n    # 返回答案\n    return result"]}
{"question": "12路公共汽车车队每月计划用汽油5400升，采取节油措施后，实际节约了(1/12)，实际节油多少升？", "target": 450.0, "answer": 450.0, "score": 1, "generation": ["def solution():\n    # 每月计划用汽油5400升\n    planned_gasoline = 5400\n    # 实际节约了(1/12)\n    saved_fraction = 1/12\n    # 实际节油量 = 计划用油量 * 节约比例\n    actual_saved_gasoline = planned_gasoline * saved_fraction\n    # 答案是实际节油量\n    result = actual_saved_gasoline\n    # 返回答案\n    return result"]}
{"question": "一辆汽车从甲地开往乙地，已经行驶了全程的(5/7)，距离乙地还有132千米，甲、乙两地相距多少千米？", "target": 462.0, "answer": 462.0, "score": 1, "generation": ["def solution():\n    # 已经行驶了全程的(5/7)\n    traveled_fraction = 5/7\n    # 距离乙地还有132千米\n    remaining_distance = 132\n    # 因为已经行驶了(5/7)，所以剩余距离为全程的(2/7)\n    remaining_fraction = 1 - traveled_fraction\n    # 全程距离 = 剩余距离 / 剩余比例\n    total_distance = remaining_distance / remaining_fraction\n    # 答案是甲、乙两地相距的距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "小红上个月买书花了15元，占总支出的20%，小红上个月一共花了多少元？", "target": 75.0, "answer": 75.0, "score": 1, "generation": ["def solution():\n    # 小红上个月买书花了15元\n    book_expense = 15\n    # 买书花费占总支出的20%\n    book_expense_percentage = 0.2\n    # 总支出 = 买书花费 / 买书花费所占比例\n    total_expense = book_expense / book_expense_percentage\n    # 答案是小红上个月的总支出\n    result = total_expense\n    # 返回答案\n    return result"]}
{"question": "买4支钢笔比买5支中性笔贵4.8元，每支中性笔的价钱是1.2元，每支钢笔多少元？", "target": 2.7, "answer": 2.7, "score": 1, "generation": ["def solution():\n    # 钢笔的数量是4\n    num_pens = 4\n    # 中性笔的数量是5\n    num_gel_pens = 5\n    # 每支中性笔的价格是1.2元\n    price_gel_pen = 1.2\n    # 钢笔与中性笔的价格差是4.8元\n    total_price_difference = 4.8\n    # 中性笔的总价格 = 中性笔数量 * 每支中性笔的价格\n    total_price_gel_pens = num_gel_pens * price_gel_pen\n    # 因为钢笔总价比中性笔总价贵，所以钢笔的总价格 = 钢笔与中性笔的价格差 + 中性笔的总价格\n    total_price_pens = total_price_difference + total_price_gel_pens\n    # 每支钢笔的价格 = 钢笔的总价格 / 钢笔的数量\n    price_pen = total_price_pens / num_pens\n    # 答案是每支钢笔的价格\n    result = price_pen\n    # 返回答案\n    return result"]}
{"question": "一件衬衫原价140元，现在打0.9出售，这件衬衫现价多少元？", "target": 126.0, "answer": 126.0, "score": 1, "generation": ["def solution():\n    # 衬衫的原价为140元\n    original_price = 140\n    # 现在打0.9出售\n    discount_rate = 0.9\n    # 衬衫的现价 = 原价 * 折扣率\n    current_price = original_price * discount_rate\n    # 答案是衬衫的现价\n    result = current_price\n    # 返回答案\n    return result"]}
{"question": "32与23的和乘75，积=？", "target": 4125.0, "answer": 4125.0, "score": 1, "generation": ["def solution():\n    # 第一个数是32\n    num1 = 32\n    # 第二个数是23\n    num2 = 23\n    # 第三个数是75\n    num3 = 75\n    # 32与23的和\n    sum_num1_num2 = num1 + num2\n    # 和乘75的积\n    product = sum_num1_num2 * num3\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "小明有一本故事书，第一天看了16页，第二天看了20%，还剩下56页，这本书共有多少页？", "target": 90.0, "answer": 90.0, "score": 1, "generation": ["def solution():\n    # 第一天看了16页\n    pages_read_day1 = 16\n    # 第二天看了20%的比例\n    read_fraction_day2 = 0.2\n    # 还剩下56页\n    remaining_pages = 56\n    # 设总页数为x，则第二天看了0.2x页\n    # 根据题意：第一天看的页数 + 第二天看的页数 + 剩余页数 = 总页数\n    # 即：16 + 0.2x + 56 = x\n    # 解方程：16 + 56 = x - 0.2x => 72 = 0.8x => x = 72 / 0.8\n    total_pages = (pages_read_day1 + remaining_pages) / (1 - read_fraction_day2)\n    # 答案是这本书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "一批牡丹花种的发芽率是80%，张叔叔打算培育3000株花苗，需要播种多少个红球．", "target": 3750.0, "answer": 3750.0, "score": 1, "generation": ["def solution():\n    # 牡丹花种的发芽率是80%\n    germination_rate = 0.8\n    # 张叔叔打算培育3000株花苗\n    desired_seedlings = 3000\n    # 需要播种的红球数量 = 需要培育的花苗数量 / 发芽率\n    required_seeds = desired_seedlings / germination_rate\n    # 答案是需要的红球数量\n    result = required_seeds\n    # 返回答案\n    return result"]}
{"question": "阳光小学在大礼堂举行开学典礼，礼堂座位是9排，每排有186个位置．现在位置空出了12个，一共有多少人参加这个开学典礼？", "target": 1662.0, "answer": 1662.0, "score": 1, "generation": ["def solution():\n    # 礼堂座位有9排\n    num_rows = 9\n    # 每排有186个位置\n    seats_per_row = 186\n    # 空出的位置有12个\n    empty_seats = 12\n    # 总座位数 = 排数 * 每排座位数\n    total_seats = num_rows * seats_per_row\n    # 参加开学典礼的人数 = 总座位数 - 空出的座位数\n    num_attendees = total_seats - empty_seats\n    # 答案是参加开学典礼的人数\n    result = num_attendees\n    # 返回答案\n    return result"]}
{"question": "妈妈今年35岁，小红今年5岁，明年妈妈的年龄是小红的多少倍．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 妈妈今年的年龄是35岁\n    mom_age = 35\n    # 小红今年的年龄是5岁\n    hong_age = 5\n    # 明年妈妈的年龄 = 今年年龄 + 1\n    mom_age_next_year = mom_age + 1\n    # 明年小红的年龄 = 今年年龄 + 1\n    hong_age_next_year = hong_age + 1\n    # 明年妈妈的年龄是小红的多少倍 = 明年妈妈的年龄 / 明年小红的年龄\n    age_ratio = mom_age_next_year / hong_age_next_year\n    # 答案是明年妈妈的年龄是小红的多少倍\n    result = age_ratio\n    # 返回答案\n    return result"]}
{"question": "一个数的(1/3)比它的(1/6)多60，求这个数．", "target": 360.0, "answer": 360.0, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    x = 0\n    # 这个数的(1/3)比它的(1/6)多60\n    difference = 60\n    # 根据题意，可以列出方程：(1/3)x - (1/6)x = 60\n    # 解这个方程\n    x = difference / ((1/3) - (1/6))\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "水果店有苹果180㎏，卖出(1/3)后，剩下的苹果正好是桔子的60%，水果店有桔子多少千克？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 水果店有苹果180㎏\n    apple_weight = 180\n    # 卖出(1/3)的苹果\n    sold_fraction = 1/3\n    # 卖出的苹果重量 = 苹果总重量 * 卖出比例\n    sold_apple_weight = apple_weight * sold_fraction\n    # 剩下的苹果重量 = 苹果总重量 - 卖出的苹果重量\n    remaining_apple_weight = apple_weight - sold_apple_weight\n    # 剩下的苹果重量正好是桔子的60%\n    orange_weight_percentage = 0.6\n    # 桔子的重量 = 剩下的苹果重量 / 桔子的百分比\n    orange_weight = remaining_apple_weight / orange_weight_percentage\n    # 答案是水果店有桔子的重量\n    result = orange_weight\n    # 返回答案\n    return result"]}
{"question": "学校举行运动会，参加入场式的仪仗队同学共有205人，每5人排一行，每一行空2米．如果这个仪仗队以每分钟20米的速度通过主席台，需要多少分钟．", "target": 4.0, "answer": 4.1, "score": 0, "generation": ["def solution():\n    # 仪仗队同学共有205人\n    total_students = 205\n    # 每5人排一行\n    students_per_row = 5\n    # 每一行空2米\n    space_per_row = 2\n    # 仪仗队的速度是每分钟20米\n    speed = 20\n    # 计算总行数 = 总人数 / 每行人数\n    total_rows = total_students / students_per_row\n    # 计算总长度 = 总行数 * 每行空2米\n    total_length = total_rows * space_per_row\n    # 计算通过主席台所需时间 = 总长度 / 速度\n    time_required = total_length / speed\n    # 答案是通过主席台所需时间\n    result = time_required\n    # 返回答案\n    return result"]}
{"question": "计算：（(2/29)+(2/23)）*29*23=．", "target": 104.0, "answer": 104.0, "score": 1, "generation": ["def solution():\n    # 第一个分数是2/29\n    fraction1 = 2/29\n    # 第二个分数是2/23\n    fraction2 = 2/23\n    # 两个分数的和\n    sum_fractions = fraction1 + fraction2\n    # 两个分母的乘积\n    product_denominators = 29 * 23\n    # 最终结果 = 分数的和 * 两个分母的乘积\n    result = sum_fractions * product_denominators\n    # 返回答案\n    return result"]}
{"question": "希望小学六年级共有女生25人，男生28人，男生比女生多百分之几？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 女生人数为25人\n    num_girls = 25\n    # 男生人数为28人\n    num_boys = 28\n    # 男生比女生多的人数 = 男生人数 - 女生人数\n    difference = num_boys - num_girls\n    # 男生比女生多百分之几 = (男生比女生多的人数 / 女生人数) * 100\n    percentage_difference = (difference / num_girls) * 100\n    # 答案是男生比女生多百分之几\n    result = percentage_difference\n    # 返回答案\n    return result"]}
{"question": "甲乙两艘船分别从两个码头同时相向而行．甲船每小时行驶40海里，乙船每小时行驶28海里，两船行驶4小时后相遇．甲、乙两个码头相距多少海里？", "target": 272.0, "answer": 272.0, "score": 1, "generation": ["def solution():\n    # 甲船的速度是每小时40海里\n    speed_a = 40\n    # 乙船的速度是每小时28海里\n    speed_b = 28\n    # 两船行驶的时间是4小时\n    time = 4\n    # 因为两船相向而行，两船相对速度为甲船与乙船速度之和\n    relative_speed = speed_a + speed_b\n    # 两码头之间的距离 = 相对速度 * 行驶时间\n    distance = relative_speed * time\n    # 答案是两码头之间的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "甲地到乙地的公路长250千米，一辆客车和一辆货车同时从甲地开往乙地，客车每小时行100千米，货车每小时行80千米．客车到达乙地时，货车行了多少千米？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 甲地到乙地的公路长250千米\n    distance = 250\n    # 客车的速度是每小时行100千米\n    speed_bus = 100\n    # 货车的速度是每小时行80千米\n    speed_truck = 80\n    # 客车到达乙地的时间 = 距离 / 客车速度\n    time_bus = distance / speed_bus\n    # 货车在相同时间内行驶的距离 = 货车速度 * 时间\n    distance_truck = speed_truck * time_bus\n    # 答案是货车行驶的距离\n    result = distance_truck\n    # 返回答案\n    return result"]}
{"question": "4（1）班有40人，其中15人会下国际象棋，23人会下中国象棋，两种象棋都不会下的有10人．两种象棋都会下的有多少人？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为40人\n    total_students = 40\n    # 会下国际象棋的人数为15人\n    chess_international = 15\n    # 会下中国象棋的人数为23人\n    chess_chinese = 23\n    # 两种象棋都不会下的人数为10人\n    neither = 10\n    # 会下至少一种象棋的人数 = 总人数 - 两种都不会的人数\n    at_least_one = total_students - neither\n    # 两种象棋都会下的人数 = 会下国际象棋的人数 + 会下中国象棋的人数 - 会下至少一种象棋的人数\n    both = chess_international + chess_chinese - at_least_one\n    # 答案是两种象棋都会下的人数\n    result = both\n    # 返回答案\n    return result"]}
{"question": "学校教学楼有4层，每层5间教室，共装120盏日光灯，平均每间教室安装多少盏日光灯．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 教学楼有4层\n    num_floors = 4\n    # 每层有5间教室\n    num_classrooms_per_floor = 5\n    # 总共安装了120盏日光灯\n    total_lights = 120\n    # 总教室数 = 层数 * 每层教室数\n    total_classrooms = num_floors * num_classrooms_per_floor\n    # 平均每间教室安装的日光灯数 = 总日光灯数 / 总教室数\n    lights_per_classroom = total_lights / total_classrooms\n    # 答案是平均每间教室安装的日光灯数\n    result = lights_per_classroom\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人住在同一个地方，甲、乙骑车速度分别为300米/分、360米/分．乙从住处骑车到学校用时15分钟，求甲从家到学校用时几分钟？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 乙的骑车速度为360米/分\n    speed_b = 360\n    # 乙从住处骑车到学校用时15分钟\n    time_b = 15\n    # 计算住处到学校的距离 = 乙的速度 * 乙的时间\n    distance = speed_b * time_b\n    # 甲的骑车速度为300米/分\n    speed_a = 300\n    # 甲从家到学校用时 = 距离 / 甲的速度\n    time_a = distance / speed_a\n    # 答案是甲从家到学校用时\n    result = time_a\n    # 返回答案\n    return result"]}
{"question": "一种商品原价是100元，现在打0.8销售，现在便宜了多少元．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 商品的原价是100元\n    original_price = 100\n    # 现在的折扣是0.8\n    discount = 0.8\n    # 现在的价格 = 原价 * 折扣\n    current_price = original_price * discount\n    # 便宜的价格 = 原价 - 现在的价格\n    price_difference = original_price - current_price\n    # 答案是便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "计算：3333*13+4444*4+5555*9=．", "target": 111100.0, "answer": 111100.0, "score": 1, "generation": ["def solution():\n    # 计算3333*13\n    term1 = 3333 * 13\n    # 计算4444*4\n    term2 = 4444 * 4\n    # 计算5555*9\n    term3 = 5555 * 9\n    # 总和 = term1 + term2 + term3\n    total = term1 + term2 + term3\n    # 答案是总和\n    result = total\n    # 返回答案\n    return result"]}
{"question": "学校图书室原有图书4200册，今年图书册数增加了(3/20)．今年有图书多少册？", "target": 4830.0, "answer": 4830.0, "score": 1, "generation": ["def solution():\n    # 学校图书室原有图书4200册\n    original_books = 4200\n    # 今年图书册数增加了(3/20)\n    increase_fraction = 3/20\n    # 增加的图书数量 = 原有图书数量 * 增加比例\n    increased_books = original_books * increase_fraction\n    # 今年图书总数量 = 原有图书数量 + 增加的图书数量\n    total_books = original_books + increased_books\n    # 答案是今年图书总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "妈妈买来一些梨和6个苹果，吃了4个梨，剩下的梨是苹果的2倍，妈妈买了多少个梨．", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 苹果的数量是6个\n    num_apples = 6\n    # 吃了4个梨\n    pears_eaten = 4\n    # 剩下的梨是苹果的2倍\n    remaining_pears = 2 * num_apples\n    # 妈妈买的梨的数量 = 剩下的梨 + 吃了的梨\n    total_pears = remaining_pears + pears_eaten\n    # 答案是妈妈买的梨的数量\n    result = total_pears\n    # 返回答案\n    return result"]}
{"question": "两辆汽车同时从甲、乙两城出发相向而行，快车每小时行57千米，慢车每小时行43千米，5小时后相遇，则甲、乙两城相距多少千米．", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 快车的速度是每小时57千米\n    fast_speed = 57\n    # 慢车的速度是每小时43千米\n    slow_speed = 43\n    # 两车相向而行，相对速度为两车速度之和\n    relative_speed = fast_speed + slow_speed\n    # 两车相遇的时间是5小时\n    time_to_meet = 5\n    # 甲、乙两城的距离 = 相对速度 * 相遇时间\n    distance = relative_speed * time_to_meet\n    # 答案是甲、乙两城的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "学校种植一批树苗，其中樟树有30，桂花树的棵数是樟树的了(4/5)，广玉兰的棵数是桂花树的(2/3)．学校种植了多少棵广玉兰？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 樟树的数量为30棵\n    num_camphor = 30\n    # 桂花树的棵数是樟树的(4/5)\n    num_osmanthus = (4/5) * num_camphor\n    # 广玉兰的棵数是桂花树的(2/3)\n    num_magnolia = (2/3) * num_osmanthus\n    # 答案是广玉兰的数量\n    result = num_magnolia\n    # 返回答案\n    return result"]}
{"question": "张师傅5天完成任务的(1/3)，完成任务他需要多少．", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 张师傅5天完成任务的(1/3)\n    days_for_one_third = 5\n    # 完成任务的总工作量是1\n    total_work = 1\n    # 张师傅的工作效率 = 完成的工作量 / 工作天数\n    daily_rate = (1/3) / days_for_one_third\n    # 完成任务需要的总天数 = 总工作量 / 工作效率\n    total_days = total_work / daily_rate\n    # 答案是完成任务需要的总天数\n    result = total_days\n    # 返回答案\n    return result"]}
{"question": "王大伯花1740元买一台家电下乡冰箱，享受政府13%的补贴，这台冰箱原价=多少元？", "target": 2000.0, "answer": 2000.0, "score": 1, "generation": ["def solution():\n    # 王大伯实际支付的金额为1740元\n    actual_price = 1740\n    # 政府补贴的比例为13%\n    subsidy_rate = 0.13\n    # 实际支付的金额 = 原价 * (1 - 补贴比例)\n    # 所以原价 = 实际支付的金额 / (1 - 补贴比例)\n    original_price = actual_price / (1 - subsidy_rate)\n    # 答案是冰箱的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "一件商品打0.7出售，正好比原来便宜60元．这件商品原价多少元？", "target": 200.0, "answer": 199.99999999999997, "score": 1, "generation": ["def solution():\n    # 商品打0.7出售\n    discount_rate = 0.7\n    # 打折后的价格比原价便宜60元\n    price_difference = 60\n    # 设原价为x元，则打折后的价格为0.7x元\n    # 根据题意，x - 0.7x = 60\n    # 解方程得x = 60 / (1 - 0.7)\n    original_price = price_difference / (1 - discount_rate)\n    # 答案是商品的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车从相距594千米的两地同时开出，甲车每小时行54千米，乙车每小时行45千米，经过几小时相遇？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 两地的距离为594千米\n    distance = 594\n    # 甲车的速度是每小时54千米\n    speed_a = 54\n    # 乙车的速度是每小时45千米\n    speed_b = 45\n    # 因为两车相向而行，两车相对速度为甲车与乙车速度之和\n    relative_speed = speed_a + speed_b\n    # 相遇时间 = 距离 / 相对速度\n    time_to_meet = distance / relative_speed\n    # 答案是两车相遇的时间\n    result = time_to_meet\n    # 返回答案\n    return result"]}
{"question": "一个玻璃瓶装有含盐率为15%的盐水500克．如要配制成含盐率为5%的盐水，要加入多少克水？", "target": 1000.0, "answer": 1000.0, "score": 1, "generation": ["def solution():\n    # 玻璃瓶装有含盐率为15%的盐水500克\n    initial_salt_water = 500\n    initial_salt_percentage = 0.15\n    # 计算盐的质量 = 初始盐水质量 * 含盐率\n    salt_mass = initial_salt_water * initial_salt_percentage\n    # 目标含盐率为5%\n    target_salt_percentage = 0.05\n    # 设需要加入的水的质量为x克\n    # 根据含盐率公式：盐的质量 / (初始盐水质量 + x) = 目标含盐率\n    # 解方程得到 x = (盐的质量 / 目标含盐率) - 初始盐水质量\n    water_to_add = (salt_mass / target_salt_percentage) - initial_salt_water\n    # 答案是需要加入的水的质量\n    result = water_to_add\n    # 返回答案\n    return result"]}
{"question": "3.9与2.9的和除以3.4，商=？", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 第一个数是3.9\n    num1 = 3.9\n    # 第二个数是2.9\n    num2 = 2.9\n    # 第三个数是3.4\n    num3 = 3.4\n    # 3.9与2.9的和 = 3.9 + 2.9\n    sum_num1_num2 = num1 + num2\n    # 商 = 和 / 3.4\n    quotient = sum_num1_num2 / num3\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "“6•一”节那天，新华书店举行促销活动，所有书按原价打0.85出售．小红买了一套原价是200元的《安徒生童话》丛书，打折后比原价便宜多少元？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 书的原价是200元\n    original_price = 200\n    # 打折后的价格是原价的0.85\n    discount_rate = 0.85\n    # 打折后的价格 = 原价 * 折扣率\n    discounted_price = original_price * discount_rate\n    # 打折后比原价便宜的价格 = 原价 - 打折后的价格\n    price_difference = original_price - discounted_price\n    # 答案是打折后比原价便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "工程队修一条公路，计划每天修100米，40天完成．实际2天就修了800米，照这样的速度，多少天可以完成？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 计划每天修100米\n    planned_daily_repair = 100\n    # 计划40天完成\n    planned_days = 40\n    # 实际2天修了800米\n    actual_repair_in_2_days = 800\n    # 实际每天修的路程 = 实际2天修的路程 / 2\n    actual_daily_repair = actual_repair_in_2_days / 2\n    # 总路程 = 计划每天修的路程 * 计划天数\n    total_distance = planned_daily_repair * planned_days\n    # 实际完成天数 = 总路程 / 实际每天修的路程\n    actual_days = total_distance / actual_daily_repair\n    # 答案是实际完成天数\n    result = actual_days\n    # 返回答案\n    return result"]}
{"question": "(4/5)+(3/15)=．", "target": 1.0, "answer": 1.0, "score": 1, "generation": ["def solution():\n    # 第一个分数是(4/5)\n    fraction1 = 4/5\n    # 第二个分数是(3/15)\n    fraction2 = 3/15\n    # 两个分数相加\n    sum_fractions = fraction1 + fraction2\n    # 答案是相加后的结果\n    result = sum_fractions\n    # 返回答案\n    return result"]}
{"question": "一件衣服打0.8出售，比原价便宜32元，原价多少元．", "target": 160.0, "answer": 160.00000000000003, "score": 1, "generation": ["def solution():\n    # 衣服的打折比例是0.8\n    discount_rate = 0.8\n    # 打折后的价格比原价便宜32元\n    price_difference = 32\n    # 设原价为x元，打折后的价格为0.8x元\n    # 根据题意，x - 0.8x = 32\n    # 解方程得x = 32 / (1 - 0.8)\n    original_price = price_difference / (1 - discount_rate)\n    # 答案是衣服的原价\n    result = original_price\n    # 返回答案\n    return result"]}
{"question": "一个数除以7，商是9，余数最大=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 商是9\n    quotient = 9\n    # 除数是7\n    divisor = 7\n    # 余数最大 = 除数 - 1\n    max_remainder = divisor - 1\n    # 答案是余数最大\n    result = max_remainder\n    # 返回答案\n    return result"]}
{"question": "一种毛衣，原价56元，现在的价钱比原来降低了(2/7)，降价多少钱？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 毛衣的原价为56元\n    original_price = 56\n    # 现在的价钱比原来降低了(2/7)\n    price_reduction_fraction = 2/7\n    # 降价金额 = 原价 * 降价比例\n    price_reduction = original_price * price_reduction_fraction\n    # 答案是降价金额\n    result = price_reduction\n    # 返回答案\n    return result"]}
{"question": "在1200米的跑道上等距离植树，最少要种多少棵树，才能保证至少有两棵树之间的距离小于15．", "target": 82.0, "answer": 81.0, "score": 0, "generation": ["def solution():\n    # 跑道的总长度为1200米\n    total_length = 1200\n    # 至少两棵树之间的距离小于15米\n    max_distance = 15\n    # 为了确保至少两棵树之间的距离小于15米，我们需要计算最少需要多少棵树\n    # 最少需要的树的数量 = 跑道总长度 / 最大距离 + 1\n    min_trees = total_length / max_distance + 1\n    # 答案是至少需要的树的数量\n    result = min_trees\n    # 返回答案\n    return result"]}
{"question": "某地的水库4周有长为8080米的防水堤，堤上每隔8米栽一棵树，然后在相邻的两棵树之间栽一棵柳树，应该准备两种树各多少棵？", "target": [1010.0, 1010.0], "answer": [1010.0, 1010.0], "score": 1, "generation": ["def solution():\n    # 防水堤的总长度为8080米\n    total_length = 8080\n    # 每隔8米栽一棵树\n    interval = 8\n    # 计算需要栽的树的数量 = 总长度 / 间隔\n    num_trees = total_length / interval\n    # 因为相邻两棵树之间栽一棵柳树，所以柳树的数量 = 树的数量\n    num_willows = num_trees\n    # 答案是两种树的数量\n    result = (num_trees, num_willows)\n    # 返回答案\n    return result"]}
{"question": "压路机的滚筒是圆柱体，它的长是2米，滚筒横截面的半径是0.6米．如果每分转动5周，每分可以压多大的路面？（π取3.14）", "target": 37.68, "answer": 37.68, "score": 1, "generation": ["def solution():\n    # 滚筒的长是2米\n    length = 2\n    # 滚筒横截面的半径是0.6米\n    radius = 0.6\n    # 每分钟转动5周\n    rotations_per_minute = 5\n    # π取3.14\n    pi = 3.14\n    # 滚筒的周长 = 2 * π * 半径\n    circumference = 2 * pi * radius\n    # 每分钟压的路面面积 = 周长 * 滚筒的长 * 每分钟转动的周数\n    area_per_minute = circumference * length * rotations_per_minute\n    # 答案是每分钟压的路面面积\n    result = area_per_minute\n    # 返回答案\n    return result"]}
{"question": "一个因数=，另一个因数是44，则它们的积是836．", "target": 19.0, "answer": 19.0, "score": 1, "generation": ["def solution():\n    # 已知一个因数是44\n    factor1 = 44\n    # 已知积是836\n    product = 836\n    # 另一个因数 = 积 / 已知因数\n    factor2 = product / factor1\n    # 答案是另一个因数\n    result = factor2\n    # 返回答案\n    return result"]}
{"question": "一辆小汽车的速度是60千米/时，一辆货车的速度是48千米/时，两车从甲地同时出发到乙地，小汽车4小时到达乙地，货车要几小时才能到达乙地？", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 小汽车的速度是60千米/时\n    car_speed = 60\n    # 货车的速度是48千米/时\n    truck_speed = 48\n    # 小汽车到达乙地的时间是4小时\n    car_time = 4\n    # 甲乙两地的距离 = 小汽车的速度 * 小汽车到达乙地的时间\n    distance = car_speed * car_time\n    # 货车到达乙地的时间 = 距离 / 货车的速度\n    truck_time = distance / truck_speed\n    # 答案是货车到达乙地的时间\n    result = truck_time\n    # 返回答案\n    return result"]}
{"question": "张老师在文具店里买了一支钢笔和一本书，一支钢笔的单价15.8元，比一本书的单价少1.2元，张老师一共用了多少元？", "target": 32.8, "answer": 32.8, "score": 1, "generation": ["def solution():\n    # 钢笔的单价是15.8元\n    pen_price = 15.8\n    # 钢笔比书的单价少1.2元\n    price_difference = 1.2\n    # 书的单价 = 钢笔的单价 + 价格差\n    book_price = pen_price + price_difference\n    # 张老师一共用的钱 = 钢笔的单价 + 书的单价\n    total_cost = pen_price + book_price\n    # 答案是张老师一共用的钱\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "一根绳子长120米，第一次用去全长的(2/5)，第二次用去40米，这根绳子短了多少米？", "target": 88.0, "answer": 88.0, "score": 1, "generation": ["def solution():\n    # 绳子的总长度为120米\n    total_length = 120\n    # 第一次用去全长的(2/5)\n    first_use_fraction = 2/5\n    # 第一次用去的长度 = 总长度 * 第一次用去的比例\n    first_use_length = total_length * first_use_fraction\n    # 第二次用去的长度为40米\n    second_use_length = 40\n    # 绳子短了的长度 = 第一次用去的长度 + 第二次用去的长度\n    shortened_length = first_use_length + second_use_length\n    # 答案是绳子短了的长度\n    result = shortened_length\n    # 返回答案\n    return result"]}
{"question": "修一条长12000米的公路，原计划每天修300米，结果30天完成了任务，实际比原计划每天多修多少米？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为12000米\n    total_length = 12000\n    # 原计划每天修300米\n    planned_daily_repair = 300\n    # 实际完成天数为30天\n    actual_days = 30\n    # 实际每天修的长度 = 总长度 / 实际完成天数\n    actual_daily_repair = total_length / actual_days\n    # 实际比原计划每天多修的长度 = 实际每天修的长度 - 原计划每天修的长度\n    extra_daily_repair = actual_daily_repair - planned_daily_repair\n    # 答案是实际比原计划每天多修的长度\n    result = extra_daily_repair\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树120棵，苹果树是桃树棵数的(3/4)，这两种树共有多少棵？", "target": 210.0, "answer": 210.0, "score": 1, "generation": ["def solution():\n    # 桃树的数量为120棵\n    num_peach_trees = 120\n    # 苹果树的数量是桃树数量的(3/4)\n    num_apple_trees = (3/4) * num_peach_trees\n    # 两种树的总数量 = 桃树数量 + 苹果树数量\n    total_trees = num_peach_trees + num_apple_trees\n    # 答案是两种树的总数量\n    result = total_trees\n    # 返回答案\n    return result"]}
{"question": "汽车3小时行驶243千米，火车6小时行驶606千米，火车的速度比汽车的速度快多少千米？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 汽车行驶的距离为243千米\n    car_distance = 243\n    # 汽车行驶的时间为3小时\n    car_time = 3\n    # 火车行驶的距离为606千米\n    train_distance = 606\n    # 火车行驶的时间为6小时\n    train_time = 6\n    # 汽车的速度 = 距离 / 时间\n    car_speed = car_distance / car_time\n    # 火车的速度 = 距离 / 时间\n    train_speed = train_distance / train_time\n    # 火车比汽车快的速度 = 火车速度 - 汽车速度\n    speed_difference = train_speed - car_speed\n    # 答案是火车比汽车快的速度\n    result = speed_difference\n    # 返回答案\n    return result"]}
{"question": "电视机厂计划30天生产电视机1200台，实际每天比计划多生产10台，实际多少天完成任务？", "target": 24.0, "answer": 24.0, "score": 1, "generation": ["def solution():\n    # 计划生产电视机的天数为30天\n    planned_days = 30\n    # 计划生产电视机的总数为1200台\n    planned_total = 1200\n    # 实际每天比计划多生产10台\n    daily_increase = 10\n    # 计划每天生产电视机的数量 = 计划总数 / 计划天数\n    planned_daily_production = planned_total / planned_days\n    # 实际每天生产电视机的数量 = 计划每天生产数量 + 每天多生产的数量\n    actual_daily_production = planned_daily_production + daily_increase\n    # 实际完成任务的天数 = 计划总数 / 实际每天生产数量\n    actual_days = planned_total / actual_daily_production\n    # 答案是实际完成任务的天数\n    result = actual_days\n    # 返回答案\n    return result"]}
{"question": "4（1）班共有50人参加语、数、英3科的兴趣小组．其中参加数学兴趣小组有20人，参加语文兴趣小组有15人，只参加英语兴趣小组的有24人．数学、语文两个兴趣小组都参加的有多少人．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 总人数为50人\n    total_students = 50\n    # 参加数学兴趣小组的有20人\n    math_group = 20\n    # 参加语文兴趣小组的有15人\n    chinese_group = 15\n    # 只参加英语兴趣小组的有24人\n    english_only = 24\n    # 参加数学或语文或英语兴趣小组的总人数 = 总人数 - 只参加英语兴趣小组的人数\n    math_or_chinese = total_students - english_only\n    # 根据容斥原理，参加数学和语文两个兴趣小组的人数 = 参加数学兴趣小组的人数 + 参加语文兴趣小组的人数 - 参加数学或语文兴趣小组的人数\n    math_and_chinese = math_group + chinese_group - math_or_chinese\n    # 答案是参加数学和语文两个兴趣小组的人数\n    result = math_and_chinese\n    # 返回答案\n    return result"]}
{"question": "3.6比一个数的25%少1.2，求这个数．", "target": 19.2, "answer": 19.2, "score": 1, "generation": ["def solution():\n    # 给定的数值是3.6\n    given_number = 3.6\n    # 给定的数值比一个数的25%少1.2\n    percentage = 0.25\n    difference = 1.2\n    # 设这个数为x，根据题意有：given_number = x * percentage - difference\n    # 解这个方程可以得到x = (given_number + difference) / percentage\n    x = (given_number + difference) / percentage\n    # 答案是这个数\n    result = x\n    # 返回答案\n    return result"]}
{"question": "小明看一本书，第一天看了全书的(1/7)，第二天看了27页，两天共看的页数与剩下页数的比是2：3，这本书共有多少页？", "target": 105.0, "answer": 63.00000000000001, "score": 0, "generation": ["def solution():\n    # 第一天看了全书的(1/7)\n    first_day_fraction = 1/7\n    # 第二天看了27页\n    second_day_pages = 27\n    # 两天共看的页数与剩下页数的比是2：3\n    ratio_read_to_remaining = 2/3\n    # 设全书共有x页\n    # 两天共看的页数 = 第一天看的页数 + 第二天看的页数 = (1/7)x + 27\n    # 剩下的页数 = x - (两天共看的页数) = x - (1/7)x - 27 = (6/7)x - 27\n    # 根据比例关系：(两天共看的页数) / (剩下的页数) = 2/3\n    # 即 [(1/7)x + 27] / [(6/7)x - 27] = 2/3\n    # 解这个方程：\n    # 3[(1/7)x + 27] = 2[(6/7)x - 27]\n    # (3/7)x + 81 = (12/7)x - 54\n    # 81 + 54 = (12/7)x - (3/7)x\n    # 135 = (9/7)x\n    # x = 135 * (7/9)\n    # x = 105\n    total_pages = (second_day_pages + (second_day_pages * ratio_read_to_remaining)) / (first_day_fraction + (ratio_read_to_remaining * (1 - first_day_fraction)))\n    # 答案是全书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "在一个有余数的除法算式里，余数是5，那么除数最小=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 余数是5\n    remainder = 5\n    # 在有余数的除法中，除数必须大于余数\n    # 所以最小的除数 = 余数 + 1\n    min_divisor = remainder + 1\n    # 答案是最小的除数\n    result = min_divisor\n    # 返回答案\n    return result"]}
{"question": "小明用10.2元买文具，买了6支铅笔，每支0.45元，余下的钱买圆珠笔，每支2.5元，可以买多少支？", "target": 3.0, "answer": 2.9999999999999996, "score": 1, "generation": ["def solution():\n    # 小明总共有10.2元\n    total_money = 10.2\n    # 买了6支铅笔\n    num_pencils = 6\n    # 每支铅笔的价格是0.45元\n    price_pencil = 0.45\n    # 圆珠笔的价格是每支2.5元\n    price_ballpen = 2.5\n    # 买铅笔的总花费 = 铅笔数量 * 每支铅笔的价格\n    total_pencil_cost = num_pencils * price_pencil\n    # 剩余的钱 = 总钱数 - 买铅笔的花费\n    remaining_money = total_money - total_pencil_cost\n    # 可以买的圆珠笔数量 = 剩余的钱 / 每支圆珠笔的价格\n    num_ballpens = remaining_money / price_ballpen\n    # 答案是圆珠笔的数量\n    result = num_ballpens\n    # 返回答案\n    return result"]}
{"question": "有210吨黄沙要运到建筑工地，第一次运走了总数的(1/3)，第二次运走总数的40%，还要运多少吨才能运完？", "target": 56.0, "answer": 56.0, "score": 1, "generation": ["def solution():\n    # 黄沙的总数为210吨\n    total_sand = 210\n    # 第一次运走了总数的(1/3)\n    first_transport_fraction = 1/3\n    # 第二次运走总数的40%\n    second_transport_fraction = 0.4\n    # 第一次运走的黄沙数量 = 总数 * 第一次运走的比例\n    first_transport = total_sand * first_transport_fraction\n    # 第二次运走的黄沙数量 = 总数 * 第二次运走的比例\n    second_transport = total_sand * second_transport_fraction\n    # 已经运走的黄沙数量 = 第一次运走的数量 + 第二次运走的数量\n    total_transported = first_transport + second_transport\n    # 还需要运的黄沙数量 = 总数 - 已经运走的数量\n    remaining_sand = total_sand - total_transported\n    # 答案是还需要运的黄沙数量\n    result = remaining_sand\n    # 返回答案\n    return result"]}
{"question": "妈妈带了500元钱，给我买了一双鞋花了228元，买一条裙子花了172元．还剩多少元？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 妈妈带的钱为500元\n    total_money = 500\n    # 买鞋花费了228元\n    shoes_cost = 228\n    # 买裙子花费了172元\n    dress_cost = 172\n    # 总花费 = 买鞋花费 + 买裙子花费\n    total_cost = shoes_cost + dress_cost\n    # 剩余的钱 = 妈妈带的钱 - 总花费\n    remaining_money = total_money - total_cost\n    # 答案是剩余的钱\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "同学们沿小路一侧植树（两端都种），每隔8米种一棵，一共种了40棵．这条小路有多少米？", "target": 312.0, "answer": 312.0, "score": 1, "generation": ["def solution():\n    # 一共种了40棵树\n    num_trees = 40\n    # 每隔8米种一棵树\n    distance_between_trees = 8\n    # 因为两端都种树，所以间隔数 = 树的数量 - 1\n    num_intervals = num_trees - 1\n    # 小路的长度 = 间隔数 * 间隔距离\n    path_length = num_intervals * distance_between_trees\n    # 答案是小路的长度\n    result = path_length\n    # 返回答案\n    return result"]}
{"question": "小明看一本180页的故事书，已经看了(3/5)，已看了多少页？", "target": 108.0, "answer": 108.0, "score": 1, "generation": ["def solution():\n    # 故事书的总页数为180页\n    total_pages = 180\n    # 已经看了(3/5)的页数\n    read_fraction = 3/5\n    # 已看了的页数 = 总页数 * 已看的比例\n    pages_read = total_pages * read_fraction\n    # 答案是已看了的页数\n    result = pages_read\n    # 返回答案\n    return result"]}
{"question": "一个棱长为6分米的正方体木块的表面积=多少平方分米．", "target": 216.0, "answer": 216.0, "score": 1, "generation": ["def solution():\n    # 正方体的棱长为6分米\n    edge_length = 6\n    # 正方体的表面积 = 6 * (棱长^2)\n    surface_area = 6 * (edge_length ** 2)\n    # 答案是正方体的表面积\n    result = surface_area\n    # 返回答案\n    return result"]}
{"question": "佳怡家去年收苹果650千克，今年比去年增产5%，今年收苹果多少千克？", "target": 682.5, "answer": 682.5, "score": 1, "generation": ["def solution():\n    # 去年收苹果650千克\n    last_year_harvest = 650\n    # 今年比去年增产5%\n    increase_percentage = 0.05\n    # 今年增产的苹果数量 = 去年收苹果数量 * 增产比例\n    increase_amount = last_year_harvest * increase_percentage\n    # 今年收苹果的数量 = 去年收苹果数量 + 增产数量\n    this_year_harvest = last_year_harvest + increase_amount\n    # 答案是今年收苹果的数量\n    result = this_year_harvest\n    # 返回答案\n    return result"]}
{"question": "一桶油，第一次倒出40%，第二次比第一次少倒出10千克，桶里还剩30千克，这桶油原来有多少千克．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 设这桶油原来有x千克\n    # 第一次倒出40%，即倒出0.4x千克\n    # 第二次比第一次少倒出10千克，即倒出(0.4x - 10)千克\n    # 桶里还剩30千克\n    # 根据题意，可以列出方程：x - 0.4x - (0.4x - 10) = 30\n    # 解这个方程：\n    # x - 0.4x - 0.4x + 10 = 30\n    # 0.2x + 10 = 30\n    # 0.2x = 20\n    # x = 100\n    # 所以这桶油原来有100千克\n    result = 100\n    # 返回答案\n    return result"]}
{"question": "一个数学检测只有两道题，结果全班有12人全对，有一题有27人做对，第二道题有21人做错，两道题都做错的有多少人．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 全班有12人全对\n    both_correct = 12\n    # 第一道题有27人做对\n    first_correct = 27\n    # 第二道题有21人做错\n    second_wrong = 21\n    # 因为全班人数 = 第一道题做对的人数 + 第二道题做错的人数 - 两道题都做错的人数\n    # 两道题都做错的人数 = 第一道题做对的人数 + 第二道题做错的人数 - 全班人数\n    # 但题目没有给出全班人数，所以需要重新考虑\n    # 第一道题做错的人数 = 全班人数 - 第一道题做对的人数\n    # 第二道题做对的人数 = 全班人数 - 第二道题做错的人数\n    # 两道题都做错的人数 = 第一道题做错的人数 - 第二道题做对的人数 + 两道题都做对的人数\n    # 但这样仍然无法直接计算，需要更详细的信息\n    # 根据题目描述，可能需要使用容斥原理\n    # 两道题都做错的人数 = 全班人数 - (第一道题做对的人数 + 第二道题做对的人数 - 两道题都做对的人数)\n    # 但题目没有给出全班人数，所以无法直接计算\n    # 可能需要假设全班人数为第一道题做对的人数 + 第二道题做错的人数\n    total_students = first_correct + second_wrong\n    # 第二道题做对的人数 = 全班人数 - 第二道题做错的人数\n    second_correct = total_students - second_wrong\n    # 两道题都做错的人数 = 全班人数 - (第一道题做对的人数 + 第二道题做对的人数 - 两道题都做对的人数)\n    both_wrong = total_students - (first_correct + second_correct - both_correct)\n    # 答案是两道题都做错的人数\n    result = both_wrong\n    # 返回答案\n    return result"]}
{"question": "王大妈收了(1/2)吨瓜，第一天卖出总数的(1/5)，第二天卖出总数的(1/6)，还剩总数的几分之几没卖出？", "target": 0.6333333333333333, "answer": 0.6333333333333333, "score": 1, "generation": ["def solution():\n    # 王大妈收的瓜的总数为(1/2)吨\n    total_melon = 1/2\n    # 第一天卖出总数的(1/5)\n    sold_fraction_first_day = 1/5\n    # 第二天卖出总数的(1/6)\n    sold_fraction_second_day = 1/6\n    # 卖出的瓜的总比例 = 第一天卖出的比例 + 第二天卖出的比例\n    total_sold_fraction = sold_fraction_first_day + sold_fraction_second_day\n    # 剩余的瓜的比例 = 1 - 卖出的总比例\n    remaining_fraction = 1 - total_sold_fraction\n    # 答案是剩余的瓜的比例\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "一辆汽车每小时行驶80千米，从甲地到乙地共行驶了(4/5)小时．甲、乙两地相距多少千米？", "target": 64.0, "answer": 64.0, "score": 1, "generation": ["def solution():\n    # 汽车的速度是每小时80千米\n    speed = 80\n    # 行驶时间是(4/5)小时\n    time = 4/5\n    # 距离 = 速度 * 时间\n    distance = speed * time\n    # 答案是甲、乙两地的距离\n    result = distance\n    # 返回答案\n    return result"]}
{"question": "张师傅去商店买大米，由于售货员疏忽，少给了他10斤大米，但收了他36元钱，已知每3斤大米1.2元．问售货员给了张师傅多少斤大米？", "target": 80.0, "answer": 80.00000000000001, "score": 1, "generation": ["def solution():\n    # 张师傅被少给了10斤大米\n    missing_rice = 10\n    # 张师傅支付了36元钱\n    total_payment = 36\n    # 每3斤大米的价格是1.2元\n    price_per_3_jin = 1.2\n    # 每斤大米的价格 = 每3斤大米的价格 / 3\n    price_per_jin = price_per_3_jin / 3\n    # 张师傅应该得到的大米数量 = 总支付金额 / 每斤大米的价格\n    expected_rice = total_payment / price_per_jin\n    # 实际得到的大米数量 = 应该得到的大米数量 - 少给的大米数量\n    actual_rice = expected_rice - missing_rice\n    # 答案是售货员给张师傅的大米数量\n    result = actual_rice\n    # 返回答案\n    return result"]}
{"question": "玲玲和丫丫两人相距200米，玲玲在前每秒跑3米，丫丫在后每秒跑5米．两人同时出发，同向而行，几秒后丫丫能追上玲玲？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 两人初始距离为200米\n    initial_distance = 200\n    # 玲玲的速度是每秒3米\n    speed_lingling = 3\n    # 丫丫的速度是每秒5米\n    speed_yaya = 5\n    # 因为两人同向而行，丫丫要追上玲玲，相对速度 = 丫丫的速度 - 玲玲的速度\n    relative_speed = speed_yaya - speed_lingling\n    # 追上所需时间 = 初始距离 / 相对速度\n    time_to_catch_up = initial_distance / relative_speed\n    # 答案是丫丫追上玲玲所需的时间\n    result = time_to_catch_up\n    # 返回答案\n    return result"]}
{"question": "540=多少的20倍．", "target": 27.0, "answer": 27.0, "score": 1, "generation": ["def solution():\n    # 540是某个数的20倍\n    total = 540\n    # 倍数关系是20倍\n    multiple = 20\n    # 要求的数 = 总数 / 倍数\n    number = total / multiple\n    # 答案是要求的数\n    result = number\n    # 返回答案\n    return result"]}
{"question": "小刚看一本课外书，第一天看了全书的(2/5)，第二天看了全书的(3/7)．小军两天一共看了这本书的几分之几？", "target": 0.8285714285714286, "answer": 0.8285714285714285, "score": 1, "generation": ["def solution():\n    # 第一天看了全书的(2/5)\n    first_day_fraction = 2/5\n    # 第二天看了全书的(3/7)\n    second_day_fraction = 3/7\n    # 两天一共看了这本书的比例 = 第一天看的比例 + 第二天看的比例\n    total_fraction = first_day_fraction + second_day_fraction\n    # 答案是两天一共看了这本书的比例\n    result = total_fraction\n    # 返回答案\n    return result"]}
{"question": "(12/5)小时的(7/24)=多少小时．", "target": 0.7, "answer": 0.7000000000000001, "score": 1, "generation": ["def solution():\n    # 总时间为(12/5)小时\n    total_time = 12/5\n    # 比例为(7/24)\n    fraction = 7/24\n    # 计算后的时间 = 总时间 * 比例\n    calculated_time = total_time * fraction\n    # 答案是计算后的时间\n    result = calculated_time\n    # 返回答案\n    return result"]}
{"question": "小丽和小强共同打一份稿纸，他们打字速度比是5：3，完成任务时，小丽比小强多打1400个字．这份稿件共有多少个字．", "target": 5600.0, "answer": 5600.0, "score": 1, "generation": ["def solution():\n    # 小丽和小强的打字速度比是5：3\n    speed_ratio_lili = 5\n    speed_ratio_qiang = 3\n    # 小丽比小强多打1400个字\n    difference_in_words = 1400\n    # 打字速度比的总和 = 5 + 3 = 8\n    total_ratio = speed_ratio_lili + speed_ratio_qiang\n    # 小丽打的字数 = (5 / 8) * 总字数\n    # 小强打的字数 = (3 / 8) * 总字数\n    # 小丽比小强多打的字数 = (5 / 8 - 3 / 8) * 总字数 = (2 / 8) * 总字数 = 1400\n    # 所以总字数 = 1400 / (2 / 8) = 1400 * (8 / 2) = 1400 * 4\n    total_words = difference_in_words * (total_ratio / (speed_ratio_lili - speed_ratio_qiang))\n    # 答案是这份稿件的总字数\n    result = total_words\n    # 返回答案\n    return result"]}
{"question": "三年级同学做操，如果每排站12人，可以站20排；如果每排站8人，可以站几排？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 每排站12人，可以站20排\n    people_per_row_initial = 12\n    rows_initial = 20\n    # 总人数 = 每排人数 * 排数\n    total_people = people_per_row_initial * rows_initial\n    # 如果每排站8人\n    people_per_row_new = 8\n    # 可以站的排数 = 总人数 / 每排人数\n    rows_new = total_people / people_per_row_new\n    # 答案是可以站的排数\n    result = rows_new\n    # 返回答案\n    return result"]}
{"question": "《成长日记》一书有252页，小华前5天一共看了60页，照这样计算，余下的还需多少天看完？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为252页\n    total_pages = 252\n    # 前5天看了60页\n    pages_read = 60\n    days_spent = 5\n    # 计算每天的阅读速度 = 已读页数 / 已用天数\n    reading_speed = pages_read / days_spent\n    # 剩余页数 = 总页数 - 已读页数\n    remaining_pages = total_pages - pages_read\n    # 剩余天数 = 剩余页数 / 阅读速度\n    remaining_days = remaining_pages / reading_speed\n    # 答案是剩余天数\n    result = remaining_days\n    # 返回答案\n    return result"]}
{"question": "小丽读一本故事书，第一天读了全书的10%，以后每天读21页，又读了6天正好读完．这本书一共有多少页？", "target": 140.0, "answer": 140.0, "score": 1, "generation": ["def solution():\n    # 第一天读了全书的10%\n    first_day_percentage = 0.1\n    # 以后每天读21页，又读了6天\n    subsequent_days = 6\n    pages_per_day = 21\n    # 后6天读的总页数 = 每天读的页数 * 天数\n    subsequent_pages = pages_per_day * subsequent_days\n    # 后6天读的页数占总页数的比例 = 1 - 第一天读的比例\n    subsequent_percentage = 1 - first_day_percentage\n    # 总页数 = 后6天读的总页数 / 后6天读的页数占总页数的比例\n    total_pages = subsequent_pages / subsequent_percentage\n    # 答案是这本书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "甲、乙两城相距875千米，一辆汽车以每小时48千米从甲城开出，行驶11小时，离乙城还有多少千米？", "target": 347.0, "answer": 347.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两城相距875千米\n    distance = 875\n    # 汽车的速度是每小时48千米\n    speed = 48\n    # 汽车行驶了11小时\n    time = 11\n    # 汽车行驶的距离 = 速度 * 时间\n    distance_traveled = speed * time\n    # 离乙城还有的距离 = 总距离 - 行驶的距离\n    remaining_distance = distance - distance_traveled\n    # 答案是离乙城还有的距离\n    result = remaining_distance\n    # 返回答案\n    return result"]}
{"question": "一个圆柱体的表面积比侧面积大6.28dm^2，高是10dm．这个圆柱体的体积=多少dm^3．", "target": 31.4, "answer": 31.400000000000002, "score": 1, "generation": ["def solution():\n    # 圆柱体的表面积比侧面积大6.28dm^2\n    surface_area_difference = 6.28\n    # 圆柱体的高是10dm\n    height = 10\n    # 表面积 = 侧面积 + 2 * 底面积\n    # 表面积比侧面积大6.28dm^2，所以2 * 底面积 = 6.28dm^2\n    base_area = surface_area_difference / 2\n    # 底面积 = π * r^2\n    # 所以 r = sqrt(base_area / π)\n    import math\n    radius = math.sqrt(base_area / math.pi)\n    # 圆柱体的体积 = 底面积 * 高\n    volume = base_area * height\n    # 答案是圆柱体的体积\n    result = volume\n    # 返回答案\n    return result"]}
{"question": "一个饲养场，养鸭1200只，养的鸡比养的鸭多(3/5)，养的鸡比鸭多多少只？", "target": 720.0, "answer": 720.0, "score": 1, "generation": ["def solution():\n    # 养鸭的数量为1200只\n    num_ducks = 1200\n    # 养的鸡比养的鸭多(3/5)\n    chicken_increase_fraction = 3/5\n    # 养的鸡比鸭多的数量 = 养鸭的数量 * 鸡比鸭多的比例\n    chicken_increase = num_ducks * chicken_increase_fraction\n    # 答案是养的鸡比鸭多的数量\n    result = chicken_increase\n    # 返回答案\n    return result"]}
{"question": "水果店运进36筐水果，每筐25千克．卖出320千克，还剩多少千克？", "target": 580.0, "answer": 580.0, "score": 1, "generation": ["def solution():\n    # 水果店运进36筐水果\n    num_baskets = 36\n    # 每筐水果的重量为25千克\n    weight_per_basket = 25\n    # 卖出的水果重量为320千克\n    sold_weight = 320\n    # 总水果重量 = 筐数 * 每筐的重量\n    total_weight = num_baskets * weight_per_basket\n    # 剩余的水果重量 = 总重量 - 卖出的重量\n    remaining_weight = total_weight - sold_weight\n    # 答案是剩余的水果重量\n    result = remaining_weight\n    # 返回答案\n    return result"]}
{"question": "图书馆购进一批新书，其中385本是科技书，710本是文艺书，其余是连环画．连环画占总数的25%，这批新书有多少本？", "target": 1460.0, "answer": 1460.0, "score": 1, "generation": ["def solution():\n    # 科技书的数量是385本\n    num_science_books = 385\n    # 文艺书的数量是710本\n    num_literature_books = 710\n    # 连环画占总数的25%\n    comic_percentage = 0.25\n    # 科技书和文艺书的总数量\n    total_science_literature = num_science_books + num_literature_books\n    # 因为连环画占总数的25%，所以科技书和文艺书占总数的75%\n    # 总数 = 科技书和文艺书的总数量 / (1 - 连环画所占比例)\n    total_books = total_science_literature / (1 - comic_percentage)\n    # 答案是这批新书的总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "郭海燕同学买了3本《科学趣谈》，付了50元，找回8元．每本多少元？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 郭海燕同学买了3本《科学趣谈》\n    num_books = 3\n    # 付了50元\n    amount_paid = 50\n    # 找回8元\n    change_received = 8\n    # 实际花费 = 付的钱 - 找回的钱\n    actual_cost = amount_paid - change_received\n    # 每本书的价格 = 实际花费 / 书的数量\n    price_per_book = actual_cost / num_books\n    # 答案是每本书的价格\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "小明0.5小时行走2.6千米，一只蜜蜂的飞行速度是小明的3.8倍．这只蜜蜂每小时飞行多少千米？", "target": 19.76, "answer": 19.759999999999998, "score": 1, "generation": ["def solution():\n    # 小明0.5小时行走2.6千米\n    distance = 2.6\n    time = 0.5\n    # 小明的行走速度 = 行走距离 / 行走时间\n    xiaoming_speed = distance / time\n    # 蜜蜂的飞行速度是小明的3.8倍\n    bee_speed_multiplier = 3.8\n    # 蜜蜂的飞行速度 = 小明的行走速度 * 3.8\n    bee_speed = xiaoming_speed * bee_speed_multiplier\n    # 答案是蜜蜂每小时飞行的距离\n    result = bee_speed\n    # 返回答案\n    return result"]}
{"question": "一个长方体的体积是40立方厘米，底面是边长2厘米的正方形，这个长方体的高=多少厘米．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 长方体的体积是40立方厘米\n    volume = 40\n    # 底面是边长2厘米的正方形\n    base_side = 2\n    # 底面积 = 边长 * 边长\n    base_area = base_side * base_side\n    # 长方体的高 = 体积 / 底面积\n    height = volume / base_area\n    # 答案是长方体的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "180的(4/9)比一个数的50%少20，求这个数．", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 180的(4/9) = 180 * (4/9)\n    part_of_180 = 180 * (4/9)\n    # 设这个数为x，根据题意：180的(4/9) = x的50% - 20\n    # 即：part_of_180 = 0.5 * x - 20\n    # 解这个方程：0.5 * x = part_of_180 + 20\n    # x = (part_of_180 + 20) / 0.5\n    x = (part_of_180 + 20) / 0.5\n    # 答案是这个数x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "5（1）班昨天的出勤率是96%，昨天48人到校，多少人有事请假．", "target": 2.0, "answer": 2.0, "score": 1, "generation": ["def solution():\n    # 昨天的出勤率是96%\n    attendance_rate = 0.96\n    # 昨天到校的人数为48人\n    present_students = 48\n    # 总人数 = 到校人数 / 出勤率\n    total_students = present_students / attendance_rate\n    # 请假人数 = 总人数 - 到校人数\n    absent_students = total_students - present_students\n    # 答案是请假的人数\n    result = absent_students\n    # 返回答案\n    return result"]}
{"question": "何老师买了110本故事书，114本科技书，平均分给14个读书小组，每组可以分得多少本？", "target": 16.0, "answer": 16.0, "score": 1, "generation": ["def solution():\n    # 故事书的数量为110本\n    num_story_books = 110\n    # 科技书的数量为114本\n    num_science_books = 114\n    # 读书小组的数量为14个\n    num_groups = 14\n    # 总书本数 = 故事书数量 + 科技书数量\n    total_books = num_story_books + num_science_books\n    # 每组可以分得的书本数 = 总书本数 / 小组数量\n    books_per_group = total_books / num_groups\n    # 答案是每组可以分得的书本数\n    result = books_per_group\n    # 返回答案\n    return result"]}
{"question": "比25多9的数=．", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 第一个数是25\n    num1 = 25\n    # 第二个数是9\n    num2 = 9\n    # 比25多9的数 = 25 + 9\n    result = num1 + num2\n    # 返回答案\n    return result"]}
{"question": "二年级买来科技书16本，故事书26本．把这些书平均分给二年级7个班，平均每个班分多少本？", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 科技书的数量为16本\n    num_science_books = 16\n    # 故事书的数量为26本\n    num_story_books = 26\n    # 班级数量为7个\n    num_classes = 7\n    # 总书数 = 科技书数量 + 故事书数量\n    total_books = num_science_books + num_story_books\n    # 平均每个班分的书数 = 总书数 / 班级数量\n    books_per_class = total_books / num_classes\n    # 答案是平均每个班分的书数\n    result = books_per_class\n    # 返回答案\n    return result"]}
{"question": "一堆煤，第一次用去40%，第二次用去原来总量的(1/3)，还剩余12吨．这堆煤共有多少吨？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 第一次用去40%\n    first_use_percentage = 0.4\n    # 第二次用去原来总量的(1/3)\n    second_use_fraction = 1/3\n    # 剩余的煤为12吨\n    remaining_coal = 12\n    # 设这堆煤共有x吨\n    # 第一次用去的煤 = x * 40%\n    first_use = first_use_percentage\n    # 第二次用去的煤 = x * (1/3)\n    second_use = second_use_fraction\n    # 剩余煤的比例 = 1 - 第一次用去的比例 - 第二次用去的比例\n    remaining_fraction = 1 - first_use - second_use\n    # 剩余煤的数量 = x * 剩余煤的比例\n    # 12 = x * remaining_fraction\n    # 所以 x = 12 / remaining_fraction\n    total_coal = remaining_coal / remaining_fraction\n    # 答案是这堆煤的总吨数\n    result = total_coal\n    # 返回答案\n    return result"]}
{"question": "一根4.8米长的竹竿直插入水池中，竹竿的入泥部分是0.4米，露出水面的部分是0.8米，池水深多少？", "target": 3.6, "answer": 3.5999999999999996, "score": 1, "generation": ["def solution():\n    # 竹竿的总长度为4.8米\n    total_length = 4.8\n    # 竹竿的入泥部分是0.4米\n    mud_part = 0.4\n    # 竹竿露出水面的部分是0.8米\n    above_water_part = 0.8\n    # 池水的深度 = 总长度 - 入泥部分 - 露出水面部分\n    water_depth = total_length - mud_part - above_water_part\n    # 答案是池水的深度\n    result = water_depth\n    # 返回答案\n    return result"]}
{"question": "一根绳子的长度等于它本身长度的(1/3)+10米，这绳子长多少米．", "target": 15.0, "answer": 15.0, "score": 1, "generation": ["def solution():\n    # 设绳子的长度为x米\n    # 根据题意，x = (1/3)*x + 10\n    # 解这个方程\n    # 将(1/3)*x移到左边，得到x - (1/3)*x = 10\n    # 合并同类项，(2/3)*x = 10\n    # 两边乘以3/2，得到x = 10 * (3/2)\n    x = 10 * (3/2)\n    # 答案是绳子的长度\n    result = x\n    # 返回答案\n    return result"]}
{"question": "光明小学新建了一幢8层的数字楼，每层有5个教室，每个教室放24张课桌，一共需要多少张课桌？", "target": 960.0, "answer": 960.0, "score": 1, "generation": ["def solution():\n    # 数字楼有8层\n    num_floors = 8\n    # 每层有5个教室\n    num_classrooms_per_floor = 5\n    # 每个教室放24张课桌\n    num_desks_per_classroom = 24\n    # 总教室数 = 楼层数 * 每层教室数\n    total_classrooms = num_floors * num_classrooms_per_floor\n    # 总课桌数 = 总教室数 * 每个教室的课桌数\n    total_desks = total_classrooms * num_desks_per_classroom\n    # 答案是一共需要的课桌数\n    result = total_desks\n    # 返回答案\n    return result"]}
{"question": "学校图书馆有故事书1820本，是科技书的2倍．借出一部分科技书后，剩下科技书900本．借出科技书多少本？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 学校图书馆有故事书1820本\n    num_story_books = 1820\n    # 故事书是科技书的2倍\n    ratio = 2\n    # 科技书的数量 = 故事书的数量 / 2\n    num_science_books = num_story_books / ratio\n    # 借出一部分科技书后，剩下科技书900本\n    remaining_science_books = 900\n    # 借出的科技书数量 = 科技书总数 - 剩下的科技书数量\n    borrowed_science_books = num_science_books - remaining_science_books\n    # 答案是借出的科技书数量\n    result = borrowed_science_books\n    # 返回答案\n    return result"]}
{"question": "一项工程，由于采用了先进技术，只用了14.4万元，比原计划节约投资3.6万元，节约了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 实际投资为14.4万元\n    actual_investment = 14.4\n    # 节约投资为3.6万元\n    saved_investment = 3.6\n    # 原计划投资 = 实际投资 + 节约投资\n    planned_investment = actual_investment + saved_investment\n    # 节约的百分比 = (节约投资 / 原计划投资) * 100\n    percentage_saved = (saved_investment / planned_investment) * 100\n    # 答案是节约的百分比\n    result = percentage_saved\n    # 返回答案\n    return result"]}
{"question": "被除数是除数的8倍，被除数是1000，除数=．", "target": 125.0, "answer": 125.0, "score": 1, "generation": ["def solution():\n    # 被除数是1000\n    dividend = 1000\n    # 被除数是除数的8倍\n    divisor = dividend / 8\n    # 答案是除数\n    result = divisor\n    # 返回答案\n    return result"]}
{"question": "某个地区有一个活动：用3个空瓶可以换一瓶水，小明现在有10个空瓶，那么小明可以喝到多少瓶水．", "target": 5.0, "answer": 5.0, "score": 1, "generation": ["def solution():\n    # 小明现在有10个空瓶\n    empty_bottles = 10\n    # 每3个空瓶可以换一瓶水\n    exchange_rate = 3\n    # 初始喝到的水为0瓶\n    total_drinks = 0\n    # 当空瓶数量大于等于兑换率时，可以继续兑换\n    while empty_bottles >= exchange_rate:\n        # 可以兑换的水瓶数 = 空瓶数 // 兑换率\n        drinks = empty_bottles // exchange_rate\n        # 喝到的水总数增加\n        total_drinks += drinks\n        # 兑换后剩余的空瓶数 = 空瓶数 % 兑换率 + 兑换得到的水瓶数\n        empty_bottles = empty_bottles % exchange_rate + drinks\n    # 答案是小明可以喝到的水的总数\n    result = total_drinks\n    # 返回答案\n    return result"]}
{"question": "鸭比鸡多210只，鸡的只数和鸭的只数比是2：5．鸭和鸡共有多少只？", "target": 490.0, "answer": 490.0, "score": 1, "generation": ["def solution():\n    # 鸡和鸭的只数比是2：5\n    chicken_ratio = 2\n    duck_ratio = 5\n    # 鸭比鸡多210只\n    difference = 210\n    # 每份的数量 = 鸭比鸡多的数量 / (鸭的比率 - 鸡的比率)\n    unit = difference / (duck_ratio - chicken_ratio)\n    # 鸡的数量 = 鸡的比率 * 每份的数量\n    chicken_count = chicken_ratio * unit\n    # 鸭的数量 = 鸭的比率 * 每份的数量\n    duck_count = duck_ratio * unit\n    # 鸡和鸭的总数量 = 鸡的数量 + 鸭的数量\n    total_count = chicken_count + duck_count\n    # 答案是鸡和鸭的总数量\n    result = total_count\n    # 返回答案\n    return result"]}
{"question": "一台计算机10小时用电(12/5)千瓦时．这台计算机平均每小时用电多少千瓦时？", "target": 0.24, "answer": 0.24, "score": 1, "generation": ["def solution():\n    # 计算机10小时用电(12/5)千瓦时\n    total_consumption = 12/5\n    total_hours = 10\n    # 平均每小时用电量 = 总用电量 / 总小时数\n    average_consumption_per_hour = total_consumption / total_hours\n    # 答案是计算机平均每小时用电量\n    result = average_consumption_per_hour\n    # 返回答案\n    return result"]}
{"question": "437与368的差除1932，商=？", "target": 28.0, "answer": 28.0, "score": 1, "generation": ["def solution():\n    # 第一个数是437\n    num1 = 437\n    # 第二个数是368\n    num2 = 368\n    # 计算437与368的差\n    difference = num1 - num2\n    # 被除数是1932\n    dividend = 1932\n    # 商 = 被除数 / 差\n    quotient = dividend / difference\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "一块铜和锡的合金中，铜与锡的比是9：5，已知铜比锡重800克，这块合金有多少克．", "target": 2800.0, "answer": 2800.0, "score": 1, "generation": ["def solution():\n    # 铜与锡的比例是9：5\n    copper_ratio = 9\n    tin_ratio = 5\n    # 铜比锡重800克\n    weight_difference = 800\n    # 比例差 = 铜的比例 - 锡的比例\n    ratio_difference = copper_ratio - tin_ratio\n    # 每单位比例的重量 = 重量差 / 比例差\n    weight_per_ratio = weight_difference / ratio_difference\n    # 总比例 = 铜的比例 + 锡的比例\n    total_ratio = copper_ratio + tin_ratio\n    # 合金的总重量 = 每单位比例的重量 * 总比例\n    total_weight = weight_per_ratio * total_ratio\n    # 答案是合金的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "用一只水桶装水，把水加到原来的2倍，连桶重10千克，如果把水加到原来的5倍，连桶重22千克．桶里原有水多少千克？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 设桶里原有水x千克\n    # 第一次加水后，水的重量为2x，连桶重10千克\n    # 第二次加水后，水的重量为5x，连桶重22千克\n    # 设桶的重量为y千克\n    # 根据第一次加水的情况，可以得到方程：2x + y = 10\n    # 根据第二次加水的情况，可以得到方程：5x + y = 22\n    # 解这个方程组，可以得到x的值\n    # 从第一个方程中解出y = 10 - 2x\n    # 将y代入第二个方程：5x + (10 - 2x) = 22\n    # 化简得到：3x + 10 = 22\n    # 解这个方程得到：3x = 12，x = 4\n    # 所以桶里原有水4千克\n    result = 4\n    # 返回答案\n    return result"]}
{"question": "五年级同学一共捐款640元，四年级捐的比五年级多(1/8)，四年级同学捐款多少元？", "target": 720.0, "answer": 720.0, "score": 1, "generation": ["def solution():\n    # 五年级同学捐款总额为640元\n    fifth_grade_donation = 640\n    # 四年级捐款比五年级多(1/8)\n    donation_increase = 1/8\n    # 四年级捐款总额 = 五年级捐款总额 * (1 + 增加比例)\n    fourth_grade_donation = fifth_grade_donation * (1 + donation_increase)\n    # 答案是四年级同学捐款总额\n    result = fourth_grade_donation\n    # 返回答案\n    return result"]}
{"question": "外国语实验小学三年级学生参加浇树活动，7个班一共浇了644棵树．平均每个班浇多少棵树？", "target": 92.0, "answer": 92.0, "score": 1, "generation": ["def solution():\n    # 三年级有7个班\n    num_classes = 7\n    # 7个班一共浇了644棵树\n    total_trees = 644\n    # 平均每个班浇的树数 = 总树数 / 班级数\n    trees_per_class = total_trees / num_classes\n    # 答案是平均每个班浇的树数\n    result = trees_per_class\n    # 返回答案\n    return result"]}
{"question": "小婷跳绳原来每分钟跳75下，现在每分钟可以跳100下．原来4分钟跳的下数，现在只要跳几分钟？", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 小婷原来每分钟跳75下\n    original_speed = 75\n    # 小婷现在每分钟跳100下\n    current_speed = 100\n    # 原来4分钟跳的下数 = 原来每分钟跳的下数 * 4\n    original_jumps = original_speed * 4\n    # 现在跳相同下数所需的时间 = 原来跳的下数 / 现在每分钟跳的下数\n    current_time = original_jumps / current_speed\n    # 答案是现在跳相同下数所需的时间\n    result = current_time\n    # 返回答案\n    return result"]}
{"question": "203-198的差乘53与27的和，积=？", "target": 400.0, "answer": 400.0, "score": 1, "generation": ["def solution():\n    # 计算203-198的差\n    difference = 203 - 198\n    # 计算53与27的和\n    sum_numbers = 53 + 27\n    # 计算差与和的积\n    product = difference * sum_numbers\n    # 答案是积\n    result = product\n    # 返回答案\n    return result"]}
{"question": "甲数是18，乙数是40，甲数是乙数的百分之几？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 甲数是18\n    num_a = 18\n    # 乙数是40\n    num_b = 40\n    # 甲数是乙数的比例 = 甲数 / 乙数\n    ratio = num_a / num_b\n    # 将比例转换为百分数\n    percentage = ratio * 100\n    # 答案是甲数是乙数的百分数\n    result = percentage\n    # 返回答案\n    return result"]}
{"question": "襄樊市体育场是一个直径大约是400米的圆柱形，王叔叔每天早上要绕体育场跑跑4圈一共大约跑多少米？", "target": 5026.5482, "answer": 5026.548245743669, "score": 1, "generation": ["def solution():\n    # 体育场的直径大约是400米\n    diameter = 400\n    # 计算体育场的周长 = π * 直径\n    circumference = 3.141592653589793 * diameter\n    # 王叔叔每天早上要绕体育场跑4圈\n    num_laps = 4\n    # 总跑步距离 = 周长 * 圈数\n    total_distance = circumference * num_laps\n    # 答案是总跑步距离\n    result = total_distance\n    # 返回答案\n    return result"]}
{"question": "每天放4场电影，每场最多可坐580人，每天最多有多少人看电影？", "target": 2320.0, "answer": 2320.0, "score": 1, "generation": ["def solution():\n    # 每天放4场电影\n    num_shows_per_day = 4\n    # 每场最多可坐580人\n    max_attendance_per_show = 580\n    # 每天最多看电影的人数 = 场次 * 每场最多人数\n    max_attendance_per_day = num_shows_per_day * max_attendance_per_show\n    # 答案是每天最多看电影的人数\n    result = max_attendance_per_day\n    # 返回答案\n    return result"]}
{"question": "实验幼儿园食堂买来豆角和西红柿各16千克，每千克豆角3.4元，每千克西红柿1.6元，买两种菜共花多少钱？", "target": 80.0, "answer": 80.0, "score": 1, "generation": ["def solution():\n    # 豆角和西红柿各买了16千克\n    weight_beans = 16\n    weight_tomatoes = 16\n    # 每千克豆角的价格是3.4元\n    price_beans = 3.4\n    # 每千克西红柿的价格是1.6元\n    price_tomatoes = 1.6\n    # 豆角的总价格 = 重量 * 单价\n    total_price_beans = weight_beans * price_beans\n    # 西红柿的总价格 = 重量 * 单价\n    total_price_tomatoes = weight_tomatoes * price_tomatoes\n    # 两种菜的总价格 = 豆角总价格 + 西红柿总价格\n    total_cost = total_price_beans + total_price_tomatoes\n    # 答案是两种菜的总价格\n    result = total_cost\n    # 返回答案\n    return result"]}
{"question": "车站有850千克蔬菜要运到菜场出售，运了4车还剩90千克．平均每车运多少千克？", "target": 190.0, "answer": 190.0, "score": 1, "generation": ["def solution():\n    # 车站有850千克蔬菜要运到菜场出售\n    total_vegetables = 850\n    # 运了4车还剩90千克\n    remaining_vegetables = 90\n    # 运走的蔬菜数量 = 总蔬菜数量 - 剩余的蔬菜数量\n    transported_vegetables = total_vegetables - remaining_vegetables\n    # 平均每车运的蔬菜数量 = 运走的蔬菜数量 / 运的车数\n    average_per_vehicle = transported_vegetables / 4\n    # 答案是平均每车运的蔬菜数量\n    result = average_per_vehicle\n    # 返回答案\n    return result"]}
{"question": "小丽的姐姐将一个月工资的25%存入银行，15%作为保险费，20%用于炒股，最后剩下800元作为生活费，她一个月工资多少元．", "target": 2000.0, "answer": 2000.0000000000005, "score": 1, "generation": ["def solution():\n    # 存入银行的比例为25%\n    bank_percentage = 0.25\n    # 保险费的比例为15%\n    insurance_percentage = 0.15\n    # 用于炒股的比例为20%\n    stock_percentage = 0.20\n    # 生活费为800元\n    living_expenses = 800\n    # 总支出比例 = 存入银行的比例 + 保险费的比例 + 用于炒股的比例\n    total_expense_percentage = bank_percentage + insurance_percentage + stock_percentage\n    # 生活费比例 = 1 - 总支出比例\n    living_expense_percentage = 1 - total_expense_percentage\n    # 一个月工资 = 生活费 / 生活费比例\n    monthly_salary = living_expenses / living_expense_percentage\n    # 答案是一个月工资\n    result = monthly_salary\n    # 返回答案\n    return result"]}
{"question": "如果从一捆粗细均匀的电线上截取1米长的电线，称得它的重为0.2斤，再称得剩余电线的重为20斤，则原来这捆电线总长度为多少米．", "target": 101.0, "answer": 101.0, "score": 1, "generation": ["def solution():\n    # 截取的1米长的电线重量为0.2斤\n    weight_per_meter = 0.2\n    # 剩余电线的重量为20斤\n    remaining_weight = 20\n    # 剩余电线的长度 = 剩余电线的重量 / 每米电线的重量\n    remaining_length = remaining_weight / weight_per_meter\n    # 原来这捆电线的总长度 = 截取的长度 + 剩余电线的长度\n    total_length = 1 + remaining_length\n    # 答案是原来这捆电线的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "弟弟今年4岁，哥哥今年12岁，10年后，哥哥比弟弟大几岁？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 弟弟今年4岁\n    younger_brother_age = 4\n    # 哥哥今年12岁\n    older_brother_age = 12\n    # 10年后\n    years_later = 10\n    # 10年后弟弟的年龄 = 弟弟今年年龄 + 10\n    younger_brother_age_later = younger_brother_age + years_later\n    # 10年后哥哥的年龄 = 哥哥今年年龄 + 10\n    older_brother_age_later = older_brother_age + years_later\n    # 哥哥比弟弟大的年龄 = 10年后哥哥的年龄 - 10年后弟弟的年龄\n    age_difference = older_brother_age_later - younger_brother_age_later\n    # 答案是哥哥比弟弟大的年龄\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "两个铺路队从两端同时施工铺一条2070m的路，甲队每天铺46m，乙队每天铺44m，多少天能铺完这条路？", "target": 23.0, "answer": 23.0, "score": 1, "generation": ["def solution():\n    # 路的总长度为2070米\n    total_length = 2070\n    # 甲队每天铺46米\n    speed_team_a = 46\n    # 乙队每天铺44米\n    speed_team_b = 44\n    # 因为两队同时从两端施工，所以每天总共铺路的长度 = 甲队速度 + 乙队速度\n    combined_speed = speed_team_a + speed_team_b\n    # 铺完这条路所需的天数 = 总长度 / 每天总共铺路的长度\n    days_to_complete = total_length / combined_speed\n    # 答案是铺完这条路所需的天数\n    result = days_to_complete\n    # 返回答案\n    return result"]}
{"question": "五年级有学生29人，比女生多16%，女生有多少人．", "target": 25.0, "answer": 13.425925925925926, "score": 0, "generation": ["def solution():\n    # 五年级有学生29人\n    total_students = 29\n    # 男生比女生多16%\n    percentage_increase = 0.16\n    # 设女生人数为x，则男生人数为x * (1 + percentage_increase)\n    # 总学生人数 = 女生人数 + 男生人数 = x + x * (1 + percentage_increase) = x * (2 + percentage_increase)\n    # 所以女生人数x = 总学生人数 / (2 + percentage_increase)\n    female_students = total_students / (2 + percentage_increase)\n    # 答案是女生人数\n    result = female_students\n    # 返回答案\n    return result"]}
{"question": "平海家园要修一条420米长的自来水管道，如果每根自来水管长6米，至少需要多少根？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 自来水管道总长度为420米\n    total_length = 420\n    # 每根自来水管长度为6米\n    pipe_length = 6\n    # 需要的自来水管数量 = 总长度 / 每根长度\n    num_pipes = total_length / pipe_length\n    # 因为需要整数根自来水管，所以向上取整\n    import math\n    num_pipes_rounded = math.ceil(num_pipes)\n    # 答案是至少需要的自来水管数量\n    result = num_pipes_rounded\n    # 返回答案\n    return result"]}
{"question": "“5一”劳动节，家电商场搞促销活动，一款彩电原价4500元，现以原价的85%出售，现在的售价比原来便宜了多少元？", "target": 675.0, "answer": 675.0, "score": 1, "generation": ["def solution():\n    # 彩电的原价为4500元\n    original_price = 4500\n    # 促销折扣为85%\n    discount_rate = 0.85\n    # 促销后的价格 = 原价 * 折扣率\n    discounted_price = original_price * discount_rate\n    # 现在的售价比原来便宜的价格 = 原价 - 促销后的价格\n    price_difference = original_price - discounted_price\n    # 答案是现在的售价比原来便宜的价格\n    result = price_difference\n    # 返回答案\n    return result"]}
{"question": "一个比的前项是(1/6)，比值是(1/3)，后项=．", "target": 0.5, "answer": 0.5, "score": 1, "generation": ["def solution():\n    # 比的前项是(1/6)\n    antecedent = 1/6\n    # 比值是(1/3)\n    ratio = 1/3\n    # 后项 = 前项 / 比值\n    consequent = antecedent / ratio\n    # 答案是后项\n    result = consequent\n    # 返回答案\n    return result"]}
{"question": "有10个铅笔盒，其中5个装有铅笔，4个装有钢笔，2个既装有铅笔又有钢笔，空笔盒有多少个．", "target": 3.0, "answer": 3.0, "score": 1, "generation": ["def solution():\n    # 总共有10个铅笔盒\n    total_pencil_cases = 10\n    # 装有铅笔的铅笔盒有5个\n    pencil_cases_with_pencils = 5\n    # 装有钢笔的铅笔盒有4个\n    pencil_cases_with_pens = 4\n    # 既装有铅笔又有钢笔的铅笔盒有2个\n    pencil_cases_with_both = 2\n    # 装有铅笔或钢笔的铅笔盒数量 = 装有铅笔的铅笔盒 + 装有钢笔的铅笔盒 - 既装有铅笔又有钢笔的铅笔盒\n    pencil_cases_with_any = pencil_cases_with_pencils + pencil_cases_with_pens - pencil_cases_with_both\n    # 空笔盒的数量 = 总铅笔盒数量 - 装有铅笔或钢笔的铅笔盒数量\n    empty_pencil_cases = total_pencil_cases - pencil_cases_with_any\n    # 答案是空笔盒的数量\n    result = empty_pencil_cases\n    # 返回答案\n    return result"]}
{"question": "西山村今年已积肥82万吨，比原计划多积14万吨，完成计划的几分之几？", "target": 1.2058823529411764, "answer": 1.2058823529411764, "score": 1, "generation": ["def solution():\n    # 西山村今年已积肥82万吨\n    actual_fertilizer = 82\n    # 比原计划多积14万吨\n    excess_fertilizer = 14\n    # 原计划积肥量 = 实际积肥量 - 超额积肥量\n    planned_fertilizer = actual_fertilizer - excess_fertilizer\n    # 完成计划的比例 = 实际积肥量 / 原计划积肥量\n    completion_ratio = actual_fertilizer / planned_fertilizer\n    # 答案是完成计划的比例\n    result = completion_ratio\n    # 返回答案\n    return result"]}
{"question": "李师傅铺设1平方米地砖需要(1/8)小时．按照这样的速度计算，他铺好一个长16米、宽(16/3)米的长方形会议室，需要多少时间？", "target": 10.666666666666666, "answer": 10.666666666666666, "score": 1, "generation": ["def solution():\n    # 铺设1平方米地砖需要(1/8)小时\n    time_per_square_meter = 1/8\n    # 会议室的长为16米\n    length = 16\n    # 会议室的宽为(16/3)米\n    width = 16/3\n    # 会议室的面积 = 长 * 宽\n    area = length * width\n    # 铺设会议室所需的时间 = 面积 * 每平方米所需时间\n    total_time = area * time_per_square_meter\n    # 答案是铺设会议室所需的时间\n    result = total_time\n    # 返回答案\n    return result"]}
{"question": "鸡场养有小鸡2240只，中鸡是小鸡的(5/8)，大鸡是中鸡的(6/7)，大鸡有多少只？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 小鸡的数量为2240只\n    num_chicks = 2240\n    # 中鸡是小鸡的(5/8)\n    num_pullets = (5/8) * num_chicks\n    # 大鸡是中鸡的(6/7)\n    num_hens = (6/7) * num_pullets\n    # 答案是大鸡的数量\n    result = num_hens\n    # 返回答案\n    return result"]}
{"question": "一本《快乐学数学》定价4.5元，一本《数学小灵通》定价2.8元．王鹏有10元钱，他各买了一本，还剩下多少钱？", "target": 2.7, "answer": 2.7, "score": 1, "generation": ["def solution():\n    # 《快乐学数学》的价格为4.5元\n    price_happy_math = 4.5\n    # 《数学小灵通》的价格为2.8元\n    price_math_whiz = 2.8\n    # 王鹏有10元钱\n    total_money = 10\n    # 购买两本书的总费用 = 《快乐学数学》的价格 + 《数学小灵通》的价格\n    total_cost = price_happy_math + price_math_whiz\n    # 剩余的钱 = 总钱数 - 总费用\n    remaining_money = total_money - total_cost\n    # 答案是剩余的钱\n    result = remaining_money\n    # 返回答案\n    return result"]}
{"question": "小邵带500元去买《数学小灵通》，买了25套，还剩50元．每套价钱多少？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 小邵带的钱为500元\n    total_money = 500\n    # 买了25套《数学小灵通》\n    num_books = 25\n    # 还剩50元\n    remaining_money = 50\n    # 花费的钱 = 总钱数 - 剩余的钱\n    money_spent = total_money - remaining_money\n    # 每套的价钱 = 花费的钱 / 买的套数\n    price_per_book = money_spent / num_books\n    # 答案是每套的价钱\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "李明收集邮票49枚，王红收集的邮票比李明多(2/7)．李明比王红少收集邮票多少枚？", "target": 14.0, "answer": 14.0, "score": 1, "generation": ["def solution():\n    # 李明收集邮票49枚\n    li_ming_stamps = 49\n    # 王红收集的邮票比李明多(2/7)\n    wang_hong_extra_fraction = 2/7\n    # 王红比李明多收集的邮票数量 = 李明收集的邮票数量 * 多收集的比例\n    wang_hong_extra_stamps = li_ming_stamps * wang_hong_extra_fraction\n    # 李明比王红少收集的邮票数量 = 王红比李明多收集的邮票数量\n    li_ming_less_stamps = wang_hong_extra_stamps\n    # 答案是李明比王红少收集的邮票数量\n    result = li_ming_less_stamps\n    # 返回答案\n    return result"]}
{"question": "学校有808个同学，分乘6辆汽车去春游，第一辆车已经接走了128人，如果其余5辆车乘的人数相同，最后一辆车乘了几个同学？", "target": 136.0, "answer": 136.0, "score": 1, "generation": ["def solution():\n    # 学校总共有808个同学\n    total_students = 808\n    # 第一辆车接走了128人\n    first_bus_students = 128\n    # 剩余的同学数量 = 总同学数 - 第一辆车接走的同学数\n    remaining_students = total_students - first_bus_students\n    # 剩余的同学需要乘坐5辆车\n    num_remaining_buses = 5\n    # 每辆车乘坐的同学数 = 剩余同学数 / 剩余车辆数\n    students_per_bus = remaining_students / num_remaining_buses\n    # 因为题目问的是最后一辆车乘坐的同学数，所以答案是每辆车乘坐的同学数\n    result = students_per_bus\n    # 返回答案\n    return result"]}
{"question": "学校图书馆有科技书650本，文艺书本数比科技书本数的3倍多45本，图书馆有科技书、文艺书共多少本．", "target": 2645.0, "answer": 2645.0, "score": 1, "generation": ["def solution():\n    # 科技书的数量为650本\n    num_science_books = 650\n    # 文艺书的数量比科技书的3倍多45本\n    num_literature_books = 3 * num_science_books + 45\n    # 科技书和文艺书的总数量 = 科技书的数量 + 文艺书的数量\n    total_books = num_science_books + num_literature_books\n    # 答案是科技书和文艺书的总数量\n    result = total_books\n    # 返回答案\n    return result"]}
{"question": "小明今年15岁，爸爸年龄是小明的3倍，爸爸比小明大几岁？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 小明的年龄是15岁\n    xiaoming_age = 15\n    # 爸爸的年龄是小明的3倍\n    dad_age = 3 * xiaoming_age\n    # 爸爸比小明大的年龄 = 爸爸的年龄 - 小明的年龄\n    age_difference = dad_age - xiaoming_age\n    # 答案是爸爸比小明大的年龄\n    result = age_difference\n    # 返回答案\n    return result"]}
{"question": "新华小学今年春季新栽了一批树，其中松树比柏树多12棵，柏树比松树少(1/7)．新栽的柏树有多少棵？", "target": 72.0, "answer": 72.0, "score": 1, "generation": ["def solution():\n    # 松树比柏树多12棵\n    pine_more_than_cypress = 12\n    # 柏树比松树少(1/7)\n    cypress_less_than_pine = 1/7\n    # 设松树的数量为x，柏树的数量为y\n    # 根据题意，x = y + 12\n    # 柏树比松树少(1/7)，即 y = x - (1/7)*x = (6/7)*x\n    # 将x = y + 12代入y = (6/7)*x\n    # y = (6/7)*(y + 12)\n    # 解这个方程得到y的值\n    # 7y = 6y + 72\n    # y = 72\n    # 所以柏树的数量为72棵\n    cypress_trees = 72\n    # 答案是柏树的数量\n    result = cypress_trees\n    # 返回答案\n    return result"]}
{"question": "城西学校买了29只足球，足球的只数比篮球只数的2倍少3只，这两种求一共买了多少只？", "target": 45.0, "answer": 45.0, "score": 1, "generation": ["def solution():\n    # 城西学校买了29只足球\n    num_soccer = 29\n    # 足球的只数比篮球只数的2倍少3只\n    # 设篮球的数量为x，则足球的数量 = 2x - 3\n    # 已知足球的数量为29，所以可以解方程：2x - 3 = 29\n    # 解方程得：x = (29 + 3) / 2\n    num_basketball = (num_soccer + 3) / 2\n    # 两种球一共买了的数量 = 足球的数量 + 篮球的数量\n    total_balls = num_soccer + num_basketball\n    # 答案是两种球一共买了的数量\n    result = total_balls\n    # 返回答案\n    return result"]}
{"question": "商店运来5筐黄瓜和4筐茄子，共重230千克．每筐黄瓜重30千克，每筐茄子重多少千克？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 黄瓜的筐数为5\n    num_cucumbers = 5\n    # 茄子的筐数为4\n    num_eggplants = 4\n    # 每筐黄瓜的重量为30千克\n    weight_per_cucumber = 30\n    # 黄瓜和茄子的总重量为230千克\n    total_weight = 230\n    # 黄瓜的总重量 = 黄瓜的筐数 * 每筐黄瓜的重量\n    total_cucumber_weight = num_cucumbers * weight_per_cucumber\n    # 茄子的总重量 = 总重量 - 黄瓜的总重量\n    total_eggplant_weight = total_weight - total_cucumber_weight\n    # 每筐茄子的重量 = 茄子的总重量 / 茄子的筐数\n    weight_per_eggplant = total_eggplant_weight / num_eggplants\n    # 答案是每筐茄子的重量\n    result = weight_per_eggplant\n    # 返回答案\n    return result"]}
{"question": "一种商品现价2400元，比原价降低了20%，这种商品比原价降低了多少元？", "target": 600.0, "answer": 600.0, "score": 1, "generation": ["def solution():\n    # 商品现价为2400元\n    current_price = 2400\n    # 价格降低了20%\n    discount_percentage = 0.2\n    # 原价 = 现价 / (1 - 折扣比例)\n    original_price = current_price / (1 - discount_percentage)\n    # 价格降低的金额 = 原价 - 现价\n    price_reduction = original_price - current_price\n    # 答案是价格降低的金额\n    result = price_reduction\n    # 返回答案\n    return result"]}
{"question": "一套服装的成本价是50元，零售商从生产厂家以出厂价买入，然后卖出．如果生产厂家的利润率为20%，零售商的利润率为30%，则这套服装的售价为：多少元．", "target": 78.0, "answer": 78.0, "score": 1, "generation": ["def solution():\n    # 服装的成本价是50元\n    cost_price = 50\n    # 生产厂家的利润率为20%\n    manufacturer_profit_rate = 0.2\n    # 生产厂家的出厂价 = 成本价 * (1 + 利润率)\n    manufacturer_price = cost_price * (1 + manufacturer_profit_rate)\n    # 零售商的利润率为30%\n    retailer_profit_rate = 0.3\n    # 零售商的售价 = 出厂价 * (1 + 利润率)\n    retail_price = manufacturer_price * (1 + retailer_profit_rate)\n    # 答案是这套服装的售价\n    result = retail_price\n    # 返回答案\n    return result"]}
{"question": "长跑锻炼，小雄跑了3千米，小雄跑的(5/6)等于小刚跑的．小刚跑的是小勇的(4/5)．小勇跑多少千米？", "target": 3.125, "answer": 3.125, "score": 1, "generation": ["def solution():\n    # 小雄跑了3千米\n    xiong_distance = 3\n    # 小雄跑的(5/6)等于小刚跑的\n    gang_distance = (5/6) * xiong_distance\n    # 小刚跑的是小勇的(4/5)\n    yong_distance = gang_distance / (4/5)\n    # 答案是小勇跑的距离\n    result = yong_distance\n    # 返回答案\n    return result"]}
{"question": "竹子在生长旺盛期每时约增高4厘米，钟状菌生长更快，生长旺盛期每时约增高25厘米．如果它们都在生长旺盛期，开始时竹子高32厘米，钟状菌高0.5厘米，几时后钟状菌的高度可赶上竹子？", "target": 1.5, "answer": 1.5, "score": 1, "generation": ["def solution():\n    # 竹子的初始高度为32厘米\n    initial_bamboo_height = 32\n    # 钟状菌的初始高度为0.5厘米\n    initial_mushroom_height = 0.5\n    # 竹子每小时的生长速度为4厘米\n    bamboo_growth_rate = 4\n    # 钟状菌每小时的生长速度为25厘米\n    mushroom_growth_rate = 25\n    # 钟状菌赶上竹子的时间 = (竹子的初始高度 - 钟状菌的初始高度) / (钟状菌的生长速度 - 竹子的生长速度)\n    time_to_catch_up = (initial_bamboo_height - initial_mushroom_height) / (mushroom_growth_rate - bamboo_growth_rate)\n    # 答案是钟状菌赶上竹子的时间\n    result = time_to_catch_up\n    # 返回答案\n    return result"]}
{"question": "挖一条水渠，如果每天挖全长的15%又20米，那么6天正好挖完．这一条水渠全长多少米？", "target": 1200.0, "answer": 1200.0, "score": 1, "generation": ["def solution():\n    # 每天挖全长的15%又20米\n    daily_percentage = 0.15\n    daily_fixed = 20\n    # 6天正好挖完\n    total_days = 6\n    # 设水渠全长为x米\n    # 6天挖的总量 = 6 * (0.15x + 20) = x\n    # 解方程：6 * (0.15x + 20) = x\n    # 0.9x + 120 = x\n    # 120 = 0.1x\n    # x = 120 / 0.1\n    total_length = 120 / 0.1\n    # 答案是水渠的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "沃尔玛超市之前塑料袋的日均使用量为20000个，实施限塑令以后日用量下降了(3/4)，现在塑料袋的日用量为多少个？", "target": 5000.0, "answer": 5000.0, "score": 1, "generation": ["def solution():\n    # 之前塑料袋的日均使用量为20000个\n    previous_daily_usage = 20000\n    # 实施限塑令以后日用量下降了(3/4)\n    reduction_fraction = 3/4\n    # 减少的塑料袋数量 = 之前日均使用量 * 下降比例\n    reduced_usage = previous_daily_usage * reduction_fraction\n    # 现在的塑料袋日用量 = 之前日均使用量 - 减少的数量\n    current_daily_usage = previous_daily_usage - reduced_usage\n    # 答案是现在的塑料袋日用量\n    result = current_daily_usage\n    # 返回答案\n    return result"]}
{"question": "某校全体学生列队，不论他们人数相等的分成2队，3队，4队，5对，6对，7对，8对或9队，都会多出1人，那么该校至少有多少名学生？", "target": 2521.0, "answer": 2521.0, "score": 1, "generation": ["def solution():\n    # 我们需要找到一个最小的数N，使得N除以2,3,4,5,6,7,8,9都余1\n    # 这意味着N-1必须能被2,3,4,5,6,7,8,9整除\n    # 所以N-1是2,3,4,5,6,7,8,9的最小公倍数\n    # 计算2,3,4,5,6,7,8,9的最小公倍数\n    # 首先分解质因数：\n    # 2 = 2\n    # 3 = 3\n    # 4 = 2^2\n    # 5 = 5\n    # 6 = 2 * 3\n    # 7 = 7\n    # 8 = 2^3\n    # 9 = 3^2\n    # 最小公倍数 = 2^3 * 3^2 * 5 * 7 = 8 * 9 * 5 * 7\n    lcm = 8 * 9 * 5 * 7\n    # N = lcm + 1\n    N = lcm + 1\n    # 答案是该校至少有的学生人数\n    result = N\n    # 返回答案\n    return result"]}
{"question": "一个数的(2/5)与(3/4)*(2/3)的积相等．求这个数．", "target": 1.25, "answer": 1.25, "score": 1, "generation": ["def solution():\n    # 设这个数为x\n    # 根据题意，x的(2/5)等于(3/4)*(2/3)的积\n    # 计算(3/4)*(2/3)的积\n    product = (3/4) * (2/3)\n    # 根据题意，x * (2/5) = product\n    # 解这个方程，x = product / (2/5)\n    x = product / (2/5)\n    # 答案是这个数x\n    result = x\n    # 返回答案\n    return result"]}
{"question": "股市交易中，无论买进和卖出，均需要交纳交易资金的0.3%作为手续费．某股民以每股10.65元买过某种股票3000股，过了一段时间，又以每股13.68元将这种股票全部卖出．此股民买卖这支股票赚了多少元？（只列式不计算）", "target": 8871.03, "answer": 8871.029999999999, "score": 1, "generation": ["def solution():\n    # 每股买进价格为10.65元\n    buy_price_per_share = 10.65\n    # 每股卖出价格为13.68元\n    sell_price_per_share = 13.68\n    # 股票数量为3000股\n    num_shares = 3000\n    # 买进总金额 = 每股买进价格 * 股票数量\n    total_buy_amount = buy_price_per_share * num_shares\n    # 卖出总金额 = 每股卖出价格 * 股票数量\n    total_sell_amount = sell_price_per_share * num_shares\n    # 买进手续费 = 买进总金额 * 0.3%\n    buy_fee = total_buy_amount * 0.003\n    # 卖出手续费 = 卖出总金额 * 0.3%\n    sell_fee = total_sell_amount * 0.003\n    # 总利润 = 卖出总金额 - 买进总金额 - 买进手续费 - 卖出手续费\n    total_profit = total_sell_amount - total_buy_amount - buy_fee - sell_fee\n    # 答案是总利润\n    result = total_profit\n    # 返回答案\n    return result"]}
{"question": "用13.1-6.9的差去除24.8，商=．", "target": 4.0, "answer": 4.000000000000001, "score": 1, "generation": ["def solution():\n    # 计算13.1 - 6.9的差\n    difference = 13.1 - 6.9\n    # 用这个差去除24.8，即24.8 / 差\n    quotient = 24.8 / difference\n    # 答案是商\n    result = quotient\n    # 返回答案\n    return result"]}
{"question": "农业机械厂有39吨煤，已经烧了16天，平均每天烧煤1.2吨．剩下的煤如果每天烧1.1吨，还可以烧多少天？", "target": 18.0, "answer": 18.0, "score": 1, "generation": ["def solution():\n    # 农业机械厂有39吨煤\n    total_coal = 39\n    # 已经烧了16天\n    days_burned = 16\n    # 平均每天烧煤1.2吨\n    daily_burn_rate_initial = 1.2\n    # 已经烧掉的煤 = 烧的天数 * 每天烧的煤\n    coal_burned = days_burned * daily_burn_rate_initial\n    # 剩下的煤 = 总煤 - 已经烧掉的煤\n    remaining_coal = total_coal - coal_burned\n    # 剩下的煤每天烧1.1吨\n    daily_burn_rate_new = 1.1\n    # 还可以烧的天数 = 剩下的煤 / 每天烧的煤\n    days_remaining = remaining_coal / daily_burn_rate_new\n    # 答案是还可以烧的天数\n    result = days_remaining\n    # 返回答案\n    return result"]}
{"question": "化肥厂计划生产一批化肥，第一天生产了全部任务的(1/6)，第二天又生产了余下任务的(1/4)，第3天又生产了前两天生产后余下的(1/5)，结果还剩下50吨没有完成．问化肥厂计划生产化肥多少吨？", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 设化肥厂计划生产化肥的总量为x吨\n    # 第一天生产了全部任务的(1/6)\n    day1_production = 1/6\n    # 剩余任务 = 1 - day1_production\n    remaining_after_day1 = 1 - day1_production\n    # 第二天生产了余下任务的(1/4)\n    day2_production = remaining_after_day1 * (1/4)\n    # 剩余任务 = remaining_after_day1 - day2_production\n    remaining_after_day2 = remaining_after_day1 - day2_production\n    # 第3天生产了前两天生产后余下的(1/5)\n    day3_production = remaining_after_day2 * (1/5)\n    # 剩余任务 = remaining_after_day2 - day3_production\n    remaining_after_day3 = remaining_after_day2 - day3_production\n    # 结果还剩下50吨没有完成\n    remaining_tons = 50\n    # 因为 remaining_after_day3 * x = remaining_tons\n    # 所以 x = remaining_tons / remaining_after_day3\n    total_production = remaining_tons / remaining_after_day3\n    # 答案是化肥厂计划生产化肥的总量\n    result = total_production\n    # 返回答案\n    return result"]}
{"question": "一辆货车3.5小时行了227.5千米，一列火车的速度是货车的2倍，求火车的速度？", "target": 130.0, "answer": 130.0, "score": 1, "generation": ["def solution():\n    # 货车行驶的时间为3.5小时\n    truck_time = 3.5\n    # 货车行驶的距离为227.5千米\n    truck_distance = 227.5\n    # 货车的速度 = 距离 / 时间\n    truck_speed = truck_distance / truck_time\n    # 火车的速度是货车的2倍\n    train_speed = 2 * truck_speed\n    # 答案是火车的速度\n    result = train_speed\n    # 返回答案\n    return result"]}
{"question": "一个三角形的面积是15cm^2，它的底是5厘米，高=．", "target": 6.0, "answer": 6.0, "score": 1, "generation": ["def solution():\n    # 三角形的面积是15cm^2\n    area = 15\n    # 三角形的底是5厘米\n    base = 5\n    # 三角形的面积公式是：面积 = (底 * 高) / 2\n    # 所以高 = (面积 * 2) / 底\n    height = (area * 2) / base\n    # 答案是三角形的高\n    result = height\n    # 返回答案\n    return result"]}
{"question": "一瓶油连瓶重3.4千克，瓶重0.5千克，用去1.52千克油后，还剩下多少千克油？", "target": 1.38, "answer": 1.38, "score": 1, "generation": ["def solution():\n    # 油和瓶的总重量为3.4千克\n    total_weight = 3.4\n    # 瓶的重量为0.5千克\n    bottle_weight = 0.5\n    # 油的初始重量 = 总重量 - 瓶的重量\n    initial_oil_weight = total_weight - bottle_weight\n    # 用去的油重量为1.52千克\n    used_oil_weight = 1.52\n    # 剩余的油重量 = 初始油重量 - 用去的油重量\n    remaining_oil_weight = initial_oil_weight - used_oil_weight\n    # 答案是剩余的油重量\n    result = remaining_oil_weight\n    # 返回答案\n    return result"]}
{"question": "空调厂去年上半年完成全年计划任务的(9/16)，下半年和上半年完成的同样多，空调厂去年实际超额完成全年计划任务的几分之几？", "target": 0.125, "answer": 0.125, "score": 1, "generation": ["def solution():\n    # 上半年完成全年计划任务的(9/16)\n    first_half_completion = 9/16\n    # 下半年和上半年完成的同样多\n    second_half_completion = first_half_completion\n    # 全年实际完成的任务 = 上半年完成的任务 + 下半年完成的任务\n    total_completion = first_half_completion + second_half_completion\n    # 全年计划任务是1\n    planned_completion = 1\n    # 超额完成的任务 = 全年实际完成的任务 - 全年计划任务\n    excess_completion = total_completion - planned_completion\n    # 答案是超额完成全年计划任务的几分之几\n    result = excess_completion\n    # 返回答案\n    return result"]}
{"question": "王叔叔每个月的收入扣除2000元后按5%的税率交了个人所得税22.5元，王叔叔的月收入=多少元？", "target": 2450.0, "answer": 2450.0, "score": 1, "generation": ["def solution():\n    # 个人所得税为22.5元\n    tax_paid = 22.5\n    # 税率为5%\n    tax_rate = 0.05\n    # 扣除2000元后的收入 = 个人所得税 / 税率\n    income_after_deduction = tax_paid / tax_rate\n    # 王叔叔的月收入 = 扣除2000元后的收入 + 2000元\n    monthly_income = income_after_deduction + 2000\n    # 答案是王叔叔的月收入\n    result = monthly_income\n    # 返回答案\n    return result"]}
{"question": "甲、乙两油库原存油数量的比是5：3，现因生产需要，从甲库调出了90桶油，这时甲、乙两库油数相等，求乙库原有油多少桶？", "target": 135.0, "answer": 135.0, "score": 1, "generation": ["def solution():\n    # 甲、乙两油库原存油数量的比是5：3\n    ratio_a = 5\n    ratio_b = 3\n    # 从甲库调出了90桶油\n    transferred_oil = 90\n    # 设甲库原有油5x桶，乙库原有油3x桶\n    # 调出后甲库油数为5x - 90，乙库油数为3x\n    # 调出后两库油数相等，所以5x - 90 = 3x\n    # 解方程得x = 45\n    x = transferred_oil / (ratio_a - ratio_b)\n    # 乙库原有油3x桶\n    original_oil_b = ratio_b * x\n    # 答案是乙库原有油的数量\n    result = original_oil_b\n    # 返回答案\n    return result"]}
{"question": "小亮的储蓄箱中有18元，小华储蓄的钱是小亮的(5/6)．小新储蓄的钱是小华的(2/3)．小新储蓄了多少元？", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 小亮的储蓄箱中有18元\n    xiaoliang_savings = 18\n    # 小华储蓄的钱是小亮的(5/6)\n    xiaohua_savings = (5/6) * xiaoliang_savings\n    # 小新储蓄的钱是小华的(2/3)\n    xiaoxin_savings = (2/3) * xiaohua_savings\n    # 答案是小新储蓄的钱\n    result = xiaoxin_savings\n    # 返回答案\n    return result"]}
{"question": "一包茶叶重1千克，倒出(1/4)后还剩下多少克茶叶？", "target": 750.0, "answer": 750.0, "score": 1, "generation": ["def solution():\n    # 茶叶的总重量为1千克\n    total_weight = 1\n    # 倒出的比例为(1/4)\n    poured_out_fraction = 1/4\n    # 倒出的重量 = 总重量 * 倒出的比例\n    poured_out_weight = total_weight * poured_out_fraction\n    # 剩余的重量 = 总重量 - 倒出的重量\n    remaining_weight = total_weight - poured_out_weight\n    # 将剩余的重量转换为克\n    remaining_weight_grams = remaining_weight * 1000\n    # 答案是剩余的茶叶重量（克）\n    result = remaining_weight_grams\n    # 返回答案\n    return result"]}
{"question": "江东修一条长600米的水渠，第一天修了全长的(2/5)，第二天修了全长的(1/4)．一共修了多少米？", "target": 390.0, "answer": 390.0, "score": 1, "generation": ["def solution():\n    # 水渠的总长度为600米\n    total_length = 600\n    # 第一天修了全长的(2/5)\n    first_day_fraction = 2/5\n    # 第二天修了全长的(1/4)\n    second_day_fraction = 1/4\n    # 第一天修的长度 = 总长度 * 第一天修的比例\n    first_day_length = total_length * first_day_fraction\n    # 第二天修的长度 = 总长度 * 第二天修的比例\n    second_day_length = total_length * second_day_fraction\n    # 一共修的长度 = 第一天修的长度 + 第二天修的长度\n    total_repaired_length = first_day_length + second_day_length\n    # 答案是一共修的长度\n    result = total_repaired_length\n    # 返回答案\n    return result"]}
{"question": "板桥小学四年级有女生120人，男生人数比女生的2倍少105人．四年级共有学生多少人？", "target": 255.0, "answer": 255.0, "score": 1, "generation": ["def solution():\n    # 四年级女生人数为120人\n    num_girls = 120\n    # 男生人数比女生的2倍少105人\n    num_boys = 2 * num_girls - 105\n    # 四年级共有学生人数 = 女生人数 + 男生人数\n    total_students = num_girls + num_boys\n    # 答案是四年级共有学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "小朋友们在红果果和绿泡泡指导下分糖果，如每个人10个还剩6个，如每个人12个就有1个小朋友分不到糖果，那么有多少小朋友．", "target": 9.0, "answer": 9.0, "score": 1, "generation": ["def solution():\n    # 设小朋友的数量为x\n    # 第一种情况：每人10个还剩6个，总糖果数为10x + 6\n    # 第二种情况：每人12个有1个小朋友分不到，总糖果数为12(x - 1)\n    # 因为总糖果数相同，所以可以建立方程：10x + 6 = 12(x - 1)\n    # 解方程：\n    # 10x + 6 = 12x - 12\n    # 6 + 12 = 12x - 10x\n    # 18 = 2x\n    # x = 9\n    # 所以小朋友的数量是9个\n    result = 9\n    # 返回答案\n    return result"]}
{"question": "有水果篮50个，盛有橘子的有25个，当中16个还放有苹果；8个水果篮是空的，余下的只放有香蕉？问只放有一种水果的水果篮有多少个﹖", "target": 26.0, "answer": 26.0, "score": 1, "generation": ["def solution():\n    # 水果篮的总数为50个\n    total_baskets = 50\n    # 盛有橘子的水果篮有25个\n    orange_baskets = 25\n    # 其中16个还放有苹果\n    orange_and_apple_baskets = 16\n    # 8个水果篮是空的\n    empty_baskets = 8\n    # 只放有橘子的水果篮数量 = 盛有橘子的水果篮数量 - 还放有苹果的水果篮数量\n    only_orange_baskets = orange_baskets - orange_and_apple_baskets\n    # 余下的水果篮数量 = 总数 - 盛有橘子的水果篮数量 - 空的水果篮数量\n    remaining_baskets = total_baskets - orange_baskets - empty_baskets\n    # 只放有香蕉的水果篮数量 = 余下的水果篮数量\n    only_banana_baskets = remaining_baskets\n    # 只放有一种水果的水果篮数量 = 只放有橘子的水果篮数量 + 只放有香蕉的水果篮数量\n    single_fruit_baskets = only_orange_baskets + only_banana_baskets\n    # 答案是只放有一种水果的水果篮数量\n    result = single_fruit_baskets\n    # 返回答案\n    return result"]}
{"question": "一个班有学生42人，参加体育代表队的有30人，参加文艺代表队的有25人，并且每个人至少参加了一个队，这个班两个队都参加的有几个人？", "target": 13.0, "answer": 13.0, "score": 1, "generation": ["def solution():\n    # 班级总人数为42人\n    total_students = 42\n    # 参加体育代表队的有30人\n    sports_team = 30\n    # 参加文艺代表队的有25人\n    arts_team = 25\n    # 因为每个人至少参加了一个队，所以两个队都参加的人数 = 体育代表队人数 + 文艺代表队人数 - 班级总人数\n    both_teams = sports_team + arts_team - total_students\n    # 答案是两个队都参加的人数\n    result = both_teams\n    # 返回答案\n    return result"]}
{"question": "商店运来一些水果，梨的筐数比苹果筐数少(1/5)．已知运来梨40筐，运来苹果多少筐？", "target": 50.0, "answer": 50.0, "score": 1, "generation": ["def solution():\n    # 梨的筐数为40筐\n    num_pears = 40\n    # 梨的筐数比苹果筐数少(1/5)\n    fraction_less = 1/5\n    # 设苹果的筐数为x，则梨的筐数为x - (1/5)*x = (4/5)*x\n    # 已知梨的筐数为40，所以 (4/5)*x = 40\n    # 解方程得 x = 40 / (4/5) = 40 * (5/4) = 50\n    num_apples = num_pears / (1 - fraction_less)\n    # 答案是运来苹果的筐数\n    result = num_apples\n    # 返回答案\n    return result"]}
{"question": "王大伯养鹅的只数是鸡的(2/5)，是鸭的(6/7)，养鸡480只，养鸭多少只？", "target": 224.0, "answer": 224.0, "score": 1, "generation": ["def solution():\n    # 养鸡的数量为480只\n    num_chickens = 480\n    # 鹅的数量是鸡的(2/5)\n    num_geese = (2/5) * num_chickens\n    # 鹅的数量是鸭的(6/7)\n    num_ducks = num_geese / (6/7)\n    # 答案是养鸭的数量\n    result = num_ducks\n    # 返回答案\n    return result"]}
{"question": "王老师买60本一样的故事书，付出250元，找回28元，每本图书多少钱？", "target": 3.7, "answer": 3.7, "score": 1, "generation": ["def solution():\n    # 王老师买了60本故事书\n    num_books = 60\n    # 王老师付出的总金额为250元\n    total_payment = 250\n    # 找回的金额为28元\n    change = 28\n    # 实际花费的金额 = 付出的总金额 - 找回的金额\n    actual_cost = total_payment - change\n    # 每本图书的价格 = 实际花费的金额 / 图书的数量\n    price_per_book = actual_cost / num_books\n    # 答案是每本图书的价格\n    result = price_per_book\n    # 返回答案\n    return result"]}
{"question": "一筐苹果的(2/7)正好是20千克，这筐苹果重多少千克？", "target": 70.0, "answer": 70.0, "score": 1, "generation": ["def solution():\n    # 一筐苹果的(2/7)是20千克\n    fraction_weight = 20\n    fraction = 2/7\n    # 这筐苹果的总重量 = 部分重量 / 部分比例\n    total_weight = fraction_weight / fraction\n    # 答案是这筐苹果的总重量\n    result = total_weight\n    # 返回答案\n    return result"]}
{"question": "一个数的45%比4.8的2倍少0.6，这个数=？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 4.8的2倍\n    double_4_8 = 4.8 * 2\n    # 比4.8的2倍少0.6\n    target_value = double_4_8 - 0.6\n    # 这个数的45%等于target_value\n    percentage = 0.45\n    # 这个数 = target_value / 45%\n    the_number = target_value / percentage\n    # 答案是这个数\n    result = the_number\n    # 返回答案\n    return result"]}
{"question": "有纯酒精60克，配制浓度为75%的酒精溶液需加水多少克．", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 纯酒精的质量为60克\n    pure_alcohol = 60\n    # 目标酒精溶液的浓度为75%\n    target_concentration = 0.75\n    # 酒精溶液的总质量 = 纯酒精的质量 / 目标浓度\n    total_solution_mass = pure_alcohol / target_concentration\n    # 需要加水的质量 = 总溶液质量 - 纯酒精的质量\n    water_to_add = total_solution_mass - pure_alcohol\n    # 答案是需要加水的质量\n    result = water_to_add\n    # 返回答案\n    return result"]}
{"question": "修一段公路，第一天修了这段路的(5/16)，第二天与第一天修的同样多，还剩下这段路的几分之几没有修？", "target": 0.375, "answer": 0.375, "score": 1, "generation": ["def solution():\n    # 第一天修了这段路的(5/16)\n    first_day_fraction = 5/16\n    # 第二天与第一天修的同样多\n    second_day_fraction = first_day_fraction\n    # 两天总共修的路 = 第一天修的 + 第二天修的\n    total_repaired_fraction = first_day_fraction + second_day_fraction\n    # 剩余未修的路 = 1 - 总共修的路； 1表示整段路\n    remaining_fraction = 1 - total_repaired_fraction\n    # 答案是剩余未修的路的比例\n    result = remaining_fraction\n    # 返回答案\n    return result"]}
{"question": "为了保护3峡库区的生态竦境，国家给幸福村拨款800万元专款，其中(3/5)用于退耕还林，(3/10)用于农民生活、生产补偿，用于退耕还林的比用于生活、生产补偿的多多少万元？", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 国家拨款总额为800万元\n    total_funding = 800\n    # 用于退耕还林的比例是(3/5)\n    reforestation_fraction = 3/5\n    # 用于农民生活、生产补偿的比例是(3/10)\n    compensation_fraction = 3/10\n    # 用于退耕还林的金额 = 总额 * 退耕还林比例\n    reforestation_amount = total_funding * reforestation_fraction\n    # 用于生活、生产补偿的金额 = 总额 * 补偿比例\n    compensation_amount = total_funding * compensation_fraction\n    # 退耕还林比生活、生产补偿多的金额 = 退耕还林金额 - 补偿金额\n    difference = reforestation_amount - compensation_amount\n    # 答案是退耕还林比生活、生产补偿多的金额\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "一个工厂由于采用了新工艺，现在每件产品的成本是37.4元，比原来降低了15%，原来每件成本=多少元？", "target": 44.0, "answer": 44.0, "score": 1, "generation": ["def solution():\n    # 现在每件产品的成本是37.4元\n    current_cost = 37.4\n    # 成本降低了15%\n    cost_reduction = 0.15\n    # 原来的成本 = 现在的成本 / (1 - 成本降低比例)\n    original_cost = current_cost / (1 - cost_reduction)\n    # 答案是原来每件产品的成本\n    result = original_cost\n    # 返回答案\n    return result"]}
{"question": "小马的班上制作了100张彩券销售，这些彩券中只有一张能获奖．小马要购买多少张彩券才会有(1/10)机会获奖．", "target": 10.0, "answer": 10.0, "score": 1, "generation": ["def solution():\n    # 彩券总数为100张\n    total_tickets = 100\n    # 获奖概率为1/10\n    winning_probability = 1/10\n    # 因为只有一张能获奖，所以购买彩券的数量 = 获奖概率 * 彩券总数\n    tickets_to_buy = winning_probability * total_tickets\n    # 答案是购买彩券的数量\n    result = tickets_to_buy\n    # 返回答案\n    return result"]}
{"question": "多少除以32，商和余数都是16．", "target": 528.0, "answer": 528.0, "score": 1, "generation": ["def solution():\n    # 除数是32\n    divisor = 32\n    # 商是16\n    quotient = 16\n    # 余数是16\n    remainder = 16\n    # 被除数 = 除数 * 商 + 余数\n    dividend = divisor * quotient + remainder\n    # 答案是被除数\n    result = dividend\n    # 返回答案\n    return result"]}
{"question": "一批零件共有5400个，王师傅6小时做了全部的(1/3)，以这样的速度，还需几小时才能全部做完？", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 零件总数为5400个\n    total_parts = 5400\n    # 王师傅6小时做了全部的(1/3)\n    work_fraction_in_6_hours = 1/3\n    # 6小时内完成的工作量 = 总数 * 完成比例\n    work_done_in_6_hours = total_parts * work_fraction_in_6_hours\n    # 王师傅的工作速度 = 完成的工作量 / 工作时间\n    work_rate = work_done_in_6_hours / 6\n    # 剩余的工作量 = 总数 - 已完成的工作量\n    remaining_work = total_parts - work_done_in_6_hours\n    # 剩余工作时间 = 剩余的工作量 / 工作速度\n    remaining_time = remaining_work / work_rate\n    # 答案是剩余工作时间\n    result = remaining_time\n    # 返回答案\n    return result"]}
{"question": "花园小学组织学生植树，五年级植树160棵，正好是四年级的2倍，三年级比四年级少20棵，三年级植树多少棵．", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 五年级植树160棵\n    fifth_grade_trees = 160\n    # 五年级植树是四年级的2倍\n    fourth_grade_trees = fifth_grade_trees / 2\n    # 三年级比四年级少20棵\n    third_grade_trees = fourth_grade_trees - 20\n    # 答案是三年级植树的数量\n    result = third_grade_trees\n    # 返回答案\n    return result"]}
{"question": "服装厂要做一批童装，如果每天做35套，18天完成，实际少用3天完成了任务．实际每天做多少套？", "target": 42.0, "answer": 42.0, "score": 1, "generation": ["def solution():\n    # 计划每天做35套\n    planned_daily_sets = 35\n    # 计划18天完成\n    planned_days = 18\n    # 实际少用3天完成\n    actual_days_saved = 3\n    # 实际完成天数 = 计划天数 - 实际少用的天数\n    actual_days = planned_days - actual_days_saved\n    # 总任务量 = 计划每天做的套数 * 计划天数\n    total_sets = planned_daily_sets * planned_days\n    # 实际每天做的套数 = 总任务量 / 实际完成天数\n    actual_daily_sets = total_sets / actual_days\n    # 答案是实际每天做的套数\n    result = actual_daily_sets\n    # 返回答案\n    return result"]}
{"question": "一场足球赛的票价为240元，因为票很紧张，涨价20%，涨价后的票价=？", "target": 288.0, "answer": 288.0, "score": 1, "generation": ["def solution():\n    # 原票价为240元\n    original_price = 240\n    # 涨价20%\n    price_increase = 0.2\n    # 涨价后的票价 = 原票价 * (1 + 涨价比例)\n    new_price = original_price * (1 + price_increase)\n    # 答案是涨价后的票价\n    result = new_price\n    # 返回答案\n    return result"]}
{"question": "幸福村要修一条乡村公路，预计每天修240米，15天就能完成；如果12天修完这条公路，平均每天要修多少米？", "target": 300.0, "answer": 300.0, "score": 1, "generation": ["def solution():\n    # 预计每天修240米\n    planned_daily_repair = 240\n    # 预计15天完成\n    planned_days = 15\n    # 总公路长度 = 每天修的长度 * 天数\n    total_length = planned_daily_repair * planned_days\n    # 实际需要12天完成\n    actual_days = 12\n    # 实际每天需要修的长度 = 总公路长度 / 实际天数\n    actual_daily_repair = total_length / actual_days\n    # 答案是实际每天需要修的长度\n    result = actual_daily_repair\n    # 返回答案\n    return result"]}
{"question": "服装厂要加工一批儿童服装，如果每套用布1.65米，可以加工450套．如果每套用布1.5米，可以加工多少套？", "target": 495.0, "answer": 495.0, "score": 1, "generation": ["def solution():\n    # 每套用布1.65米时，可以加工450套\n    cloth_per_suit_initial = 1.65\n    suits_initial = 450\n    # 总布料 = 每套用布 * 套数\n    total_cloth = cloth_per_suit_initial * suits_initial\n    # 新的每套用布1.5米\n    cloth_per_suit_new = 1.5\n    # 新的套数 = 总布料 / 新的每套用布\n    suits_new = total_cloth / cloth_per_suit_new\n    # 答案是可以加工的套数\n    result = suits_new\n    # 返回答案\n    return result"]}
{"question": "在一条公路的一边，每隔4米栽一棵树，一共栽了200棵树，这条路全长有多少米？", "target": 796.0, "answer": 796.0, "score": 1, "generation": ["def solution():\n    # 每隔4米栽一棵树\n    distance_between_trees = 4\n    # 一共栽了200棵树\n    total_trees = 200\n    # 因为第一棵树在起点，所以路的总长度 = (树的数量 - 1) * 每两棵树之间的距离\n    total_length = (total_trees - 1) * distance_between_trees\n    # 答案是路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "妈妈拿20元买了3千克苹果，找回9.2元．每千克苹果多少元？", "target": 3.6, "answer": 3.6, "score": 1, "generation": ["def solution():\n    # 妈妈拿20元买了3千克苹果\n    total_money = 20\n    weight_apples = 3\n    # 找回9.2元\n    change = 9.2\n    # 实际花费 = 总钱数 - 找回的钱\n    actual_cost = total_money - change\n    # 每千克苹果的价格 = 实际花费 / 苹果的重量\n    price_per_kg = actual_cost / weight_apples\n    # 答案是每千克苹果的价格\n    result = price_per_kg\n    # 返回答案\n    return result"]}
{"question": "姐姐的年龄比小红大(1/6)，小红比姐姐小2岁．小红今年多少岁．", "target": 12.0, "answer": 12.0, "score": 1, "generation": ["def solution():\n    # 姐姐的年龄比小红大(1/6)\n    age_ratio = 1/6\n    # 小红比姐姐小2岁\n    age_difference = 2\n    # 设小红的年龄为x岁，则姐姐的年龄为x + 2岁\n    # 根据题意，姐姐的年龄比小红大(1/6)，即 (x + 2) = x * (1 + age_ratio)\n    # 解方程：x + 2 = x + x * age_ratio\n    # 2 = x * age_ratio\n    # x = 2 / age_ratio\n    xiaohong_age = age_difference / age_ratio\n    # 答案是小红今年的年龄\n    result = xiaohong_age\n    # 返回答案\n    return result"]}
{"question": "放寒假了，叔叔送给强强一本有许多个故事的书，强强计划每天看同样个数的故事，用20天可看完．但强强在看书时发现故事很有趣，实际每天比原计划多看3个故事，结果提前4天看完了故事书．这本故事书一共有多少个故事．", "target": 240.0, "answer": 240.0, "score": 1, "generation": ["def solution():\n    # 计划看完书的天数为20天\n    planned_days = 20\n    # 实际比计划提前4天看完\n    days_saved = 4\n    # 实际看完书的天数 = 计划天数 - 提前天数\n    actual_days = planned_days - days_saved\n    # 实际每天比计划多看3个故事\n    extra_stories_per_day = 3\n    # 设计划每天看x个故事，则实际每天看(x + 3)个故事\n    # 总故事数 = 计划每天看的故事数 * 计划天数 = 实际每天看的故事数 * 实际天数\n    # 即 x * 20 = (x + 3) * 16\n    # 解方程得 x = 12\n    planned_stories_per_day = (extra_stories_per_day * actual_days) / days_saved\n    # 总故事数 = 计划每天看的故事数 * 计划天数\n    total_stories = planned_stories_per_day * planned_days\n    # 答案是故事书的总故事数\n    result = total_stories\n    # 返回答案\n    return result"]}
{"question": "一个农场计划28天完成收割任务，由于每天多收割7公顷，结果18天就完成了任务．实际每天收割多少公顷？", "target": 19.6, "answer": 19.6, "score": 1, "generation": ["def solution():\n    # 计划完成收割任务的天数为28天\n    planned_days = 28\n    # 实际完成收割任务的天数为18天\n    actual_days = 18\n    # 每天多收割7公顷\n    extra_hectares_per_day = 7\n    # 设计划每天收割x公顷，则实际每天收割(x + 7)公顷\n    # 总收割量相同，所以计划总收割量 = 实际总收割量\n    # 28 * x = 18 * (x + 7)\n    # 解这个方程得到x的值\n    x = (18 * extra_hectares_per_day) / (planned_days - actual_days)\n    # 实际每天收割的公顷数 = x + 7\n    actual_hectares_per_day = x + extra_hectares_per_day\n    # 答案是实际每天收割的公顷数\n    result = actual_hectares_per_day\n    # 返回答案\n    return result"]}
{"question": "建筑一座楼房，实际投资840万元，超过计划5%，计划投资多少万元？", "target": 800.0, "answer": 800.0, "score": 1, "generation": ["def solution():\n    # 实际投资为840万元\n    actual_investment = 840\n    # 超过计划5%\n    over_plan_percentage = 0.05\n    # 计划投资 = 实际投资 / (1 + 超过计划百分比)\n    planned_investment = actual_investment / (1 + over_plan_percentage)\n    # 答案是计划投资\n    result = planned_investment\n    # 返回答案\n    return result"]}
{"question": "某希望小学有男生120人，女生人数比男生多(1/4)，学校里共有学生多少人？", "target": 270.0, "answer": 270.0, "score": 1, "generation": ["def solution():\n    # 男生人数为120人\n    num_boys = 120\n    # 女生人数比男生多(1/4)\n    girls_increase_fraction = 1/4\n    # 女生人数 = 男生人数 + 男生人数 * 女生比男生多的比例\n    num_girls = num_boys + num_boys * girls_increase_fraction\n    # 学校里共有学生人数 = 男生人数 + 女生人数\n    total_students = num_boys + num_girls\n    # 答案是学校里共有学生人数\n    result = total_students\n    # 返回答案\n    return result"]}
{"question": "一张光盘能刻录资料600兆，现已用它的80%，还剩下多少兆空白部分？", "target": 120.0, "answer": 120.0, "score": 1, "generation": ["def solution():\n    # 光盘的总容量为600兆\n    total_capacity = 600\n    # 已用容量的比例为80%\n    used_fraction = 0.8\n    # 已用容量 = 总容量 * 已用比例\n    used_capacity = total_capacity * used_fraction\n    # 剩余容量 = 总容量 - 已用容量\n    remaining_capacity = total_capacity - used_capacity\n    # 答案是剩余的空白部分容量\n    result = remaining_capacity\n    # 返回答案\n    return result"]}
{"question": "一个长方形宽是4分米，长是宽的3倍，这个长方形的面积=．", "target": 48.0, "answer": 48.0, "score": 1, "generation": ["def solution():\n    # 长方形的宽是4分米\n    width = 4\n    # 长是宽的3倍\n    length = 3 * width\n    # 长方形的面积 = 长 * 宽\n    area = length * width\n    # 答案是长方形的面积\n    result = area\n    # 返回答案\n    return result"]}
{"question": "果园里有桃树42棵，桃树的棵树是苹果树的(6/7)，苹果树有多少棵？", "target": 49.0, "answer": 49.0, "score": 1, "generation": ["def solution():\n    # 桃树的数量为42棵\n    peach_trees = 42\n    # 桃树的数量是苹果树的(6/7)\n    apple_trees_fraction = 6/7\n    # 苹果树的数量 = 桃树的数量 / (6/7)\n    apple_trees = peach_trees / apple_trees_fraction\n    # 答案是苹果树的数量\n    result = apple_trees\n    # 返回答案\n    return result"]}
{"question": "有一桶油，第一次用去20%，第二次又用去(2/5)千克，两次一共用去3.6千克．这桶油重多少千克？", "target": 16.0, "answer": "", "score": 0, "generation": ["def solution():\n    # 第一次用去20%\n    first_usage_percentage = 0.2\n    # 第二次用去(2/5)千克\n    second_usage_kg = 2/5\n    # 两次一共用去3.6千克\n    total_usage_kg = 3.6\n    # 第一次用去的油量 = 总油量 * 20%\n    first_usage_kg = first_usage_percentage * total_oil_kg\n    # 两次用去的油量总和 = 第一次用去的油量 + 第二次用去的油量\n    # 即 total_usage_kg = first_usage_kg + second_usage_kg\n    # 所以总油量 = (total_usage_kg - second_usage_kg) / first_usage_percentage\n    total_oil_kg = (total_usage_kg - second_usage_kg) / first_usage_percentage\n    # 答案是这桶油的总重量\n    result = total_oil_kg\n    # 返回答案\n    return result"]}
{"question": "某电器有限公司要生产5000台彩电迎接建国60周年庆典，前5天平均每天生产400台．余下的要在6天内完成，平均每天应生产多少台？", "target": 500.0, "answer": 500.0, "score": 1, "generation": ["def solution():\n    # 总彩电数量为5000台\n    total_tvs = 5000\n    # 前5天平均每天生产400台\n    daily_production_first_5_days = 400\n    # 前5天生产的总彩电数量 = 5天 * 每天生产数量\n    total_production_first_5_days = 5 * daily_production_first_5_days\n    # 剩余彩电数量 = 总数量 - 前5天生产数量\n    remaining_tvs = total_tvs - total_production_first_5_days\n    # 剩余彩电需要在6天内完成\n    remaining_days = 6\n    # 平均每天应生产的彩电数量 = 剩余彩电数量 / 剩余天数\n    daily_production_remaining_days = remaining_tvs / remaining_days\n    # 答案是平均每天应生产的彩电数量\n    result = daily_production_remaining_days\n    # 返回答案\n    return result"]}
{"question": "植物园上午有游客935人，中午有357人离去，下午又来了397人，这时园内有游客多少人？", "target": 975.0, "answer": 975.0, "score": 1, "generation": ["def solution():\n    # 上午有游客935人\n    morning_visitors = 935\n    # 中午有357人离去\n    visitors_left = 357\n    # 下午又来了397人\n    visitors_arrived = 397\n    # 中午离去后的游客数量 = 上午游客数量 - 离去的游客数量\n    visitors_after_noon = morning_visitors - visitors_left\n    # 下午来后的游客数量 = 中午离去后的游客数量 + 下午来的游客数量\n    visitors_after_arrival = visitors_after_noon + visitors_arrived\n    # 答案是园内现在的游客数量\n    result = visitors_after_arrival\n    # 返回答案\n    return result"]}
{"question": "李阿姨花了120元钱买了3箱苹果，每箱苹果多少元钱．", "target": 40.0, "answer": 40.0, "score": 1, "generation": ["def solution():\n    # 李阿姨花费的总金额为120元\n    total_cost = 120\n    # 购买的苹果箱数为3箱\n    num_boxes = 3\n    # 每箱苹果的价格 = 总金额 / 箱数\n    price_per_box = total_cost / num_boxes\n    # 答案是每箱苹果的价格\n    result = price_per_box\n    # 返回答案\n    return result"]}
{"question": "第16届亚运会于2010年11月12日至27日再中国广州进行，广州是中国第二个取得亚运会主办权的城市．届时广州的体育馆数量达72个，比原来体育馆数量增加20%，广州原有体育馆多少个？", "target": 60.0, "answer": 60.0, "score": 1, "generation": ["def solution():\n    # 现在的体育馆数量为72个\n    current_gym_count = 72\n    # 体育馆数量增加了20%\n    increase_percentage = 0.2\n    # 设原有体育馆数量为x，则现在的数量 = x + x * 0.2 = 1.2x\n    # 所以原有体育馆数量 = 现在的数量 / 1.2\n    original_gym_count = current_gym_count / (1 + increase_percentage)\n    # 答案是广州原有体育馆的数量\n    result = original_gym_count\n    # 返回答案\n    return result"]}
{"question": "笑笑有4件上衣，2条裙子，她有多少种不同的穿法．", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 笑笑有4件上衣\n    num_shirts = 4\n    # 笑笑有2条裙子\n    num_skirts = 2\n    # 不同的穿法 = 上衣的数量 * 裙子的数量\n    total_outfits = num_shirts * num_skirts\n    # 答案是不同的穿法数量\n    result = total_outfits\n    # 返回答案\n    return result"]}
{"question": "甲、乙两车从A、B两地同时相向而行，甲车每小时开60km，乙车从B地开到A地需4小时．两车相遇时，甲、乙两车行驶的路程比是3：5，相遇时甲车行驶了多少千米？", "target": 150.0, "answer": 150.0, "score": 1, "generation": ["def solution():\n    # 甲车的速度是每小时60km\n    speed_a = 60\n    # 乙车从B地开到A地需要4小时\n    time_b = 4\n    # 两车相遇时，甲、乙两车行驶的路程比是3：5\n    distance_ratio_a_to_b = 3/5\n    # 设相遇时甲车行驶了x km，则乙车行驶了(5/3)x km\n    # 因为乙车从B到A需要4小时，所以乙车的速度 = 总距离 / 时间 = (x + (5/3)x) / 4\n    # 乙车的速度 = (8/3)x / 4 = (2/3)x\n    # 甲车的速度已知为60km/h，所以x / (time_a) = 60\n    # 因为两车同时出发，相遇时的时间相同，所以time_a = time_b * (distance_ratio_a_to_b)\n    # 但更简单的方法是设相遇时间为t小时\n    # 甲车行驶的距离 = 60 * t\n    # 乙车行驶的距离 = speed_b * t\n    # 根据路程比，60 * t / (speed_b * t) = 3/5\n    # 所以 speed_b = (60 * 5) / 3 = 100 km/h\n    speed_b = (speed_a * 5) / 3\n    # 乙车从B到A的总距离 = speed_b * time_b = 100 * 4 = 400 km\n    total_distance = speed_b * time_b\n    # 两车相遇时，甲车行驶的距离 = (3 / (3 + 5)) * total_distance = (3/8) * 400 = 150 km\n    distance_a = (3 / 8) * total_distance\n    # 答案是甲车行驶的距离\n    result = distance_a\n    # 返回答案\n    return result"]}
{"question": "甲、乙两人在周长为200米的圆形跑道的同一地点同时起跑，甲每秒跑6米，乙每秒跑4米，经过多少秒钟，甲比乙多跑一圈．", "target": 100.0, "answer": 100.0, "score": 1, "generation": ["def solution():\n    # 圆形跑道的周长为200米\n    circumference = 200\n    # 甲的速度是每秒6米\n    speed_a = 6\n    # 乙的速度是每秒4米\n    speed_b = 4\n    # 甲比乙每秒多跑的距离 = 甲的速度 - 乙的速度\n    speed_difference = speed_a - speed_b\n    # 甲比乙多跑一圈所需的时间 = 跑道周长 / 速度差\n    time_to_lap = circumference / speed_difference\n    # 答案是甲比乙多跑一圈所需的时间\n    result = time_to_lap\n    # 返回答案\n    return result"]}
{"question": "修一条450千米的公路，已修好(4/15)，还剩多少千米没修？", "target": 330.0, "answer": 330.0, "score": 1, "generation": ["def solution():\n    # 公路的总长度为450千米\n    total_length = 450\n    # 已修好的比例为(4/15)\n    completed_fraction = 4/15\n    # 已修好的长度 = 总长度 * 已修好的比例\n    completed_length = total_length * completed_fraction\n    # 剩余未修的长度 = 总长度 - 已修好的长度\n    remaining_length = total_length - completed_length\n    # 答案是剩余未修的长度\n    result = remaining_length\n    # 返回答案\n    return result"]}
{"question": "小明今年14岁，爷爷的年龄比小明的5倍小4岁，爷爷今年多少岁？", "target": 66.0, "answer": 66.0, "score": 1, "generation": ["def solution():\n    # 小明的年龄是14岁\n    xiaoming_age = 14\n    # 爷爷的年龄比小明的5倍小4岁\n    grandpa_age = 5 * xiaoming_age - 4\n    # 答案是爷爷的年龄\n    result = grandpa_age\n    # 返回答案\n    return result"]}
{"question": "一个厂计划全年生产洗衣机6万台，实际生产了7.2万台，超过了百分之几？", "target": 20.0, "answer": 20.0, "score": 1, "generation": ["def solution():\n    # 计划全年生产洗衣机6万台\n    planned_production = 60000\n    # 实际生产了7.2万台\n    actual_production = 72000\n    # 超过的生产量 = 实际生产量 - 计划生产量\n    excess_production = actual_production - planned_production\n    # 超过的百分比 = (超过的生产量 / 计划生产量) * 100\n    percentage_excess = (excess_production / planned_production) * 100\n    # 答案是超过的百分比\n    result = percentage_excess\n    # 返回答案\n    return result"]}
{"question": "聪聪要看一本484页的书，他每天看86页，看了5天，还剩下多少页没有看？", "target": 54.0, "answer": 54.0, "score": 1, "generation": ["def solution():\n    # 书的总页数为484页\n    total_pages = 484\n    # 每天看的页数为86页\n    pages_per_day = 86\n    # 看了5天\n    days_read = 5\n    # 已经看的页数 = 每天看的页数 * 看了的天数\n    pages_read = pages_per_day * days_read\n    # 还剩下的页数 = 总页数 - 已经看的页数\n    remaining_pages = total_pages - pages_read\n    # 答案是还剩下的页数\n    result = remaining_pages\n    # 返回答案\n    return result"]}
{"question": "甲数的(2/5)是乙数的(5/6)，乙数是12，甲数=．", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 乙数是12\n    number_b = 12\n    # 乙数的(5/6)\n    fraction_of_b = (5/6) * number_b\n    # 甲数的(2/5)等于乙数的(5/6)\n    fraction_of_a = fraction_of_b\n    # 甲数 = 乙数的(5/6) / (2/5)\n    number_a = fraction_of_a / (2/5)\n    # 答案是甲数\n    result = number_a\n    # 返回答案\n    return result"]}
{"question": "修一条200米的路，前6天修了全长的15%，照这样计算，修完全程还要多少天？", "target": 34.0, "answer": 34.0, "score": 1, "generation": ["def solution():\n    # 路的总长度为200米\n    total_length = 200\n    # 前6天修了全长的15%\n    completed_fraction = 0.15\n    # 前6天修的长度 = 总长度 * 完成比例\n    completed_length = total_length * completed_fraction\n    # 每天修的长度 = 前6天修的长度 / 6天\n    daily_length = completed_length / 6\n    # 剩余长度 = 总长度 - 前6天修的长度\n    remaining_length = total_length - completed_length\n    # 修完剩余长度需要的天数 = 剩余长度 / 每天修的长度\n    remaining_days = remaining_length / daily_length\n    # 答案是修完剩余长度需要的天数\n    result = remaining_days\n    # 返回答案\n    return result"]}
{"question": "两个修路队合修一条公路．甲队修了全长的(4/9)，乙队比甲队多修了(1/9)．乙队修了这条公路的几分之几？", "target": 0.5555555555555556, "answer": 0.5555555555555556, "score": 1, "generation": ["def solution():\n    # 甲队修了全长的(4/9)\n    team_a_fraction = 4/9\n    # 乙队比甲队多修了(1/9)\n    team_b_extra_fraction = 1/9\n    # 乙队修了这条公路的比例 = 甲队修的比例 + 乙队比甲队多修的比例\n    team_b_fraction = team_a_fraction + team_b_extra_fraction\n    # 答案是乙队修了这条公路的比例\n    result = team_b_fraction\n    # 返回答案\n    return result"]}
{"question": "李刚家要栽种一批树苗，这种树苗的成活率一般为75%-80%，如果要栽活1500棵树苗，那么至少应栽多少棵．", "target": 1875.0, "answer": 1875.0, "score": 1, "generation": ["def solution():\n    # 目标成活树苗数量为1500棵\n    target_survived = 1500\n    # 树苗的成活率一般为75%-80%，为了计算至少应栽多少棵，取最大成活率80%\n    max_survival_rate = 0.8\n    # 至少应栽的树苗数量 = 目标成活数量 / 最大成活率\n    min_planted = target_survived / max_survival_rate\n    # 答案是至少应栽的树苗数量\n    result = min_planted\n    # 返回答案\n    return result"]}
{"question": "六年级同学上山植松树96棵、柏树24棵．松树的棵数是柏树的多少倍？", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 松树的数量为96棵\n    num_pine = 96\n    # 柏树的数量为24棵\n    num_cypress = 24\n    # 松树的棵数是柏树的多少倍 = 松树的数量 / 柏树的数量\n    multiple = num_pine / num_cypress\n    # 答案是松树的棵数是柏树的多少倍\n    result = multiple\n    # 返回答案\n    return result"]}
{"question": "一个卷烟厂上月香烟的销售额为1600万元．如果按销售额的56%缴纳消费税，上月应缴纳消费税款多少万元？", "target": 896.0, "answer": 896.0000000000001, "score": 1, "generation": ["def solution():\n    # 上月香烟的销售额为1600万元\n    sales = 1600\n    # 消费税率为56%\n    tax_rate = 0.56\n    # 应缴纳的消费税款 = 销售额 * 消费税率\n    tax_amount = sales * tax_rate\n    # 答案是应缴纳的消费税款\n    result = tax_amount\n    # 返回答案\n    return result"]}
{"question": "老5屯今年修了4条水渠，总长1608米，等于去年修的3倍．今年比去年多修多少米？", "target": 1072.0, "answer": 1072.0, "score": 1, "generation": ["def solution():\n    # 今年修了4条水渠，总长1608米\n    this_year_length = 1608\n    # 今年修的等于去年修的3倍\n    last_year_length = this_year_length / 3\n    # 今年比去年多修的长度 = 今年修的长度 - 去年修的长度\n    difference = this_year_length - last_year_length\n    # 答案是今年比去年多修的长度\n    result = difference\n    # 返回答案\n    return result"]}
{"question": "水果店运来苹果120千克，梨相当于苹果的80%，是桔子的75%．桔子重多少千克？", "target": 128.0, "answer": 128.0, "score": 1, "generation": ["def solution():\n    # 苹果的重量为120千克\n    apple_weight = 120\n    # 梨的重量相当于苹果的80%\n    pear_weight = apple_weight * 0.8\n    # 梨的重量是桔子的75%\n    orange_weight = pear_weight / 0.75\n    # 答案是桔子的重量\n    result = orange_weight\n    # 返回答案\n    return result"]}
{"question": "修一条路，第一天修了全长的(1/5)，第二天修了全长的(1/4)，两天一共修了1800米，这条路有多少米？", "target": 4000.0, "answer": 4000.0, "score": 1, "generation": ["def solution():\n    # 第一天修了全长的(1/5)\n    first_day_fraction = 1/5\n    # 第二天修了全长的(1/4)\n    second_day_fraction = 1/4\n    # 两天一共修了1800米\n    total_repaired = 1800\n    # 两天一共修的比例 = 第一天修的比例 + 第二天修的比例\n    total_fraction = first_day_fraction + second_day_fraction\n    # 因为两天一共修了1800米，所以总长度 = 两天一共修的长度 / 两天一共修的比例\n    total_length = total_repaired / total_fraction\n    # 答案是这条路的总长度\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "从甲地到乙地铺一条长840米的路，铺了24天后离乙地还有240米，平均每天铺了多少米？", "target": 25.0, "answer": 25.0, "score": 1, "generation": ["def solution():\n    # 从甲地到乙地的总距离为840米\n    total_distance = 840\n    # 铺了24天后离乙地还有240米\n    remaining_distance = 240\n    # 已经铺好的距离 = 总距离 - 剩余距离\n    paved_distance = total_distance - remaining_distance\n    # 铺路的天数为24天\n    days_paved = 24\n    # 平均每天铺的距离 = 已经铺好的距离 / 铺路的天数\n    average_distance_per_day = paved_distance / days_paved\n    # 答案是平均每天铺的距离\n    result = average_distance_per_day\n    # 返回答案\n    return result"]}
{"question": "商店出售一种电视机，原价1540元，现在降低了(4/11)，降低了多少元？", "target": 560.0, "answer": 560.0, "score": 1, "generation": ["def solution():\n    # 电视机的原价为1540元\n    original_price = 1540\n    # 价格降低了(4/11)\n    price_reduction_fraction = 4/11\n    # 降低的价格 = 原价 * 降低的比例\n    price_reduction = original_price * price_reduction_fraction\n    # 答案是降低的价格\n    result = price_reduction\n    # 返回答案\n    return result"]}
{"question": "一个平行四边形的面积是4.8平方分米，高是1.2分米，底=多少分米．", "target": 4.0, "answer": 4.0, "score": 1, "generation": ["def solution():\n    # 平行四边形的面积是4.8平方分米\n    area = 4.8\n    # 高是1.2分米\n    height = 1.2\n    # 平行四边形的面积 = 底 * 高\n    # 所以底 = 面积 / 高\n    base = area / height\n    # 答案是底的长度\n    result = base\n    # 返回答案\n    return result"]}
{"question": "一条水渠，已经修了5.6千米，未修的是已修的2.7倍，这条水渠全长多少千米？", "target": 20.72, "answer": 20.72, "score": 1, "generation": ["def solution():\n    # 已经修了5.6千米\n    repaired_length = 5.6\n    # 未修的是已修的2.7倍\n    unrepaired_multiplier = 2.7\n    # 未修的长度 = 已修的长度 * 2.7\n    unrepaired_length = repaired_length * unrepaired_multiplier\n    # 水渠的全长 = 已修的长度 + 未修的长度\n    total_length = repaired_length + unrepaired_length\n    # 答案是水渠的全长\n    result = total_length\n    # 返回答案\n    return result"]}
{"question": "我国第一长河--长江全长6380km，黄河比长江的(9/10)要短278km．黄河全长多少千米？", "target": 5464.0, "answer": 5464.0, "score": 1, "generation": ["def solution():\n    # 长江的全长为6380km\n    yangtze_length = 6380\n    # 黄河比长江的(9/10)要短278km\n    yellow_river_ratio = 9/10\n    yellow_river_difference = 278\n    # 黄河的全长 = 长江的全长 * (9/10) - 278km\n    yellow_river_length = yangtze_length * yellow_river_ratio - yellow_river_difference\n    # 答案是黄河的全长\n    result = yellow_river_length\n    # 返回答案\n    return result"]}
{"question": "一本文艺书，小明第一天看了全书的(1/3)，第二天看了余下的(3/5)，还剩下48页，这本书共有多少页．", "target": 180.0, "answer": 180.0, "score": 1, "generation": ["def solution():\n    # 设全书共有x页\n    # 第一天看了全书的(1/3)，即看了x/3页\n    # 剩余页数 = x - x/3 = 2x/3\n    # 第二天看了余下的(3/5)，即看了(3/5)*(2x/3) = 2x/5页\n    # 剩余页数 = 2x/3 - 2x/5 = (10x - 6x)/15 = 4x/15\n    # 根据题意，剩余页数为48页\n    # 4x/15 = 48\n    # 解方程得x = 48 * 15 / 4\n    remaining_pages = 48\n    total_pages = remaining_pages * 15 / 4\n    # 答案是这本书的总页数\n    result = total_pages\n    # 返回答案\n    return result"]}
{"question": "学校建综合楼，实际投资170万元，比计划节约了15%，计划投资多少万元？", "target": 200.0, "answer": 200.0, "score": 1, "generation": ["def solution():\n    # 实际投资为170万元\n    actual_investment = 170\n    # 比计划节约了15%\n    savings_percentage = 0.15\n    # 因为实际投资比计划节约了15%，所以实际投资 = 计划投资 * (1 - 节约比例)\n    # 因此计划投资 = 实际投资 / (1 - 节约比例)\n    planned_investment = actual_investment / (1 - savings_percentage)\n    # 答案是计划投资\n    result = planned_investment\n    # 返回答案\n    return result"]}
{"question": "每包30本，一共要寄240本书，需要几包？", "target": 8.0, "answer": 8.0, "score": 1, "generation": ["def solution():\n    # 每包有30本书\n    books_per_package = 30\n    # 一共要寄240本书\n    total_books = 240\n    # 需要的包数 = 总书数 / 每包的书数\n    num_packages = total_books / books_per_package\n    # 答案是需要的包数\n    result = num_packages\n    # 返回答案\n    return result"]}
{"question": "广场新种了一批花木，其中(5/16)是玫瑰，(3/8)是月季．已知月季有36棵，玫瑰有多少棵？", "target": 30.0, "answer": 30.0, "score": 1, "generation": ["def solution():\n    # 月季占总数的(3/8)\n    rose_fraction = 3/8\n    # 已知月季有36棵\n    num_roses = 36\n    # 总花木数量 = 月季数量 / 月季所占比例\n    total_plants = num_roses / rose_fraction\n    # 玫瑰占总数的(5/16)\n    rose_fraction = 5/16\n    # 玫瑰数量 = 总花木数量 * 玫瑰所占比例\n    num_roses = total_plants * rose_fraction\n    # 答案是玫瑰的数量\n    result = num_roses\n    # 返回答案\n    return result"]}
